
RF_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002880  08002880  00003880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800289c  0800289c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  0800289c  0800289c  0000389c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028a4  080028a4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a4  080028a4  000038a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028a8  080028a8  000038a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  080028b8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080028b8  000040e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005479  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001404  00000000  00000000  000094ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  0000a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000455  00000000  00000000  0000ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fdfa  00000000  00000000  0000b2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f05  00000000  00000000  0001b0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fef9  00000000  00000000  00021fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00081edd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001414  00000000  00000000  00081f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00083334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002868 	.word	0x08002868

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002868 	.word	0x08002868

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b097      	sub	sp, #92	@ 0x5c
 80004ac:	af14      	add	r7, sp, #80	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fb49 	bl	8000b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f83b 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 f8c5 	bl	8000644 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004ba:	f000 f88b 	bl	80005d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  nrf_init(hspi1, 1);
 80004be:	4c19      	ldr	r4, [pc, #100]	@ (8000524 <main+0x7c>)
 80004c0:	2301      	movs	r3, #1
 80004c2:	9312      	str	r3, [sp, #72]	@ 0x48
 80004c4:	466b      	mov	r3, sp
 80004c6:	0018      	movs	r0, r3
 80004c8:	0023      	movs	r3, r4
 80004ca:	3310      	adds	r3, #16
 80004cc:	2248      	movs	r2, #72	@ 0x48
 80004ce:	0019      	movs	r1, r3
 80004d0:	f002 f9c0 	bl	8002854 <memcpy>
 80004d4:	6820      	ldr	r0, [r4, #0]
 80004d6:	6861      	ldr	r1, [r4, #4]
 80004d8:	68a2      	ldr	r2, [r4, #8]
 80004da:	68e3      	ldr	r3, [r4, #12]
 80004dc:	f000 f942 	bl	8000764 <nrf_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t payload = 0b1011;
 80004e0:	1dbb      	adds	r3, r7, #6
 80004e2:	220b      	movs	r2, #11
 80004e4:	701a      	strb	r2, [r3, #0]
	  status = nrf_tx(&payload);
 80004e6:	1dbb      	adds	r3, r7, #6
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 f9e3 	bl	80008b4 <nrf_tx>
 80004ee:	0002      	movs	r2, r0
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80004f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <main+0x80>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	2102      	movs	r1, #2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fdd8 	bl	80010b0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000500:	23fa      	movs	r3, #250	@ 0xfa
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fb8d 	bl	8000c24 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800050a:	4b07      	ldr	r3, [pc, #28]	@ (8000528 <main+0x80>)
 800050c:	2200      	movs	r2, #0
 800050e:	2102      	movs	r1, #2
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fdcd 	bl	80010b0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000516:	23fa      	movs	r3, #250	@ 0xfa
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fb82 	bl	8000c24 <HAL_Delay>
  {
 8000520:	46c0      	nop			@ (mov r8, r8)
 8000522:	e7dd      	b.n	80004e0 <main+0x38>
 8000524:	20000028 	.word	0x20000028
 8000528:	50000400 	.word	0x50000400

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b093      	sub	sp, #76	@ 0x4c
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	2414      	movs	r4, #20
 8000534:	193b      	adds	r3, r7, r4
 8000536:	0018      	movs	r0, r3
 8000538:	2334      	movs	r3, #52	@ 0x34
 800053a:	001a      	movs	r2, r3
 800053c:	2100      	movs	r1, #0
 800053e:	f002 f95d 	bl	80027fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000542:	003b      	movs	r3, r7
 8000544:	0018      	movs	r0, r3
 8000546:	2314      	movs	r3, #20
 8000548:	001a      	movs	r2, r3
 800054a:	2100      	movs	r1, #0
 800054c:	f002 f956 	bl	80027fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	4b1e      	ldr	r3, [pc, #120]	@ (80005cc <SystemClock_Config+0xa0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a1e      	ldr	r2, [pc, #120]	@ (80005d0 <SystemClock_Config+0xa4>)
 8000556:	401a      	ands	r2, r3
 8000558:	4b1c      	ldr	r3, [pc, #112]	@ (80005cc <SystemClock_Config+0xa0>)
 800055a:	2180      	movs	r1, #128	@ 0x80
 800055c:	0109      	lsls	r1, r1, #4
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000562:	0021      	movs	r1, r4
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2210      	movs	r2, #16
 8000568:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2201      	movs	r2, #1
 800056e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	22a0      	movs	r2, #160	@ 0xa0
 800057a:	0212      	lsls	r2, r2, #8
 800057c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	187b      	adds	r3, r7, r1
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fdb0 	bl	80010ec <HAL_RCC_OscConfig>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000590:	f000 f8be 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	003b      	movs	r3, r7
 8000596:	220f      	movs	r2, #15
 8000598:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800059a:	003b      	movs	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	003b      	movs	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	003b      	movs	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	003b      	movs	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b2:	003b      	movs	r3, r7
 80005b4:	2100      	movs	r1, #0
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 f914 	bl	80017e4 <HAL_RCC_ClockConfig>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005c0:	f000 f8a6 	bl	8000710 <Error_Handler>
  }
}
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b013      	add	sp, #76	@ 0x4c
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	40007000 	.word	0x40007000
 80005d0:	ffffe7ff 	.word	0xffffe7ff

080005d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_SPI1_Init+0x68>)
 80005da:	4a19      	ldr	r2, [pc, #100]	@ (8000640 <MX_SPI1_Init+0x6c>)
 80005dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <MX_SPI1_Init+0x68>)
 80005e0:	2282      	movs	r2, #130	@ 0x82
 80005e2:	0052      	lsls	r2, r2, #1
 80005e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_SPI1_Init+0x68>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005ec:	4b13      	ldr	r3, [pc, #76]	@ (800063c <MX_SPI1_Init+0x68>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f2:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_SPI1_Init+0x68>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <MX_SPI1_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_SPI1_Init+0x68>)
 8000600:	2280      	movs	r2, #128	@ 0x80
 8000602:	0092      	lsls	r2, r2, #2
 8000604:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000606:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <MX_SPI1_Init+0x68>)
 8000608:	2200      	movs	r2, #0
 800060a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <MX_SPI1_Init+0x68>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <MX_SPI1_Init+0x68>)
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <MX_SPI1_Init+0x68>)
 800061a:	2200      	movs	r2, #0
 800061c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800061e:	4b07      	ldr	r3, [pc, #28]	@ (800063c <MX_SPI1_Init+0x68>)
 8000620:	2207      	movs	r2, #7
 8000622:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <MX_SPI1_Init+0x68>)
 8000626:	0018      	movs	r0, r3
 8000628:	f001 faca 	bl	8001bc0 <HAL_SPI_Init>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000630:	f000 f86e 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	20000028 	.word	0x20000028
 8000640:	40013000 	.word	0x40013000

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	@ 0x24
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	240c      	movs	r4, #12
 800064c:	193b      	adds	r3, r7, r4
 800064e:	0018      	movs	r0, r3
 8000650:	2314      	movs	r3, #20
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f002 f8d1 	bl	80027fc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b2b      	ldr	r3, [pc, #172]	@ (8000708 <MX_GPIO_Init+0xc4>)
 800065c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800065e:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <MX_GPIO_Init+0xc4>)
 8000660:	2101      	movs	r1, #1
 8000662:	430a      	orrs	r2, r1
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000666:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <MX_GPIO_Init+0xc4>)
 8000668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800066a:	2201      	movs	r2, #1
 800066c:	4013      	ands	r3, r2
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b25      	ldr	r3, [pc, #148]	@ (8000708 <MX_GPIO_Init+0xc4>)
 8000674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000676:	4b24      	ldr	r3, [pc, #144]	@ (8000708 <MX_GPIO_Init+0xc4>)
 8000678:	2102      	movs	r1, #2
 800067a:	430a      	orrs	r2, r1
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800067e:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <MX_GPIO_Init+0xc4>)
 8000680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000682:	2202      	movs	r2, #2
 8000684:	4013      	ands	r3, r2
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 800068a:	23a0      	movs	r3, #160	@ 0xa0
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	2201      	movs	r2, #1
 8000690:	2108      	movs	r1, #8
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fd0c 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000698:	23a0      	movs	r3, #160	@ 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	2200      	movs	r2, #0
 800069e:	2110      	movs	r1, #16
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fd05 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006a6:	4b19      	ldr	r3, [pc, #100]	@ (800070c <MX_GPIO_Init+0xc8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 fcff 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2218      	movs	r2, #24
 80006b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2201      	movs	r2, #1
 80006bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2202      	movs	r2, #2
 80006c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	193a      	adds	r2, r7, r4
 80006cc:	23a0      	movs	r3, #160	@ 0xa0
 80006ce:	05db      	lsls	r3, r3, #23
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 fb7e 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006d8:	0021      	movs	r1, r4
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2202      	movs	r2, #2
 80006de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2201      	movs	r2, #1
 80006e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	4a05      	ldr	r2, [pc, #20]	@ (800070c <MX_GPIO_Init+0xc8>)
 80006f6:	0019      	movs	r1, r3
 80006f8:	0010      	movs	r0, r2
 80006fa:	f000 fb6b 	bl	8000dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b009      	add	sp, #36	@ 0x24
 8000704:	bd90      	pop	{r4, r7, pc}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	40021000 	.word	0x40021000
 800070c:	50000400 	.word	0x50000400

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	e7fd      	b.n	8000718 <Error_Handler+0x8>

0800071c <setCS>:


SPI_HandleTypeDef bus;
bool isTX;

void setCS(bool state){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	0002      	movs	r2, r0
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, state);
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	23a0      	movs	r3, #160	@ 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2108      	movs	r1, #8
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fcbc 	bl	80010b0 <HAL_GPIO_WritePin>
}
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b002      	add	sp, #8
 800073e:	bd80      	pop	{r7, pc}

08000740 <setCE>:

void setCE(bool state){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	0002      	movs	r2, r0
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, state);
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	23a0      	movs	r3, #160	@ 0xa0
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	2110      	movs	r1, #16
 8000756:	0018      	movs	r0, r3
 8000758:	f000 fcaa 	bl	80010b0 <HAL_GPIO_WritePin>
}
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b002      	add	sp, #8
 8000762:	bd80      	pop	{r7, pc}

08000764 <nrf_init>:


void nrf_init(SPI_HandleTypeDef bus_, bool isTX_) {
 8000764:	b084      	sub	sp, #16
 8000766:	b5b0      	push	{r4, r5, r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	2518      	movs	r5, #24
 800076e:	197c      	adds	r4, r7, r5
 8000770:	6020      	str	r0, [r4, #0]
 8000772:	6061      	str	r1, [r4, #4]
 8000774:	60a2      	str	r2, [r4, #8]
 8000776:	60e3      	str	r3, [r4, #12]
	bus = bus_;
 8000778:	4a36      	ldr	r2, [pc, #216]	@ (8000854 <nrf_init+0xf0>)
 800077a:	002c      	movs	r4, r5
 800077c:	193b      	adds	r3, r7, r4
 800077e:	0010      	movs	r0, r2
 8000780:	0019      	movs	r1, r3
 8000782:	2358      	movs	r3, #88	@ 0x58
 8000784:	001a      	movs	r2, r3
 8000786:	f002 f865 	bl	8002854 <memcpy>
	isTX = isTX_;
 800078a:	4b33      	ldr	r3, [pc, #204]	@ (8000858 <nrf_init+0xf4>)
 800078c:	2258      	movs	r2, #88	@ 0x58
 800078e:	1912      	adds	r2, r2, r4
 8000790:	19d2      	adds	r2, r2, r7
 8000792:	7812      	ldrb	r2, [r2, #0]
 8000794:	701a      	strb	r2, [r3, #0]
	nrf_reset();
 8000796:	f000 f861 	bl	800085c <nrf_reset>

	//set FIFO depth to 1

	//set ptx, prx mode
	if(isTX){
 800079a:	4b2f      	ldr	r3, [pc, #188]	@ (8000858 <nrf_init+0xf4>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d012      	beq.n	80007c8 <nrf_init+0x64>
		uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80007a2:	1dbc      	adds	r4, r7, #6
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 f8cb 	bl	8000940 <read_register>
 80007aa:	0003      	movs	r3, r0
 80007ac:	7023      	strb	r3, [r4, #0]
		new_config &= 0xFE;
 80007ae:	1dbb      	adds	r3, r7, #6
 80007b0:	1dba      	adds	r2, r7, #6
 80007b2:	7812      	ldrb	r2, [r2, #0]
 80007b4:	2101      	movs	r1, #1
 80007b6:	438a      	bics	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
		write_register(NRF24L01P_REG_CONFIG, new_config);
 80007ba:	1dbb      	adds	r3, r7, #6
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	0019      	movs	r1, r3
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 f8e9 	bl	8000998 <write_register>
 80007c6:	e011      	b.n	80007ec <nrf_init+0x88>
	} else {
		uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80007c8:	1dfc      	adds	r4, r7, #7
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 f8b8 	bl	8000940 <read_register>
 80007d0:	0003      	movs	r3, r0
 80007d2:	7023      	strb	r3, [r4, #0]
		new_config |= 1 << 0;
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	1dfa      	adds	r2, r7, #7
 80007d8:	7812      	ldrb	r2, [r2, #0]
 80007da:	2101      	movs	r1, #1
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
		write_register(NRF24L01P_REG_CONFIG, new_config);
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	0019      	movs	r1, r3
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 f8d6 	bl	8000998 <write_register>
	}

	//power up
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80007ec:	1d7c      	adds	r4, r7, #5
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 f8a6 	bl	8000940 <read_register>
 80007f4:	0003      	movs	r3, r0
 80007f6:	7023      	strb	r3, [r4, #0]
	new_config |= 1 << 1;
 80007f8:	1d7b      	adds	r3, r7, #5
 80007fa:	1d7a      	adds	r2, r7, #5
 80007fc:	7812      	ldrb	r2, [r2, #0]
 80007fe:	2102      	movs	r1, #2
 8000800:	430a      	orrs	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
	write_register(NRF24L01P_REG_CONFIG, new_config);
 8000804:	1d7b      	adds	r3, r7, #5
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	0019      	movs	r1, r3
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f8c4 	bl	8000998 <write_register>

	//set RX pipe width
	write_register(NRF24L01P_REG_RX_PW_P0, PAYLOAD_LEN);
 8000810:	2108      	movs	r1, #8
 8000812:	2011      	movs	r0, #17
 8000814:	f000 f8c0 	bl	8000998 <write_register>
	//set RF channel
	write_register(NRF24L01P_REG_RF_CH, 2415);
 8000818:	216f      	movs	r1, #111	@ 0x6f
 800081a:	2005      	movs	r0, #5
 800081c:	f000 f8bc 	bl	8000998 <write_register>
	//set data rate
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000820:	2006      	movs	r0, #6
 8000822:	f000 f88d 	bl	8000940 <read_register>
 8000826:	0003      	movs	r3, r0
 8000828:	0019      	movs	r1, r3
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2228      	movs	r2, #40	@ 0x28
 800082e:	4391      	bics	r1, r2
 8000830:	000a      	movs	r2, r1
 8000832:	701a      	strb	r2, [r3, #0]
	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	0019      	movs	r1, r3
 800083a:	2006      	movs	r0, #6
 800083c:	f000 f8ac 	bl	8000998 <write_register>
	//default should work
	//set auto retransmit count
	//default should work
	//set retransmit delay
	//default should work
	setCE(1);
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff ff7d 	bl	8000740 <setCE>
}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bcb0      	pop	{r4, r5, r7}
 800084e:	bc08      	pop	{r3}
 8000850:	b004      	add	sp, #16
 8000852:	4718      	bx	r3
 8000854:	20000080 	.word	0x20000080
 8000858:	200000d8 	.word	0x200000d8

0800085c <nrf_reset>:

uint8_t nrf_reset() {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	setCS(1);
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff ff5b 	bl	800071c <setCS>
	setCE(0);
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff ff6a 	bl	8000740 <setCE>

	return nrf_status();
 800086c:	f000 f804 	bl	8000878 <nrf_status>
 8000870:	0003      	movs	r3, r0
}
 8000872:	0018      	movs	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <nrf_status>:

uint8_t nrf_status() {
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_NOP;
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	22ff      	movs	r2, #255	@ 0xff
 8000882:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	setCS(0);
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff ff49 	bl	800071c <setCS>
	HAL_SPI_TransmitReceive(&bus, &command, &status, 1, 2000);
 800088a:	1dba      	adds	r2, r7, #6
 800088c:	1df9      	adds	r1, r7, #7
 800088e:	4808      	ldr	r0, [pc, #32]	@ (80008b0 <nrf_status+0x38>)
 8000890:	23fa      	movs	r3, #250	@ 0xfa
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	f001 fca6 	bl	80021e8 <HAL_SPI_TransmitReceive>
	setCS(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff ff3d 	bl	800071c <setCS>
	return status;
 80008a2:	1dbb      	adds	r3, r7, #6
 80008a4:	781b      	ldrb	r3, [r3, #0]
}
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b002      	add	sp, #8
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	20000080 	.word	0x20000080

080008b4 <nrf_tx>:

uint8_t nrf_tx(uint8_t* payload){
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	6078      	str	r0, [r7, #4]
	//clear TX FIFO
	uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 80008bc:	240f      	movs	r4, #15
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	22e1      	movs	r2, #225	@ 0xe1
 80008c2:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	setCS(0);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff ff29 	bl	800071c <setCS>
	HAL_SPI_TransmitReceive(&bus, &command, &status, 1, 2000);
 80008ca:	230e      	movs	r3, #14
 80008cc:	18fa      	adds	r2, r7, r3
 80008ce:	1939      	adds	r1, r7, r4
 80008d0:	4819      	ldr	r0, [pc, #100]	@ (8000938 <nrf_tx+0x84>)
 80008d2:	23fa      	movs	r3, #250	@ 0xfa
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2301      	movs	r3, #1
 80008da:	f001 fc85 	bl	80021e8 <HAL_SPI_TransmitReceive>
	setCS(1);
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff ff1c 	bl	800071c <setCS>
	//place in TX FIFO
	if(isTX){
 80008e4:	4b15      	ldr	r3, [pc, #84]	@ (800093c <nrf_tx+0x88>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d003      	beq.n	80008f4 <nrf_tx+0x40>
		//W_TX_PAYLOAD command
		command = NRF24L01P_CMD_W_TX_PAYLOAD;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	22a0      	movs	r2, #160	@ 0xa0
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	e003      	b.n	80008fc <nrf_tx+0x48>
	} else {
		//W_ACK_PAYLOAD command
		command = NRF24L01P_CMD_W_ACK_PAYLOAD;
 80008f4:	230f      	movs	r3, #15
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	22a8      	movs	r2, #168	@ 0xa8
 80008fa:	701a      	strb	r2, [r3, #0]
	}
	setCS(0);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff ff0d 	bl	800071c <setCS>
	HAL_SPI_TransmitReceive(&bus, &command, &status, 1, 2000);
 8000902:	240e      	movs	r4, #14
 8000904:	193a      	adds	r2, r7, r4
 8000906:	230f      	movs	r3, #15
 8000908:	18f9      	adds	r1, r7, r3
 800090a:	480b      	ldr	r0, [pc, #44]	@ (8000938 <nrf_tx+0x84>)
 800090c:	23fa      	movs	r3, #250	@ 0xfa
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2301      	movs	r3, #1
 8000914:	f001 fc68 	bl	80021e8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&bus, payload, PAYLOAD_LEN, 2000);
 8000918:	23fa      	movs	r3, #250	@ 0xfa
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	4806      	ldr	r0, [pc, #24]	@ (8000938 <nrf_tx+0x84>)
 8000920:	2208      	movs	r2, #8
 8000922:	f001 f9d6 	bl	8001cd2 <HAL_SPI_Transmit>
	setCS(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff fef8 	bl	800071c <setCS>
	return status;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	781b      	ldrb	r3, [r3, #0]
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	b005      	add	sp, #20
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	20000080 	.word	0x20000080
 800093c:	200000d8 	.word	0x200000d8

08000940 <read_register>:
	HAL_SPI_Receive(&bus, payload, PAYLOAD_LEN, 2000);
	setCS(1);
	return status;
}

static uint8_t read_register(uint8_t reg) {
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b087      	sub	sp, #28
 8000944:	af02      	add	r7, sp, #8
 8000946:	0002      	movs	r2, r0
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	701a      	strb	r2, [r3, #0]
	uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 800094c:	240f      	movs	r4, #15
 800094e:	193b      	adds	r3, r7, r4
 8000950:	1dfa      	adds	r2, r7, #7
 8000952:	7812      	ldrb	r2, [r2, #0]
 8000954:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t read_val;

	setCS(0);
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fee0 	bl	800071c <setCS>
	HAL_SPI_TransmitReceive(&bus, &command, &status, 1, 2000);
 800095c:	230e      	movs	r3, #14
 800095e:	18fa      	adds	r2, r7, r3
 8000960:	1939      	adds	r1, r7, r4
 8000962:	480c      	ldr	r0, [pc, #48]	@ (8000994 <read_register+0x54>)
 8000964:	23fa      	movs	r3, #250	@ 0xfa
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2301      	movs	r3, #1
 800096c:	f001 fc3c 	bl	80021e8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&bus, &read_val, 1, 2000);
 8000970:	23fa      	movs	r3, #250	@ 0xfa
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	240d      	movs	r4, #13
 8000976:	1939      	adds	r1, r7, r4
 8000978:	4806      	ldr	r0, [pc, #24]	@ (8000994 <read_register+0x54>)
 800097a:	2201      	movs	r2, #1
 800097c:	f001 fb06 	bl	8001f8c <HAL_SPI_Receive>
    setCS(1);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff fecb 	bl	800071c <setCS>

	return read_val;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	781b      	ldrb	r3, [r3, #0]
}
 800098a:	0018      	movs	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	b005      	add	sp, #20
 8000990:	bd90      	pop	{r4, r7, pc}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	20000080 	.word	0x20000080

08000998 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value) {
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af02      	add	r7, sp, #8
 800099e:	0002      	movs	r2, r0
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	701a      	strb	r2, [r3, #0]
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	1c0a      	adds	r2, r1, #0
 80009a8:	701a      	strb	r2, [r3, #0]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2220      	movs	r2, #32
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	250f      	movs	r5, #15
 80009b6:	197b      	adds	r3, r7, r5
 80009b8:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t write_val = value;
 80009ba:	240d      	movs	r4, #13
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	1dba      	adds	r2, r7, #6
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	701a      	strb	r2, [r3, #0]

	setCS(0);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fea9 	bl	800071c <setCS>
	HAL_SPI_TransmitReceive(&bus, &command, &status, 1, 2000);
 80009ca:	230e      	movs	r3, #14
 80009cc:	18fa      	adds	r2, r7, r3
 80009ce:	1979      	adds	r1, r7, r5
 80009d0:	480b      	ldr	r0, [pc, #44]	@ (8000a00 <write_register+0x68>)
 80009d2:	23fa      	movs	r3, #250	@ 0xfa
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2301      	movs	r3, #1
 80009da:	f001 fc05 	bl	80021e8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&bus, &write_val, 1, 2000);
 80009de:	23fa      	movs	r3, #250	@ 0xfa
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	1939      	adds	r1, r7, r4
 80009e4:	4806      	ldr	r0, [pc, #24]	@ (8000a00 <write_register+0x68>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	f001 f973 	bl	8001cd2 <HAL_SPI_Transmit>
	setCS(1);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff fe95 	bl	800071c <setCS>

	return write_val;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	781b      	ldrb	r3, [r3, #0]
}
 80009f6:	0018      	movs	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b004      	add	sp, #16
 80009fc:	bdb0      	pop	{r4, r5, r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	20000080 	.word	0x20000080

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <HAL_MspInit+0x24>)
 8000a0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_MspInit+0x24>)
 8000a0e:	2101      	movs	r1, #1
 8000a10:	430a      	orrs	r2, r1
 8000a12:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <HAL_MspInit+0x24>)
 8000a16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <HAL_MspInit+0x24>)
 8000a1a:	2180      	movs	r1, #128	@ 0x80
 8000a1c:	0549      	lsls	r1, r1, #21
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b089      	sub	sp, #36	@ 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	240c      	movs	r4, #12
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2314      	movs	r3, #20
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f001 fedc 	bl	80027fc <memset>
  if(hspi->Instance==SPI1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a18      	ldr	r2, [pc, #96]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d129      	bne.n	8000aa2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a4e:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <HAL_SPI_MspInit+0x84>)
 8000a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <HAL_SPI_MspInit+0x84>)
 8000a54:	2180      	movs	r1, #128	@ 0x80
 8000a56:	0149      	lsls	r1, r1, #5
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <HAL_SPI_MspInit+0x84>)
 8000a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <HAL_SPI_MspInit+0x84>)
 8000a62:	2101      	movs	r1, #1
 8000a64:	430a      	orrs	r2, r1
 8000a66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <HAL_SPI_MspInit+0x84>)
 8000a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4013      	ands	r3, r2
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a74:	0021      	movs	r1, r4
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	22e0      	movs	r2, #224	@ 0xe0
 8000a7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2202      	movs	r2, #2
 8000a80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	187a      	adds	r2, r7, r1
 8000a96:	23a0      	movs	r3, #160	@ 0xa0
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 f999 	bl	8000dd4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b009      	add	sp, #36	@ 0x24
 8000aa8:	bd90      	pop	{r4, r7, pc}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	40013000 	.word	0x40013000
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f886 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000af0:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000af2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af4:	f7ff fff7 	bl	8000ae6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000afa:	490d      	ldr	r1, [pc, #52]	@ (8000b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <LoopForever+0xe>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b10:	4c0a      	ldr	r4, [pc, #40]	@ (8000b3c <LoopForever+0x16>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f001 fe75 	bl	800280c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b22:	f7ff fcc1 	bl	80004a8 <main>

08000b26 <LoopForever>:

LoopForever:
    b LoopForever
 8000b26:	e7fe      	b.n	8000b26 <LoopForever>
   ldr   r0, =_estack
 8000b28:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b34:	080028ac 	.word	0x080028ac
  ldr r2, =_sbss
 8000b38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b3c:	200000e0 	.word	0x200000e0

08000b40 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC1_COMP_IRQHandler>
	...

08000b44 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <HAL_Init+0x3c>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <HAL_Init+0x3c>)
 8000b56:	2140      	movs	r1, #64	@ 0x40
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f811 	bl	8000b84 <HAL_InitTick>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	e001      	b.n	8000b72 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6e:	f7ff ff49 	bl	8000a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	40022000 	.word	0x40022000

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <HAL_InitTick+0x5c>)
 8000b8e:	681c      	ldr	r4, [r3, #0]
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_InitTick+0x60>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	0019      	movs	r1, r3
 8000b96:	23fa      	movs	r3, #250	@ 0xfa
 8000b98:	0098      	lsls	r0, r3, #2
 8000b9a:	f7ff fab5 	bl	8000108 <__udivsi3>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	f7ff fab0 	bl	8000108 <__udivsi3>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 f905 	bl	8000dba <HAL_SYSTICK_Config>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e00f      	b.n	8000bd8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d80b      	bhi.n	8000bd6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f8e2 	bl	8000d90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_InitTick+0x64>)
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b003      	add	sp, #12
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <HAL_IncTick+0x1c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	18d2      	adds	r2, r2, r3
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	200000dc 	.word	0x200000dc

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b02      	ldr	r3, [pc, #8]	@ (8000c20 <HAL_GetTick+0x10>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	200000dc 	.word	0x200000dc

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff fff0 	bl	8000c10 <HAL_GetTick>
 8000c30:	0003      	movs	r3, r0
 8000c32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <HAL_Delay+0x44>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	001a      	movs	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	189b      	adds	r3, r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	f7ff ffe0 	bl	8000c10 <HAL_GetTick>
 8000c50:	0002      	movs	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	20000008 	.word	0x20000008

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	0002      	movs	r2, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c80:	d828      	bhi.n	8000cd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c82:	4a2f      	ldr	r2, [pc, #188]	@ (8000d40 <__NVIC_SetPriority+0xd4>)
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	33c0      	adds	r3, #192	@ 0xc0
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	589b      	ldr	r3, [r3, r2]
 8000c92:	1dfa      	adds	r2, r7, #7
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	0011      	movs	r1, r2
 8000c98:	2203      	movs	r2, #3
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	00d2      	lsls	r2, r2, #3
 8000c9e:	21ff      	movs	r1, #255	@ 0xff
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	000a      	movs	r2, r1
 8000ca4:	43d2      	mvns	r2, r2
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	019b      	lsls	r3, r3, #6
 8000cae:	22ff      	movs	r2, #255	@ 0xff
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	2303      	movs	r3, #3
 8000cba:	4003      	ands	r3, r0
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc0:	481f      	ldr	r0, [pc, #124]	@ (8000d40 <__NVIC_SetPriority+0xd4>)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	33c0      	adds	r3, #192	@ 0xc0
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cd2:	e031      	b.n	8000d38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d44 <__NVIC_SetPriority+0xd8>)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	0019      	movs	r1, r3
 8000cdc:	230f      	movs	r3, #15
 8000cde:	400b      	ands	r3, r1
 8000ce0:	3b08      	subs	r3, #8
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3306      	adds	r3, #6
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	18d3      	adds	r3, r2, r3
 8000cea:	3304      	adds	r3, #4
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	1dfa      	adds	r2, r7, #7
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	00d2      	lsls	r2, r2, #3
 8000cfa:	21ff      	movs	r1, #255	@ 0xff
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	000a      	movs	r2, r1
 8000d00:	43d2      	mvns	r2, r2
 8000d02:	401a      	ands	r2, r3
 8000d04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	22ff      	movs	r2, #255	@ 0xff
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0018      	movs	r0, r3
 8000d14:	2303      	movs	r3, #3
 8000d16:	4003      	ands	r3, r0
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <__NVIC_SetPriority+0xd8>)
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	001c      	movs	r4, r3
 8000d24:	230f      	movs	r3, #15
 8000d26:	4023      	ands	r3, r4
 8000d28:	3b08      	subs	r3, #8
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	3306      	adds	r3, #6
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	18c3      	adds	r3, r0, r3
 8000d34:	3304      	adds	r3, #4
 8000d36:	601a      	str	r2, [r3, #0]
}
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b003      	add	sp, #12
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1e5a      	subs	r2, r3, #1
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	045b      	lsls	r3, r3, #17
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d301      	bcc.n	8000d60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e010      	b.n	8000d82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d60:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <SysTick_Config+0x44>)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	3a01      	subs	r2, #1
 8000d66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d68:	2301      	movs	r3, #1
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	2103      	movs	r1, #3
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff ff7c 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <SysTick_Config+0x44>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <SysTick_Config+0x44>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	0018      	movs	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	1c02      	adds	r2, r0, #0
 8000da0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>
}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b004      	add	sp, #16
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff ffbf 	bl	8000d48 <SysTick_Config>
 8000dca:	0003      	movs	r3, r0
}
 8000dcc:	0018      	movs	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b002      	add	sp, #8
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dea:	e149      	b.n	8001080 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2101      	movs	r1, #1
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	4091      	lsls	r1, r2
 8000df6:	000a      	movs	r2, r1
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d100      	bne.n	8000e04 <HAL_GPIO_Init+0x30>
 8000e02:	e13a      	b.n	800107a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d005      	beq.n	8000e1c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2203      	movs	r2, #3
 8000e16:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d130      	bne.n	8000e7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	0013      	movs	r3, r2
 8000e2c:	43da      	mvns	r2, r3
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	409a      	lsls	r2, r3
 8000e3e:	0013      	movs	r3, r2
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e52:	2201      	movs	r2, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	091b      	lsrs	r3, r3, #4
 8000e68:	2201      	movs	r2, #1
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2203      	movs	r2, #3
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d017      	beq.n	8000eba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d123      	bne.n	8000f0e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	58d3      	ldr	r3, [r2, r3]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	4013      	ands	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	691a      	ldr	r2, [r3, #16]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2107      	movs	r1, #7
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	08da      	lsrs	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3208      	adds	r2, #8
 8000f08:	0092      	lsls	r2, r2, #2
 8000f0a:	6939      	ldr	r1, [r7, #16]
 8000f0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	409a      	lsls	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	23c0      	movs	r3, #192	@ 0xc0
 8000f48:	029b      	lsls	r3, r3, #10
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d100      	bne.n	8000f50 <HAL_GPIO_Init+0x17c>
 8000f4e:	e094      	b.n	800107a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f50:	4b51      	ldr	r3, [pc, #324]	@ (8001098 <HAL_GPIO_Init+0x2c4>)
 8000f52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f54:	4b50      	ldr	r3, [pc, #320]	@ (8001098 <HAL_GPIO_Init+0x2c4>)
 8000f56:	2101      	movs	r1, #1
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5c:	4a4f      	ldr	r2, [pc, #316]	@ (800109c <HAL_GPIO_Init+0x2c8>)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	589b      	ldr	r3, [r3, r2]
 8000f68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	409a      	lsls	r2, r3
 8000f76:	0013      	movs	r3, r2
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	23a0      	movs	r3, #160	@ 0xa0
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x1de>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a44      	ldr	r2, [pc, #272]	@ (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x1da>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a43      	ldr	r2, [pc, #268]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x1d6>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a42      	ldr	r2, [pc, #264]	@ (80010a8 <HAL_GPIO_Init+0x2d4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x1d2>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	400a      	ands	r2, r1
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	4935      	ldr	r1, [pc, #212]	@ (800109c <HAL_GPIO_Init+0x2c8>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b36      	ldr	r3, [pc, #216]	@ (80010ac <HAL_GPIO_Init+0x2d8>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	2380      	movs	r3, #128	@ 0x80
 8000fe8:	035b      	lsls	r3, r3, #13
 8000fea:	4013      	ands	r3, r2
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80010ac <HAL_GPIO_Init+0x2d8>)
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80010ac <HAL_GPIO_Init+0x2d8>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43da      	mvns	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	039b      	lsls	r3, r3, #14
 8001014:	4013      	ands	r3, r2
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001020:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <HAL_GPIO_Init+0x2d8>)
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001026:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <HAL_GPIO_Init+0x2d8>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	4013      	ands	r3, r2
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <HAL_GPIO_Init+0x2d8>)
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <HAL_GPIO_Init+0x2d8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43da      	mvns	r2, r3
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	025b      	lsls	r3, r3, #9
 8001068:	4013      	ands	r3, r2
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <HAL_GPIO_Init+0x2d8>)
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	40da      	lsrs	r2, r3
 8001088:	1e13      	subs	r3, r2, #0
 800108a:	d000      	beq.n	800108e <HAL_GPIO_Init+0x2ba>
 800108c:	e6ae      	b.n	8000dec <HAL_GPIO_Init+0x18>
  }
}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b006      	add	sp, #24
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000
 80010a0:	50000400 	.word	0x50000400
 80010a4:	50000800 	.word	0x50000800
 80010a8:	50001c00 	.word	0x50001c00
 80010ac:	40010400 	.word	0x40010400

080010b0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	0008      	movs	r0, r1
 80010ba:	0011      	movs	r1, r2
 80010bc:	1cbb      	adds	r3, r7, #2
 80010be:	1c02      	adds	r2, r0, #0
 80010c0:	801a      	strh	r2, [r3, #0]
 80010c2:	1c7b      	adds	r3, r7, #1
 80010c4:	1c0a      	adds	r2, r1, #0
 80010c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c8:	1c7b      	adds	r3, r7, #1
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d0:	1cbb      	adds	r3, r7, #2
 80010d2:	881a      	ldrh	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010d8:	e003      	b.n	80010e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010da:	1cbb      	adds	r3, r7, #2
 80010dc:	881a      	ldrh	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f000 fb6c 	bl	80017d8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001100:	4bc8      	ldr	r3, [pc, #800]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	220c      	movs	r2, #12
 8001106:	4013      	ands	r3, r2
 8001108:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800110a:	4bc6      	ldr	r3, [pc, #792]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	2380      	movs	r3, #128	@ 0x80
 8001110:	025b      	lsls	r3, r3, #9
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2201      	movs	r2, #1
 800111c:	4013      	ands	r3, r2
 800111e:	d100      	bne.n	8001122 <HAL_RCC_OscConfig+0x36>
 8001120:	e07d      	b.n	800121e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	2b08      	cmp	r3, #8
 8001126:	d007      	beq.n	8001138 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	2b0c      	cmp	r3, #12
 800112c:	d112      	bne.n	8001154 <HAL_RCC_OscConfig+0x68>
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	025b      	lsls	r3, r3, #9
 8001134:	429a      	cmp	r2, r3
 8001136:	d10d      	bne.n	8001154 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	4bba      	ldr	r3, [pc, #744]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	029b      	lsls	r3, r3, #10
 8001140:	4013      	ands	r3, r2
 8001142:	d100      	bne.n	8001146 <HAL_RCC_OscConfig+0x5a>
 8001144:	e06a      	b.n	800121c <HAL_RCC_OscConfig+0x130>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d166      	bne.n	800121c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	f000 fb42 	bl	80017d8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	025b      	lsls	r3, r3, #9
 800115c:	429a      	cmp	r2, r3
 800115e:	d107      	bne.n	8001170 <HAL_RCC_OscConfig+0x84>
 8001160:	4bb0      	ldr	r3, [pc, #704]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4baf      	ldr	r3, [pc, #700]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001166:	2180      	movs	r1, #128	@ 0x80
 8001168:	0249      	lsls	r1, r1, #9
 800116a:	430a      	orrs	r2, r1
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e027      	b.n	80011c0 <HAL_RCC_OscConfig+0xd4>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	23a0      	movs	r3, #160	@ 0xa0
 8001176:	02db      	lsls	r3, r3, #11
 8001178:	429a      	cmp	r2, r3
 800117a:	d10e      	bne.n	800119a <HAL_RCC_OscConfig+0xae>
 800117c:	4ba9      	ldr	r3, [pc, #676]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4ba8      	ldr	r3, [pc, #672]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001182:	2180      	movs	r1, #128	@ 0x80
 8001184:	02c9      	lsls	r1, r1, #11
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	4ba6      	ldr	r3, [pc, #664]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4ba5      	ldr	r3, [pc, #660]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001190:	2180      	movs	r1, #128	@ 0x80
 8001192:	0249      	lsls	r1, r1, #9
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e012      	b.n	80011c0 <HAL_RCC_OscConfig+0xd4>
 800119a:	4ba2      	ldr	r3, [pc, #648]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4ba1      	ldr	r3, [pc, #644]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 80011a0:	49a1      	ldr	r1, [pc, #644]	@ (8001428 <HAL_RCC_OscConfig+0x33c>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	4b9f      	ldr	r3, [pc, #636]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	025b      	lsls	r3, r3, #9
 80011ae:	4013      	ands	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4b9b      	ldr	r3, [pc, #620]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b9a      	ldr	r3, [pc, #616]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 80011ba:	499c      	ldr	r1, [pc, #624]	@ (800142c <HAL_RCC_OscConfig+0x340>)
 80011bc:	400a      	ands	r2, r1
 80011be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d014      	beq.n	80011f2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fd22 	bl	8000c10 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d2:	f7ff fd1d 	bl	8000c10 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	@ 0x64
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e2f9      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	029b      	lsls	r3, r3, #10
 80011ec:	4013      	ands	r3, r2
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0xe6>
 80011f0:	e015      	b.n	800121e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fd0d 	bl	8000c10 <HAL_GetTick>
 80011f6:	0003      	movs	r3, r0
 80011f8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fc:	f7ff fd08 	bl	8000c10 <HAL_GetTick>
 8001200:	0002      	movs	r2, r0
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b64      	cmp	r3, #100	@ 0x64
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e2e4      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800120e:	4b85      	ldr	r3, [pc, #532]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	2380      	movs	r3, #128	@ 0x80
 8001214:	029b      	lsls	r3, r3, #10
 8001216:	4013      	ands	r3, r2
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x110>
 800121a:	e000      	b.n	800121e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2202      	movs	r2, #2
 8001224:	4013      	ands	r3, r2
 8001226:	d100      	bne.n	800122a <HAL_RCC_OscConfig+0x13e>
 8001228:	e099      	b.n	800135e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001232:	2220      	movs	r2, #32
 8001234:	4013      	ands	r3, r2
 8001236:	d009      	beq.n	800124c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001238:	4b7a      	ldr	r3, [pc, #488]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b79      	ldr	r3, [pc, #484]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 800123e:	2120      	movs	r1, #32
 8001240:	430a      	orrs	r2, r1
 8001242:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	2220      	movs	r2, #32
 8001248:	4393      	bics	r3, r2
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b04      	cmp	r3, #4
 8001250:	d005      	beq.n	800125e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	2b0c      	cmp	r3, #12
 8001256:	d13e      	bne.n	80012d6 <HAL_RCC_OscConfig+0x1ea>
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d13b      	bne.n	80012d6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800125e:	4b71      	ldr	r3, [pc, #452]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2204      	movs	r2, #4
 8001264:	4013      	ands	r3, r2
 8001266:	d004      	beq.n	8001272 <HAL_RCC_OscConfig+0x186>
 8001268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e2b2      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001272:	4b6c      	ldr	r3, [pc, #432]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a6e      	ldr	r2, [pc, #440]	@ (8001430 <HAL_RCC_OscConfig+0x344>)
 8001278:	4013      	ands	r3, r2
 800127a:	0019      	movs	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	021a      	lsls	r2, r3, #8
 8001282:	4b68      	ldr	r3, [pc, #416]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001284:	430a      	orrs	r2, r1
 8001286:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001288:	4b66      	ldr	r3, [pc, #408]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2209      	movs	r2, #9
 800128e:	4393      	bics	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	4b64      	ldr	r3, [pc, #400]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800129a:	f000 fbeb 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 800129e:	0001      	movs	r1, r0
 80012a0:	4b60      	ldr	r3, [pc, #384]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	220f      	movs	r2, #15
 80012a8:	4013      	ands	r3, r2
 80012aa:	4a62      	ldr	r2, [pc, #392]	@ (8001434 <HAL_RCC_OscConfig+0x348>)
 80012ac:	5cd3      	ldrb	r3, [r2, r3]
 80012ae:	000a      	movs	r2, r1
 80012b0:	40da      	lsrs	r2, r3
 80012b2:	4b61      	ldr	r3, [pc, #388]	@ (8001438 <HAL_RCC_OscConfig+0x34c>)
 80012b4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80012b6:	4b61      	ldr	r3, [pc, #388]	@ (800143c <HAL_RCC_OscConfig+0x350>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2513      	movs	r5, #19
 80012bc:	197c      	adds	r4, r7, r5
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff fc60 	bl	8000b84 <HAL_InitTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80012c8:	197b      	adds	r3, r7, r5
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d046      	beq.n	800135e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80012d0:	197b      	adds	r3, r7, r5
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	e280      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d027      	beq.n	800132c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012dc:	4b51      	ldr	r3, [pc, #324]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2209      	movs	r2, #9
 80012e2:	4393      	bics	r3, r2
 80012e4:	0019      	movs	r1, r3
 80012e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 80012e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ea:	430a      	orrs	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fc8f 	bl	8000c10 <HAL_GetTick>
 80012f2:	0003      	movs	r3, r0
 80012f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff fc8a 	bl	8000c10 <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e266      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800130a:	4b46      	ldr	r3, [pc, #280]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2204      	movs	r2, #4
 8001310:	4013      	ands	r3, r2
 8001312:	d0f1      	beq.n	80012f8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001314:	4b43      	ldr	r3, [pc, #268]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4a45      	ldr	r2, [pc, #276]	@ (8001430 <HAL_RCC_OscConfig+0x344>)
 800131a:	4013      	ands	r3, r2
 800131c:	0019      	movs	r1, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	021a      	lsls	r2, r3, #8
 8001324:	4b3f      	ldr	r3, [pc, #252]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001326:	430a      	orrs	r2, r1
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	e018      	b.n	800135e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132c:	4b3d      	ldr	r3, [pc, #244]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b3c      	ldr	r3, [pc, #240]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fc6a 	bl	8000c10 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001342:	f7ff fc65 	bl	8000c10 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e241      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001354:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2204      	movs	r2, #4
 800135a:	4013      	ands	r3, r2
 800135c:	d1f1      	bne.n	8001342 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2210      	movs	r2, #16
 8001364:	4013      	ands	r3, r2
 8001366:	d100      	bne.n	800136a <HAL_RCC_OscConfig+0x27e>
 8001368:	e0a1      	b.n	80014ae <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d140      	bne.n	80013f2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001370:	4b2c      	ldr	r3, [pc, #176]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	@ 0x80
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4013      	ands	r3, r2
 800137a:	d005      	beq.n	8001388 <HAL_RCC_OscConfig+0x29c>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e227      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001388:	4b26      	ldr	r3, [pc, #152]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a2c      	ldr	r2, [pc, #176]	@ (8001440 <HAL_RCC_OscConfig+0x354>)
 800138e:	4013      	ands	r3, r2
 8001390:	0019      	movs	r1, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1a      	ldr	r2, [r3, #32]
 8001396:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001398:	430a      	orrs	r2, r1
 800139a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139c:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	0a19      	lsrs	r1, r3, #8
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	061a      	lsls	r2, r3, #24
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 80013ac:	430a      	orrs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	0b5b      	lsrs	r3, r3, #13
 80013b6:	3301      	adds	r3, #1
 80013b8:	2280      	movs	r2, #128	@ 0x80
 80013ba:	0212      	lsls	r2, r2, #8
 80013bc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	210f      	movs	r1, #15
 80013c6:	400b      	ands	r3, r1
 80013c8:	491a      	ldr	r1, [pc, #104]	@ (8001434 <HAL_RCC_OscConfig+0x348>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <HAL_RCC_OscConfig+0x34c>)
 80013d0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80013d2:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <HAL_RCC_OscConfig+0x350>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2513      	movs	r5, #19
 80013d8:	197c      	adds	r4, r7, r5
 80013da:	0018      	movs	r0, r3
 80013dc:	f7ff fbd2 	bl	8000b84 <HAL_InitTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80013e4:	197b      	adds	r3, r7, r5
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d060      	beq.n	80014ae <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80013ec:	197b      	adds	r3, r7, r5
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	e1f2      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d03f      	beq.n	800147a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001400:	2180      	movs	r1, #128	@ 0x80
 8001402:	0049      	lsls	r1, r1, #1
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fc02 	bl	8000c10 <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001410:	e018      	b.n	8001444 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001412:	f7ff fbfd 	bl	8000c10 <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d911      	bls.n	8001444 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e1d9      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
 8001424:	40021000 	.word	0x40021000
 8001428:	fffeffff 	.word	0xfffeffff
 800142c:	fffbffff 	.word	0xfffbffff
 8001430:	ffffe0ff 	.word	0xffffe0ff
 8001434:	08002880 	.word	0x08002880
 8001438:	20000000 	.word	0x20000000
 800143c:	20000004 	.word	0x20000004
 8001440:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001444:	4bc9      	ldr	r3, [pc, #804]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d0e0      	beq.n	8001412 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001450:	4bc6      	ldr	r3, [pc, #792]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4ac6      	ldr	r2, [pc, #792]	@ (8001770 <HAL_RCC_OscConfig+0x684>)
 8001456:	4013      	ands	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	4bc3      	ldr	r3, [pc, #780]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001460:	430a      	orrs	r2, r1
 8001462:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001464:	4bc1      	ldr	r3, [pc, #772]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	0a19      	lsrs	r1, r3, #8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	061a      	lsls	r2, r3, #24
 8001472:	4bbe      	ldr	r3, [pc, #760]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001474:	430a      	orrs	r2, r1
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	e019      	b.n	80014ae <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800147a:	4bbc      	ldr	r3, [pc, #752]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4bbb      	ldr	r3, [pc, #748]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001480:	49bc      	ldr	r1, [pc, #752]	@ (8001774 <HAL_RCC_OscConfig+0x688>)
 8001482:	400a      	ands	r2, r1
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fbc3 	bl	8000c10 <HAL_GetTick>
 800148a:	0003      	movs	r3, r0
 800148c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001490:	f7ff fbbe 	bl	8000c10 <HAL_GetTick>
 8001494:	0002      	movs	r2, r0
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e19a      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014a2:	4bb2      	ldr	r3, [pc, #712]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4013      	ands	r3, r2
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2208      	movs	r2, #8
 80014b4:	4013      	ands	r3, r2
 80014b6:	d036      	beq.n	8001526 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d019      	beq.n	80014f4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c0:	4baa      	ldr	r3, [pc, #680]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80014c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014c4:	4ba9      	ldr	r3, [pc, #676]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	430a      	orrs	r2, r1
 80014ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014cc:	f7ff fba0 	bl	8000c10 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fb9b 	bl	8000c10 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e177      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014e8:	4ba0      	ldr	r3, [pc, #640]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80014ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ec:	2202      	movs	r2, #2
 80014ee:	4013      	ands	r3, r2
 80014f0:	d0f1      	beq.n	80014d6 <HAL_RCC_OscConfig+0x3ea>
 80014f2:	e018      	b.n	8001526 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f4:	4b9d      	ldr	r3, [pc, #628]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80014f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014f8:	4b9c      	ldr	r3, [pc, #624]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	438a      	bics	r2, r1
 80014fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff fb86 	bl	8000c10 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff fb81 	bl	8000c10 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e15d      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800151c:	4b93      	ldr	r3, [pc, #588]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 800151e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001520:	2202      	movs	r2, #2
 8001522:	4013      	ands	r3, r2
 8001524:	d1f1      	bne.n	800150a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2204      	movs	r2, #4
 800152c:	4013      	ands	r3, r2
 800152e:	d100      	bne.n	8001532 <HAL_RCC_OscConfig+0x446>
 8001530:	e0ae      	b.n	8001690 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001532:	2023      	movs	r0, #35	@ 0x23
 8001534:	183b      	adds	r3, r7, r0
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b8c      	ldr	r3, [pc, #560]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 800153c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800153e:	2380      	movs	r3, #128	@ 0x80
 8001540:	055b      	lsls	r3, r3, #21
 8001542:	4013      	ands	r3, r2
 8001544:	d109      	bne.n	800155a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b89      	ldr	r3, [pc, #548]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001548:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800154a:	4b88      	ldr	r3, [pc, #544]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 800154c:	2180      	movs	r1, #128	@ 0x80
 800154e:	0549      	lsls	r1, r1, #21
 8001550:	430a      	orrs	r2, r1
 8001552:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001554:	183b      	adds	r3, r7, r0
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b87      	ldr	r3, [pc, #540]	@ (8001778 <HAL_RCC_OscConfig+0x68c>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4013      	ands	r3, r2
 8001564:	d11a      	bne.n	800159c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001566:	4b84      	ldr	r3, [pc, #528]	@ (8001778 <HAL_RCC_OscConfig+0x68c>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b83      	ldr	r3, [pc, #524]	@ (8001778 <HAL_RCC_OscConfig+0x68c>)
 800156c:	2180      	movs	r1, #128	@ 0x80
 800156e:	0049      	lsls	r1, r1, #1
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001574:	f7ff fb4c 	bl	8000c10 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff fb47 	bl	8000c10 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b64      	cmp	r3, #100	@ 0x64
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e123      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b79      	ldr	r3, [pc, #484]	@ (8001778 <HAL_RCC_OscConfig+0x68c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4013      	ands	r3, r2
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d107      	bne.n	80015b8 <HAL_RCC_OscConfig+0x4cc>
 80015a8:	4b70      	ldr	r3, [pc, #448]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80015aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015ac:	4b6f      	ldr	r3, [pc, #444]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80015ae:	2180      	movs	r1, #128	@ 0x80
 80015b0:	0049      	lsls	r1, r1, #1
 80015b2:	430a      	orrs	r2, r1
 80015b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80015b6:	e031      	b.n	800161c <HAL_RCC_OscConfig+0x530>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10c      	bne.n	80015da <HAL_RCC_OscConfig+0x4ee>
 80015c0:	4b6a      	ldr	r3, [pc, #424]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80015c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015c4:	4b69      	ldr	r3, [pc, #420]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80015c6:	496b      	ldr	r1, [pc, #428]	@ (8001774 <HAL_RCC_OscConfig+0x688>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80015cc:	4b67      	ldr	r3, [pc, #412]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80015ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015d0:	4b66      	ldr	r3, [pc, #408]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80015d2:	496a      	ldr	r1, [pc, #424]	@ (800177c <HAL_RCC_OscConfig+0x690>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80015d8:	e020      	b.n	800161c <HAL_RCC_OscConfig+0x530>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	23a0      	movs	r3, #160	@ 0xa0
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d10e      	bne.n	8001604 <HAL_RCC_OscConfig+0x518>
 80015e6:	4b61      	ldr	r3, [pc, #388]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80015e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015ea:	4b60      	ldr	r3, [pc, #384]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80015ec:	2180      	movs	r1, #128	@ 0x80
 80015ee:	00c9      	lsls	r1, r1, #3
 80015f0:	430a      	orrs	r2, r1
 80015f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80015f4:	4b5d      	ldr	r3, [pc, #372]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80015f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015f8:	4b5c      	ldr	r3, [pc, #368]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80015fa:	2180      	movs	r1, #128	@ 0x80
 80015fc:	0049      	lsls	r1, r1, #1
 80015fe:	430a      	orrs	r2, r1
 8001600:	651a      	str	r2, [r3, #80]	@ 0x50
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0x530>
 8001604:	4b59      	ldr	r3, [pc, #356]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001606:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001608:	4b58      	ldr	r3, [pc, #352]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 800160a:	495a      	ldr	r1, [pc, #360]	@ (8001774 <HAL_RCC_OscConfig+0x688>)
 800160c:	400a      	ands	r2, r1
 800160e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001610:	4b56      	ldr	r3, [pc, #344]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001612:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001614:	4b55      	ldr	r3, [pc, #340]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001616:	4959      	ldr	r1, [pc, #356]	@ (800177c <HAL_RCC_OscConfig+0x690>)
 8001618:	400a      	ands	r2, r1
 800161a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d015      	beq.n	8001650 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff faf4 	bl	8000c10 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800162c:	e009      	b.n	8001642 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7ff faef 	bl	8000c10 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	4a51      	ldr	r2, [pc, #324]	@ (8001780 <HAL_RCC_OscConfig+0x694>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e0ca      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001642:	4b4a      	ldr	r3, [pc, #296]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001644:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001646:	2380      	movs	r3, #128	@ 0x80
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4013      	ands	r3, r2
 800164c:	d0ef      	beq.n	800162e <HAL_RCC_OscConfig+0x542>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fade 	bl	8000c10 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001658:	e009      	b.n	800166e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff fad9 	bl	8000c10 <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	4a46      	ldr	r2, [pc, #280]	@ (8001780 <HAL_RCC_OscConfig+0x694>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e0b4      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800166e:	4b3f      	ldr	r3, [pc, #252]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001670:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001672:	2380      	movs	r3, #128	@ 0x80
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4013      	ands	r3, r2
 8001678:	d1ef      	bne.n	800165a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800167a:	2323      	movs	r3, #35	@ 0x23
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d105      	bne.n	8001690 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001684:	4b39      	ldr	r3, [pc, #228]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001686:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001688:	4b38      	ldr	r3, [pc, #224]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 800168a:	493e      	ldr	r1, [pc, #248]	@ (8001784 <HAL_RCC_OscConfig+0x698>)
 800168c:	400a      	ands	r2, r1
 800168e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	2b00      	cmp	r3, #0
 8001696:	d100      	bne.n	800169a <HAL_RCC_OscConfig+0x5ae>
 8001698:	e09d      	b.n	80017d6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d100      	bne.n	80016a2 <HAL_RCC_OscConfig+0x5b6>
 80016a0:	e076      	b.n	8001790 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d145      	bne.n	8001736 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b30      	ldr	r3, [pc, #192]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80016b0:	4935      	ldr	r1, [pc, #212]	@ (8001788 <HAL_RCC_OscConfig+0x69c>)
 80016b2:	400a      	ands	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff faab 	bl	8000c10 <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff faa6 	bl	8000c10 <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e082      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016d2:	4b26      	ldr	r3, [pc, #152]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	@ 0x80
 80016d8:	049b      	lsls	r3, r3, #18
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016de:	4b23      	ldr	r3, [pc, #140]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	4a2a      	ldr	r2, [pc, #168]	@ (800178c <HAL_RCC_OscConfig+0x6a0>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	431a      	orrs	r2, r3
 80016f8:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 80016fa:	430a      	orrs	r2, r1
 80016fc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fe:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001704:	2180      	movs	r1, #128	@ 0x80
 8001706:	0449      	lsls	r1, r1, #17
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fa80 	bl	8000c10 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff fa7b 	bl	8000c10 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e057      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001728:	4b10      	ldr	r3, [pc, #64]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	049b      	lsls	r3, r3, #18
 8001730:	4013      	ands	r3, r2
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x62a>
 8001734:	e04f      	b.n	80017d6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 800173c:	4912      	ldr	r1, [pc, #72]	@ (8001788 <HAL_RCC_OscConfig+0x69c>)
 800173e:	400a      	ands	r2, r1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fa65 	bl	8000c10 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff fa60 	bl	8000c10 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e03c      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800175e:	4b03      	ldr	r3, [pc, #12]	@ (800176c <HAL_RCC_OscConfig+0x680>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	049b      	lsls	r3, r3, #18
 8001766:	4013      	ands	r3, r2
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x660>
 800176a:	e034      	b.n	80017d6 <HAL_RCC_OscConfig+0x6ea>
 800176c:	40021000 	.word	0x40021000
 8001770:	ffff1fff 	.word	0xffff1fff
 8001774:	fffffeff 	.word	0xfffffeff
 8001778:	40007000 	.word	0x40007000
 800177c:	fffffbff 	.word	0xfffffbff
 8001780:	00001388 	.word	0x00001388
 8001784:	efffffff 	.word	0xefffffff
 8001788:	feffffff 	.word	0xfeffffff
 800178c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800179c:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <HAL_RCC_OscConfig+0x6f4>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	025b      	lsls	r3, r3, #9
 80017a8:	401a      	ands	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d10f      	bne.n	80017d2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	23f0      	movs	r3, #240	@ 0xf0
 80017b6:	039b      	lsls	r3, r3, #14
 80017b8:	401a      	ands	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	23c0      	movs	r3, #192	@ 0xc0
 80017c6:	041b      	lsls	r3, r3, #16
 80017c8:	401a      	ands	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b00a      	add	sp, #40	@ 0x28
 80017de:	bdb0      	pop	{r4, r5, r7, pc}
 80017e0:	40021000 	.word	0x40021000

080017e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e4:	b5b0      	push	{r4, r5, r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e128      	b.n	8001a4a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b96      	ldr	r3, [pc, #600]	@ (8001a54 <HAL_RCC_ClockConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4013      	ands	r3, r2
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d91e      	bls.n	8001844 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b93      	ldr	r3, [pc, #588]	@ (8001a54 <HAL_RCC_ClockConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2201      	movs	r2, #1
 800180c:	4393      	bics	r3, r2
 800180e:	0019      	movs	r1, r3
 8001810:	4b90      	ldr	r3, [pc, #576]	@ (8001a54 <HAL_RCC_ClockConfig+0x270>)
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001818:	f7ff f9fa 	bl	8000c10 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001820:	e009      	b.n	8001836 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001822:	f7ff f9f5 	bl	8000c10 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	4a8a      	ldr	r2, [pc, #552]	@ (8001a58 <HAL_RCC_ClockConfig+0x274>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e109      	b.n	8001a4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b87      	ldr	r3, [pc, #540]	@ (8001a54 <HAL_RCC_ClockConfig+0x270>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2201      	movs	r2, #1
 800183c:	4013      	ands	r3, r2
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d1ee      	bne.n	8001822 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2202      	movs	r2, #2
 800184a:	4013      	ands	r3, r2
 800184c:	d009      	beq.n	8001862 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184e:	4b83      	ldr	r3, [pc, #524]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	22f0      	movs	r2, #240	@ 0xf0
 8001854:	4393      	bics	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 800185e:	430a      	orrs	r2, r1
 8001860:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2201      	movs	r2, #1
 8001868:	4013      	ands	r3, r2
 800186a:	d100      	bne.n	800186e <HAL_RCC_ClockConfig+0x8a>
 800186c:	e089      	b.n	8001982 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001876:	4b79      	ldr	r3, [pc, #484]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	029b      	lsls	r3, r3, #10
 800187e:	4013      	ands	r3, r2
 8001880:	d120      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0e1      	b.n	8001a4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800188e:	4b73      	ldr	r3, [pc, #460]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	@ 0x80
 8001894:	049b      	lsls	r3, r3, #18
 8001896:	4013      	ands	r3, r2
 8001898:	d114      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e0d5      	b.n	8001a4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d106      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018a6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2204      	movs	r2, #4
 80018ac:	4013      	ands	r3, r2
 80018ae:	d109      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0ca      	b.n	8001a4a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018b4:	4b69      	ldr	r3, [pc, #420]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0c2      	b.n	8001a4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c4:	4b65      	ldr	r3, [pc, #404]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2203      	movs	r2, #3
 80018ca:	4393      	bics	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4b62      	ldr	r3, [pc, #392]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 80018d4:	430a      	orrs	r2, r1
 80018d6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff f99a 	bl	8000c10 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d111      	bne.n	800190c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e8:	e009      	b.n	80018fe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ea:	f7ff f991 	bl	8000c10 <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	4a58      	ldr	r2, [pc, #352]	@ (8001a58 <HAL_RCC_ClockConfig+0x274>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e0a5      	b.n	8001a4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018fe:	4b57      	ldr	r3, [pc, #348]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	220c      	movs	r2, #12
 8001904:	4013      	ands	r3, r2
 8001906:	2b08      	cmp	r3, #8
 8001908:	d1ef      	bne.n	80018ea <HAL_RCC_ClockConfig+0x106>
 800190a:	e03a      	b.n	8001982 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d111      	bne.n	8001938 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001914:	e009      	b.n	800192a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001916:	f7ff f97b 	bl	8000c10 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	4a4d      	ldr	r2, [pc, #308]	@ (8001a58 <HAL_RCC_ClockConfig+0x274>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e08f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800192a:	4b4c      	ldr	r3, [pc, #304]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	220c      	movs	r2, #12
 8001930:	4013      	ands	r3, r2
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d1ef      	bne.n	8001916 <HAL_RCC_ClockConfig+0x132>
 8001936:	e024      	b.n	8001982 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d11b      	bne.n	8001978 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001940:	e009      	b.n	8001956 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001942:	f7ff f965 	bl	8000c10 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4a42      	ldr	r2, [pc, #264]	@ (8001a58 <HAL_RCC_ClockConfig+0x274>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e079      	b.n	8001a4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001956:	4b41      	ldr	r3, [pc, #260]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	220c      	movs	r2, #12
 800195c:	4013      	ands	r3, r2
 800195e:	2b04      	cmp	r3, #4
 8001960:	d1ef      	bne.n	8001942 <HAL_RCC_ClockConfig+0x15e>
 8001962:	e00e      	b.n	8001982 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	f7ff f954 	bl	8000c10 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a58 <HAL_RCC_ClockConfig+0x274>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e068      	b.n	8001a4a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001978:	4b38      	ldr	r3, [pc, #224]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	220c      	movs	r2, #12
 800197e:	4013      	ands	r3, r2
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001982:	4b34      	ldr	r3, [pc, #208]	@ (8001a54 <HAL_RCC_ClockConfig+0x270>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2201      	movs	r2, #1
 8001988:	4013      	ands	r3, r2
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d21e      	bcs.n	80019ce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001990:	4b30      	ldr	r3, [pc, #192]	@ (8001a54 <HAL_RCC_ClockConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	4393      	bics	r3, r2
 8001998:	0019      	movs	r1, r3
 800199a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a54 <HAL_RCC_ClockConfig+0x270>)
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019a2:	f7ff f935 	bl	8000c10 <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	e009      	b.n	80019c0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff f930 	bl	8000c10 <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	4a28      	ldr	r2, [pc, #160]	@ (8001a58 <HAL_RCC_ClockConfig+0x274>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e044      	b.n	8001a4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c0:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <HAL_RCC_ClockConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d1ee      	bne.n	80019ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2204      	movs	r2, #4
 80019d4:	4013      	ands	r3, r2
 80019d6:	d009      	beq.n	80019ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d8:	4b20      	ldr	r3, [pc, #128]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a20      	ldr	r2, [pc, #128]	@ (8001a60 <HAL_RCC_ClockConfig+0x27c>)
 80019de:	4013      	ands	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 80019e8:	430a      	orrs	r2, r1
 80019ea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2208      	movs	r2, #8
 80019f2:	4013      	ands	r3, r2
 80019f4:	d00a      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019f6:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001a64 <HAL_RCC_ClockConfig+0x280>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	0019      	movs	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	00da      	lsls	r2, r3, #3
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a0c:	f000 f832 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a10:	0001      	movs	r1, r0
 8001a12:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <HAL_RCC_ClockConfig+0x278>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	220f      	movs	r2, #15
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <HAL_RCC_ClockConfig+0x284>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	000a      	movs	r2, r1
 8001a22:	40da      	lsrs	r2, r3
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <HAL_RCC_ClockConfig+0x288>)
 8001a26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a28:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <HAL_RCC_ClockConfig+0x28c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	250b      	movs	r5, #11
 8001a2e:	197c      	adds	r4, r7, r5
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff f8a7 	bl	8000b84 <HAL_InitTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a3a:	197b      	adds	r3, r7, r5
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a42:	197b      	adds	r3, r7, r5
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b004      	add	sp, #16
 8001a50:	bdb0      	pop	{r4, r5, r7, pc}
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	40022000 	.word	0x40022000
 8001a58:	00001388 	.word	0x00001388
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	fffff8ff 	.word	0xfffff8ff
 8001a64:	ffffc7ff 	.word	0xffffc7ff
 8001a68:	08002880 	.word	0x08002880
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	b5b0      	push	{r4, r5, r7, lr}
 8001a76:	b08e      	sub	sp, #56	@ 0x38
 8001a78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a7a:	4b4c      	ldr	r3, [pc, #304]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x138>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a82:	230c      	movs	r3, #12
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d014      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8001a8a:	d900      	bls.n	8001a8e <HAL_RCC_GetSysClockFreq+0x1a>
 8001a8c:	e07b      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x112>
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x24>
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d00b      	beq.n	8001aae <HAL_RCC_GetSysClockFreq+0x3a>
 8001a96:	e076      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a98:	4b44      	ldr	r3, [pc, #272]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x138>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d002      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001aa2:	4b43      	ldr	r3, [pc, #268]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001aa4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001aa6:	e07c      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001aa8:	4b42      	ldr	r3, [pc, #264]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001aaa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001aac:	e079      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aae:	4b42      	ldr	r3, [pc, #264]	@ (8001bb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ab0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ab2:	e076      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab6:	0c9a      	lsrs	r2, r3, #18
 8001ab8:	230f      	movs	r3, #15
 8001aba:	401a      	ands	r2, r3
 8001abc:	4b3f      	ldr	r3, [pc, #252]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x148>)
 8001abe:	5c9b      	ldrb	r3, [r3, r2]
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac4:	0d9a      	lsrs	r2, r3, #22
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	4013      	ands	r3, r2
 8001aca:	3301      	adds	r3, #1
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ace:	4b37      	ldr	r3, [pc, #220]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x138>)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	2380      	movs	r3, #128	@ 0x80
 8001ad4:	025b      	lsls	r3, r3, #9
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d01a      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	4a35      	ldr	r2, [pc, #212]	@ (8001bb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	69b8      	ldr	r0, [r7, #24]
 8001ae8:	69f9      	ldr	r1, [r7, #28]
 8001aea:	f7fe fbb9 	bl	8000260 <__aeabi_lmul>
 8001aee:	0002      	movs	r2, r0
 8001af0:	000b      	movs	r3, r1
 8001af2:	0010      	movs	r0, r2
 8001af4:	0019      	movs	r1, r3
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f7fe fb8d 	bl	8000220 <__aeabi_uldivmod>
 8001b06:	0002      	movs	r2, r0
 8001b08:	000b      	movs	r3, r1
 8001b0a:	0013      	movs	r3, r2
 8001b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b0e:	e037      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b10:	4b26      	ldr	r3, [pc, #152]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x138>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2210      	movs	r2, #16
 8001b16:	4013      	ands	r3, r2
 8001b18:	d01a      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4a23      	ldr	r2, [pc, #140]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b24:	2300      	movs	r3, #0
 8001b26:	68b8      	ldr	r0, [r7, #8]
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	f7fe fb99 	bl	8000260 <__aeabi_lmul>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	000b      	movs	r3, r1
 8001b32:	0010      	movs	r0, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f7fe fb6d 	bl	8000220 <__aeabi_uldivmod>
 8001b46:	0002      	movs	r2, r0
 8001b48:	000b      	movs	r3, r1
 8001b4a:	0013      	movs	r3, r2
 8001b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b4e:	e017      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b52:	0018      	movs	r0, r3
 8001b54:	2300      	movs	r3, #0
 8001b56:	0019      	movs	r1, r3
 8001b58:	4a16      	ldr	r2, [pc, #88]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f7fe fb80 	bl	8000260 <__aeabi_lmul>
 8001b60:	0002      	movs	r2, r0
 8001b62:	000b      	movs	r3, r1
 8001b64:	0010      	movs	r0, r2
 8001b66:	0019      	movs	r1, r3
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	001c      	movs	r4, r3
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	001d      	movs	r5, r3
 8001b70:	0022      	movs	r2, r4
 8001b72:	002b      	movs	r3, r5
 8001b74:	f7fe fb54 	bl	8000220 <__aeabi_uldivmod>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	000b      	movs	r3, r1
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001b84:	e00d      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x138>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	0b5b      	lsrs	r3, r3, #13
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	4013      	ands	r3, r2
 8001b90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	3301      	adds	r3, #1
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	0212      	lsls	r2, r2, #8
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ba0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b00e      	add	sp, #56	@ 0x38
 8001baa:	bdb0      	pop	{r4, r5, r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	003d0900 	.word	0x003d0900
 8001bb4:	00f42400 	.word	0x00f42400
 8001bb8:	007a1200 	.word	0x007a1200
 8001bbc:	08002890 	.word	0x08002890

08001bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e07b      	b.n	8001cca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	2382      	movs	r3, #130	@ 0x82
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d009      	beq.n	8001bfa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
 8001bec:	e005      	b.n	8001bfa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2251      	movs	r2, #81	@ 0x51
 8001c04:	5c9b      	ldrb	r3, [r3, r2]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d107      	bne.n	8001c1c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2250      	movs	r2, #80	@ 0x50
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7fe ff08 	bl	8000a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2251      	movs	r2, #81	@ 0x51
 8001c20:	2102      	movs	r1, #2
 8001c22:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2140      	movs	r1, #64	@ 0x40
 8001c30:	438a      	bics	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	2382      	movs	r3, #130	@ 0x82
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6899      	ldr	r1, [r3, #8]
 8001c42:	2384      	movs	r3, #132	@ 0x84
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	400b      	ands	r3, r1
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68d9      	ldr	r1, [r3, #12]
 8001c4e:	2380      	movs	r3, #128	@ 0x80
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	400b      	ands	r3, r1
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	400b      	ands	r3, r1
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	2101      	movs	r1, #1
 8001c66:	400b      	ands	r3, r1
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6999      	ldr	r1, [r3, #24]
 8001c6e:	2380      	movs	r3, #128	@ 0x80
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	400b      	ands	r3, r1
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	2138      	movs	r1, #56	@ 0x38
 8001c7c:	400b      	ands	r3, r1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	2180      	movs	r1, #128	@ 0x80
 8001c86:	400b      	ands	r3, r1
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	0011      	movs	r1, r2
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c90:	2380      	movs	r3, #128	@ 0x80
 8001c92:	019b      	lsls	r3, r3, #6
 8001c94:	401a      	ands	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	0c1b      	lsrs	r3, r3, #16
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	0019      	movs	r1, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	2210      	movs	r2, #16
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2251      	movs	r2, #81	@ 0x51
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b088      	sub	sp, #32
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	1dbb      	adds	r3, r7, #6
 8001ce0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ce2:	231f      	movs	r3, #31
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2250      	movs	r2, #80	@ 0x50
 8001cee:	5c9b      	ldrb	r3, [r3, r2]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_SPI_Transmit+0x26>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e145      	b.n	8001f84 <HAL_SPI_Transmit+0x2b2>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2250      	movs	r2, #80	@ 0x50
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d00:	f7fe ff86 	bl	8000c10 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d08:	2316      	movs	r3, #22
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	1dba      	adds	r2, r7, #6
 8001d0e:	8812      	ldrh	r2, [r2, #0]
 8001d10:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2251      	movs	r2, #81	@ 0x51
 8001d16:	5c9b      	ldrb	r3, [r3, r2]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d004      	beq.n	8001d28 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001d1e:	231f      	movs	r3, #31
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	2202      	movs	r2, #2
 8001d24:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d26:	e126      	b.n	8001f76 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_SPI_Transmit+0x64>
 8001d2e:	1dbb      	adds	r3, r7, #6
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d104      	bne.n	8001d40 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001d36:	231f      	movs	r3, #31
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d3e:	e11a      	b.n	8001f76 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2251      	movs	r2, #81	@ 0x51
 8001d44:	2103      	movs	r1, #3
 8001d46:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1dba      	adds	r2, r7, #6
 8001d58:	8812      	ldrh	r2, [r2, #0]
 8001d5a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1dba      	adds	r2, r7, #6
 8001d60:	8812      	ldrh	r2, [r2, #0]
 8001d62:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	2380      	movs	r3, #128	@ 0x80
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d110      	bne.n	8001db0 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2140      	movs	r1, #64	@ 0x40
 8001d9a:	438a      	bics	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2180      	movs	r1, #128	@ 0x80
 8001daa:	01c9      	lsls	r1, r1, #7
 8001dac:	430a      	orrs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2240      	movs	r2, #64	@ 0x40
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b40      	cmp	r3, #64	@ 0x40
 8001dbc:	d007      	beq.n	8001dce <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2140      	movs	r1, #64	@ 0x40
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d152      	bne.n	8001e80 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <HAL_SPI_Transmit+0x11a>
 8001de2:	2316      	movs	r3, #22
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d143      	bne.n	8001e74 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df0:	881a      	ldrh	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfc:	1c9a      	adds	r2, r3, #2
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e10:	e030      	b.n	8001e74 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d112      	bne.n	8001e46 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e24:	881a      	ldrh	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	1c9a      	adds	r2, r3, #2
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e44:	e016      	b.n	8001e74 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e46:	f7fe fee3 	bl	8000c10 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d802      	bhi.n	8001e5c <HAL_SPI_Transmit+0x18a>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	d102      	bne.n	8001e62 <HAL_SPI_Transmit+0x190>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d108      	bne.n	8001e74 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8001e62:	231f      	movs	r3, #31
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2203      	movs	r2, #3
 8001e68:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2251      	movs	r2, #81	@ 0x51
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]
          goto error;
 8001e72:	e080      	b.n	8001f76 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1c9      	bne.n	8001e12 <HAL_SPI_Transmit+0x140>
 8001e7e:	e053      	b.n	8001f28 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d004      	beq.n	8001e92 <HAL_SPI_Transmit+0x1c0>
 8001e88:	2316      	movs	r3, #22
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d145      	bne.n	8001f1e <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	330c      	adds	r3, #12
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001eb8:	e031      	b.n	8001f1e <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d113      	bne.n	8001ef0 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	330c      	adds	r3, #12
 8001ed2:	7812      	ldrb	r2, [r2, #0]
 8001ed4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001eee:	e016      	b.n	8001f1e <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ef0:	f7fe fe8e 	bl	8000c10 <HAL_GetTick>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d802      	bhi.n	8001f06 <HAL_SPI_Transmit+0x234>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	3301      	adds	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_SPI_Transmit+0x23a>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d108      	bne.n	8001f1e <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8001f0c:	231f      	movs	r3, #31
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2203      	movs	r2, #3
 8001f12:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2251      	movs	r2, #81	@ 0x51
 8001f18:	2101      	movs	r1, #1
 8001f1a:	5499      	strb	r1, [r3, r2]
          goto error;
 8001f1c:	e02b      	b.n	8001f76 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1c8      	bne.n	8001eba <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f000 fc1e 	bl	8002770 <SPI_EndRxTxTransaction>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10a      	bne.n	8001f5c <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8001f64:	231f      	movs	r3, #31
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e003      	b.n	8001f76 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2251      	movs	r2, #81	@ 0x51
 8001f72:	2101      	movs	r1, #1
 8001f74:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2250      	movs	r2, #80	@ 0x50
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001f7e:	231f      	movs	r3, #31
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	781b      	ldrb	r3, [r3, #0]
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b008      	add	sp, #32
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	1dbb      	adds	r3, r7, #6
 8001f9a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f9c:	2117      	movs	r1, #23
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2251      	movs	r2, #81	@ 0x51
 8001fa8:	5c9b      	ldrb	r3, [r3, r2]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d003      	beq.n	8001fb8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fb6:	e109      	b.n	80021cc <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	2382      	movs	r3, #130	@ 0x82
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d113      	bne.n	8001fec <HAL_SPI_Receive+0x60>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10f      	bne.n	8001fec <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2251      	movs	r2, #81	@ 0x51
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001fd4:	1dbb      	adds	r3, r7, #6
 8001fd6:	881c      	ldrh	r4, [r3, #0]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	68b9      	ldr	r1, [r7, #8]
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	0023      	movs	r3, r4
 8001fe4:	f000 f900 	bl	80021e8 <HAL_SPI_TransmitReceive>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	e0f6      	b.n	80021da <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2250      	movs	r2, #80	@ 0x50
 8001ff0:	5c9b      	ldrb	r3, [r3, r2]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_SPI_Receive+0x6e>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e0ef      	b.n	80021da <HAL_SPI_Receive+0x24e>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2250      	movs	r2, #80	@ 0x50
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002002:	f7fe fe05 	bl	8000c10 <HAL_GetTick>
 8002006:	0003      	movs	r3, r0
 8002008:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_SPI_Receive+0x8c>
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d104      	bne.n	8002022 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002018:	2317      	movs	r3, #23
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002020:	e0d4      	b.n	80021cc <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2251      	movs	r2, #81	@ 0x51
 8002026:	2104      	movs	r1, #4
 8002028:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1dba      	adds	r2, r7, #6
 800203a:	8812      	ldrh	r2, [r2, #0]
 800203c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1dba      	adds	r2, r7, #6
 8002042:	8812      	ldrh	r2, [r2, #0]
 8002044:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	429a      	cmp	r2, r3
 800206e:	d10f      	bne.n	8002090 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2140      	movs	r1, #64	@ 0x40
 800207c:	438a      	bics	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4956      	ldr	r1, [pc, #344]	@ (80021e4 <HAL_SPI_Receive+0x258>)
 800208c:	400a      	ands	r2, r1
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2240      	movs	r2, #64	@ 0x40
 8002098:	4013      	ands	r3, r2
 800209a:	2b40      	cmp	r3, #64	@ 0x40
 800209c:	d007      	beq.n	80020ae <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2140      	movs	r1, #64	@ 0x40
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d000      	beq.n	80020b8 <HAL_SPI_Receive+0x12c>
 80020b6:	e06c      	b.n	8002192 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020b8:	e033      	b.n	8002122 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2201      	movs	r2, #1
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d115      	bne.n	80020f4 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	330c      	adds	r3, #12
 80020ce:	001a      	movs	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d4:	7812      	ldrb	r2, [r2, #0]
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80020f2:	e016      	b.n	8002122 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020f4:	f7fe fd8c 	bl	8000c10 <HAL_GetTick>
 80020f8:	0002      	movs	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d802      	bhi.n	800210a <HAL_SPI_Receive+0x17e>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	d102      	bne.n	8002110 <HAL_SPI_Receive+0x184>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d108      	bne.n	8002122 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8002110:	2317      	movs	r3, #23
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	2203      	movs	r2, #3
 8002116:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2251      	movs	r2, #81	@ 0x51
 800211c:	2101      	movs	r1, #1
 800211e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002120:	e054      	b.n	80021cc <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002126:	b29b      	uxth	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1c6      	bne.n	80020ba <HAL_SPI_Receive+0x12e>
 800212c:	e036      	b.n	800219c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2201      	movs	r2, #1
 8002136:	4013      	ands	r3, r2
 8002138:	2b01      	cmp	r3, #1
 800213a:	d113      	bne.n	8002164 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002146:	b292      	uxth	r2, r2
 8002148:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214e:	1c9a      	adds	r2, r3, #2
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002162:	e016      	b.n	8002192 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002164:	f7fe fd54 	bl	8000c10 <HAL_GetTick>
 8002168:	0002      	movs	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d802      	bhi.n	800217a <HAL_SPI_Receive+0x1ee>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	3301      	adds	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_SPI_Receive+0x1f4>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d108      	bne.n	8002192 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8002180:	2317      	movs	r3, #23
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	2203      	movs	r2, #3
 8002186:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2251      	movs	r2, #81	@ 0x51
 800218c:	2101      	movs	r1, #1
 800218e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002190:	e01c      	b.n	80021cc <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1c8      	bne.n	800212e <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	6839      	ldr	r1, [r7, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 fa7a 	bl	800269c <SPI_EndRxTransaction>
 80021a8:	1e03      	subs	r3, r0, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d004      	beq.n	80021c4 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 80021ba:	2317      	movs	r3, #23
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e003      	b.n	80021cc <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2251      	movs	r2, #81	@ 0x51
 80021c8:	2101      	movs	r1, #1
 80021ca:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2250      	movs	r2, #80	@ 0x50
 80021d0:	2100      	movs	r1, #0
 80021d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80021d4:	2317      	movs	r3, #23
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	781b      	ldrb	r3, [r3, #0]
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b007      	add	sp, #28
 80021e0:	bd90      	pop	{r4, r7, pc}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	ffffbfff 	.word	0xffffbfff

080021e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	@ 0x30
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	001a      	movs	r2, r3
 80021f6:	1cbb      	adds	r3, r7, #2
 80021f8:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021fa:	2301      	movs	r3, #1
 80021fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021fe:	232b      	movs	r3, #43	@ 0x2b
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2250      	movs	r2, #80	@ 0x50
 800220a:	5c9b      	ldrb	r3, [r3, r2]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x2c>
 8002210:	2302      	movs	r3, #2
 8002212:	e1b0      	b.n	8002576 <HAL_SPI_TransmitReceive+0x38e>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2250      	movs	r2, #80	@ 0x50
 8002218:	2101      	movs	r1, #1
 800221a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800221c:	f7fe fcf8 	bl	8000c10 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002224:	2023      	movs	r0, #35	@ 0x23
 8002226:	183b      	adds	r3, r7, r0
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	2151      	movs	r1, #81	@ 0x51
 800222c:	5c52      	ldrb	r2, [r2, r1]
 800222e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002236:	231a      	movs	r3, #26
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	1cba      	adds	r2, r7, #2
 800223c:	8812      	ldrh	r2, [r2, #0]
 800223e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002240:	183b      	adds	r3, r7, r0
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d011      	beq.n	800226c <HAL_SPI_TransmitReceive+0x84>
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	2382      	movs	r3, #130	@ 0x82
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	429a      	cmp	r2, r3
 8002250:	d107      	bne.n	8002262 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d103      	bne.n	8002262 <HAL_SPI_TransmitReceive+0x7a>
 800225a:	183b      	adds	r3, r7, r0
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b04      	cmp	r3, #4
 8002260:	d004      	beq.n	800226c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002262:	232b      	movs	r3, #43	@ 0x2b
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
    goto error;
 800226a:	e17d      	b.n	8002568 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_SPI_TransmitReceive+0x98>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_SPI_TransmitReceive+0x98>
 8002278:	1cbb      	adds	r3, r7, #2
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d104      	bne.n	800228a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002280:	232b      	movs	r3, #43	@ 0x2b
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
    goto error;
 8002288:	e16e      	b.n	8002568 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2251      	movs	r2, #81	@ 0x51
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b04      	cmp	r3, #4
 8002294:	d003      	beq.n	800229e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2251      	movs	r2, #81	@ 0x51
 800229a:	2105      	movs	r1, #5
 800229c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1cba      	adds	r2, r7, #2
 80022ae:	8812      	ldrh	r2, [r2, #0]
 80022b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1cba      	adds	r2, r7, #2
 80022b6:	8812      	ldrh	r2, [r2, #0]
 80022b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1cba      	adds	r2, r7, #2
 80022c4:	8812      	ldrh	r2, [r2, #0]
 80022c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1cba      	adds	r2, r7, #2
 80022cc:	8812      	ldrh	r2, [r2, #0]
 80022ce:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2240      	movs	r2, #64	@ 0x40
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b40      	cmp	r3, #64	@ 0x40
 80022e8:	d007      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2140      	movs	r1, #64	@ 0x40
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	2380      	movs	r3, #128	@ 0x80
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	429a      	cmp	r2, r3
 8002304:	d000      	beq.n	8002308 <HAL_SPI_TransmitReceive+0x120>
 8002306:	e07f      	b.n	8002408 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_SPI_TransmitReceive+0x134>
 8002310:	231a      	movs	r3, #26
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d000      	beq.n	800231c <HAL_SPI_TransmitReceive+0x134>
 800231a:	e06a      	b.n	80023f2 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232c:	1c9a      	adds	r2, r3, #2
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002340:	e057      	b.n	80023f2 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2202      	movs	r2, #2
 800234a:	4013      	ands	r3, r2
 800234c:	2b02      	cmp	r3, #2
 800234e:	d11b      	bne.n	8002388 <HAL_SPI_TransmitReceive+0x1a0>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <HAL_SPI_TransmitReceive+0x1a0>
 800235a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d113      	bne.n	8002388 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	881a      	ldrh	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	1c9a      	adds	r2, r3, #2
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2201      	movs	r2, #1
 8002390:	4013      	ands	r3, r2
 8002392:	2b01      	cmp	r3, #1
 8002394:	d119      	bne.n	80023ca <HAL_SPI_TransmitReceive+0x1e2>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d014      	beq.n	80023ca <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023aa:	b292      	uxth	r2, r2
 80023ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b2:	1c9a      	adds	r2, r3, #2
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023c6:	2301      	movs	r3, #1
 80023c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023ca:	f7fe fc21 	bl	8000c10 <HAL_GetTick>
 80023ce:	0002      	movs	r2, r0
 80023d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d80b      	bhi.n	80023f2 <HAL_SPI_TransmitReceive+0x20a>
 80023da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023dc:	3301      	adds	r3, #1
 80023de:	d008      	beq.n	80023f2 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 80023e0:	232b      	movs	r3, #43	@ 0x2b
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2203      	movs	r2, #3
 80023e6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2251      	movs	r2, #81	@ 0x51
 80023ec:	2101      	movs	r1, #1
 80023ee:	5499      	strb	r1, [r3, r2]
        goto error;
 80023f0:	e0ba      	b.n	8002568 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1a2      	bne.n	8002342 <HAL_SPI_TransmitReceive+0x15a>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d19d      	bne.n	8002342 <HAL_SPI_TransmitReceive+0x15a>
 8002406:	e083      	b.n	8002510 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_SPI_TransmitReceive+0x234>
 8002410:	231a      	movs	r3, #26
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d000      	beq.n	800241c <HAL_SPI_TransmitReceive+0x234>
 800241a:	e06f      	b.n	80024fc <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	330c      	adds	r3, #12
 8002426:	7812      	ldrb	r2, [r2, #0]
 8002428:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002442:	e05b      	b.n	80024fc <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2202      	movs	r2, #2
 800244c:	4013      	ands	r3, r2
 800244e:	2b02      	cmp	r3, #2
 8002450:	d11c      	bne.n	800248c <HAL_SPI_TransmitReceive+0x2a4>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d017      	beq.n	800248c <HAL_SPI_TransmitReceive+0x2a4>
 800245c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245e:	2b01      	cmp	r3, #1
 8002460:	d114      	bne.n	800248c <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	330c      	adds	r3, #12
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2201      	movs	r2, #1
 8002494:	4013      	ands	r3, r2
 8002496:	2b01      	cmp	r3, #1
 8002498:	d119      	bne.n	80024ce <HAL_SPI_TransmitReceive+0x2e6>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d014      	beq.n	80024ce <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024ca:	2301      	movs	r3, #1
 80024cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024ce:	f7fe fb9f 	bl	8000c10 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024da:	429a      	cmp	r2, r3
 80024dc:	d802      	bhi.n	80024e4 <HAL_SPI_TransmitReceive+0x2fc>
 80024de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e0:	3301      	adds	r3, #1
 80024e2:	d102      	bne.n	80024ea <HAL_SPI_TransmitReceive+0x302>
 80024e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d108      	bne.n	80024fc <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 80024ea:	232b      	movs	r3, #43	@ 0x2b
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	2203      	movs	r2, #3
 80024f0:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2251      	movs	r2, #81	@ 0x51
 80024f6:	2101      	movs	r1, #1
 80024f8:	5499      	strb	r1, [r3, r2]
        goto error;
 80024fa:	e035      	b.n	8002568 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d19e      	bne.n	8002444 <HAL_SPI_TransmitReceive+0x25c>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d199      	bne.n	8002444 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002512:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	0018      	movs	r0, r3
 8002518:	f000 f92a 	bl	8002770 <SPI_EndRxTxTransaction>
 800251c:	1e03      	subs	r3, r0, #0
 800251e:	d007      	beq.n	8002530 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8002520:	232b      	movs	r3, #43	@ 0x2b
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800252e:	e01b      	b.n	8002568 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002552:	2b00      	cmp	r3, #0
 8002554:	d004      	beq.n	8002560 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8002556:	232b      	movs	r3, #43	@ 0x2b
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e003      	b.n	8002568 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2251      	movs	r2, #81	@ 0x51
 8002564:	2101      	movs	r1, #1
 8002566:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2250      	movs	r2, #80	@ 0x50
 800256c:	2100      	movs	r1, #0
 800256e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002570:	232b      	movs	r3, #43	@ 0x2b
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	781b      	ldrb	r3, [r3, #0]
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b00c      	add	sp, #48	@ 0x30
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	1dfb      	adds	r3, r7, #7
 800258e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002590:	f7fe fb3e 	bl	8000c10 <HAL_GetTick>
 8002594:	0002      	movs	r2, r0
 8002596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	18d3      	adds	r3, r2, r3
 800259e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025a0:	f7fe fb36 	bl	8000c10 <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002694 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	015b      	lsls	r3, r3, #5
 80025ae:	0d1b      	lsrs	r3, r3, #20
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	4353      	muls	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025b6:	e058      	b.n	800266a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	d055      	beq.n	800266a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025be:	f7fe fb27 	bl	8000c10 <HAL_GetTick>
 80025c2:	0002      	movs	r2, r0
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d902      	bls.n	80025d4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d142      	bne.n	800265a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	21e0      	movs	r1, #224	@ 0xe0
 80025e0:	438a      	bics	r2, r1
 80025e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	2382      	movs	r3, #130	@ 0x82
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d113      	bne.n	8002618 <SPI_WaitFlagStateUntilTimeout+0x98>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	2380      	movs	r3, #128	@ 0x80
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d005      	beq.n	8002608 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	2380      	movs	r3, #128	@ 0x80
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	429a      	cmp	r2, r3
 8002606:	d107      	bne.n	8002618 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2140      	movs	r1, #64	@ 0x40
 8002614:	438a      	bics	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800261c:	2380      	movs	r3, #128	@ 0x80
 800261e:	019b      	lsls	r3, r3, #6
 8002620:	429a      	cmp	r2, r3
 8002622:	d110      	bne.n	8002646 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	491a      	ldr	r1, [pc, #104]	@ (8002698 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002630:	400a      	ands	r2, r1
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2180      	movs	r1, #128	@ 0x80
 8002640:	0189      	lsls	r1, r1, #6
 8002642:	430a      	orrs	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2251      	movs	r2, #81	@ 0x51
 800264a:	2101      	movs	r1, #1
 800264c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2250      	movs	r2, #80	@ 0x50
 8002652:	2100      	movs	r1, #0
 8002654:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e017      	b.n	800268a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3b01      	subs	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	4013      	ands	r3, r2
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	425a      	negs	r2, r3
 800267a:	4153      	adcs	r3, r2
 800267c:	b2db      	uxtb	r3, r3
 800267e:	001a      	movs	r2, r3
 8002680:	1dfb      	adds	r3, r7, #7
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d197      	bne.n	80025b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b008      	add	sp, #32
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	20000000 	.word	0x20000000
 8002698:	ffffdfff 	.word	0xffffdfff

0800269c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	2382      	movs	r3, #130	@ 0x82
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d113      	bne.n	80026dc <SPI_EndRxTransaction+0x40>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	429a      	cmp	r2, r3
 80026be:	d005      	beq.n	80026cc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d107      	bne.n	80026dc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2140      	movs	r1, #64	@ 0x40
 80026d8:	438a      	bics	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	2382      	movs	r3, #130	@ 0x82
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d12b      	bne.n	8002740 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d012      	beq.n	800271a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	0013      	movs	r3, r2
 80026fe:	2200      	movs	r2, #0
 8002700:	2180      	movs	r1, #128	@ 0x80
 8002702:	f7ff ff3d 	bl	8002580 <SPI_WaitFlagStateUntilTimeout>
 8002706:	1e03      	subs	r3, r0, #0
 8002708:	d02d      	beq.n	8002766 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270e:	2220      	movs	r2, #32
 8002710:	431a      	orrs	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e026      	b.n	8002768 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	0013      	movs	r3, r2
 8002724:	2200      	movs	r2, #0
 8002726:	2101      	movs	r1, #1
 8002728:	f7ff ff2a 	bl	8002580 <SPI_WaitFlagStateUntilTimeout>
 800272c:	1e03      	subs	r3, r0, #0
 800272e:	d01a      	beq.n	8002766 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002734:	2220      	movs	r2, #32
 8002736:	431a      	orrs	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e013      	b.n	8002768 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	0013      	movs	r3, r2
 800274a:	2200      	movs	r2, #0
 800274c:	2101      	movs	r1, #1
 800274e:	f7ff ff17 	bl	8002580 <SPI_WaitFlagStateUntilTimeout>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d007      	beq.n	8002766 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275a:	2220      	movs	r2, #32
 800275c:	431a      	orrs	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e000      	b.n	8002768 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b004      	add	sp, #16
 800276e:	bd80      	pop	{r7, pc}

08002770 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800277c:	4b1d      	ldr	r3, [pc, #116]	@ (80027f4 <SPI_EndRxTxTransaction+0x84>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	491d      	ldr	r1, [pc, #116]	@ (80027f8 <SPI_EndRxTxTransaction+0x88>)
 8002782:	0018      	movs	r0, r3
 8002784:	f7fd fcc0 	bl	8000108 <__udivsi3>
 8002788:	0003      	movs	r3, r0
 800278a:	001a      	movs	r2, r3
 800278c:	0013      	movs	r3, r2
 800278e:	015b      	lsls	r3, r3, #5
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	189b      	adds	r3, r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	2382      	movs	r3, #130	@ 0x82
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d112      	bne.n	80027cc <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	0013      	movs	r3, r2
 80027b0:	2200      	movs	r2, #0
 80027b2:	2180      	movs	r1, #128	@ 0x80
 80027b4:	f7ff fee4 	bl	8002580 <SPI_WaitFlagStateUntilTimeout>
 80027b8:	1e03      	subs	r3, r0, #0
 80027ba:	d016      	beq.n	80027ea <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	2220      	movs	r2, #32
 80027c2:	431a      	orrs	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e00f      	b.n	80027ec <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2280      	movs	r2, #128	@ 0x80
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b80      	cmp	r3, #128	@ 0x80
 80027e4:	d0f2      	beq.n	80027cc <SPI_EndRxTxTransaction+0x5c>
 80027e6:	e000      	b.n	80027ea <SPI_EndRxTxTransaction+0x7a>
        break;
 80027e8:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b006      	add	sp, #24
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000000 	.word	0x20000000
 80027f8:	016e3600 	.word	0x016e3600

080027fc <memset>:
 80027fc:	0003      	movs	r3, r0
 80027fe:	1882      	adds	r2, r0, r2
 8002800:	4293      	cmp	r3, r2
 8002802:	d100      	bne.n	8002806 <memset+0xa>
 8002804:	4770      	bx	lr
 8002806:	7019      	strb	r1, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	e7f9      	b.n	8002800 <memset+0x4>

0800280c <__libc_init_array>:
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	2600      	movs	r6, #0
 8002810:	4c0c      	ldr	r4, [pc, #48]	@ (8002844 <__libc_init_array+0x38>)
 8002812:	4d0d      	ldr	r5, [pc, #52]	@ (8002848 <__libc_init_array+0x3c>)
 8002814:	1b64      	subs	r4, r4, r5
 8002816:	10a4      	asrs	r4, r4, #2
 8002818:	42a6      	cmp	r6, r4
 800281a:	d109      	bne.n	8002830 <__libc_init_array+0x24>
 800281c:	2600      	movs	r6, #0
 800281e:	f000 f823 	bl	8002868 <_init>
 8002822:	4c0a      	ldr	r4, [pc, #40]	@ (800284c <__libc_init_array+0x40>)
 8002824:	4d0a      	ldr	r5, [pc, #40]	@ (8002850 <__libc_init_array+0x44>)
 8002826:	1b64      	subs	r4, r4, r5
 8002828:	10a4      	asrs	r4, r4, #2
 800282a:	42a6      	cmp	r6, r4
 800282c:	d105      	bne.n	800283a <__libc_init_array+0x2e>
 800282e:	bd70      	pop	{r4, r5, r6, pc}
 8002830:	00b3      	lsls	r3, r6, #2
 8002832:	58eb      	ldr	r3, [r5, r3]
 8002834:	4798      	blx	r3
 8002836:	3601      	adds	r6, #1
 8002838:	e7ee      	b.n	8002818 <__libc_init_array+0xc>
 800283a:	00b3      	lsls	r3, r6, #2
 800283c:	58eb      	ldr	r3, [r5, r3]
 800283e:	4798      	blx	r3
 8002840:	3601      	adds	r6, #1
 8002842:	e7f2      	b.n	800282a <__libc_init_array+0x1e>
 8002844:	080028a4 	.word	0x080028a4
 8002848:	080028a4 	.word	0x080028a4
 800284c:	080028a8 	.word	0x080028a8
 8002850:	080028a4 	.word	0x080028a4

08002854 <memcpy>:
 8002854:	2300      	movs	r3, #0
 8002856:	b510      	push	{r4, lr}
 8002858:	429a      	cmp	r2, r3
 800285a:	d100      	bne.n	800285e <memcpy+0xa>
 800285c:	bd10      	pop	{r4, pc}
 800285e:	5ccc      	ldrb	r4, [r1, r3]
 8002860:	54c4      	strb	r4, [r0, r3]
 8002862:	3301      	adds	r3, #1
 8002864:	e7f8      	b.n	8002858 <memcpy+0x4>
	...

08002868 <_init>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr

08002874 <_fini>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287a:	bc08      	pop	{r3}
 800287c:	469e      	mov	lr, r3
 800287e:	4770      	bx	lr
