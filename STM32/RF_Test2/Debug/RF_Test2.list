
RF_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002808  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080028c8  080028c8  000038c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e4  080028e4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080028e4  080028e4  000038e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028ec  080028ec  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028ec  080028ec  000038ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028f0  080028f0  000038f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028f4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08002900  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002900  000040e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005472  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000141c  00000000  00000000  000094a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  0000a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000456  00000000  00000000  0000aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe16  00000000  00000000  0000b2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f0e  00000000  00000000  0001b10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ff07  00000000  00000000  0002201a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00081f21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001414  00000000  00000000  00081f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00083378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080028b0 	.word	0x080028b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080028b0 	.word	0x080028b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b097      	sub	sp, #92	@ 0x5c
 80004ac:	af14      	add	r7, sp, #80	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fb6d 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */
//#define TX
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f83d 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 f8c7 	bl	8000648 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004ba:	f000 f88d 	bl	80005d8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  nrf_reset();
 80004be:	f000 f9c7 	bl	8000850 <nrf_reset>
#ifdef TX
  nrf_init(hspi1, 1);
#else
  nrf_init(hspi1, 0);
 80004c2:	4c19      	ldr	r4, [pc, #100]	@ (8000528 <main+0x80>)
 80004c4:	2300      	movs	r3, #0
 80004c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80004c8:	466b      	mov	r3, sp
 80004ca:	0018      	movs	r0, r3
 80004cc:	0023      	movs	r3, r4
 80004ce:	3310      	adds	r3, #16
 80004d0:	2248      	movs	r2, #72	@ 0x48
 80004d2:	0019      	movs	r1, r3
 80004d4:	f002 f9e2 	bl	800289c <memcpy>
 80004d8:	6820      	ldr	r0, [r4, #0]
 80004da:	6861      	ldr	r1, [r4, #4]
 80004dc:	68a2      	ldr	r2, [r4, #8]
 80004de:	68e3      	ldr	r3, [r4, #12]
 80004e0:	f000 f942 	bl	8000768 <nrf_init>
	  HAL_Delay(500);
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
	  HAL_Delay(500);
#else
	  uint8_t payload;
	  status = nrf_rx(&payload);
 80004e4:	1dfc      	adds	r4, r7, #7
 80004e6:	1dbb      	adds	r3, r7, #6
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fa25 	bl	8000938 <nrf_rx>
 80004ee:	0003      	movs	r3, r0
 80004f0:	7023      	strb	r3, [r4, #0]
	  if(payload == 0b1011)
 80004f2:	1dbb      	adds	r3, r7, #6
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b0b      	cmp	r3, #11
 80004f8:	d105      	bne.n	8000506 <main+0x5e>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80004fa:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <main+0x84>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	2102      	movs	r1, #2
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fdf9 	bl	80010f8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000506:	23fa      	movs	r3, #250	@ 0xfa
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fbae 	bl	8000c6c <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <main+0x84>)
 8000512:	2200      	movs	r2, #0
 8000514:	2102      	movs	r1, #2
 8000516:	0018      	movs	r0, r3
 8000518:	f000 fdee 	bl	80010f8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800051c:	23fa      	movs	r3, #250	@ 0xfa
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fba3 	bl	8000c6c <HAL_Delay>
  {
 8000526:	e7dd      	b.n	80004e4 <main+0x3c>
 8000528:	20000028 	.word	0x20000028
 800052c:	50000400 	.word	0x50000400

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b093      	sub	sp, #76	@ 0x4c
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	2414      	movs	r4, #20
 8000538:	193b      	adds	r3, r7, r4
 800053a:	0018      	movs	r0, r3
 800053c:	2334      	movs	r3, #52	@ 0x34
 800053e:	001a      	movs	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f002 f97f 	bl	8002844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000546:	003b      	movs	r3, r7
 8000548:	0018      	movs	r0, r3
 800054a:	2314      	movs	r3, #20
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f002 f978 	bl	8002844 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <SystemClock_Config+0xa0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a1e      	ldr	r2, [pc, #120]	@ (80005d4 <SystemClock_Config+0xa4>)
 800055a:	401a      	ands	r2, r3
 800055c:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <SystemClock_Config+0xa0>)
 800055e:	2180      	movs	r1, #128	@ 0x80
 8000560:	0109      	lsls	r1, r1, #4
 8000562:	430a      	orrs	r2, r1
 8000564:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000566:	0021      	movs	r1, r4
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2210      	movs	r2, #16
 800056c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2201      	movs	r2, #1
 8000572:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	22a0      	movs	r2, #160	@ 0xa0
 800057e:	0212      	lsls	r2, r2, #8
 8000580:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	187b      	adds	r3, r7, r1
 800058a:	0018      	movs	r0, r3
 800058c:	f000 fdd2 	bl	8001134 <HAL_RCC_OscConfig>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000594:	f000 f8be 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	003b      	movs	r3, r7
 800059a:	220f      	movs	r2, #15
 800059c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800059e:	003b      	movs	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	003b      	movs	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	003b      	movs	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	003b      	movs	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b6:	003b      	movs	r3, r7
 80005b8:	2100      	movs	r1, #0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f001 f936 	bl	800182c <HAL_RCC_ClockConfig>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005c4:	f000 f8a6 	bl	8000714 <Error_Handler>
  }
}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b013      	add	sp, #76	@ 0x4c
 80005ce:	bd90      	pop	{r4, r7, pc}
 80005d0:	40007000 	.word	0x40007000
 80005d4:	ffffe7ff 	.word	0xffffe7ff

080005d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <MX_SPI1_Init+0x68>)
 80005de:	4a19      	ldr	r2, [pc, #100]	@ (8000644 <MX_SPI1_Init+0x6c>)
 80005e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005e2:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <MX_SPI1_Init+0x68>)
 80005e4:	2282      	movs	r2, #130	@ 0x82
 80005e6:	0052      	lsls	r2, r2, #1
 80005e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ea:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <MX_SPI1_Init+0x68>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f0:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <MX_SPI1_Init+0x68>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f6:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <MX_SPI1_Init+0x68>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fc:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <MX_SPI1_Init+0x68>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000602:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <MX_SPI1_Init+0x68>)
 8000604:	2280      	movs	r2, #128	@ 0x80
 8000606:	0092      	lsls	r2, r2, #2
 8000608:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <MX_SPI1_Init+0x68>)
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000610:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <MX_SPI1_Init+0x68>)
 8000612:	2200      	movs	r2, #0
 8000614:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_SPI1_Init+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800061c:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <MX_SPI1_Init+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000622:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <MX_SPI1_Init+0x68>)
 8000624:	2207      	movs	r2, #7
 8000626:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000628:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <MX_SPI1_Init+0x68>)
 800062a:	0018      	movs	r0, r3
 800062c:	f001 faec 	bl	8001c08 <HAL_SPI_Init>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000634:	f000 f86e 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	20000028 	.word	0x20000028
 8000644:	40013000 	.word	0x40013000

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b089      	sub	sp, #36	@ 0x24
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	240c      	movs	r4, #12
 8000650:	193b      	adds	r3, r7, r4
 8000652:	0018      	movs	r0, r3
 8000654:	2314      	movs	r3, #20
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f002 f8f3 	bl	8002844 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b2b      	ldr	r3, [pc, #172]	@ (800070c <MX_GPIO_Init+0xc4>)
 8000660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000662:	4b2a      	ldr	r3, [pc, #168]	@ (800070c <MX_GPIO_Init+0xc4>)
 8000664:	2101      	movs	r1, #1
 8000666:	430a      	orrs	r2, r1
 8000668:	62da      	str	r2, [r3, #44]	@ 0x2c
 800066a:	4b28      	ldr	r3, [pc, #160]	@ (800070c <MX_GPIO_Init+0xc4>)
 800066c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800066e:	2201      	movs	r2, #1
 8000670:	4013      	ands	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b25      	ldr	r3, [pc, #148]	@ (800070c <MX_GPIO_Init+0xc4>)
 8000678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800067a:	4b24      	ldr	r3, [pc, #144]	@ (800070c <MX_GPIO_Init+0xc4>)
 800067c:	2102      	movs	r1, #2
 800067e:	430a      	orrs	r2, r1
 8000680:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000682:	4b22      	ldr	r3, [pc, #136]	@ (800070c <MX_GPIO_Init+0xc4>)
 8000684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000686:	2202      	movs	r2, #2
 8000688:	4013      	ands	r3, r2
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 800068e:	23a0      	movs	r3, #160	@ 0xa0
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2201      	movs	r2, #1
 8000694:	2108      	movs	r1, #8
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fd2e 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800069c:	23a0      	movs	r3, #160	@ 0xa0
 800069e:	05db      	lsls	r3, r3, #23
 80006a0:	2200      	movs	r2, #0
 80006a2:	2110      	movs	r1, #16
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fd27 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006aa:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <MX_GPIO_Init+0xc8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	2102      	movs	r1, #2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fd21 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2218      	movs	r2, #24
 80006ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2201      	movs	r2, #1
 80006c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2202      	movs	r2, #2
 80006cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	193a      	adds	r2, r7, r4
 80006d0:	23a0      	movs	r3, #160	@ 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fba0 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006dc:	0021      	movs	r1, r4
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2202      	movs	r2, #2
 80006e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2201      	movs	r2, #1
 80006e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	4a05      	ldr	r2, [pc, #20]	@ (8000710 <MX_GPIO_Init+0xc8>)
 80006fa:	0019      	movs	r1, r3
 80006fc:	0010      	movs	r0, r2
 80006fe:	f000 fb8d 	bl	8000e1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b009      	add	sp, #36	@ 0x24
 8000708:	bd90      	pop	{r4, r7, pc}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	40021000 	.word	0x40021000
 8000710:	50000400 	.word	0x50000400

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	46c0      	nop			@ (mov r8, r8)
 800071e:	e7fd      	b.n	800071c <Error_Handler+0x8>

08000720 <setCS>:


SPI_HandleTypeDef bus;
bool isTX;

void setCS(bool state){
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	0002      	movs	r2, r0
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, state);
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	23a0      	movs	r3, #160	@ 0xa0
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	2108      	movs	r1, #8
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fcde 	bl	80010f8 <HAL_GPIO_WritePin>
}
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b002      	add	sp, #8
 8000742:	bd80      	pop	{r7, pc}

08000744 <setCE>:

void setCE(bool state){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	0002      	movs	r2, r0
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, state);
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	23a0      	movs	r3, #160	@ 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	2110      	movs	r1, #16
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fccc 	bl	80010f8 <HAL_GPIO_WritePin>
}
 8000760:	46c0      	nop			@ (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b002      	add	sp, #8
 8000766:	bd80      	pop	{r7, pc}

08000768 <nrf_init>:


void nrf_init(SPI_HandleTypeDef bus_, bool isTX_) {
 8000768:	b084      	sub	sp, #16
 800076a:	b5b0      	push	{r4, r5, r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	2518      	movs	r5, #24
 8000772:	197c      	adds	r4, r7, r5
 8000774:	6020      	str	r0, [r4, #0]
 8000776:	6061      	str	r1, [r4, #4]
 8000778:	60a2      	str	r2, [r4, #8]
 800077a:	60e3      	str	r3, [r4, #12]
	bus = bus_;
 800077c:	4a32      	ldr	r2, [pc, #200]	@ (8000848 <nrf_init+0xe0>)
 800077e:	002c      	movs	r4, r5
 8000780:	193b      	adds	r3, r7, r4
 8000782:	0010      	movs	r0, r2
 8000784:	0019      	movs	r1, r3
 8000786:	2358      	movs	r3, #88	@ 0x58
 8000788:	001a      	movs	r2, r3
 800078a:	f002 f887 	bl	800289c <memcpy>
	isTX = isTX_;
 800078e:	4b2f      	ldr	r3, [pc, #188]	@ (800084c <nrf_init+0xe4>)
 8000790:	2258      	movs	r2, #88	@ 0x58
 8000792:	1912      	adds	r2, r2, r4
 8000794:	19d2      	adds	r2, r2, r7
 8000796:	7812      	ldrb	r2, [r2, #0]
 8000798:	701a      	strb	r2, [r3, #0]
	nrf_reset();
 800079a:	f000 f859 	bl	8000850 <nrf_reset>

	//set FIFO depth to 1

	//set ptx, prx mode
	if(isTX){
 800079e:	4b2b      	ldr	r3, [pc, #172]	@ (800084c <nrf_init+0xe4>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d016      	beq.n	80007d4 <nrf_init+0x6c>
		write_register(NRF24L01P_REG_TX_ADDR, WIRELESS_ADDR);
 80007a6:	210b      	movs	r1, #11
 80007a8:	2010      	movs	r0, #16
 80007aa:	f000 f919 	bl	80009e0 <write_register>
		uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80007ae:	1dbc      	adds	r4, r7, #6
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 f8e9 	bl	8000988 <read_register>
 80007b6:	0003      	movs	r3, r0
 80007b8:	7023      	strb	r3, [r4, #0]
		new_config &= 0xFE;
 80007ba:	1dbb      	adds	r3, r7, #6
 80007bc:	1dba      	adds	r2, r7, #6
 80007be:	7812      	ldrb	r2, [r2, #0]
 80007c0:	2101      	movs	r1, #1
 80007c2:	438a      	bics	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
		write_register(NRF24L01P_REG_CONFIG, new_config);
 80007c6:	1dbb      	adds	r3, r7, #6
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0019      	movs	r1, r3
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 f907 	bl	80009e0 <write_register>
 80007d2:	e015      	b.n	8000800 <nrf_init+0x98>
	} else {
		write_register(NRF24L01P_REG_RX_ADDR_P0, WIRELESS_ADDR);
 80007d4:	210b      	movs	r1, #11
 80007d6:	200a      	movs	r0, #10
 80007d8:	f000 f902 	bl	80009e0 <write_register>
		uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80007dc:	1dfc      	adds	r4, r7, #7
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 f8d2 	bl	8000988 <read_register>
 80007e4:	0003      	movs	r3, r0
 80007e6:	7023      	strb	r3, [r4, #0]
		new_config |= 1 << 0;
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	1dfa      	adds	r2, r7, #7
 80007ec:	7812      	ldrb	r2, [r2, #0]
 80007ee:	2101      	movs	r1, #1
 80007f0:	430a      	orrs	r2, r1
 80007f2:	701a      	strb	r2, [r3, #0]
		write_register(NRF24L01P_REG_CONFIG, new_config);
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	0019      	movs	r1, r3
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 f8f0 	bl	80009e0 <write_register>
	}

	//power up
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000800:	1d7c      	adds	r4, r7, #5
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f8c0 	bl	8000988 <read_register>
 8000808:	0003      	movs	r3, r0
 800080a:	7023      	strb	r3, [r4, #0]
	new_config |= 1 << 1;
 800080c:	1d7b      	adds	r3, r7, #5
 800080e:	1d7a      	adds	r2, r7, #5
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	2102      	movs	r1, #2
 8000814:	430a      	orrs	r2, r1
 8000816:	701a      	strb	r2, [r3, #0]
	write_register(NRF24L01P_REG_CONFIG, new_config);
 8000818:	1d7b      	adds	r3, r7, #5
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	0019      	movs	r1, r3
 800081e:	2000      	movs	r0, #0
 8000820:	f000 f8de 	bl	80009e0 <write_register>

	//set RX pipe width
	write_register(NRF24L01P_REG_RX_PW_P0, PAYLOAD_LEN);
 8000824:	2108      	movs	r1, #8
 8000826:	2011      	movs	r0, #17
 8000828:	f000 f8da 	bl	80009e0 <write_register>
	//set RF channel
	write_register(NRF24L01P_REG_RF_CH, 15);
 800082c:	210f      	movs	r1, #15
 800082e:	2005      	movs	r0, #5
 8000830:	f000 f8d6 	bl	80009e0 <write_register>
	//default should work
	//set auto retransmit count
	//default should work
	//set retransmit delay
	//default should work
	setCE(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff ff85 	bl	8000744 <setCE>
}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bcb0      	pop	{r4, r5, r7}
 8000842:	bc08      	pop	{r3}
 8000844:	b004      	add	sp, #16
 8000846:	4718      	bx	r3
 8000848:	20000080 	.word	0x20000080
 800084c:	200000d8 	.word	0x200000d8

08000850 <nrf_reset>:

uint8_t nrf_reset() {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	setCS(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff ff63 	bl	8000720 <setCS>
	setCE(0);
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff ff72 	bl	8000744 <setCE>
	// Reset registers
	// Reset registers
	write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000860:	2108      	movs	r1, #8
 8000862:	2000      	movs	r0, #0
 8000864:	f000 f8bc 	bl	80009e0 <write_register>
	write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8000868:	213f      	movs	r1, #63	@ 0x3f
 800086a:	2001      	movs	r0, #1
 800086c:	f000 f8b8 	bl	80009e0 <write_register>
	write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000870:	2103      	movs	r1, #3
 8000872:	2002      	movs	r0, #2
 8000874:	f000 f8b4 	bl	80009e0 <write_register>
	write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8000878:	2103      	movs	r1, #3
 800087a:	2003      	movs	r0, #3
 800087c:	f000 f8b0 	bl	80009e0 <write_register>
	write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000880:	2103      	movs	r1, #3
 8000882:	2004      	movs	r0, #4
 8000884:	f000 f8ac 	bl	80009e0 <write_register>
	write_register(NRF24L01P_REG_RF_CH, 0x02);
 8000888:	2102      	movs	r1, #2
 800088a:	2005      	movs	r0, #5
 800088c:	f000 f8a8 	bl	80009e0 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000890:	2107      	movs	r1, #7
 8000892:	2006      	movs	r0, #6
 8000894:	f000 f8a4 	bl	80009e0 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8000898:	217e      	movs	r1, #126	@ 0x7e
 800089a:	2007      	movs	r0, #7
 800089c:	f000 f8a0 	bl	80009e0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80008a0:	2100      	movs	r1, #0
 80008a2:	2011      	movs	r0, #17
 80008a4:	f000 f89c 	bl	80009e0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80008a8:	2100      	movs	r1, #0
 80008aa:	2011      	movs	r0, #17
 80008ac:	f000 f898 	bl	80009e0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 80008b0:	2100      	movs	r1, #0
 80008b2:	2012      	movs	r0, #18
 80008b4:	f000 f894 	bl	80009e0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 80008b8:	2100      	movs	r1, #0
 80008ba:	2013      	movs	r0, #19
 80008bc:	f000 f890 	bl	80009e0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 80008c0:	2100      	movs	r1, #0
 80008c2:	2014      	movs	r0, #20
 80008c4:	f000 f88c 	bl	80009e0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 80008c8:	2100      	movs	r1, #0
 80008ca:	2015      	movs	r0, #21
 80008cc:	f000 f888 	bl	80009e0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 80008d0:	2100      	movs	r1, #0
 80008d2:	2016      	movs	r0, #22
 80008d4:	f000 f884 	bl	80009e0 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 80008d8:	2111      	movs	r1, #17
 80008da:	2017      	movs	r0, #23
 80008dc:	f000 f880 	bl	80009e0 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 80008e0:	2100      	movs	r1, #0
 80008e2:	201c      	movs	r0, #28
 80008e4:	f000 f87c 	bl	80009e0 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 80008e8:	2100      	movs	r1, #0
 80008ea:	201d      	movs	r0, #29
 80008ec:	f000 f878 	bl	80009e0 <write_register>
	return nrf_status();
 80008f0:	f000 f804 	bl	80008fc <nrf_status>
 80008f4:	0003      	movs	r3, r0
}
 80008f6:	0018      	movs	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <nrf_status>:

uint8_t nrf_status() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_NOP;
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	22ff      	movs	r2, #255	@ 0xff
 8000906:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	setCS(0);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff ff09 	bl	8000720 <setCS>
	HAL_SPI_TransmitReceive(&bus, &command, &status, 1, 2000);
 800090e:	1dba      	adds	r2, r7, #6
 8000910:	1df9      	adds	r1, r7, #7
 8000912:	4808      	ldr	r0, [pc, #32]	@ (8000934 <nrf_status+0x38>)
 8000914:	23fa      	movs	r3, #250	@ 0xfa
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2301      	movs	r3, #1
 800091c:	f001 fc88 	bl	8002230 <HAL_SPI_TransmitReceive>
	setCS(1);
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fefd 	bl	8000720 <setCS>
	return status;
 8000926:	1dbb      	adds	r3, r7, #6
 8000928:	781b      	ldrb	r3, [r3, #0]
}
 800092a:	0018      	movs	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	20000080 	.word	0x20000080

08000938 <nrf_rx>:
	HAL_SPI_Transmit(&bus, payload, PAYLOAD_LEN, 2000);
	setCS(1);
	return status;
}

uint8_t nrf_rx(uint8_t* payload){
 8000938:	b5b0      	push	{r4, r5, r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af02      	add	r7, sp, #8
 800093e:	6078      	str	r0, [r7, #4]
	//check RX FIFO
	uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8000940:	240f      	movs	r4, #15
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2261      	movs	r2, #97	@ 0x61
 8000946:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	setCS(0);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fee9 	bl	8000720 <setCS>
	HAL_SPI_TransmitReceive(&bus, &command, &status, 1, 2000);
 800094e:	250e      	movs	r5, #14
 8000950:	197a      	adds	r2, r7, r5
 8000952:	1939      	adds	r1, r7, r4
 8000954:	480b      	ldr	r0, [pc, #44]	@ (8000984 <nrf_rx+0x4c>)
 8000956:	23fa      	movs	r3, #250	@ 0xfa
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2301      	movs	r3, #1
 800095e:	f001 fc67 	bl	8002230 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&bus, payload, PAYLOAD_LEN, 2000);
 8000962:	23fa      	movs	r3, #250	@ 0xfa
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	4806      	ldr	r0, [pc, #24]	@ (8000984 <nrf_rx+0x4c>)
 800096a:	2208      	movs	r2, #8
 800096c:	f001 fb32 	bl	8001fd4 <HAL_SPI_Receive>
	setCS(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff fed5 	bl	8000720 <setCS>
	return status;
 8000976:	197b      	adds	r3, r7, r5
 8000978:	781b      	ldrb	r3, [r3, #0]
}
 800097a:	0018      	movs	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	b004      	add	sp, #16
 8000980:	bdb0      	pop	{r4, r5, r7, pc}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	20000080 	.word	0x20000080

08000988 <read_register>:

static uint8_t read_register(uint8_t reg) {
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b087      	sub	sp, #28
 800098c:	af02      	add	r7, sp, #8
 800098e:	0002      	movs	r2, r0
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	701a      	strb	r2, [r3, #0]
	uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8000994:	240f      	movs	r4, #15
 8000996:	193b      	adds	r3, r7, r4
 8000998:	1dfa      	adds	r2, r7, #7
 800099a:	7812      	ldrb	r2, [r2, #0]
 800099c:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t read_val;

	setCS(0);
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff febe 	bl	8000720 <setCS>
	HAL_SPI_TransmitReceive(&bus, &command, &status, 1, 2000);
 80009a4:	230e      	movs	r3, #14
 80009a6:	18fa      	adds	r2, r7, r3
 80009a8:	1939      	adds	r1, r7, r4
 80009aa:	480c      	ldr	r0, [pc, #48]	@ (80009dc <read_register+0x54>)
 80009ac:	23fa      	movs	r3, #250	@ 0xfa
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	f001 fc3c 	bl	8002230 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&bus, &read_val, 1, 2000);
 80009b8:	23fa      	movs	r3, #250	@ 0xfa
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	240d      	movs	r4, #13
 80009be:	1939      	adds	r1, r7, r4
 80009c0:	4806      	ldr	r0, [pc, #24]	@ (80009dc <read_register+0x54>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	f001 fb06 	bl	8001fd4 <HAL_SPI_Receive>
    setCS(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff fea9 	bl	8000720 <setCS>

	return read_val;
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	781b      	ldrb	r3, [r3, #0]
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b005      	add	sp, #20
 80009d8:	bd90      	pop	{r4, r7, pc}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	20000080 	.word	0x20000080

080009e0 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value) {
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	0002      	movs	r2, r0
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	701a      	strb	r2, [r3, #0]
 80009ec:	1dbb      	adds	r3, r7, #6
 80009ee:	1c0a      	adds	r2, r1, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2220      	movs	r2, #32
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	250f      	movs	r5, #15
 80009fe:	197b      	adds	r3, r7, r5
 8000a00:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t write_val = value;
 8000a02:	240d      	movs	r4, #13
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	1dba      	adds	r2, r7, #6
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	701a      	strb	r2, [r3, #0]

	setCS(0);
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff fe87 	bl	8000720 <setCS>
	HAL_SPI_TransmitReceive(&bus, &command, &status, 1, 2000);
 8000a12:	230e      	movs	r3, #14
 8000a14:	18fa      	adds	r2, r7, r3
 8000a16:	1979      	adds	r1, r7, r5
 8000a18:	480b      	ldr	r0, [pc, #44]	@ (8000a48 <write_register+0x68>)
 8000a1a:	23fa      	movs	r3, #250	@ 0xfa
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	f001 fc05 	bl	8002230 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&bus, &write_val, 1, 2000);
 8000a26:	23fa      	movs	r3, #250	@ 0xfa
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	1939      	adds	r1, r7, r4
 8000a2c:	4806      	ldr	r0, [pc, #24]	@ (8000a48 <write_register+0x68>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f001 f973 	bl	8001d1a <HAL_SPI_Transmit>
	setCS(1);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff fe73 	bl	8000720 <setCS>

	return write_val;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	781b      	ldrb	r3, [r3, #0]
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b004      	add	sp, #16
 8000a44:	bdb0      	pop	{r4, r5, r7, pc}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	20000080 	.word	0x20000080

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a50:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <HAL_MspInit+0x24>)
 8000a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_MspInit+0x24>)
 8000a56:	2101      	movs	r1, #1
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <HAL_MspInit+0x24>)
 8000a5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <HAL_MspInit+0x24>)
 8000a62:	2180      	movs	r1, #128	@ 0x80
 8000a64:	0549      	lsls	r1, r1, #21
 8000a66:	430a      	orrs	r2, r1
 8000a68:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b089      	sub	sp, #36	@ 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	240c      	movs	r4, #12
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	0018      	movs	r0, r3
 8000a82:	2314      	movs	r3, #20
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	f001 fedc 	bl	8002844 <memset>
  if(hspi->Instance==SPI1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a18      	ldr	r2, [pc, #96]	@ (8000af4 <HAL_SPI_MspInit+0x80>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d129      	bne.n	8000aea <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <HAL_SPI_MspInit+0x84>)
 8000a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <HAL_SPI_MspInit+0x84>)
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	0149      	lsls	r1, r1, #5
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <HAL_SPI_MspInit+0x84>)
 8000aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <HAL_SPI_MspInit+0x84>)
 8000aaa:	2101      	movs	r1, #1
 8000aac:	430a      	orrs	r2, r1
 8000aae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <HAL_SPI_MspInit+0x84>)
 8000ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000abc:	0021      	movs	r1, r4
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	22e0      	movs	r2, #224	@ 0xe0
 8000ac2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	187a      	adds	r2, r7, r1
 8000ade:	23a0      	movs	r3, #160	@ 0xa0
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 f999 	bl	8000e1c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b009      	add	sp, #36	@ 0x24
 8000af0:	bd90      	pop	{r4, r7, pc}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	40013000 	.word	0x40013000
 8000af8:	40021000 	.word	0x40021000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	e7fd      	b.n	8000b00 <NMI_Handler+0x4>

08000b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	e7fd      	b.n	8000b08 <HardFault_Handler+0x4>

08000b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 f886 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b38:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b3a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b3c:	f7ff fff7 	bl	8000b2e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopForever+0xe>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopForever+0x16>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b66:	f001 fe75 	bl	8002854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fc9d 	bl	80004a8 <main>

08000b6e <LoopForever>:

LoopForever:
    b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
   ldr   r0, =_estack
 8000b70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b7c:	080028f4 	.word	0x080028f4
  ldr r2, =_sbss
 8000b80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b84:	200000e0 	.word	0x200000e0

08000b88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_COMP_IRQHandler>
	...

08000b8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <HAL_Init+0x3c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <HAL_Init+0x3c>)
 8000b9e:	2140      	movs	r1, #64	@ 0x40
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f811 	bl	8000bcc <HAL_InitTick>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	e001      	b.n	8000bba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb6:	f7ff ff49 	bl	8000a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	40022000 	.word	0x40022000

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <HAL_InitTick+0x5c>)
 8000bd6:	681c      	ldr	r4, [r3, #0]
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <HAL_InitTick+0x60>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	0019      	movs	r1, r3
 8000bde:	23fa      	movs	r3, #250	@ 0xfa
 8000be0:	0098      	lsls	r0, r3, #2
 8000be2:	f7ff fa91 	bl	8000108 <__udivsi3>
 8000be6:	0003      	movs	r3, r0
 8000be8:	0019      	movs	r1, r3
 8000bea:	0020      	movs	r0, r4
 8000bec:	f7ff fa8c 	bl	8000108 <__udivsi3>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 f905 	bl	8000e02 <HAL_SYSTICK_Config>
 8000bf8:	1e03      	subs	r3, r0, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e00f      	b.n	8000c20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d80b      	bhi.n	8000c1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 f8e2 	bl	8000dd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_InitTick+0x64>)
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	0018      	movs	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b003      	add	sp, #12
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	18d2      	adds	r2, r2, r3
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c46:	601a      	str	r2, [r3, #0]
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	20000008 	.word	0x20000008
 8000c54:	200000dc 	.word	0x200000dc

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	@ (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	200000dc 	.word	0x200000dc

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff fff0 	bl	8000c58 <HAL_GetTick>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	189b      	adds	r3, r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	f7ff ffe0 	bl	8000c58 <HAL_GetTick>
 8000c98:	0002      	movs	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b004      	add	sp, #16
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	0002      	movs	r2, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cc8:	d828      	bhi.n	8000d1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cca:	4a2f      	ldr	r2, [pc, #188]	@ (8000d88 <__NVIC_SetPriority+0xd4>)
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	33c0      	adds	r3, #192	@ 0xc0
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	589b      	ldr	r3, [r3, r2]
 8000cda:	1dfa      	adds	r2, r7, #7
 8000cdc:	7812      	ldrb	r2, [r2, #0]
 8000cde:	0011      	movs	r1, r2
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	00d2      	lsls	r2, r2, #3
 8000ce6:	21ff      	movs	r1, #255	@ 0xff
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	43d2      	mvns	r2, r2
 8000cee:	401a      	ands	r2, r3
 8000cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	019b      	lsls	r3, r3, #6
 8000cf6:	22ff      	movs	r2, #255	@ 0xff
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2303      	movs	r3, #3
 8000d02:	4003      	ands	r3, r0
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d08:	481f      	ldr	r0, [pc, #124]	@ (8000d88 <__NVIC_SetPriority+0xd4>)
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b25b      	sxtb	r3, r3
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	430a      	orrs	r2, r1
 8000d14:	33c0      	adds	r3, #192	@ 0xc0
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d1a:	e031      	b.n	8000d80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d8c <__NVIC_SetPriority+0xd8>)
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	0019      	movs	r1, r3
 8000d24:	230f      	movs	r3, #15
 8000d26:	400b      	ands	r3, r1
 8000d28:	3b08      	subs	r3, #8
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3306      	adds	r3, #6
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	18d3      	adds	r3, r2, r3
 8000d32:	3304      	adds	r3, #4
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	1dfa      	adds	r2, r7, #7
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	400a      	ands	r2, r1
 8000d40:	00d2      	lsls	r2, r2, #3
 8000d42:	21ff      	movs	r1, #255	@ 0xff
 8000d44:	4091      	lsls	r1, r2
 8000d46:	000a      	movs	r2, r1
 8000d48:	43d2      	mvns	r2, r2
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	019b      	lsls	r3, r3, #6
 8000d52:	22ff      	movs	r2, #255	@ 0xff
 8000d54:	401a      	ands	r2, r3
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	4003      	ands	r3, r0
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d64:	4809      	ldr	r0, [pc, #36]	@ (8000d8c <__NVIC_SetPriority+0xd8>)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	4023      	ands	r3, r4
 8000d70:	3b08      	subs	r3, #8
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	430a      	orrs	r2, r1
 8000d76:	3306      	adds	r3, #6
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	18c3      	adds	r3, r0, r3
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b003      	add	sp, #12
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	1e5a      	subs	r2, r3, #1
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	045b      	lsls	r3, r3, #17
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d301      	bcc.n	8000da8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da4:	2301      	movs	r3, #1
 8000da6:	e010      	b.n	8000dca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da8:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <SysTick_Config+0x44>)
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	3a01      	subs	r2, #1
 8000dae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db0:	2301      	movs	r3, #1
 8000db2:	425b      	negs	r3, r3
 8000db4:	2103      	movs	r1, #3
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff ff7c 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <SysTick_Config+0x44>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <SysTick_Config+0x44>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	210f      	movs	r1, #15
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	1c02      	adds	r2, r0, #0
 8000de8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff ffbf 	bl	8000d90 <SysTick_Config>
 8000e12:	0003      	movs	r3, r0
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e32:	e149      	b.n	80010c8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	000a      	movs	r2, r1
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d100      	bne.n	8000e4c <HAL_GPIO_Init+0x30>
 8000e4a:	e13a      	b.n	80010c2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d005      	beq.n	8000e64 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d130      	bne.n	8000ec6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	409a      	lsls	r2, r3
 8000e72:	0013      	movs	r3, r2
 8000e74:	43da      	mvns	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	409a      	lsls	r2, r3
 8000e86:	0013      	movs	r3, r2
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2203      	movs	r2, #3
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d017      	beq.n	8000f02 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2203      	movs	r2, #3
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d123      	bne.n	8000f56 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	58d3      	ldr	r3, [r2, r3]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2207      	movs	r2, #7
 8000f20:	4013      	ands	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2107      	movs	r1, #7
 8000f3a:	400b      	ands	r3, r1
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	0092      	lsls	r2, r2, #2
 8000f52:	6939      	ldr	r1, [r7, #16]
 8000f54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2203      	movs	r2, #3
 8000f74:	401a      	ands	r2, r3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	23c0      	movs	r3, #192	@ 0xc0
 8000f90:	029b      	lsls	r3, r3, #10
 8000f92:	4013      	ands	r3, r2
 8000f94:	d100      	bne.n	8000f98 <HAL_GPIO_Init+0x17c>
 8000f96:	e094      	b.n	80010c2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	4b51      	ldr	r3, [pc, #324]	@ (80010e0 <HAL_GPIO_Init+0x2c4>)
 8000f9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f9c:	4b50      	ldr	r3, [pc, #320]	@ (80010e0 <HAL_GPIO_Init+0x2c4>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa4:	4a4f      	ldr	r2, [pc, #316]	@ (80010e4 <HAL_GPIO_Init+0x2c8>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	589b      	ldr	r3, [r3, r2]
 8000fb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	23a0      	movs	r3, #160	@ 0xa0
 8000fcc:	05db      	lsls	r3, r3, #23
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d013      	beq.n	8000ffa <HAL_GPIO_Init+0x1de>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a44      	ldr	r2, [pc, #272]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_GPIO_Init+0x1da>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a43      	ldr	r2, [pc, #268]	@ (80010ec <HAL_GPIO_Init+0x2d0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d007      	beq.n	8000ff2 <HAL_GPIO_Init+0x1d6>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a42      	ldr	r2, [pc, #264]	@ (80010f0 <HAL_GPIO_Init+0x2d4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_GPIO_Init+0x1d2>
 8000fea:	2305      	movs	r3, #5
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x1e0>
 8000fee:	2306      	movs	r3, #6
 8000ff0:	e004      	b.n	8000ffc <HAL_GPIO_Init+0x1e0>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e002      	b.n	8000ffc <HAL_GPIO_Init+0x1e0>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_Init+0x1e0>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	2103      	movs	r1, #3
 8001000:	400a      	ands	r2, r1
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	4093      	lsls	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800100c:	4935      	ldr	r1, [pc, #212]	@ (80010e4 <HAL_GPIO_Init+0x2c8>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101a:	4b36      	ldr	r3, [pc, #216]	@ (80010f4 <HAL_GPIO_Init+0x2d8>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43da      	mvns	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	2380      	movs	r3, #128	@ 0x80
 8001030:	035b      	lsls	r3, r3, #13
 8001032:	4013      	ands	r3, r2
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800103e:	4b2d      	ldr	r3, [pc, #180]	@ (80010f4 <HAL_GPIO_Init+0x2d8>)
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001044:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <HAL_GPIO_Init+0x2d8>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43da      	mvns	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	2380      	movs	r3, #128	@ 0x80
 800105a:	039b      	lsls	r3, r3, #14
 800105c:	4013      	ands	r3, r2
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001068:	4b22      	ldr	r3, [pc, #136]	@ (80010f4 <HAL_GPIO_Init+0x2d8>)
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <HAL_GPIO_Init+0x2d8>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43da      	mvns	r2, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	2380      	movs	r3, #128	@ 0x80
 8001084:	029b      	lsls	r3, r3, #10
 8001086:	4013      	ands	r3, r2
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <HAL_GPIO_Init+0x2d8>)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <HAL_GPIO_Init+0x2d8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43da      	mvns	r2, r3
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	2380      	movs	r3, #128	@ 0x80
 80010ae:	025b      	lsls	r3, r3, #9
 80010b0:	4013      	ands	r3, r2
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <HAL_GPIO_Init+0x2d8>)
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	1e13      	subs	r3, r2, #0
 80010d2:	d000      	beq.n	80010d6 <HAL_GPIO_Init+0x2ba>
 80010d4:	e6ae      	b.n	8000e34 <HAL_GPIO_Init+0x18>
  }
}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b006      	add	sp, #24
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	50000400 	.word	0x50000400
 80010ec:	50000800 	.word	0x50000800
 80010f0:	50001c00 	.word	0x50001c00
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	0008      	movs	r0, r1
 8001102:	0011      	movs	r1, r2
 8001104:	1cbb      	adds	r3, r7, #2
 8001106:	1c02      	adds	r2, r0, #0
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	1c7b      	adds	r3, r7, #1
 800110c:	1c0a      	adds	r2, r1, #0
 800110e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001110:	1c7b      	adds	r3, r7, #1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d004      	beq.n	8001122 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001118:	1cbb      	adds	r3, r7, #2
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001120:	e003      	b.n	800112a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001122:	1cbb      	adds	r3, r7, #2
 8001124:	881a      	ldrh	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001134:	b5b0      	push	{r4, r5, r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	f000 fb6c 	bl	8001820 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001148:	4bc8      	ldr	r3, [pc, #800]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	220c      	movs	r2, #12
 800114e:	4013      	ands	r3, r2
 8001150:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001152:	4bc6      	ldr	r3, [pc, #792]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	2380      	movs	r3, #128	@ 0x80
 8001158:	025b      	lsls	r3, r3, #9
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2201      	movs	r2, #1
 8001164:	4013      	ands	r3, r2
 8001166:	d100      	bne.n	800116a <HAL_RCC_OscConfig+0x36>
 8001168:	e07d      	b.n	8001266 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	2b08      	cmp	r3, #8
 800116e:	d007      	beq.n	8001180 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0c      	cmp	r3, #12
 8001174:	d112      	bne.n	800119c <HAL_RCC_OscConfig+0x68>
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	025b      	lsls	r3, r3, #9
 800117c:	429a      	cmp	r2, r3
 800117e:	d10d      	bne.n	800119c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001180:	4bba      	ldr	r3, [pc, #744]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	029b      	lsls	r3, r3, #10
 8001188:	4013      	ands	r3, r2
 800118a:	d100      	bne.n	800118e <HAL_RCC_OscConfig+0x5a>
 800118c:	e06a      	b.n	8001264 <HAL_RCC_OscConfig+0x130>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d166      	bne.n	8001264 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	f000 fb42 	bl	8001820 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	2380      	movs	r3, #128	@ 0x80
 80011a2:	025b      	lsls	r3, r3, #9
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d107      	bne.n	80011b8 <HAL_RCC_OscConfig+0x84>
 80011a8:	4bb0      	ldr	r3, [pc, #704]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4baf      	ldr	r3, [pc, #700]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80011ae:	2180      	movs	r1, #128	@ 0x80
 80011b0:	0249      	lsls	r1, r1, #9
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e027      	b.n	8001208 <HAL_RCC_OscConfig+0xd4>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	23a0      	movs	r3, #160	@ 0xa0
 80011be:	02db      	lsls	r3, r3, #11
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d10e      	bne.n	80011e2 <HAL_RCC_OscConfig+0xae>
 80011c4:	4ba9      	ldr	r3, [pc, #676]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4ba8      	ldr	r3, [pc, #672]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80011ca:	2180      	movs	r1, #128	@ 0x80
 80011cc:	02c9      	lsls	r1, r1, #11
 80011ce:	430a      	orrs	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	4ba6      	ldr	r3, [pc, #664]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4ba5      	ldr	r3, [pc, #660]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	0249      	lsls	r1, r1, #9
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e012      	b.n	8001208 <HAL_RCC_OscConfig+0xd4>
 80011e2:	4ba2      	ldr	r3, [pc, #648]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4ba1      	ldr	r3, [pc, #644]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80011e8:	49a1      	ldr	r1, [pc, #644]	@ (8001470 <HAL_RCC_OscConfig+0x33c>)
 80011ea:	400a      	ands	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	4b9f      	ldr	r3, [pc, #636]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	4013      	ands	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4b9b      	ldr	r3, [pc, #620]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b9a      	ldr	r3, [pc, #616]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001202:	499c      	ldr	r1, [pc, #624]	@ (8001474 <HAL_RCC_OscConfig+0x340>)
 8001204:	400a      	ands	r2, r1
 8001206:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d014      	beq.n	800123a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fd22 	bl	8000c58 <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121a:	f7ff fd1d 	bl	8000c58 <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b64      	cmp	r3, #100	@ 0x64
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e2f9      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800122c:	4b8f      	ldr	r3, [pc, #572]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	2380      	movs	r3, #128	@ 0x80
 8001232:	029b      	lsls	r3, r3, #10
 8001234:	4013      	ands	r3, r2
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0xe6>
 8001238:	e015      	b.n	8001266 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fd0d 	bl	8000c58 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fd08 	bl	8000c58 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	@ 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e2e4      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001256:	4b85      	ldr	r3, [pc, #532]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	2380      	movs	r3, #128	@ 0x80
 800125c:	029b      	lsls	r3, r3, #10
 800125e:	4013      	ands	r3, r2
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x110>
 8001262:	e000      	b.n	8001266 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d100      	bne.n	8001272 <HAL_RCC_OscConfig+0x13e>
 8001270:	e099      	b.n	80013a6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	2220      	movs	r2, #32
 800127c:	4013      	ands	r3, r2
 800127e:	d009      	beq.n	8001294 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001280:	4b7a      	ldr	r3, [pc, #488]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b79      	ldr	r3, [pc, #484]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001286:	2120      	movs	r1, #32
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800128c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128e:	2220      	movs	r2, #32
 8001290:	4393      	bics	r3, r2
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	2b04      	cmp	r3, #4
 8001298:	d005      	beq.n	80012a6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	2b0c      	cmp	r3, #12
 800129e:	d13e      	bne.n	800131e <HAL_RCC_OscConfig+0x1ea>
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d13b      	bne.n	800131e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80012a6:	4b71      	ldr	r3, [pc, #452]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2204      	movs	r2, #4
 80012ac:	4013      	ands	r3, r2
 80012ae:	d004      	beq.n	80012ba <HAL_RCC_OscConfig+0x186>
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e2b2      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	4b6c      	ldr	r3, [pc, #432]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4a6e      	ldr	r2, [pc, #440]	@ (8001478 <HAL_RCC_OscConfig+0x344>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	0019      	movs	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	021a      	lsls	r2, r3, #8
 80012ca:	4b68      	ldr	r3, [pc, #416]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80012cc:	430a      	orrs	r2, r1
 80012ce:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012d0:	4b66      	ldr	r3, [pc, #408]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2209      	movs	r2, #9
 80012d6:	4393      	bics	r3, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	4b64      	ldr	r3, [pc, #400]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80012dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012de:	430a      	orrs	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012e2:	f000 fbeb 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 80012e6:	0001      	movs	r1, r0
 80012e8:	4b60      	ldr	r3, [pc, #384]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	220f      	movs	r2, #15
 80012f0:	4013      	ands	r3, r2
 80012f2:	4a62      	ldr	r2, [pc, #392]	@ (800147c <HAL_RCC_OscConfig+0x348>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	000a      	movs	r2, r1
 80012f8:	40da      	lsrs	r2, r3
 80012fa:	4b61      	ldr	r3, [pc, #388]	@ (8001480 <HAL_RCC_OscConfig+0x34c>)
 80012fc:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80012fe:	4b61      	ldr	r3, [pc, #388]	@ (8001484 <HAL_RCC_OscConfig+0x350>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2513      	movs	r5, #19
 8001304:	197c      	adds	r4, r7, r5
 8001306:	0018      	movs	r0, r3
 8001308:	f7ff fc60 	bl	8000bcc <HAL_InitTick>
 800130c:	0003      	movs	r3, r0
 800130e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001310:	197b      	adds	r3, r7, r5
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d046      	beq.n	80013a6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001318:	197b      	adds	r3, r7, r5
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	e280      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800131e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001320:	2b00      	cmp	r3, #0
 8001322:	d027      	beq.n	8001374 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001324:	4b51      	ldr	r3, [pc, #324]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2209      	movs	r2, #9
 800132a:	4393      	bics	r3, r2
 800132c:	0019      	movs	r1, r3
 800132e:	4b4f      	ldr	r3, [pc, #316]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001332:	430a      	orrs	r2, r1
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fc8f 	bl	8000c58 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fc8a 	bl	8000c58 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e266      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001352:	4b46      	ldr	r3, [pc, #280]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2204      	movs	r2, #4
 8001358:	4013      	ands	r3, r2
 800135a:	d0f1      	beq.n	8001340 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b43      	ldr	r3, [pc, #268]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a45      	ldr	r2, [pc, #276]	@ (8001478 <HAL_RCC_OscConfig+0x344>)
 8001362:	4013      	ands	r3, r2
 8001364:	0019      	movs	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	021a      	lsls	r2, r3, #8
 800136c:	4b3f      	ldr	r3, [pc, #252]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	e018      	b.n	80013a6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001374:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b3c      	ldr	r3, [pc, #240]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 800137a:	2101      	movs	r1, #1
 800137c:	438a      	bics	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fc6a 	bl	8000c58 <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138a:	f7ff fc65 	bl	8000c58 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e241      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800139c:	4b33      	ldr	r3, [pc, #204]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2204      	movs	r2, #4
 80013a2:	4013      	ands	r3, r2
 80013a4:	d1f1      	bne.n	800138a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2210      	movs	r2, #16
 80013ac:	4013      	ands	r3, r2
 80013ae:	d100      	bne.n	80013b2 <HAL_RCC_OscConfig+0x27e>
 80013b0:	e0a1      	b.n	80014f6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d140      	bne.n	800143a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b8:	4b2c      	ldr	r3, [pc, #176]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_OscConfig+0x29c>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e227      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d0:	4b26      	ldr	r3, [pc, #152]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001488 <HAL_RCC_OscConfig+0x354>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	0019      	movs	r1, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1a      	ldr	r2, [r3, #32]
 80013de:	4b23      	ldr	r3, [pc, #140]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80013e0:	430a      	orrs	r2, r1
 80013e2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e4:	4b21      	ldr	r3, [pc, #132]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	0a19      	lsrs	r1, r3, #8
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	061a      	lsls	r2, r3, #24
 80013f2:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 80013f4:	430a      	orrs	r2, r1
 80013f6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	0b5b      	lsrs	r3, r3, #13
 80013fe:	3301      	adds	r3, #1
 8001400:	2280      	movs	r2, #128	@ 0x80
 8001402:	0212      	lsls	r2, r2, #8
 8001404:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001406:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	210f      	movs	r1, #15
 800140e:	400b      	ands	r3, r1
 8001410:	491a      	ldr	r1, [pc, #104]	@ (800147c <HAL_RCC_OscConfig+0x348>)
 8001412:	5ccb      	ldrb	r3, [r1, r3]
 8001414:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <HAL_RCC_OscConfig+0x34c>)
 8001418:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <HAL_RCC_OscConfig+0x350>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2513      	movs	r5, #19
 8001420:	197c      	adds	r4, r7, r5
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff fbd2 	bl	8000bcc <HAL_InitTick>
 8001428:	0003      	movs	r3, r0
 800142a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800142c:	197b      	adds	r3, r7, r5
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d060      	beq.n	80014f6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001434:	197b      	adds	r3, r7, r5
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	e1f2      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d03f      	beq.n	80014c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001442:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_RCC_OscConfig+0x338>)
 8001448:	2180      	movs	r1, #128	@ 0x80
 800144a:	0049      	lsls	r1, r1, #1
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fc02 	bl	8000c58 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001458:	e018      	b.n	800148c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800145a:	f7ff fbfd 	bl	8000c58 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d911      	bls.n	800148c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e1d9      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
 800146c:	40021000 	.word	0x40021000
 8001470:	fffeffff 	.word	0xfffeffff
 8001474:	fffbffff 	.word	0xfffbffff
 8001478:	ffffe0ff 	.word	0xffffe0ff
 800147c:	080028c8 	.word	0x080028c8
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004
 8001488:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800148c:	4bc9      	ldr	r3, [pc, #804]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4013      	ands	r3, r2
 8001496:	d0e0      	beq.n	800145a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001498:	4bc6      	ldr	r3, [pc, #792]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4ac6      	ldr	r2, [pc, #792]	@ (80017b8 <HAL_RCC_OscConfig+0x684>)
 800149e:	4013      	ands	r3, r2
 80014a0:	0019      	movs	r1, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1a      	ldr	r2, [r3, #32]
 80014a6:	4bc3      	ldr	r3, [pc, #780]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80014a8:	430a      	orrs	r2, r1
 80014aa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ac:	4bc1      	ldr	r3, [pc, #772]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	0a19      	lsrs	r1, r3, #8
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	061a      	lsls	r2, r3, #24
 80014ba:	4bbe      	ldr	r3, [pc, #760]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80014bc:	430a      	orrs	r2, r1
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	e019      	b.n	80014f6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014c2:	4bbc      	ldr	r3, [pc, #752]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4bbb      	ldr	r3, [pc, #748]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80014c8:	49bc      	ldr	r1, [pc, #752]	@ (80017bc <HAL_RCC_OscConfig+0x688>)
 80014ca:	400a      	ands	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fbc3 	bl	8000c58 <HAL_GetTick>
 80014d2:	0003      	movs	r3, r0
 80014d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014d8:	f7ff fbbe 	bl	8000c58 <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e19a      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014ea:	4bb2      	ldr	r3, [pc, #712]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	2380      	movs	r3, #128	@ 0x80
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4013      	ands	r3, r2
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2208      	movs	r2, #8
 80014fc:	4013      	ands	r3, r2
 80014fe:	d036      	beq.n	800156e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d019      	beq.n	800153c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001508:	4baa      	ldr	r3, [pc, #680]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800150a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800150c:	4ba9      	ldr	r3, [pc, #676]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800150e:	2101      	movs	r1, #1
 8001510:	430a      	orrs	r2, r1
 8001512:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001514:	f7ff fba0 	bl	8000c58 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fb9b 	bl	8000c58 <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e177      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001530:	4ba0      	ldr	r3, [pc, #640]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001534:	2202      	movs	r2, #2
 8001536:	4013      	ands	r3, r2
 8001538:	d0f1      	beq.n	800151e <HAL_RCC_OscConfig+0x3ea>
 800153a:	e018      	b.n	800156e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153c:	4b9d      	ldr	r3, [pc, #628]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800153e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001540:	4b9c      	ldr	r3, [pc, #624]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001542:	2101      	movs	r1, #1
 8001544:	438a      	bics	r2, r1
 8001546:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff fb86 	bl	8000c58 <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff fb81 	bl	8000c58 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e15d      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001564:	4b93      	ldr	r3, [pc, #588]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d1f1      	bne.n	8001552 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2204      	movs	r2, #4
 8001574:	4013      	ands	r3, r2
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x446>
 8001578:	e0ae      	b.n	80016d8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157a:	2023      	movs	r0, #35	@ 0x23
 800157c:	183b      	adds	r3, r7, r0
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b8c      	ldr	r3, [pc, #560]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001586:	2380      	movs	r3, #128	@ 0x80
 8001588:	055b      	lsls	r3, r3, #21
 800158a:	4013      	ands	r3, r2
 800158c:	d109      	bne.n	80015a2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b89      	ldr	r3, [pc, #548]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001592:	4b88      	ldr	r3, [pc, #544]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001594:	2180      	movs	r1, #128	@ 0x80
 8001596:	0549      	lsls	r1, r1, #21
 8001598:	430a      	orrs	r2, r1
 800159a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800159c:	183b      	adds	r3, r7, r0
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	4b87      	ldr	r3, [pc, #540]	@ (80017c0 <HAL_RCC_OscConfig+0x68c>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4013      	ands	r3, r2
 80015ac:	d11a      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	4b84      	ldr	r3, [pc, #528]	@ (80017c0 <HAL_RCC_OscConfig+0x68c>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b83      	ldr	r3, [pc, #524]	@ (80017c0 <HAL_RCC_OscConfig+0x68c>)
 80015b4:	2180      	movs	r1, #128	@ 0x80
 80015b6:	0049      	lsls	r1, r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015bc:	f7ff fb4c 	bl	8000c58 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c6:	f7ff fb47 	bl	8000c58 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b64      	cmp	r3, #100	@ 0x64
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e123      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b79      	ldr	r3, [pc, #484]	@ (80017c0 <HAL_RCC_OscConfig+0x68c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4013      	ands	r3, r2
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	2380      	movs	r3, #128	@ 0x80
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x4cc>
 80015f0:	4b70      	ldr	r3, [pc, #448]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80015f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015f4:	4b6f      	ldr	r3, [pc, #444]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80015f6:	2180      	movs	r1, #128	@ 0x80
 80015f8:	0049      	lsls	r1, r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80015fe:	e031      	b.n	8001664 <HAL_RCC_OscConfig+0x530>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10c      	bne.n	8001622 <HAL_RCC_OscConfig+0x4ee>
 8001608:	4b6a      	ldr	r3, [pc, #424]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800160a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800160c:	4b69      	ldr	r3, [pc, #420]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800160e:	496b      	ldr	r1, [pc, #428]	@ (80017bc <HAL_RCC_OscConfig+0x688>)
 8001610:	400a      	ands	r2, r1
 8001612:	651a      	str	r2, [r3, #80]	@ 0x50
 8001614:	4b67      	ldr	r3, [pc, #412]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001616:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001618:	4b66      	ldr	r3, [pc, #408]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800161a:	496a      	ldr	r1, [pc, #424]	@ (80017c4 <HAL_RCC_OscConfig+0x690>)
 800161c:	400a      	ands	r2, r1
 800161e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001620:	e020      	b.n	8001664 <HAL_RCC_OscConfig+0x530>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	23a0      	movs	r3, #160	@ 0xa0
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	429a      	cmp	r2, r3
 800162c:	d10e      	bne.n	800164c <HAL_RCC_OscConfig+0x518>
 800162e:	4b61      	ldr	r3, [pc, #388]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001630:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001632:	4b60      	ldr	r3, [pc, #384]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001634:	2180      	movs	r1, #128	@ 0x80
 8001636:	00c9      	lsls	r1, r1, #3
 8001638:	430a      	orrs	r2, r1
 800163a:	651a      	str	r2, [r3, #80]	@ 0x50
 800163c:	4b5d      	ldr	r3, [pc, #372]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800163e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001640:	4b5c      	ldr	r3, [pc, #368]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001642:	2180      	movs	r1, #128	@ 0x80
 8001644:	0049      	lsls	r1, r1, #1
 8001646:	430a      	orrs	r2, r1
 8001648:	651a      	str	r2, [r3, #80]	@ 0x50
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x530>
 800164c:	4b59      	ldr	r3, [pc, #356]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800164e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001650:	4b58      	ldr	r3, [pc, #352]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001652:	495a      	ldr	r1, [pc, #360]	@ (80017bc <HAL_RCC_OscConfig+0x688>)
 8001654:	400a      	ands	r2, r1
 8001656:	651a      	str	r2, [r3, #80]	@ 0x50
 8001658:	4b56      	ldr	r3, [pc, #344]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800165a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800165c:	4b55      	ldr	r3, [pc, #340]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800165e:	4959      	ldr	r1, [pc, #356]	@ (80017c4 <HAL_RCC_OscConfig+0x690>)
 8001660:	400a      	ands	r2, r1
 8001662:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d015      	beq.n	8001698 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7ff faf4 	bl	8000c58 <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001674:	e009      	b.n	800168a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff faef 	bl	8000c58 <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	4a51      	ldr	r2, [pc, #324]	@ (80017c8 <HAL_RCC_OscConfig+0x694>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e0ca      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800168a:	4b4a      	ldr	r3, [pc, #296]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800168c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800168e:	2380      	movs	r3, #128	@ 0x80
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d0ef      	beq.n	8001676 <HAL_RCC_OscConfig+0x542>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001698:	f7ff fade 	bl	8000c58 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016a0:	e009      	b.n	80016b6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fad9 	bl	8000c58 <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <HAL_RCC_OscConfig+0x694>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e0b4      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016b6:	4b3f      	ldr	r3, [pc, #252]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80016b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4013      	ands	r3, r2
 80016c0:	d1ef      	bne.n	80016a2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016c2:	2323      	movs	r3, #35	@ 0x23
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016cc:	4b39      	ldr	r3, [pc, #228]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80016ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016d0:	4b38      	ldr	r3, [pc, #224]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80016d2:	493e      	ldr	r1, [pc, #248]	@ (80017cc <HAL_RCC_OscConfig+0x698>)
 80016d4:	400a      	ands	r2, r1
 80016d6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d100      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5ae>
 80016e0:	e09d      	b.n	800181e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	d100      	bne.n	80016ea <HAL_RCC_OscConfig+0x5b6>
 80016e8:	e076      	b.n	80017d8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d145      	bne.n	800177e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b30      	ldr	r3, [pc, #192]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b2f      	ldr	r3, [pc, #188]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80016f8:	4935      	ldr	r1, [pc, #212]	@ (80017d0 <HAL_RCC_OscConfig+0x69c>)
 80016fa:	400a      	ands	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff faab 	bl	8000c58 <HAL_GetTick>
 8001702:	0003      	movs	r3, r0
 8001704:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff faa6 	bl	8000c58 <HAL_GetTick>
 800170c:	0002      	movs	r2, r0
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e082      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800171a:	4b26      	ldr	r3, [pc, #152]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	@ 0x80
 8001720:	049b      	lsls	r3, r3, #18
 8001722:	4013      	ands	r3, r2
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001726:	4b23      	ldr	r3, [pc, #140]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	4a2a      	ldr	r2, [pc, #168]	@ (80017d4 <HAL_RCC_OscConfig+0x6a0>)
 800172c:	4013      	ands	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	431a      	orrs	r2, r3
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001742:	430a      	orrs	r2, r1
 8001744:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001746:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 800174c:	2180      	movs	r1, #128	@ 0x80
 800174e:	0449      	lsls	r1, r1, #17
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fa80 	bl	8000c58 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff fa7b 	bl	8000c58 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e057      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001770:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	049b      	lsls	r3, r3, #18
 8001778:	4013      	ands	r3, r2
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x62a>
 800177c:	e04f      	b.n	800181e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177e:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 8001784:	4912      	ldr	r1, [pc, #72]	@ (80017d0 <HAL_RCC_OscConfig+0x69c>)
 8001786:	400a      	ands	r2, r1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fa65 	bl	8000c58 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff fa60 	bl	8000c58 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e03c      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017a6:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_RCC_OscConfig+0x680>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	049b      	lsls	r3, r3, #18
 80017ae:	4013      	ands	r3, r2
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x660>
 80017b2:	e034      	b.n	800181e <HAL_RCC_OscConfig+0x6ea>
 80017b4:	40021000 	.word	0x40021000
 80017b8:	ffff1fff 	.word	0xffff1fff
 80017bc:	fffffeff 	.word	0xfffffeff
 80017c0:	40007000 	.word	0x40007000
 80017c4:	fffffbff 	.word	0xfffffbff
 80017c8:	00001388 	.word	0x00001388
 80017cc:	efffffff 	.word	0xefffffff
 80017d0:	feffffff 	.word	0xfeffffff
 80017d4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01d      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HAL_RCC_OscConfig+0x6f4>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	025b      	lsls	r3, r3, #9
 80017f0:	401a      	ands	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d10f      	bne.n	800181a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	23f0      	movs	r3, #240	@ 0xf0
 80017fe:	039b      	lsls	r3, r3, #14
 8001800:	401a      	ands	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d107      	bne.n	800181a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	23c0      	movs	r3, #192	@ 0xc0
 800180e:	041b      	lsls	r3, r3, #16
 8001810:	401a      	ands	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	b00a      	add	sp, #40	@ 0x28
 8001826:	bdb0      	pop	{r4, r5, r7, pc}
 8001828:	40021000 	.word	0x40021000

0800182c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b5b0      	push	{r4, r5, r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e128      	b.n	8001a92 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b96      	ldr	r3, [pc, #600]	@ (8001a9c <HAL_RCC_ClockConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2201      	movs	r2, #1
 8001846:	4013      	ands	r3, r2
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d91e      	bls.n	800188c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b93      	ldr	r3, [pc, #588]	@ (8001a9c <HAL_RCC_ClockConfig+0x270>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2201      	movs	r2, #1
 8001854:	4393      	bics	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	4b90      	ldr	r3, [pc, #576]	@ (8001a9c <HAL_RCC_ClockConfig+0x270>)
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001860:	f7ff f9fa 	bl	8000c58 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001868:	e009      	b.n	800187e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186a:	f7ff f9f5 	bl	8000c58 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	4a8a      	ldr	r2, [pc, #552]	@ (8001aa0 <HAL_RCC_ClockConfig+0x274>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e109      	b.n	8001a92 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187e:	4b87      	ldr	r3, [pc, #540]	@ (8001a9c <HAL_RCC_ClockConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2201      	movs	r2, #1
 8001884:	4013      	ands	r3, r2
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d1ee      	bne.n	800186a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2202      	movs	r2, #2
 8001892:	4013      	ands	r3, r2
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001896:	4b83      	ldr	r3, [pc, #524]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	22f0      	movs	r2, #240	@ 0xf0
 800189c:	4393      	bics	r3, r2
 800189e:	0019      	movs	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 80018a6:	430a      	orrs	r2, r1
 80018a8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2201      	movs	r2, #1
 80018b0:	4013      	ands	r3, r2
 80018b2:	d100      	bne.n	80018b6 <HAL_RCC_ClockConfig+0x8a>
 80018b4:	e089      	b.n	80019ca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018be:	4b79      	ldr	r3, [pc, #484]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	2380      	movs	r3, #128	@ 0x80
 80018c4:	029b      	lsls	r3, r3, #10
 80018c6:	4013      	ands	r3, r2
 80018c8:	d120      	bne.n	800190c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0e1      	b.n	8001a92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018d6:	4b73      	ldr	r3, [pc, #460]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	2380      	movs	r3, #128	@ 0x80
 80018dc:	049b      	lsls	r3, r3, #18
 80018de:	4013      	ands	r3, r2
 80018e0:	d114      	bne.n	800190c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0d5      	b.n	8001a92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d106      	bne.n	80018fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018ee:	4b6d      	ldr	r3, [pc, #436]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2204      	movs	r2, #4
 80018f4:	4013      	ands	r3, r2
 80018f6:	d109      	bne.n	800190c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0ca      	b.n	8001a92 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018fc:	4b69      	ldr	r3, [pc, #420]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	@ 0x80
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4013      	ands	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0c2      	b.n	8001a92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190c:	4b65      	ldr	r3, [pc, #404]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2203      	movs	r2, #3
 8001912:	4393      	bics	r3, r2
 8001914:	0019      	movs	r1, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	4b62      	ldr	r3, [pc, #392]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 800191c:	430a      	orrs	r2, r1
 800191e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001920:	f7ff f99a 	bl	8000c58 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d111      	bne.n	8001954 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001930:	e009      	b.n	8001946 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001932:	f7ff f991 	bl	8000c58 <HAL_GetTick>
 8001936:	0002      	movs	r2, r0
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	4a58      	ldr	r2, [pc, #352]	@ (8001aa0 <HAL_RCC_ClockConfig+0x274>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e0a5      	b.n	8001a92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001946:	4b57      	ldr	r3, [pc, #348]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	220c      	movs	r2, #12
 800194c:	4013      	ands	r3, r2
 800194e:	2b08      	cmp	r3, #8
 8001950:	d1ef      	bne.n	8001932 <HAL_RCC_ClockConfig+0x106>
 8001952:	e03a      	b.n	80019ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d111      	bne.n	8001980 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195c:	e009      	b.n	8001972 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195e:	f7ff f97b 	bl	8000c58 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	4a4d      	ldr	r2, [pc, #308]	@ (8001aa0 <HAL_RCC_ClockConfig+0x274>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e08f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001972:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	220c      	movs	r2, #12
 8001978:	4013      	ands	r3, r2
 800197a:	2b0c      	cmp	r3, #12
 800197c:	d1ef      	bne.n	800195e <HAL_RCC_ClockConfig+0x132>
 800197e:	e024      	b.n	80019ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d11b      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001988:	e009      	b.n	800199e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198a:	f7ff f965 	bl	8000c58 <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	4a42      	ldr	r2, [pc, #264]	@ (8001aa0 <HAL_RCC_ClockConfig+0x274>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e079      	b.n	8001a92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800199e:	4b41      	ldr	r3, [pc, #260]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	220c      	movs	r2, #12
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d1ef      	bne.n	800198a <HAL_RCC_ClockConfig+0x15e>
 80019aa:	e00e      	b.n	80019ca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff f954 	bl	8000c58 <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	4a3a      	ldr	r2, [pc, #232]	@ (8001aa0 <HAL_RCC_ClockConfig+0x274>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e068      	b.n	8001a92 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80019c0:	4b38      	ldr	r3, [pc, #224]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	220c      	movs	r2, #12
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ca:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <HAL_RCC_ClockConfig+0x270>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d21e      	bcs.n	8001a16 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d8:	4b30      	ldr	r3, [pc, #192]	@ (8001a9c <HAL_RCC_ClockConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2201      	movs	r2, #1
 80019de:	4393      	bics	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a9c <HAL_RCC_ClockConfig+0x270>)
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019ea:	f7ff f935 	bl	8000c58 <HAL_GetTick>
 80019ee:	0003      	movs	r3, r0
 80019f0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	e009      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff f930 	bl	8000c58 <HAL_GetTick>
 80019f8:	0002      	movs	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	4a28      	ldr	r2, [pc, #160]	@ (8001aa0 <HAL_RCC_ClockConfig+0x274>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e044      	b.n	8001a92 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a08:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <HAL_RCC_ClockConfig+0x270>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4013      	ands	r3, r2
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d1ee      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d009      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a20:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4a20      	ldr	r2, [pc, #128]	@ (8001aa8 <HAL_RCC_ClockConfig+0x27c>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	0019      	movs	r1, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 8001a30:	430a      	orrs	r2, r1
 8001a32:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d00a      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	4a1a      	ldr	r2, [pc, #104]	@ (8001aac <HAL_RCC_ClockConfig+0x280>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	00da      	lsls	r2, r3, #3
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 8001a50:	430a      	orrs	r2, r1
 8001a52:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a54:	f000 f832 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8001a58:	0001      	movs	r1, r0
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_RCC_ClockConfig+0x278>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	220f      	movs	r2, #15
 8001a62:	4013      	ands	r3, r2
 8001a64:	4a12      	ldr	r2, [pc, #72]	@ (8001ab0 <HAL_RCC_ClockConfig+0x284>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	000a      	movs	r2, r1
 8001a6a:	40da      	lsrs	r2, r3
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <HAL_RCC_ClockConfig+0x288>)
 8001a6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <HAL_RCC_ClockConfig+0x28c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	250b      	movs	r5, #11
 8001a76:	197c      	adds	r4, r7, r5
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff f8a7 	bl	8000bcc <HAL_InitTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a82:	197b      	adds	r3, r7, r5
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a8a:	197b      	adds	r3, r7, r5
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b004      	add	sp, #16
 8001a98:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	40022000 	.word	0x40022000
 8001aa0:	00001388 	.word	0x00001388
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	fffff8ff 	.word	0xfffff8ff
 8001aac:	ffffc7ff 	.word	0xffffc7ff
 8001ab0:	080028c8 	.word	0x080028c8
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b08e      	sub	sp, #56	@ 0x38
 8001ac0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aca:	230c      	movs	r3, #12
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	d014      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x40>
 8001ad2:	d900      	bls.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001ad4:	e07b      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x112>
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x24>
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d00b      	beq.n	8001af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ade:	e076      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ae0:	4b44      	ldr	r3, [pc, #272]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d002      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001aea:	4b43      	ldr	r3, [pc, #268]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001aec:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001aee:	e07c      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001af0:	4b42      	ldr	r3, [pc, #264]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x140>)
 8001af2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001af4:	e079      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001af6:	4b42      	ldr	r3, [pc, #264]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x144>)
 8001af8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001afa:	e076      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001afe:	0c9a      	lsrs	r2, r3, #18
 8001b00:	230f      	movs	r3, #15
 8001b02:	401a      	ands	r2, r3
 8001b04:	4b3f      	ldr	r3, [pc, #252]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x148>)
 8001b06:	5c9b      	ldrb	r3, [r3, r2]
 8001b08:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0c:	0d9a      	lsrs	r2, r3, #22
 8001b0e:	2303      	movs	r3, #3
 8001b10:	4013      	ands	r3, r2
 8001b12:	3301      	adds	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b16:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	025b      	lsls	r3, r3, #9
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d01a      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	4a35      	ldr	r2, [pc, #212]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	69b8      	ldr	r0, [r7, #24]
 8001b30:	69f9      	ldr	r1, [r7, #28]
 8001b32:	f7fe fb95 	bl	8000260 <__aeabi_lmul>
 8001b36:	0002      	movs	r2, r0
 8001b38:	000b      	movs	r3, r1
 8001b3a:	0010      	movs	r0, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f7fe fb69 	bl	8000220 <__aeabi_uldivmod>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	000b      	movs	r3, r1
 8001b52:	0013      	movs	r3, r2
 8001b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b56:	e037      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b58:	4b26      	ldr	r3, [pc, #152]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d01a      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4a23      	ldr	r2, [pc, #140]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	68b8      	ldr	r0, [r7, #8]
 8001b70:	68f9      	ldr	r1, [r7, #12]
 8001b72:	f7fe fb75 	bl	8000260 <__aeabi_lmul>
 8001b76:	0002      	movs	r2, r0
 8001b78:	000b      	movs	r3, r1
 8001b7a:	0010      	movs	r0, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f7fe fb49 	bl	8000220 <__aeabi_uldivmod>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	000b      	movs	r3, r1
 8001b92:	0013      	movs	r3, r2
 8001b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b96:	e017      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	4a16      	ldr	r2, [pc, #88]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x140>)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f7fe fb5c 	bl	8000260 <__aeabi_lmul>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	000b      	movs	r3, r1
 8001bac:	0010      	movs	r0, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	001c      	movs	r4, r3
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	001d      	movs	r5, r3
 8001bb8:	0022      	movs	r2, r4
 8001bba:	002b      	movs	r3, r5
 8001bbc:	f7fe fb30 	bl	8000220 <__aeabi_uldivmod>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	000b      	movs	r3, r1
 8001bc4:	0013      	movs	r3, r2
 8001bc6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bca:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001bcc:	e00d      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	0b5b      	lsrs	r3, r3, #13
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	2280      	movs	r2, #128	@ 0x80
 8001be0:	0212      	lsls	r2, r2, #8
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001be8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b00e      	add	sp, #56	@ 0x38
 8001bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	003d0900 	.word	0x003d0900
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	007a1200 	.word	0x007a1200
 8001c04:	080028d8 	.word	0x080028d8

08001c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e07b      	b.n	8001d12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	2382      	movs	r3, #130	@ 0x82
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d009      	beq.n	8001c42 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	61da      	str	r2, [r3, #28]
 8001c34:	e005      	b.n	8001c42 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2251      	movs	r2, #81	@ 0x51
 8001c4c:	5c9b      	ldrb	r3, [r3, r2]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d107      	bne.n	8001c64 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2250      	movs	r2, #80	@ 0x50
 8001c58:	2100      	movs	r1, #0
 8001c5a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7fe ff08 	bl	8000a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2251      	movs	r2, #81	@ 0x51
 8001c68:	2102      	movs	r1, #2
 8001c6a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2140      	movs	r1, #64	@ 0x40
 8001c78:	438a      	bics	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	2382      	movs	r3, #130	@ 0x82
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	401a      	ands	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6899      	ldr	r1, [r3, #8]
 8001c8a:	2384      	movs	r3, #132	@ 0x84
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	400b      	ands	r3, r1
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68d9      	ldr	r1, [r3, #12]
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	400b      	ands	r3, r1
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	2101      	movs	r1, #1
 8001cae:	400b      	ands	r3, r1
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6999      	ldr	r1, [r3, #24]
 8001cb6:	2380      	movs	r3, #128	@ 0x80
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	400b      	ands	r3, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	2138      	movs	r1, #56	@ 0x38
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	2180      	movs	r1, #128	@ 0x80
 8001cce:	400b      	ands	r3, r1
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	0011      	movs	r1, r2
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	019b      	lsls	r3, r3, #6
 8001cdc:	401a      	ands	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	0c1b      	lsrs	r3, r3, #16
 8001cec:	2204      	movs	r2, #4
 8001cee:	4013      	ands	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2251      	movs	r2, #81	@ 0x51
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	0018      	movs	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b002      	add	sp, #8
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b088      	sub	sp, #32
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	1dbb      	adds	r3, r7, #6
 8001d28:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d2a:	231f      	movs	r3, #31
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2250      	movs	r2, #80	@ 0x50
 8001d36:	5c9b      	ldrb	r3, [r3, r2]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_SPI_Transmit+0x26>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e145      	b.n	8001fcc <HAL_SPI_Transmit+0x2b2>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2250      	movs	r2, #80	@ 0x50
 8001d44:	2101      	movs	r1, #1
 8001d46:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d48:	f7fe ff86 	bl	8000c58 <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d50:	2316      	movs	r3, #22
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	1dba      	adds	r2, r7, #6
 8001d56:	8812      	ldrh	r2, [r2, #0]
 8001d58:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2251      	movs	r2, #81	@ 0x51
 8001d5e:	5c9b      	ldrb	r3, [r3, r2]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d004      	beq.n	8001d70 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001d66:	231f      	movs	r3, #31
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d6e:	e126      	b.n	8001fbe <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_SPI_Transmit+0x64>
 8001d76:	1dbb      	adds	r3, r7, #6
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d104      	bne.n	8001d88 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001d7e:	231f      	movs	r3, #31
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d86:	e11a      	b.n	8001fbe <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2251      	movs	r2, #81	@ 0x51
 8001d8c:	2103      	movs	r1, #3
 8001d8e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1dba      	adds	r2, r7, #6
 8001da0:	8812      	ldrh	r2, [r2, #0]
 8001da2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1dba      	adds	r2, r7, #6
 8001da8:	8812      	ldrh	r2, [r2, #0]
 8001daa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	2380      	movs	r3, #128	@ 0x80
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d110      	bne.n	8001df8 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2140      	movs	r1, #64	@ 0x40
 8001de2:	438a      	bics	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2180      	movs	r1, #128	@ 0x80
 8001df2:	01c9      	lsls	r1, r1, #7
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2240      	movs	r2, #64	@ 0x40
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b40      	cmp	r3, #64	@ 0x40
 8001e04:	d007      	beq.n	8001e16 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2140      	movs	r1, #64	@ 0x40
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d152      	bne.n	8001ec8 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_SPI_Transmit+0x11a>
 8001e2a:	2316      	movs	r3, #22
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d143      	bne.n	8001ebc <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e38:	881a      	ldrh	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e44:	1c9a      	adds	r2, r3, #2
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e58:	e030      	b.n	8001ebc <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d112      	bne.n	8001e8e <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6c:	881a      	ldrh	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e78:	1c9a      	adds	r2, r3, #2
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e8c:	e016      	b.n	8001ebc <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e8e:	f7fe fee3 	bl	8000c58 <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d802      	bhi.n	8001ea4 <HAL_SPI_Transmit+0x18a>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	d102      	bne.n	8001eaa <HAL_SPI_Transmit+0x190>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d108      	bne.n	8001ebc <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8001eaa:	231f      	movs	r3, #31
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	2203      	movs	r2, #3
 8001eb0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2251      	movs	r2, #81	@ 0x51
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]
          goto error;
 8001eba:	e080      	b.n	8001fbe <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1c9      	bne.n	8001e5a <HAL_SPI_Transmit+0x140>
 8001ec6:	e053      	b.n	8001f70 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <HAL_SPI_Transmit+0x1c0>
 8001ed0:	2316      	movs	r3, #22
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d145      	bne.n	8001f66 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	330c      	adds	r3, #12
 8001ee4:	7812      	ldrb	r2, [r2, #0]
 8001ee6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f00:	e031      	b.n	8001f66 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d113      	bne.n	8001f38 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	330c      	adds	r3, #12
 8001f1a:	7812      	ldrb	r2, [r2, #0]
 8001f1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f36:	e016      	b.n	8001f66 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f38:	f7fe fe8e 	bl	8000c58 <HAL_GetTick>
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d802      	bhi.n	8001f4e <HAL_SPI_Transmit+0x234>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_SPI_Transmit+0x23a>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d108      	bne.n	8001f66 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8001f54:	231f      	movs	r3, #31
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	2203      	movs	r2, #3
 8001f5a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2251      	movs	r2, #81	@ 0x51
 8001f60:	2101      	movs	r1, #1
 8001f62:	5499      	strb	r1, [r3, r2]
          goto error;
 8001f64:	e02b      	b.n	8001fbe <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1c8      	bne.n	8001f02 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	6839      	ldr	r1, [r7, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	0018      	movs	r0, r3
 8001f78:	f000 fc1e 	bl	80027b8 <SPI_EndRxTxTransaction>
 8001f7c:	1e03      	subs	r3, r0, #0
 8001f7e:	d002      	beq.n	8001f86 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10a      	bne.n	8001fa4 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8001fac:	231f      	movs	r3, #31
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
 8001fb4:	e003      	b.n	8001fbe <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2251      	movs	r2, #81	@ 0x51
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2250      	movs	r2, #80	@ 0x50
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001fc6:	231f      	movs	r3, #31
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	781b      	ldrb	r3, [r3, #0]
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b008      	add	sp, #32
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b089      	sub	sp, #36	@ 0x24
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	1dbb      	adds	r3, r7, #6
 8001fe2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fe4:	2117      	movs	r1, #23
 8001fe6:	187b      	adds	r3, r7, r1
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2251      	movs	r2, #81	@ 0x51
 8001ff0:	5c9b      	ldrb	r3, [r3, r2]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d003      	beq.n	8002000 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ffe:	e109      	b.n	8002214 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	2382      	movs	r3, #130	@ 0x82
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	429a      	cmp	r2, r3
 800200a:	d113      	bne.n	8002034 <HAL_SPI_Receive+0x60>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10f      	bne.n	8002034 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2251      	movs	r2, #81	@ 0x51
 8002018:	2104      	movs	r1, #4
 800201a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800201c:	1dbb      	adds	r3, r7, #6
 800201e:	881c      	ldrh	r4, [r3, #0]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	0023      	movs	r3, r4
 800202c:	f000 f900 	bl	8002230 <HAL_SPI_TransmitReceive>
 8002030:	0003      	movs	r3, r0
 8002032:	e0f6      	b.n	8002222 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2250      	movs	r2, #80	@ 0x50
 8002038:	5c9b      	ldrb	r3, [r3, r2]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_SPI_Receive+0x6e>
 800203e:	2302      	movs	r3, #2
 8002040:	e0ef      	b.n	8002222 <HAL_SPI_Receive+0x24e>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2250      	movs	r2, #80	@ 0x50
 8002046:	2101      	movs	r1, #1
 8002048:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800204a:	f7fe fe05 	bl	8000c58 <HAL_GetTick>
 800204e:	0003      	movs	r3, r0
 8002050:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_SPI_Receive+0x8c>
 8002058:	1dbb      	adds	r3, r7, #6
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d104      	bne.n	800206a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002060:	2317      	movs	r3, #23
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
    goto error;
 8002068:	e0d4      	b.n	8002214 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2251      	movs	r2, #81	@ 0x51
 800206e:	2104      	movs	r1, #4
 8002070:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1dba      	adds	r2, r7, #6
 8002082:	8812      	ldrh	r2, [r2, #0]
 8002084:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1dba      	adds	r2, r7, #6
 800208a:	8812      	ldrh	r2, [r2, #0]
 800208c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	2380      	movs	r3, #128	@ 0x80
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d10f      	bne.n	80020d8 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2140      	movs	r1, #64	@ 0x40
 80020c4:	438a      	bics	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4956      	ldr	r1, [pc, #344]	@ (800222c <HAL_SPI_Receive+0x258>)
 80020d4:	400a      	ands	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2240      	movs	r2, #64	@ 0x40
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b40      	cmp	r3, #64	@ 0x40
 80020e4:	d007      	beq.n	80020f6 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2140      	movs	r1, #64	@ 0x40
 80020f2:	430a      	orrs	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d000      	beq.n	8002100 <HAL_SPI_Receive+0x12c>
 80020fe:	e06c      	b.n	80021da <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002100:	e033      	b.n	800216a <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2201      	movs	r2, #1
 800210a:	4013      	ands	r3, r2
 800210c:	2b01      	cmp	r3, #1
 800210e:	d115      	bne.n	800213c <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	330c      	adds	r3, #12
 8002116:	001a      	movs	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800213a:	e016      	b.n	800216a <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800213c:	f7fe fd8c 	bl	8000c58 <HAL_GetTick>
 8002140:	0002      	movs	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d802      	bhi.n	8002152 <HAL_SPI_Receive+0x17e>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	d102      	bne.n	8002158 <HAL_SPI_Receive+0x184>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d108      	bne.n	800216a <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8002158:	2317      	movs	r3, #23
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2203      	movs	r2, #3
 800215e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2251      	movs	r2, #81	@ 0x51
 8002164:	2101      	movs	r1, #1
 8002166:	5499      	strb	r1, [r3, r2]
          goto error;
 8002168:	e054      	b.n	8002214 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1c6      	bne.n	8002102 <HAL_SPI_Receive+0x12e>
 8002174:	e036      	b.n	80021e4 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2201      	movs	r2, #1
 800217e:	4013      	ands	r3, r2
 8002180:	2b01      	cmp	r3, #1
 8002182:	d113      	bne.n	80021ac <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218e:	b292      	uxth	r2, r2
 8002190:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002196:	1c9a      	adds	r2, r3, #2
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80021aa:	e016      	b.n	80021da <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ac:	f7fe fd54 	bl	8000c58 <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d802      	bhi.n	80021c2 <HAL_SPI_Receive+0x1ee>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	3301      	adds	r3, #1
 80021c0:	d102      	bne.n	80021c8 <HAL_SPI_Receive+0x1f4>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d108      	bne.n	80021da <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 80021c8:	2317      	movs	r3, #23
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	2203      	movs	r2, #3
 80021ce:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2251      	movs	r2, #81	@ 0x51
 80021d4:	2101      	movs	r1, #1
 80021d6:	5499      	strb	r1, [r3, r2]
          goto error;
 80021d8:	e01c      	b.n	8002214 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1c8      	bne.n	8002176 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	0018      	movs	r0, r3
 80021ec:	f000 fa7a 	bl	80026e4 <SPI_EndRxTransaction>
 80021f0:	1e03      	subs	r3, r0, #0
 80021f2:	d002      	beq.n	80021fa <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2220      	movs	r2, #32
 80021f8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8002202:	2317      	movs	r3, #23
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	e003      	b.n	8002214 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2251      	movs	r2, #81	@ 0x51
 8002210:	2101      	movs	r1, #1
 8002212:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2250      	movs	r2, #80	@ 0x50
 8002218:	2100      	movs	r1, #0
 800221a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800221c:	2317      	movs	r3, #23
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	781b      	ldrb	r3, [r3, #0]
}
 8002222:	0018      	movs	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	b007      	add	sp, #28
 8002228:	bd90      	pop	{r4, r7, pc}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	ffffbfff 	.word	0xffffbfff

08002230 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	@ 0x30
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	001a      	movs	r2, r3
 800223e:	1cbb      	adds	r3, r7, #2
 8002240:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002242:	2301      	movs	r3, #1
 8002244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002246:	232b      	movs	r3, #43	@ 0x2b
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2250      	movs	r2, #80	@ 0x50
 8002252:	5c9b      	ldrb	r3, [r3, r2]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_SPI_TransmitReceive+0x2c>
 8002258:	2302      	movs	r3, #2
 800225a:	e1b0      	b.n	80025be <HAL_SPI_TransmitReceive+0x38e>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2250      	movs	r2, #80	@ 0x50
 8002260:	2101      	movs	r1, #1
 8002262:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002264:	f7fe fcf8 	bl	8000c58 <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800226c:	2023      	movs	r0, #35	@ 0x23
 800226e:	183b      	adds	r3, r7, r0
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	2151      	movs	r1, #81	@ 0x51
 8002274:	5c52      	ldrb	r2, [r2, r1]
 8002276:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800227e:	231a      	movs	r3, #26
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	1cba      	adds	r2, r7, #2
 8002284:	8812      	ldrh	r2, [r2, #0]
 8002286:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002288:	183b      	adds	r3, r7, r0
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d011      	beq.n	80022b4 <HAL_SPI_TransmitReceive+0x84>
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	2382      	movs	r3, #130	@ 0x82
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	429a      	cmp	r2, r3
 8002298:	d107      	bne.n	80022aa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d103      	bne.n	80022aa <HAL_SPI_TransmitReceive+0x7a>
 80022a2:	183b      	adds	r3, r7, r0
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d004      	beq.n	80022b4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80022aa:	232b      	movs	r3, #43	@ 0x2b
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	2202      	movs	r2, #2
 80022b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80022b2:	e17d      	b.n	80025b0 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <HAL_SPI_TransmitReceive+0x98>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_SPI_TransmitReceive+0x98>
 80022c0:	1cbb      	adds	r3, r7, #2
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d104      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80022c8:	232b      	movs	r3, #43	@ 0x2b
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80022d0:	e16e      	b.n	80025b0 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2251      	movs	r2, #81	@ 0x51
 80022d6:	5c9b      	ldrb	r3, [r3, r2]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d003      	beq.n	80022e6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2251      	movs	r2, #81	@ 0x51
 80022e2:	2105      	movs	r1, #5
 80022e4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1cba      	adds	r2, r7, #2
 80022f6:	8812      	ldrh	r2, [r2, #0]
 80022f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1cba      	adds	r2, r7, #2
 80022fe:	8812      	ldrh	r2, [r2, #0]
 8002300:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1cba      	adds	r2, r7, #2
 800230c:	8812      	ldrh	r2, [r2, #0]
 800230e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1cba      	adds	r2, r7, #2
 8002314:	8812      	ldrh	r2, [r2, #0]
 8002316:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2240      	movs	r2, #64	@ 0x40
 800232c:	4013      	ands	r3, r2
 800232e:	2b40      	cmp	r3, #64	@ 0x40
 8002330:	d007      	beq.n	8002342 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2140      	movs	r1, #64	@ 0x40
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	2380      	movs	r3, #128	@ 0x80
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	429a      	cmp	r2, r3
 800234c:	d000      	beq.n	8002350 <HAL_SPI_TransmitReceive+0x120>
 800234e:	e07f      	b.n	8002450 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_SPI_TransmitReceive+0x134>
 8002358:	231a      	movs	r3, #26
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d000      	beq.n	8002364 <HAL_SPI_TransmitReceive+0x134>
 8002362:	e06a      	b.n	800243a <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	881a      	ldrh	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	1c9a      	adds	r2, r3, #2
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002388:	e057      	b.n	800243a <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2202      	movs	r2, #2
 8002392:	4013      	ands	r3, r2
 8002394:	2b02      	cmp	r3, #2
 8002396:	d11b      	bne.n	80023d0 <HAL_SPI_TransmitReceive+0x1a0>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d016      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0x1a0>
 80023a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d113      	bne.n	80023d0 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	881a      	ldrh	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	1c9a      	adds	r2, r3, #2
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2201      	movs	r2, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d119      	bne.n	8002412 <HAL_SPI_TransmitReceive+0x1e2>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d014      	beq.n	8002412 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f2:	b292      	uxth	r2, r2
 80023f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fa:	1c9a      	adds	r2, r3, #2
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800240e:	2301      	movs	r3, #1
 8002410:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002412:	f7fe fc21 	bl	8000c58 <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800241e:	429a      	cmp	r2, r3
 8002420:	d80b      	bhi.n	800243a <HAL_SPI_TransmitReceive+0x20a>
 8002422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002424:	3301      	adds	r3, #1
 8002426:	d008      	beq.n	800243a <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8002428:	232b      	movs	r3, #43	@ 0x2b
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	2203      	movs	r2, #3
 800242e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2251      	movs	r2, #81	@ 0x51
 8002434:	2101      	movs	r1, #1
 8002436:	5499      	strb	r1, [r3, r2]
        goto error;
 8002438:	e0ba      	b.n	80025b0 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1a2      	bne.n	800238a <HAL_SPI_TransmitReceive+0x15a>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d19d      	bne.n	800238a <HAL_SPI_TransmitReceive+0x15a>
 800244e:	e083      	b.n	8002558 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_SPI_TransmitReceive+0x234>
 8002458:	231a      	movs	r3, #26
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d000      	beq.n	8002464 <HAL_SPI_TransmitReceive+0x234>
 8002462:	e06f      	b.n	8002544 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330c      	adds	r3, #12
 800246e:	7812      	ldrb	r2, [r2, #0]
 8002470:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800248a:	e05b      	b.n	8002544 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2202      	movs	r2, #2
 8002494:	4013      	ands	r3, r2
 8002496:	2b02      	cmp	r3, #2
 8002498:	d11c      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x2a4>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d017      	beq.n	80024d4 <HAL_SPI_TransmitReceive+0x2a4>
 80024a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d114      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2201      	movs	r2, #1
 80024dc:	4013      	ands	r3, r2
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d119      	bne.n	8002516 <HAL_SPI_TransmitReceive+0x2e6>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d014      	beq.n	8002516 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002512:	2301      	movs	r3, #1
 8002514:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002516:	f7fe fb9f 	bl	8000c58 <HAL_GetTick>
 800251a:	0002      	movs	r2, r0
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002522:	429a      	cmp	r2, r3
 8002524:	d802      	bhi.n	800252c <HAL_SPI_TransmitReceive+0x2fc>
 8002526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002528:	3301      	adds	r3, #1
 800252a:	d102      	bne.n	8002532 <HAL_SPI_TransmitReceive+0x302>
 800252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252e:	2b00      	cmp	r3, #0
 8002530:	d108      	bne.n	8002544 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8002532:	232b      	movs	r3, #43	@ 0x2b
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2203      	movs	r2, #3
 8002538:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2251      	movs	r2, #81	@ 0x51
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]
        goto error;
 8002542:	e035      	b.n	80025b0 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d19e      	bne.n	800248c <HAL_SPI_TransmitReceive+0x25c>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d199      	bne.n	800248c <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800255a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	0018      	movs	r0, r3
 8002560:	f000 f92a 	bl	80027b8 <SPI_EndRxTxTransaction>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d007      	beq.n	8002578 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8002568:	232b      	movs	r3, #43	@ 0x2b
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002576:	e01b      	b.n	80025b0 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 800259e:	232b      	movs	r3, #43	@ 0x2b
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	e003      	b.n	80025b0 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2251      	movs	r2, #81	@ 0x51
 80025ac:	2101      	movs	r1, #1
 80025ae:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2250      	movs	r2, #80	@ 0x50
 80025b4:	2100      	movs	r1, #0
 80025b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025b8:	232b      	movs	r3, #43	@ 0x2b
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	781b      	ldrb	r3, [r3, #0]
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b00c      	add	sp, #48	@ 0x30
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	1dfb      	adds	r3, r7, #7
 80025d6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025d8:	f7fe fb3e 	bl	8000c58 <HAL_GetTick>
 80025dc:	0002      	movs	r2, r0
 80025de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	18d3      	adds	r3, r2, r3
 80025e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025e8:	f7fe fb36 	bl	8000c58 <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025f0:	4b3a      	ldr	r3, [pc, #232]	@ (80026dc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	015b      	lsls	r3, r3, #5
 80025f6:	0d1b      	lsrs	r3, r3, #20
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	4353      	muls	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025fe:	e058      	b.n	80026b2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	3301      	adds	r3, #1
 8002604:	d055      	beq.n	80026b2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002606:	f7fe fb27 	bl	8000c58 <HAL_GetTick>
 800260a:	0002      	movs	r2, r0
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	429a      	cmp	r2, r3
 8002614:	d902      	bls.n	800261c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d142      	bne.n	80026a2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	21e0      	movs	r1, #224	@ 0xe0
 8002628:	438a      	bics	r2, r1
 800262a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	2382      	movs	r3, #130	@ 0x82
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	429a      	cmp	r2, r3
 8002636:	d113      	bne.n	8002660 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	429a      	cmp	r2, r3
 8002642:	d005      	beq.n	8002650 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	429a      	cmp	r2, r3
 800264e:	d107      	bne.n	8002660 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2140      	movs	r1, #64	@ 0x40
 800265c:	438a      	bics	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	019b      	lsls	r3, r3, #6
 8002668:	429a      	cmp	r2, r3
 800266a:	d110      	bne.n	800268e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	491a      	ldr	r1, [pc, #104]	@ (80026e0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002678:	400a      	ands	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2180      	movs	r1, #128	@ 0x80
 8002688:	0189      	lsls	r1, r1, #6
 800268a:	430a      	orrs	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2251      	movs	r2, #81	@ 0x51
 8002692:	2101      	movs	r1, #1
 8002694:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2250      	movs	r2, #80	@ 0x50
 800269a:	2100      	movs	r1, #0
 800269c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e017      	b.n	80026d2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	4013      	ands	r3, r2
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	425a      	negs	r2, r3
 80026c2:	4153      	adcs	r3, r2
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	001a      	movs	r2, r3
 80026c8:	1dfb      	adds	r3, r7, #7
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d197      	bne.n	8002600 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	0018      	movs	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b008      	add	sp, #32
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	20000000 	.word	0x20000000
 80026e0:	ffffdfff 	.word	0xffffdfff

080026e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	2382      	movs	r3, #130	@ 0x82
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d113      	bne.n	8002724 <SPI_EndRxTransaction+0x40>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	2380      	movs	r3, #128	@ 0x80
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	429a      	cmp	r2, r3
 8002706:	d005      	beq.n	8002714 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	429a      	cmp	r2, r3
 8002712:	d107      	bne.n	8002724 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2140      	movs	r1, #64	@ 0x40
 8002720:	438a      	bics	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	2382      	movs	r3, #130	@ 0x82
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	429a      	cmp	r2, r3
 800272e:	d12b      	bne.n	8002788 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	2380      	movs	r3, #128	@ 0x80
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	429a      	cmp	r2, r3
 800273a:	d012      	beq.n	8002762 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	0013      	movs	r3, r2
 8002746:	2200      	movs	r2, #0
 8002748:	2180      	movs	r1, #128	@ 0x80
 800274a:	f7ff ff3d 	bl	80025c8 <SPI_WaitFlagStateUntilTimeout>
 800274e:	1e03      	subs	r3, r0, #0
 8002750:	d02d      	beq.n	80027ae <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002756:	2220      	movs	r2, #32
 8002758:	431a      	orrs	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e026      	b.n	80027b0 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	0013      	movs	r3, r2
 800276c:	2200      	movs	r2, #0
 800276e:	2101      	movs	r1, #1
 8002770:	f7ff ff2a 	bl	80025c8 <SPI_WaitFlagStateUntilTimeout>
 8002774:	1e03      	subs	r3, r0, #0
 8002776:	d01a      	beq.n	80027ae <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	2220      	movs	r2, #32
 800277e:	431a      	orrs	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e013      	b.n	80027b0 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	0013      	movs	r3, r2
 8002792:	2200      	movs	r2, #0
 8002794:	2101      	movs	r1, #1
 8002796:	f7ff ff17 	bl	80025c8 <SPI_WaitFlagStateUntilTimeout>
 800279a:	1e03      	subs	r3, r0, #0
 800279c:	d007      	beq.n	80027ae <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a2:	2220      	movs	r2, #32
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e000      	b.n	80027b0 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b004      	add	sp, #16
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027c4:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <SPI_EndRxTxTransaction+0x84>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	491d      	ldr	r1, [pc, #116]	@ (8002840 <SPI_EndRxTxTransaction+0x88>)
 80027ca:	0018      	movs	r0, r3
 80027cc:	f7fd fc9c 	bl	8000108 <__udivsi3>
 80027d0:	0003      	movs	r3, r0
 80027d2:	001a      	movs	r2, r3
 80027d4:	0013      	movs	r3, r2
 80027d6:	015b      	lsls	r3, r3, #5
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	189b      	adds	r3, r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	2382      	movs	r3, #130	@ 0x82
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d112      	bne.n	8002814 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	0013      	movs	r3, r2
 80027f8:	2200      	movs	r2, #0
 80027fa:	2180      	movs	r1, #128	@ 0x80
 80027fc:	f7ff fee4 	bl	80025c8 <SPI_WaitFlagStateUntilTimeout>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d016      	beq.n	8002832 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002808:	2220      	movs	r2, #32
 800280a:	431a      	orrs	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e00f      	b.n	8002834 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3b01      	subs	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2280      	movs	r2, #128	@ 0x80
 8002828:	4013      	ands	r3, r2
 800282a:	2b80      	cmp	r3, #128	@ 0x80
 800282c:	d0f2      	beq.n	8002814 <SPI_EndRxTxTransaction+0x5c>
 800282e:	e000      	b.n	8002832 <SPI_EndRxTxTransaction+0x7a>
        break;
 8002830:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b006      	add	sp, #24
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000000 	.word	0x20000000
 8002840:	016e3600 	.word	0x016e3600

08002844 <memset>:
 8002844:	0003      	movs	r3, r0
 8002846:	1882      	adds	r2, r0, r2
 8002848:	4293      	cmp	r3, r2
 800284a:	d100      	bne.n	800284e <memset+0xa>
 800284c:	4770      	bx	lr
 800284e:	7019      	strb	r1, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	e7f9      	b.n	8002848 <memset+0x4>

08002854 <__libc_init_array>:
 8002854:	b570      	push	{r4, r5, r6, lr}
 8002856:	2600      	movs	r6, #0
 8002858:	4c0c      	ldr	r4, [pc, #48]	@ (800288c <__libc_init_array+0x38>)
 800285a:	4d0d      	ldr	r5, [pc, #52]	@ (8002890 <__libc_init_array+0x3c>)
 800285c:	1b64      	subs	r4, r4, r5
 800285e:	10a4      	asrs	r4, r4, #2
 8002860:	42a6      	cmp	r6, r4
 8002862:	d109      	bne.n	8002878 <__libc_init_array+0x24>
 8002864:	2600      	movs	r6, #0
 8002866:	f000 f823 	bl	80028b0 <_init>
 800286a:	4c0a      	ldr	r4, [pc, #40]	@ (8002894 <__libc_init_array+0x40>)
 800286c:	4d0a      	ldr	r5, [pc, #40]	@ (8002898 <__libc_init_array+0x44>)
 800286e:	1b64      	subs	r4, r4, r5
 8002870:	10a4      	asrs	r4, r4, #2
 8002872:	42a6      	cmp	r6, r4
 8002874:	d105      	bne.n	8002882 <__libc_init_array+0x2e>
 8002876:	bd70      	pop	{r4, r5, r6, pc}
 8002878:	00b3      	lsls	r3, r6, #2
 800287a:	58eb      	ldr	r3, [r5, r3]
 800287c:	4798      	blx	r3
 800287e:	3601      	adds	r6, #1
 8002880:	e7ee      	b.n	8002860 <__libc_init_array+0xc>
 8002882:	00b3      	lsls	r3, r6, #2
 8002884:	58eb      	ldr	r3, [r5, r3]
 8002886:	4798      	blx	r3
 8002888:	3601      	adds	r6, #1
 800288a:	e7f2      	b.n	8002872 <__libc_init_array+0x1e>
 800288c:	080028ec 	.word	0x080028ec
 8002890:	080028ec 	.word	0x080028ec
 8002894:	080028f0 	.word	0x080028f0
 8002898:	080028ec 	.word	0x080028ec

0800289c <memcpy>:
 800289c:	2300      	movs	r3, #0
 800289e:	b510      	push	{r4, lr}
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d100      	bne.n	80028a6 <memcpy+0xa>
 80028a4:	bd10      	pop	{r4, pc}
 80028a6:	5ccc      	ldrb	r4, [r1, r3]
 80028a8:	54c4      	strb	r4, [r0, r3]
 80028aa:	3301      	adds	r3, #1
 80028ac:	e7f8      	b.n	80028a0 <memcpy+0x4>
	...

080028b0 <_init>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr

080028bc <_fini>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c2:	bc08      	pop	{r3}
 80028c4:	469e      	mov	lr, r3
 80028c6:	4770      	bx	lr
