
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08007ab8  08007ab8  00008ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ec8  08007ec8  0000900c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ec8  08007ec8  00008ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ed0  08007ed0  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed0  08007ed0  00008ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ed4  08007ed4  00008ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007ed8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000000c  08007ee4  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08007ee4  00009304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d798  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003380  00000000  00000000  000267d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  00029b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e3  00000000  00000000  0002b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f01  00000000  00000000  0002c88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfa9  00000000  00000000  0005078c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e37f5  00000000  00000000  0006d735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150f2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000713c  00000000  00000000  00150f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001580ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007aa0 	.word	0x08007aa0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007aa0 	.word	0x08007aa0

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000894:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000898:	f000 b988 	b.w	8000bac <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	468e      	mov	lr, r1
 80008bc:	4604      	mov	r4, r0
 80008be:	4688      	mov	r8, r1
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d14a      	bne.n	800095a <__udivmoddi4+0xa6>
 80008c4:	428a      	cmp	r2, r1
 80008c6:	4617      	mov	r7, r2
 80008c8:	d962      	bls.n	8000990 <__udivmoddi4+0xdc>
 80008ca:	fab2 f682 	clz	r6, r2
 80008ce:	b14e      	cbz	r6, 80008e4 <__udivmoddi4+0x30>
 80008d0:	f1c6 0320 	rsb	r3, r6, #32
 80008d4:	fa01 f806 	lsl.w	r8, r1, r6
 80008d8:	fa20 f303 	lsr.w	r3, r0, r3
 80008dc:	40b7      	lsls	r7, r6
 80008de:	ea43 0808 	orr.w	r8, r3, r8
 80008e2:	40b4      	lsls	r4, r6
 80008e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008e8:	fa1f fc87 	uxth.w	ip, r7
 80008ec:	fbb8 f1fe 	udiv	r1, r8, lr
 80008f0:	0c23      	lsrs	r3, r4, #16
 80008f2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008fa:	fb01 f20c 	mul.w	r2, r1, ip
 80008fe:	429a      	cmp	r2, r3
 8000900:	d909      	bls.n	8000916 <__udivmoddi4+0x62>
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000908:	f080 80ea 	bcs.w	8000ae0 <__udivmoddi4+0x22c>
 800090c:	429a      	cmp	r2, r3
 800090e:	f240 80e7 	bls.w	8000ae0 <__udivmoddi4+0x22c>
 8000912:	3902      	subs	r1, #2
 8000914:	443b      	add	r3, r7
 8000916:	1a9a      	subs	r2, r3, r2
 8000918:	b2a3      	uxth	r3, r4
 800091a:	fbb2 f0fe 	udiv	r0, r2, lr
 800091e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000926:	fb00 fc0c 	mul.w	ip, r0, ip
 800092a:	459c      	cmp	ip, r3
 800092c:	d909      	bls.n	8000942 <__udivmoddi4+0x8e>
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000934:	f080 80d6 	bcs.w	8000ae4 <__udivmoddi4+0x230>
 8000938:	459c      	cmp	ip, r3
 800093a:	f240 80d3 	bls.w	8000ae4 <__udivmoddi4+0x230>
 800093e:	443b      	add	r3, r7
 8000940:	3802      	subs	r0, #2
 8000942:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000946:	eba3 030c 	sub.w	r3, r3, ip
 800094a:	2100      	movs	r1, #0
 800094c:	b11d      	cbz	r5, 8000956 <__udivmoddi4+0xa2>
 800094e:	40f3      	lsrs	r3, r6
 8000950:	2200      	movs	r2, #0
 8000952:	e9c5 3200 	strd	r3, r2, [r5]
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	428b      	cmp	r3, r1
 800095c:	d905      	bls.n	800096a <__udivmoddi4+0xb6>
 800095e:	b10d      	cbz	r5, 8000964 <__udivmoddi4+0xb0>
 8000960:	e9c5 0100 	strd	r0, r1, [r5]
 8000964:	2100      	movs	r1, #0
 8000966:	4608      	mov	r0, r1
 8000968:	e7f5      	b.n	8000956 <__udivmoddi4+0xa2>
 800096a:	fab3 f183 	clz	r1, r3
 800096e:	2900      	cmp	r1, #0
 8000970:	d146      	bne.n	8000a00 <__udivmoddi4+0x14c>
 8000972:	4573      	cmp	r3, lr
 8000974:	d302      	bcc.n	800097c <__udivmoddi4+0xc8>
 8000976:	4282      	cmp	r2, r0
 8000978:	f200 8105 	bhi.w	8000b86 <__udivmoddi4+0x2d2>
 800097c:	1a84      	subs	r4, r0, r2
 800097e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000982:	2001      	movs	r0, #1
 8000984:	4690      	mov	r8, r2
 8000986:	2d00      	cmp	r5, #0
 8000988:	d0e5      	beq.n	8000956 <__udivmoddi4+0xa2>
 800098a:	e9c5 4800 	strd	r4, r8, [r5]
 800098e:	e7e2      	b.n	8000956 <__udivmoddi4+0xa2>
 8000990:	2a00      	cmp	r2, #0
 8000992:	f000 8090 	beq.w	8000ab6 <__udivmoddi4+0x202>
 8000996:	fab2 f682 	clz	r6, r2
 800099a:	2e00      	cmp	r6, #0
 800099c:	f040 80a4 	bne.w	8000ae8 <__udivmoddi4+0x234>
 80009a0:	1a8a      	subs	r2, r1, r2
 80009a2:	0c03      	lsrs	r3, r0, #16
 80009a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009a8:	b280      	uxth	r0, r0
 80009aa:	b2bc      	uxth	r4, r7
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb2 fcfe 	udiv	ip, r2, lr
 80009b2:	fb0e 221c 	mls	r2, lr, ip, r2
 80009b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009ba:	fb04 f20c 	mul.w	r2, r4, ip
 80009be:	429a      	cmp	r2, r3
 80009c0:	d907      	bls.n	80009d2 <__udivmoddi4+0x11e>
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80009c8:	d202      	bcs.n	80009d0 <__udivmoddi4+0x11c>
 80009ca:	429a      	cmp	r2, r3
 80009cc:	f200 80e0 	bhi.w	8000b90 <__udivmoddi4+0x2dc>
 80009d0:	46c4      	mov	ip, r8
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	fbb3 f2fe 	udiv	r2, r3, lr
 80009d8:	fb0e 3312 	mls	r3, lr, r2, r3
 80009dc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009e0:	fb02 f404 	mul.w	r4, r2, r4
 80009e4:	429c      	cmp	r4, r3
 80009e6:	d907      	bls.n	80009f8 <__udivmoddi4+0x144>
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x142>
 80009f0:	429c      	cmp	r4, r3
 80009f2:	f200 80ca 	bhi.w	8000b8a <__udivmoddi4+0x2d6>
 80009f6:	4602      	mov	r2, r0
 80009f8:	1b1b      	subs	r3, r3, r4
 80009fa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009fe:	e7a5      	b.n	800094c <__udivmoddi4+0x98>
 8000a00:	f1c1 0620 	rsb	r6, r1, #32
 8000a04:	408b      	lsls	r3, r1
 8000a06:	fa22 f706 	lsr.w	r7, r2, r6
 8000a0a:	431f      	orrs	r7, r3
 8000a0c:	fa0e f401 	lsl.w	r4, lr, r1
 8000a10:	fa20 f306 	lsr.w	r3, r0, r6
 8000a14:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a18:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a1c:	4323      	orrs	r3, r4
 8000a1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a22:	fa1f fc87 	uxth.w	ip, r7
 8000a26:	fbbe f0f9 	udiv	r0, lr, r9
 8000a2a:	0c1c      	lsrs	r4, r3, #16
 8000a2c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a30:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a34:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a38:	45a6      	cmp	lr, r4
 8000a3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3e:	d909      	bls.n	8000a54 <__udivmoddi4+0x1a0>
 8000a40:	193c      	adds	r4, r7, r4
 8000a42:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000a46:	f080 809c 	bcs.w	8000b82 <__udivmoddi4+0x2ce>
 8000a4a:	45a6      	cmp	lr, r4
 8000a4c:	f240 8099 	bls.w	8000b82 <__udivmoddi4+0x2ce>
 8000a50:	3802      	subs	r0, #2
 8000a52:	443c      	add	r4, r7
 8000a54:	eba4 040e 	sub.w	r4, r4, lr
 8000a58:	fa1f fe83 	uxth.w	lr, r3
 8000a5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a60:	fb09 4413 	mls	r4, r9, r3, r4
 8000a64:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a68:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6c:	45a4      	cmp	ip, r4
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x1ce>
 8000a70:	193c      	adds	r4, r7, r4
 8000a72:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000a76:	f080 8082 	bcs.w	8000b7e <__udivmoddi4+0x2ca>
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d97f      	bls.n	8000b7e <__udivmoddi4+0x2ca>
 8000a7e:	3b02      	subs	r3, #2
 8000a80:	443c      	add	r4, r7
 8000a82:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a8e:	4564      	cmp	r4, ip
 8000a90:	4673      	mov	r3, lr
 8000a92:	46e1      	mov	r9, ip
 8000a94:	d362      	bcc.n	8000b5c <__udivmoddi4+0x2a8>
 8000a96:	d05f      	beq.n	8000b58 <__udivmoddi4+0x2a4>
 8000a98:	b15d      	cbz	r5, 8000ab2 <__udivmoddi4+0x1fe>
 8000a9a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a9e:	eb64 0409 	sbc.w	r4, r4, r9
 8000aa2:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa6:	fa22 f301 	lsr.w	r3, r2, r1
 8000aaa:	431e      	orrs	r6, r3
 8000aac:	40cc      	lsrs	r4, r1
 8000aae:	e9c5 6400 	strd	r6, r4, [r5]
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	e74f      	b.n	8000956 <__udivmoddi4+0xa2>
 8000ab6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000aba:	0c01      	lsrs	r1, r0, #16
 8000abc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ac0:	b280      	uxth	r0, r0
 8000ac2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4638      	mov	r0, r7
 8000aca:	463c      	mov	r4, r7
 8000acc:	46b8      	mov	r8, r7
 8000ace:	46be      	mov	lr, r7
 8000ad0:	2620      	movs	r6, #32
 8000ad2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ad6:	eba2 0208 	sub.w	r2, r2, r8
 8000ada:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ade:	e766      	b.n	80009ae <__udivmoddi4+0xfa>
 8000ae0:	4601      	mov	r1, r0
 8000ae2:	e718      	b.n	8000916 <__udivmoddi4+0x62>
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	e72c      	b.n	8000942 <__udivmoddi4+0x8e>
 8000ae8:	f1c6 0220 	rsb	r2, r6, #32
 8000aec:	fa2e f302 	lsr.w	r3, lr, r2
 8000af0:	40b7      	lsls	r7, r6
 8000af2:	40b1      	lsls	r1, r6
 8000af4:	fa20 f202 	lsr.w	r2, r0, r2
 8000af8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000afc:	430a      	orrs	r2, r1
 8000afe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b02:	b2bc      	uxth	r4, r7
 8000b04:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b08:	0c11      	lsrs	r1, r2, #16
 8000b0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b0e:	fb08 f904 	mul.w	r9, r8, r4
 8000b12:	40b0      	lsls	r0, r6
 8000b14:	4589      	cmp	r9, r1
 8000b16:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b1a:	b280      	uxth	r0, r0
 8000b1c:	d93e      	bls.n	8000b9c <__udivmoddi4+0x2e8>
 8000b1e:	1879      	adds	r1, r7, r1
 8000b20:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000b24:	d201      	bcs.n	8000b2a <__udivmoddi4+0x276>
 8000b26:	4589      	cmp	r9, r1
 8000b28:	d81f      	bhi.n	8000b6a <__udivmoddi4+0x2b6>
 8000b2a:	eba1 0109 	sub.w	r1, r1, r9
 8000b2e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b32:	fb09 f804 	mul.w	r8, r9, r4
 8000b36:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b3a:	b292      	uxth	r2, r2
 8000b3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b40:	4542      	cmp	r2, r8
 8000b42:	d229      	bcs.n	8000b98 <__udivmoddi4+0x2e4>
 8000b44:	18ba      	adds	r2, r7, r2
 8000b46:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000b4a:	d2c4      	bcs.n	8000ad6 <__udivmoddi4+0x222>
 8000b4c:	4542      	cmp	r2, r8
 8000b4e:	d2c2      	bcs.n	8000ad6 <__udivmoddi4+0x222>
 8000b50:	f1a9 0102 	sub.w	r1, r9, #2
 8000b54:	443a      	add	r2, r7
 8000b56:	e7be      	b.n	8000ad6 <__udivmoddi4+0x222>
 8000b58:	45f0      	cmp	r8, lr
 8000b5a:	d29d      	bcs.n	8000a98 <__udivmoddi4+0x1e4>
 8000b5c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b60:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b64:	3801      	subs	r0, #1
 8000b66:	46e1      	mov	r9, ip
 8000b68:	e796      	b.n	8000a98 <__udivmoddi4+0x1e4>
 8000b6a:	eba7 0909 	sub.w	r9, r7, r9
 8000b6e:	4449      	add	r1, r9
 8000b70:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b74:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b78:	fb09 f804 	mul.w	r8, r9, r4
 8000b7c:	e7db      	b.n	8000b36 <__udivmoddi4+0x282>
 8000b7e:	4673      	mov	r3, lr
 8000b80:	e77f      	b.n	8000a82 <__udivmoddi4+0x1ce>
 8000b82:	4650      	mov	r0, sl
 8000b84:	e766      	b.n	8000a54 <__udivmoddi4+0x1a0>
 8000b86:	4608      	mov	r0, r1
 8000b88:	e6fd      	b.n	8000986 <__udivmoddi4+0xd2>
 8000b8a:	443b      	add	r3, r7
 8000b8c:	3a02      	subs	r2, #2
 8000b8e:	e733      	b.n	80009f8 <__udivmoddi4+0x144>
 8000b90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b94:	443b      	add	r3, r7
 8000b96:	e71c      	b.n	80009d2 <__udivmoddi4+0x11e>
 8000b98:	4649      	mov	r1, r9
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x222>
 8000b9c:	eba1 0109 	sub.w	r1, r1, r9
 8000ba0:	46c4      	mov	ip, r8
 8000ba2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ba6:	fb09 f804 	mul.w	r8, r9, r4
 8000baa:	e7c4      	b.n	8000b36 <__udivmoddi4+0x282>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <_ZN6DriverC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
 *      Author: ethancao
 */
#include "stm32g4xx_hal.h"
#include "drv8316.h"

Driver::Driver(SPI_HandleTypeDef* _spi, GPIO_TypeDef *_sleepPort,
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	807b      	strh	r3, [r7, #2]
	uint16_t _sleepPin, GPIO_TypeDef *_scsPort, uint16_t _scsPin) {
	spi = _spi;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	609a      	str	r2, [r3, #8]
	sleepPort = _sleepPort;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	60da      	str	r2, [r3, #12]
	sleepPin = _sleepPin;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	887a      	ldrh	r2, [r7, #2]
 8000bce:	821a      	strh	r2, [r3, #16]
	scsPort = _scsPort;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	615a      	str	r2, [r3, #20]
	scsPin = _scsPin;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	8bba      	ldrh	r2, [r7, #28]
 8000bda:	831a      	strh	r2, [r3, #24]
	return;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_ZN6Driver4initEv>:

void Driver::init() {
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
	reset();
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f804 	bl	8000c00 <_ZN6Driver5resetEv>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_ZN6Driver5resetEv>:

void Driver::reset() {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sleepPort, sleepPin, GPIO_PIN_RESET);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68d8      	ldr	r0, [r3, #12]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	8a1b      	ldrh	r3, [r3, #16]
 8000c10:	2200      	movs	r2, #0
 8000c12:	4619      	mov	r1, r3
 8000c14:	f002 fc3e 	bl	8003494 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f001 f99f 	bl	8001f5c <HAL_Delay>
	HAL_GPIO_WritePin(scsPort, scsPin, GPIO_PIN_SET);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6958      	ldr	r0, [r3, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	8b1b      	ldrh	r3, [r3, #24]
 8000c26:	2201      	movs	r2, #1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f002 fc33 	bl	8003494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sleepPort, sleepPin, GPIO_PIN_SET);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68d8      	ldr	r0, [r3, #12]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	8a1b      	ldrh	r3, [r3, #16]
 8000c36:	2201      	movs	r2, #1
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f002 fc2b 	bl	8003494 <HAL_GPIO_WritePin>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_ZN7EncoderC1EP19__I2C_HandleTypeDef>:
 */
#include "stm32g4xx_hal.h"
#include "magsensor.h"


Encoder::Encoder(I2C_HandleTypeDef* _i2c) {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af02      	add	r7, sp, #8
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	711a      	strb	r2, [r3, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
	i2c = _i2c;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	601a      	str	r2, [r3, #0]
	buf[0] = 0x30;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2230      	movs	r2, #48	@ 0x30
 8000c68:	735a      	strb	r2, [r3, #13]
	ret = HAL_I2C_Master_Transmit(i2c, MT6701_ADDR, buf, 1, HAL_MAX_DELAY);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f103 020d 	add.w	r2, r3, #13
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	210c      	movs	r1, #12
 8000c7e:	f002 fcbd 	bl	80035fc <HAL_I2C_Master_Transmit>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	731a      	strb	r2, [r3, #12]
	if ( ret != HAL_OK )
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7b1b      	ldrb	r3, [r3, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <_ZN7EncoderC1EP19__I2C_HandleTypeDef+0x54>
	  error = 1;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	711a      	strb	r2, [r3, #4]
 8000c98:	e00f      	b.n	8000cba <_ZN7EncoderC1EP19__I2C_HandleTypeDef+0x74>
	else
	  ret = HAL_I2C_Master_Receive(i2c, MT6701_ADDR, buf, 1, HAL_MAX_DELAY);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f103 020d 	add.w	r2, r3, #13
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	210c      	movs	r1, #12
 8000cae:	f002 fdbd 	bl	800382c <HAL_I2C_Master_Receive>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	731a      	strb	r2, [r3, #12]

}
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_ZN7Encoder8getAngleEv>:

float Encoder::getAngle() {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
	buf[0] = 0x03;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	735a      	strb	r2, [r3, #13]
  	ret = HAL_I2C_Master_Transmit(i2c, MT6701_ADDR, buf, 1, HAL_MAX_DELAY);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f103 020d 	add.w	r2, r3, #13
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	210c      	movs	r1, #12
 8000ce6:	f002 fc89 	bl	80035fc <HAL_I2C_Master_Transmit>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	731a      	strb	r2, [r3, #12]
  	if ( ret != HAL_OK ) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7b1b      	ldrb	r3, [r3, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <_ZN7Encoder8getAngleEv+0x3e>
  	  error = 1;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	711a      	strb	r2, [r3, #4]
 8000d00:	e051      	b.n	8000da6 <_ZN7Encoder8getAngleEv+0xe2>
  	} else {
  	   // Read 2 bytes from the temperature register
  	   ret = HAL_I2C_Master_Receive(i2c, MT6701_ADDR, buf, 2, HAL_MAX_DELAY);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f103 020d 	add.w	r2, r3, #13
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2302      	movs	r3, #2
 8000d14:	210c      	movs	r1, #12
 8000d16:	f002 fd89 	bl	800382c <HAL_I2C_Master_Receive>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	731a      	strb	r2, [r3, #12]
  	   if ( ret != HAL_OK ) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7b1b      	ldrb	r3, [r3, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <_ZN7Encoder8getAngleEv+0x6e>
  	      error = 2;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	711a      	strb	r2, [r3, #4]
 8000d30:	e039      	b.n	8000da6 <_ZN7Encoder8getAngleEv+0xe2>
  	   } else {
  	      //Combine the bytes
  	      val = ((int16_t)buf[0] << 6) | ((int16_t)buf[1] >> 2);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7b5b      	ldrb	r3, [r3, #13]
 8000d36:	019b      	lsls	r3, r3, #6
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	7b92      	ldrb	r2, [r2, #14]
 8000d3c:	b212      	sxth	r2, r2
 8000d3e:	1092      	asrs	r2, r2, #2
 8000d40:	b212      	sxth	r2, r2
 8000d42:	4313      	orrs	r3, r2
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	edc3 7a02 	vstr	s15, [r3, #8]
  	      val *= 0.02197265625; //360/16384
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d58:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000db8 <_ZN7Encoder8getAngleEv+0xf4>
 8000d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edc3 7a02 	vstr	s15, [r3, #8]
  	      val -= angleOffset;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	edc3 7a02 	vstr	s15, [r3, #8]
  	      if(val < 0)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8a:	d509      	bpl.n	8000da0 <_ZN7Encoder8getAngleEv+0xdc>
  	    	  val += 360;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d92:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000dbc <_ZN7Encoder8getAngleEv+0xf8>
 8000d96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	edc3 7a02 	vstr	s15, [r3, #8]
  	      return val;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	e000      	b.n	8000da8 <_ZN7Encoder8getAngleEv+0xe4>
  	   }
  	}
  	return -1;
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <_ZN7Encoder8getAngleEv+0xfc>)
  }
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eeb0 0a67 	vmov.f32	s0, s15
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	3cb40000 	.word	0x3cb40000
 8000dbc:	43b40000 	.word	0x43b40000
 8000dc0:	bf800000 	.word	0xbf800000

08000dc4 <_ZN7Encoder4zeroEv>:

void Encoder::zero() {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	angleOffset = getAngle();
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff79 	bl	8000cc4 <_ZN7Encoder8getAngleEv>
 8000dd2:	eef0 7a40 	vmov.f32	s15, s0
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dee:	ed97 0a01 	vldr	s0, [r7, #4]
 8000df2:	f006 f8b5 	bl	8006f60 <cosf>
 8000df6:	eef0 7a40 	vmov.f32	s15, s0
 8000dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e12:	f006 f8e9 	bl	8006fe8 <sinf>
 8000e16:	eef0 7a40 	vmov.f32	s15, s0
 8000e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	0000      	movs	r0, r0
	...

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b098      	sub	sp, #96	@ 0x60
 8000e2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2e:	f001 f824 	bl	8001e7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e32:	f000 f919 	bl	8001068 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e36:	f000 fc51 	bl	80016dc <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 8000e3a:	f000 faa3 	bl	8001384 <_ZL12MX_SPI2_Initv>
  MX_ADC1_Init();
 8000e3e:	f000 f95d 	bl	80010fc <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8000e42:	f000 fa51 	bl	80012e8 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8000e46:	f000 fb21 	bl	800148c <_ZL12MX_TIM1_Initv>
  MX_ADC2_Init();
 8000e4a:	f000 f9dd 	bl	8001208 <_ZL12MX_ADC2_Initv>
  MX_SPI3_Init();
 8000e4e:	f000 fadb 	bl	8001408 <_ZL12MX_SPI3_Initv>
  MX_USART2_UART_Init();
 8000e52:	f000 fbe3 	bl	800161c <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  uint8_t temp[12][3];
  Driver drv(&hspi2, GPIOC, SLEEP_N_Pin, GPIOC, SCS_N_Pin);
 8000e56:	f107 0014 	add.w	r0, r7, #20
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <main+0xe0>)
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2304      	movs	r3, #4
 8000e64:	4a28      	ldr	r2, [pc, #160]	@ (8000f08 <main+0xe0>)
 8000e66:	4929      	ldr	r1, [pc, #164]	@ (8000f0c <main+0xe4>)
 8000e68:	f7ff fea2 	bl	8000bb0 <_ZN6DriverC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
  drv.init();
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff feba 	bl	8000bea <_ZN6Driver4initEv>
  Encoder enc(&hi2c1);
 8000e76:	463b      	mov	r3, r7
 8000e78:	4925      	ldr	r1, [pc, #148]	@ (8000f10 <main+0xe8>)
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fee3 	bl	8000c46 <_ZN7EncoderC1EP19__I2C_HandleTypeDef>
  enc.zero();
 8000e80:	463b      	mov	r3, r7
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff9e 	bl	8000dc4 <_ZN7Encoder4zeroEv>

  HAL_TIM_PWM_Start_IT (&htim1, TIM_CHANNEL_1);
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4822      	ldr	r0, [pc, #136]	@ (8000f14 <main+0xec>)
 8000e8c:	f004 f9d6 	bl	800523c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT (&htim1, TIM_CHANNEL_2);
 8000e90:	2104      	movs	r1, #4
 8000e92:	4820      	ldr	r0, [pc, #128]	@ (8000f14 <main+0xec>)
 8000e94:	f004 f9d2 	bl	800523c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT (&htim1, TIM_CHANNEL_3);
 8000e98:	2108      	movs	r1, #8
 8000e9a:	481e      	ldr	r0, [pc, #120]	@ (8000f14 <main+0xec>)
 8000e9c:	f004 f9ce 	bl	800523c <HAL_TIM_PWM_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	481c      	ldr	r0, [pc, #112]	@ (8000f14 <main+0xec>)
 8000ea4:	f004 ffe2 	bl	8005e6c <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	481a      	ldr	r0, [pc, #104]	@ (8000f14 <main+0xec>)
 8000eac:	f004 ffde 	bl	8005e6c <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	4818      	ldr	r0, [pc, #96]	@ (8000f14 <main+0xec>)
 8000eb4:	f004 ffda 	bl	8005e6c <HAL_TIMEx_PWMN_Start_IT>
//	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
//	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
//	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
//	  HAL_Delay(1000);
    /* USER CODE BEGIN 3 */
	 for(float i = 0; i < 360/8; i+=0.01) {
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ebe:	e014      	b.n	8000eea <main+0xc2>
		 outputElecAngle(i,20); //use >20 for power
 8000ec0:	2014      	movs	r0, #20
 8000ec2:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8000ec6:	f000 f82b 	bl	8000f20 <_Z15outputElecAngleft>
	 for(float i = 0; i < 360/8; i+=0.01) {
 8000eca:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000ecc:	f7ff fc32 	bl	8000734 <__aeabi_f2d>
 8000ed0:	a30b      	add	r3, pc, #44	@ (adr r3, 8000f00 <main+0xd8>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f7ff facf 	bl	8000478 <__adddf3>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f7ff fc7f 	bl	80007e4 <__aeabi_d2f>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	657b      	str	r3, [r7, #84]	@ 0x54
 8000eea:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000eee:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000f18 <main+0xf0>
 8000ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efa:	d4e1      	bmi.n	8000ec0 <main+0x98>
	 }
//	  float temp322= enc.getAngle();
  }
 8000efc:	e7dc      	b.n	8000eb8 <main+0x90>
 8000efe:	bf00      	nop
 8000f00:	47ae147b 	.word	0x47ae147b
 8000f04:	3f847ae1 	.word	0x3f847ae1
 8000f08:	48000800 	.word	0x48000800
 8000f0c:	20000154 	.word	0x20000154
 8000f10:	20000100 	.word	0x20000100
 8000f14:	2000021c 	.word	0x2000021c
 8000f18:	42340000 	.word	0x42340000
 8000f1c:	00000000 	.word	0x00000000

08000f20 <_Z15outputElecAngleft>:
}
void outputTargetAngle(uint16_t angle, uint16_t power) {

}

void outputElecAngle(float angle, uint16_t power) {
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	807b      	strh	r3, [r7, #2]
	//polar to xy
	float alpha = cos(angle) * power;
 8000f2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f32:	f7ff ff57 	bl	8000de4 <_ZSt3cosf>
 8000f36:	eeb0 7a40 	vmov.f32	s14, s0
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f48:	edc7 7a07 	vstr	s15, [r7, #28]
	float beta = sin(angle) * power;
 8000f4c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f50:	f7ff ff58 	bl	8000e04 <_ZSt3sinf>
 8000f54:	eeb0 7a40 	vmov.f32	s14, s0
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f66:	edc7 7a06 	vstr	s15, [r7, #24]
	//Clarke transform
	float a = alpha;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	617b      	str	r3, [r7, #20]
	float b = -0.5*alpha + 0.8660254*beta; //sqrt(3)/2 is weird const
 8000f6e:	69f8      	ldr	r0, [r7, #28]
 8000f70:	f7ff fbe0 	bl	8000734 <__aeabi_f2d>
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	4b39      	ldr	r3, [pc, #228]	@ (8001060 <_Z15outputElecAngleft+0x140>)
 8000f7a:	f7ff f94d 	bl	8000218 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4614      	mov	r4, r2
 8000f84:	461d      	mov	r5, r3
 8000f86:	69b8      	ldr	r0, [r7, #24]
 8000f88:	f7ff fbd4 	bl	8000734 <__aeabi_f2d>
 8000f8c:	a332      	add	r3, pc, #200	@ (adr r3, 8001058 <_Z15outputElecAngleft+0x138>)
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	f7ff f941 	bl	8000218 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	f7ff fa6b 	bl	8000478 <__adddf3>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fc1b 	bl	80007e4 <__aeabi_d2f>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	613b      	str	r3, [r7, #16]
	float c = -0.5*alpha - 0.8660254*beta;
 8000fb2:	69f8      	ldr	r0, [r7, #28]
 8000fb4:	f7ff fbbe 	bl	8000734 <__aeabi_f2d>
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b28      	ldr	r3, [pc, #160]	@ (8001060 <_Z15outputElecAngleft+0x140>)
 8000fbe:	f7ff f92b 	bl	8000218 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4614      	mov	r4, r2
 8000fc8:	461d      	mov	r5, r3
 8000fca:	69b8      	ldr	r0, [r7, #24]
 8000fcc:	f7ff fbb2 	bl	8000734 <__aeabi_f2d>
 8000fd0:	a321      	add	r3, pc, #132	@ (adr r3, 8001058 <_Z15outputElecAngleft+0x138>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff f91f 	bl	8000218 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4620      	mov	r0, r4
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	f7ff fa47 	bl	8000474 <__aeabi_dsub>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fbf9 	bl	80007e4 <__aeabi_d2f>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	60fb      	str	r3, [r7, #12]
	uint8_t pwma = ((int16_t)a) + 150; //scale to center of pwm range
 8000ff6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffe:	ee17 3a90 	vmov	r3, s15
 8001002:	b21b      	sxth	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	3b6a      	subs	r3, #106	@ 0x6a
 8001008:	72fb      	strb	r3, [r7, #11]
	uint8_t pwmb = ((int16_t)b) + 150;
 800100a:	edd7 7a04 	vldr	s15, [r7, #16]
 800100e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001012:	ee17 3a90 	vmov	r3, s15
 8001016:	b21b      	sxth	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	3b6a      	subs	r3, #106	@ 0x6a
 800101c:	72bb      	strb	r3, [r7, #10]
	uint8_t pwmc = ((int16_t)c) + 150;
 800101e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001026:	ee17 3a90 	vmov	r3, s15
 800102a:	b21b      	sxth	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	3b6a      	subs	r3, #106	@ 0x6a
 8001030:	727b      	strb	r3, [r7, #9]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwma);
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <_Z15outputElecAngleft+0x144>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	7afa      	ldrb	r2, [r7, #11]
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmb);
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <_Z15outputElecAngleft+0x144>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	7aba      	ldrb	r2, [r7, #10]
 8001040:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwmc);
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <_Z15outputElecAngleft+0x144>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	7a7a      	ldrb	r2, [r7, #9]
 8001048:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800104a:	bf00      	nop
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bdb0      	pop	{r4, r5, r7, pc}
 8001052:	bf00      	nop
 8001054:	f3af 8000 	nop.w
 8001058:	e6502b91 	.word	0xe6502b91
 800105c:	3febb67a 	.word	0x3febb67a
 8001060:	bfe00000 	.word	0xbfe00000
 8001064:	2000021c 	.word	0x2000021c

08001068 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	@ 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	2238      	movs	r2, #56	@ 0x38
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f006 fce6 	bl	8007a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800108e:	f003 f801 	bl	8004094 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001096:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109c:	2340      	movs	r3, #64	@ 0x40
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 f8a7 	bl	80041fc <HAL_RCC_OscConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bf14      	ite	ne
 80010b4:	2301      	movne	r3, #1
 80010b6:	2300      	moveq	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 80010be:	f000 fb71 	bl	80017a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c6:	2301      	movs	r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fba0 	bl	8004820 <HAL_RCC_ClockConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	bf14      	ite	ne
 80010e6:	2301      	movne	r3, #1
 80010e8:	2300      	moveq	r3, #0
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80010f0:	f000 fb58 	bl	80017a4 <Error_Handler>
  }
}
 80010f4:	bf00      	nop
 80010f6:	3750      	adds	r7, #80	@ 0x50
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08c      	sub	sp, #48	@ 0x30
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2220      	movs	r2, #32
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f006 fc97 	bl	8007a48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800111a:	4b39      	ldr	r3, [pc, #228]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 800111c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001120:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001122:	4b37      	ldr	r3, [pc, #220]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 8001124:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001128:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800112a:	4b35      	ldr	r3, [pc, #212]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001130:	4b33      	ldr	r3, [pc, #204]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001136:	4b32      	ldr	r3, [pc, #200]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800113c:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001142:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 8001144:	2204      	movs	r2, #4
 8001146:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 800114a:	2200      	movs	r2, #0
 800114c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800114e:	4b2c      	ldr	r3, [pc, #176]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 8001150:	2200      	movs	r2, #0
 8001152:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001154:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 8001156:	2201      	movs	r2, #1
 8001158:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800115a:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001162:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 8001164:	2200      	movs	r2, #0
 8001166:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001168:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 800116a:	2200      	movs	r2, #0
 800116c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800116e:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001176:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 8001178:	2200      	movs	r2, #0
 800117a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001184:	481e      	ldr	r0, [pc, #120]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 8001186:	f001 f8e1 	bl	800234c <HAL_ADC_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	bf14      	ite	ne
 8001190:	2301      	movne	r3, #1
 8001192:	2300      	moveq	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800119a:	f000 fb03 	bl	80017a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a6:	4619      	mov	r1, r3
 80011a8:	4815      	ldr	r0, [pc, #84]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 80011aa:	f001 fe69 	bl	8002e80 <HAL_ADCEx_MultiModeConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf14      	ite	ne
 80011b4:	2301      	movne	r3, #1
 80011b6:	2300      	moveq	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 80011be:	f000 faf1 	bl	80017a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <_ZL12MX_ADC1_Initv+0x108>)
 80011c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c6:	2306      	movs	r3, #6
 80011c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ce:	237f      	movs	r3, #127	@ 0x7f
 80011d0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d2:	2304      	movs	r3, #4
 80011d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4808      	ldr	r0, [pc, #32]	@ (8001200 <_ZL12MX_ADC1_Initv+0x104>)
 80011e0:	f001 fa38 	bl	8002654 <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 80011f4:	f000 fad6 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	@ 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000028 	.word	0x20000028
 8001204:	08600004 	.word	0x08600004

08001208 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2220      	movs	r2, #32
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f006 fc17 	bl	8007a48 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800121a:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 800121c:	4a30      	ldr	r2, [pc, #192]	@ (80012e0 <_ZL12MX_ADC2_Initv+0xd8>)
 800121e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001220:	4b2e      	ldr	r3, [pc, #184]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 8001222:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001226:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001228:	4b2c      	ldr	r3, [pc, #176]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122e:	4b2b      	ldr	r3, [pc, #172]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001234:	4b29      	ldr	r3, [pc, #164]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800123a:	4b28      	ldr	r3, [pc, #160]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001240:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 8001242:	2204      	movs	r2, #4
 8001244:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001246:	4b25      	ldr	r3, [pc, #148]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 8001248:	2200      	movs	r2, #0
 800124a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800124c:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 800124e:	2200      	movs	r2, #0
 8001250:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001252:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 8001254:	2201      	movs	r2, #1
 8001256:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001258:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001260:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 8001262:	2200      	movs	r2, #0
 8001264:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001266:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 8001268:	2200      	movs	r2, #0
 800126a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001274:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 8001276:	2200      	movs	r2, #0
 8001278:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001282:	4816      	ldr	r0, [pc, #88]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 8001284:	f001 f862 	bl	800234c <HAL_ADC_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	bf14      	ite	ne
 800128e:	2301      	movne	r3, #1
 8001290:	2300      	moveq	r3, #0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 8001298:	f000 fa84 	bl	80017a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <_ZL12MX_ADC2_Initv+0xdc>)
 800129e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a0:	2306      	movs	r3, #6
 80012a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a8:	237f      	movs	r3, #127	@ 0x7f
 80012aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012ac:	2304      	movs	r3, #4
 80012ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	4808      	ldr	r0, [pc, #32]	@ (80012dc <_ZL12MX_ADC2_Initv+0xd4>)
 80012ba:	f001 f9cb 	bl	8002654 <HAL_ADC_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf14      	ite	ne
 80012c4:	2301      	movne	r3, #1
 80012c6:	2300      	moveq	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 80012ce:	f000 fa69 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000094 	.word	0x20000094
 80012e0:	50000100 	.word	0x50000100
 80012e4:	0c900008 	.word	0x0c900008

080012e8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <_ZL12MX_I2C1_Initv+0x90>)
 80012ee:	4a23      	ldr	r2, [pc, #140]	@ (800137c <_ZL12MX_I2C1_Initv+0x94>)
 80012f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <_ZL12MX_I2C1_Initv+0x90>)
 80012f4:	4a22      	ldr	r2, [pc, #136]	@ (8001380 <_ZL12MX_I2C1_Initv+0x98>)
 80012f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <_ZL12MX_I2C1_Initv+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <_ZL12MX_I2C1_Initv+0x90>)
 8001300:	2201      	movs	r2, #1
 8001302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001304:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <_ZL12MX_I2C1_Initv+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800130a:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <_ZL12MX_I2C1_Initv+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001310:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <_ZL12MX_I2C1_Initv+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001316:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <_ZL12MX_I2C1_Initv+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131c:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <_ZL12MX_I2C1_Initv+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001322:	4815      	ldr	r0, [pc, #84]	@ (8001378 <_ZL12MX_I2C1_Initv+0x90>)
 8001324:	f002 f8ce 	bl	80034c4 <HAL_I2C_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf14      	ite	ne
 800132e:	2301      	movne	r3, #1
 8001330:	2300      	moveq	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001338:	f000 fa34 	bl	80017a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800133c:	2100      	movs	r1, #0
 800133e:	480e      	ldr	r0, [pc, #56]	@ (8001378 <_ZL12MX_I2C1_Initv+0x90>)
 8001340:	f002 fe10 	bl	8003f64 <HAL_I2CEx_ConfigAnalogFilter>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf14      	ite	ne
 800134a:	2301      	movne	r3, #1
 800134c:	2300      	moveq	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001354:	f000 fa26 	bl	80017a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	4807      	ldr	r0, [pc, #28]	@ (8001378 <_ZL12MX_I2C1_Initv+0x90>)
 800135c:	f002 fe4d 	bl	8003ffa <HAL_I2CEx_ConfigDigitalFilter>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf14      	ite	ne
 8001366:	2301      	movne	r3, #1
 8001368:	2300      	moveq	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001370:	f000 fa18 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000100 	.word	0x20000100
 800137c:	40005400 	.word	0x40005400
 8001380:	00503d58 	.word	0x00503d58

08001384 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001388:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 800138a:	4a1e      	ldr	r2, [pc, #120]	@ (8001404 <_ZL12MX_SPI2_Initv+0x80>)
 800138c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800138e:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 8001390:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001394:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800139c:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 800139e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a4:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 80013b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 80013ba:	2228      	movs	r2, #40	@ 0x28
 80013bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 80013d2:	2207      	movs	r2, #7
 80013d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013e2:	4807      	ldr	r0, [pc, #28]	@ (8001400 <_ZL12MX_SPI2_Initv+0x7c>)
 80013e4:	f003 fe28 	bl	8005038 <HAL_SPI_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf14      	ite	ne
 80013ee:	2301      	movne	r3, #1
 80013f0:	2300      	moveq	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 80013f8:	f000 f9d4 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000154 	.word	0x20000154
 8001404:	40003800 	.word	0x40003800

08001408 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 800140e:	4a1e      	ldr	r2, [pc, #120]	@ (8001488 <_ZL12MX_SPI3_Initv+0x80>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001412:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 8001414:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001418:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001420:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 8001422:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001426:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001428:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 8001436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800143a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144e:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 8001450:	2200      	movs	r2, #0
 8001452:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 8001456:	2207      	movs	r2, #7
 8001458:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 800145c:	2200      	movs	r2, #0
 800145e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 8001462:	2208      	movs	r2, #8
 8001464:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001466:	4807      	ldr	r0, [pc, #28]	@ (8001484 <_ZL12MX_SPI3_Initv+0x7c>)
 8001468:	f003 fde6 	bl	8005038 <HAL_SPI_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	bf14      	ite	ne
 8001472:	2301      	movne	r3, #1
 8001474:	2300      	moveq	r3, #0
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 800147c:	f000 f992 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200001b8 	.word	0x200001b8
 8001488:	40003c00 	.word	0x40003c00

0800148c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b098      	sub	sp, #96	@ 0x60
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001492:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800149e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2234      	movs	r2, #52	@ 0x34
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f006 fac5 	bl	8007a48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014be:	4b55      	ldr	r3, [pc, #340]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 80014c0:	4a55      	ldr	r2, [pc, #340]	@ (8001618 <_ZL12MX_TIM1_Initv+0x18c>)
 80014c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014c4:	4b53      	ldr	r3, [pc, #332]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80014ca:	4b52      	ldr	r3, [pc, #328]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 80014cc:	2260      	movs	r2, #96	@ 0x60
 80014ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 300;
 80014d0:	4b50      	ldr	r3, [pc, #320]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 80014d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80014de:	4b4d      	ldr	r3, [pc, #308]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ea:	484a      	ldr	r0, [pc, #296]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 80014ec:	f003 fe4f 	bl	800518e <HAL_TIM_PWM_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	bf14      	ite	ne
 80014f6:	2301      	movne	r3, #1
 80014f8:	2300      	moveq	r3, #0
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8001500:	f000 f950 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001510:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001514:	4619      	mov	r1, r3
 8001516:	483f      	ldr	r0, [pc, #252]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 8001518:	f004 fdb0 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf14      	ite	ne
 8001522:	2301      	movne	r3, #1
 8001524:	2300      	moveq	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 800152c:	f000 f93a 	bl	80017a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001530:	2360      	movs	r3, #96	@ 0x60
 8001532:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800153c:	2300      	movs	r3, #0
 800153e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800154c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001552:	2200      	movs	r2, #0
 8001554:	4619      	mov	r1, r3
 8001556:	482f      	ldr	r0, [pc, #188]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 8001558:	f003 ffbc 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 800156c:	f000 f91a 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001570:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001574:	2204      	movs	r2, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4826      	ldr	r0, [pc, #152]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 800157a:	f003 ffab 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf14      	ite	ne
 8001584:	2301      	movne	r3, #1
 8001586:	2300      	moveq	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 800158e:	f000 f909 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001592:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001596:	2208      	movs	r2, #8
 8001598:	4619      	mov	r1, r3
 800159a:	481e      	ldr	r0, [pc, #120]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 800159c:	f003 ff9a 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf14      	ite	ne
 80015a6:	2301      	movne	r3, #1
 80015a8:	2300      	moveq	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 80015b0:	f000 f8f8 	bl	80017a4 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]

  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4809      	ldr	r0, [pc, #36]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 80015ee:	f004 fdc7 	bl	8006180 <HAL_TIMEx_ConfigBreakDeadTime>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf14      	ite	ne
 80015f8:	2301      	movne	r3, #1
 80015fa:	2300      	moveq	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <_ZL12MX_TIM1_Initv+0x17a>
  {
    Error_Handler();
 8001602:	f000 f8cf 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001606:	4803      	ldr	r0, [pc, #12]	@ (8001614 <_ZL12MX_TIM1_Initv+0x188>)
 8001608:	f000 fafe 	bl	8001c08 <HAL_TIM_MspPostInit>

}
 800160c:	bf00      	nop
 800160e:	3760      	adds	r7, #96	@ 0x60
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2000021c 	.word	0x2000021c
 8001618:	40012c00 	.word	0x40012c00

0800161c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001620:	4b2c      	ldr	r3, [pc, #176]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001622:	4a2d      	ldr	r2, [pc, #180]	@ (80016d8 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001626:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b29      	ldr	r3, [pc, #164]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163a:	4b26      	ldr	r3, [pc, #152]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b23      	ldr	r3, [pc, #140]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b21      	ldr	r3, [pc, #132]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001652:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001658:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165e:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001660:	2200      	movs	r2, #0
 8001662:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001664:	481b      	ldr	r0, [pc, #108]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001666:	f004 fe3c 	bl	80062e2 <HAL_UART_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf14      	ite	ne
 8001670:	2301      	movne	r3, #1
 8001672:	2300      	moveq	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800167a:	f000 f893 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167e:	2100      	movs	r1, #0
 8001680:	4814      	ldr	r0, [pc, #80]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001682:	f005 fba3 	bl	8006dcc <HAL_UARTEx_SetTxFifoThreshold>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf14      	ite	ne
 800168c:	2301      	movne	r3, #1
 800168e:	2300      	moveq	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001696:	f000 f885 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800169a:	2100      	movs	r1, #0
 800169c:	480d      	ldr	r0, [pc, #52]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800169e:	f005 fbd3 	bl	8006e48 <HAL_UARTEx_SetRxFifoThreshold>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf14      	ite	ne
 80016a8:	2301      	movne	r3, #1
 80016aa:	2300      	moveq	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80016b2:	f000 f877 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016b6:	4807      	ldr	r0, [pc, #28]	@ (80016d4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80016b8:	f005 fb4f 	bl	8006d5a <HAL_UARTEx_DisableFifoMode>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf14      	ite	ne
 80016c2:	2301      	movne	r3, #1
 80016c4:	2300      	moveq	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80016cc:	f000 f86a 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000268 	.word	0x20000268
 80016d8:	40004400 	.word	0x40004400

080016dc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	4b2a      	ldr	r3, [pc, #168]	@ (800179c <_ZL12MX_GPIO_Initv+0xc0>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f6:	4a29      	ldr	r2, [pc, #164]	@ (800179c <_ZL12MX_GPIO_Initv+0xc0>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fe:	4b27      	ldr	r3, [pc, #156]	@ (800179c <_ZL12MX_GPIO_Initv+0xc0>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800170a:	4b24      	ldr	r3, [pc, #144]	@ (800179c <_ZL12MX_GPIO_Initv+0xc0>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	4a23      	ldr	r2, [pc, #140]	@ (800179c <_ZL12MX_GPIO_Initv+0xc0>)
 8001710:	f043 0320 	orr.w	r3, r3, #32
 8001714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <_ZL12MX_GPIO_Initv+0xc0>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	f003 0320 	and.w	r3, r3, #32
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <_ZL12MX_GPIO_Initv+0xc0>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	4a1d      	ldr	r2, [pc, #116]	@ (800179c <_ZL12MX_GPIO_Initv+0xc0>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172e:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <_ZL12MX_GPIO_Initv+0xc0>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	4b18      	ldr	r3, [pc, #96]	@ (800179c <_ZL12MX_GPIO_Initv+0xc0>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	4a17      	ldr	r2, [pc, #92]	@ (800179c <_ZL12MX_GPIO_Initv+0xc0>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <_ZL12MX_GPIO_Initv+0xc0>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CSN_Pin|DRVOFF_Pin|SCS_N_Pin|SLEEP_N_Pin
 8001752:	2200      	movs	r2, #0
 8001754:	f244 2107 	movw	r1, #16903	@ 0x4207
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <_ZL12MX_GPIO_Initv+0xc4>)
 800175a:	f001 fe9b 	bl	8003494 <HAL_GPIO_WritePin>
                          |NRF_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NRF_CSN_Pin DRVOFF_Pin SCS_N_Pin SLEEP_N_Pin
                           NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|DRVOFF_Pin|SCS_N_Pin|SLEEP_N_Pin
 800175e:	f244 2307 	movw	r3, #16903	@ 0x4207
 8001762:	617b      	str	r3, [r7, #20]
                          |NRF_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	480a      	ldr	r0, [pc, #40]	@ (80017a0 <_ZL12MX_GPIO_Initv+0xc4>)
 8001778:	f001 fd0a 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_N_Pin */
  GPIO_InitStruct.Pin = FAULT_N_Pin;
 800177c:	2308      	movs	r3, #8
 800177e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_N_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4804      	ldr	r0, [pc, #16]	@ (80017a0 <_ZL12MX_GPIO_Initv+0xc4>)
 8001790:	f001 fcfe 	bl	8003190 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	@ 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	48000800 	.word	0x48000800

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <Error_Handler+0x8>

080017b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <HAL_MspInit+0x44>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ba:	4a0e      	ldr	r2, [pc, #56]	@ (80017f4 <HAL_MspInit+0x44>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017c2:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <HAL_MspInit+0x44>)
 80017c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <HAL_MspInit+0x44>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d2:	4a08      	ldr	r2, [pc, #32]	@ (80017f4 <HAL_MspInit+0x44>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_MspInit+0x44>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017e6:	f002 fcf9 	bl	80041dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b09e      	sub	sp, #120	@ 0x78
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	2244      	movs	r2, #68	@ 0x44
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f006 f915 	bl	8007a48 <memset>
  if(hadc->Instance==ADC1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001826:	d156      	bne.n	80018d6 <HAL_ADC_MspInit+0xde>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001828:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800182c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800182e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001832:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001834:	f107 0320 	add.w	r3, r7, #32
 8001838:	4618      	mov	r0, r3
 800183a:	f003 fa0d 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001844:	f7ff ffae 	bl	80017a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001848:	4b46      	ldr	r3, [pc, #280]	@ (8001964 <HAL_ADC_MspInit+0x16c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	4a45      	ldr	r2, [pc, #276]	@ (8001964 <HAL_ADC_MspInit+0x16c>)
 8001850:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001852:	4b44      	ldr	r3, [pc, #272]	@ (8001964 <HAL_ADC_MspInit+0x16c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d10b      	bne.n	8001872 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800185a:	4b43      	ldr	r3, [pc, #268]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	4a42      	ldr	r2, [pc, #264]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 8001860:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001866:	4b40      	ldr	r3, [pc, #256]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b3d      	ldr	r3, [pc, #244]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	4a3c      	ldr	r2, [pc, #240]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187e:	4b3a      	ldr	r3, [pc, #232]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	4b37      	ldr	r3, [pc, #220]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	4a36      	ldr	r2, [pc, #216]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001896:	4b34      	ldr	r3, [pc, #208]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80018a2:	2306      	movs	r3, #6
 80018a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a6:	2303      	movs	r3, #3
 80018a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b8:	f001 fc6a 	bl	8003190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018bc:	2303      	movs	r3, #3
 80018be:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c0:	2303      	movs	r3, #3
 80018c2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018cc:	4619      	mov	r1, r3
 80018ce:	4827      	ldr	r0, [pc, #156]	@ (800196c <HAL_ADC_MspInit+0x174>)
 80018d0:	f001 fc5e 	bl	8003190 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80018d4:	e042      	b.n	800195c <HAL_ADC_MspInit+0x164>
  else if(hadc->Instance==ADC2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a25      	ldr	r2, [pc, #148]	@ (8001970 <HAL_ADC_MspInit+0x178>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d13d      	bne.n	800195c <HAL_ADC_MspInit+0x164>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80018e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80018e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ec:	f107 0320 	add.w	r3, r7, #32
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 f9b1 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_ADC_MspInit+0x108>
      Error_Handler();
 80018fc:	f7ff ff52 	bl	80017a4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001900:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <HAL_ADC_MspInit+0x16c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	4a17      	ldr	r2, [pc, #92]	@ (8001964 <HAL_ADC_MspInit+0x16c>)
 8001908:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800190a:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <HAL_ADC_MspInit+0x16c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d10b      	bne.n	800192a <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 8001918:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800191c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	4a0e      	ldr	r2, [pc, #56]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001936:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <HAL_ADC_MspInit+0x170>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001942:	23c0      	movs	r3, #192	@ 0xc0
 8001944:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001946:	2303      	movs	r3, #3
 8001948:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001958:	f001 fc1a 	bl	8003190 <HAL_GPIO_Init>
}
 800195c:	bf00      	nop
 800195e:	3778      	adds	r7, #120	@ 0x78
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200002fc 	.word	0x200002fc
 8001968:	40021000 	.word	0x40021000
 800196c:	48000400 	.word	0x48000400
 8001970:	50000100 	.word	0x50000100

08001974 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b09c      	sub	sp, #112	@ 0x70
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800198c:	f107 0318 	add.w	r3, r7, #24
 8001990:	2244      	movs	r2, #68	@ 0x44
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f006 f857 	bl	8007a48 <memset>
  if(hi2c->Instance==I2C1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a54 <HAL_I2C_MspInit+0xe0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d153      	bne.n	8001a4c <HAL_I2C_MspInit+0xd8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019a4:	2340      	movs	r3, #64	@ 0x40
 80019a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ac:	f107 0318 	add.w	r3, r7, #24
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 f951 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019bc:	f7ff fef2 	bl	80017a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <HAL_I2C_MspInit+0xe4>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c4:	4a24      	ldr	r2, [pc, #144]	@ (8001a58 <HAL_I2C_MspInit+0xe4>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019cc:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <HAL_I2C_MspInit+0xe4>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <HAL_I2C_MspInit+0xe4>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a58 <HAL_I2C_MspInit+0xe4>)
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <HAL_I2C_MspInit+0xe4>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f6:	2312      	movs	r3, #18
 80019f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a02:	2304      	movs	r3, #4
 8001a04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a10:	f001 fbbe 	bl	8003190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a18:	2312      	movs	r3, #18
 8001a1a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a24:	2304      	movs	r3, #4
 8001a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480b      	ldr	r0, [pc, #44]	@ (8001a5c <HAL_I2C_MspInit+0xe8>)
 8001a30:	f001 fbae 	bl	8003190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <HAL_I2C_MspInit+0xe4>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a38:	4a07      	ldr	r2, [pc, #28]	@ (8001a58 <HAL_I2C_MspInit+0xe4>)
 8001a3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_I2C_MspInit+0xe4>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a4c:	bf00      	nop
 8001a4e:	3770      	adds	r7, #112	@ 0x70
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40005400 	.word	0x40005400
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000400 	.word	0x48000400

08001a60 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08e      	sub	sp, #56	@ 0x38
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001bb0 <HAL_SPI_MspInit+0x150>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d164      	bne.n	8001b4c <HAL_SPI_MspInit+0xec>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a82:	4b4c      	ldr	r3, [pc, #304]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a86:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a8e:	4b49      	ldr	r3, [pc, #292]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a96:	623b      	str	r3, [r7, #32]
 8001a98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a9a:	4b46      	ldr	r3, [pc, #280]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	4a45      	ldr	r2, [pc, #276]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001aa0:	f043 0320 	orr.w	r3, r3, #32
 8001aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa6:	4b43      	ldr	r3, [pc, #268]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	f003 0320 	and.w	r3, r3, #32
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b40      	ldr	r3, [pc, #256]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001abe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	4a39      	ldr	r2, [pc, #228]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad6:	4b37      	ldr	r3, [pc, #220]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PF9     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ae2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aec:	2302      	movs	r3, #2
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af0:	2302      	movs	r3, #2
 8001af2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af4:	2305      	movs	r3, #5
 8001af6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001afc:	4619      	mov	r1, r3
 8001afe:	482e      	ldr	r0, [pc, #184]	@ (8001bb8 <HAL_SPI_MspInit+0x158>)
 8001b00:	f001 fb46 	bl	8003190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b12:	2302      	movs	r3, #2
 8001b14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b16:	2305      	movs	r3, #5
 8001b18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4826      	ldr	r0, [pc, #152]	@ (8001bbc <HAL_SPI_MspInit+0x15c>)
 8001b22:	f001 fb35 	bl	8003190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b30:	2302      	movs	r3, #2
 8001b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b34:	2302      	movs	r3, #2
 8001b36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b38:	2305      	movs	r3, #5
 8001b3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b46:	f001 fb23 	bl	8003190 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b4a:	e02d      	b.n	8001ba8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI3)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <HAL_SPI_MspInit+0x160>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d128      	bne.n	8001ba8 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b56:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5a:	4a16      	ldr	r2, [pc, #88]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b62:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b72:	4a10      	ldr	r2, [pc, #64]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <HAL_SPI_MspInit+0x154>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b86:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b98:	2306      	movs	r3, #6
 8001b9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4808      	ldr	r0, [pc, #32]	@ (8001bc4 <HAL_SPI_MspInit+0x164>)
 8001ba4:	f001 faf4 	bl	8003190 <HAL_GPIO_Init>
}
 8001ba8:	bf00      	nop
 8001baa:	3738      	adds	r7, #56	@ 0x38
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40003800 	.word	0x40003800
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	48001400 	.word	0x48001400
 8001bbc:	48000400 	.word	0x48000400
 8001bc0:	40003c00 	.word	0x40003c00
 8001bc4:	48000800 	.word	0x48000800

08001bc8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <HAL_TIM_PWM_MspInit+0x38>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bda:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bde:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001be0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001be4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40012c00 	.word	0x40012c00
 8001c04:	40021000 	.word	0x40021000

08001c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a2f      	ldr	r2, [pc, #188]	@ (8001ce4 <HAL_TIM_MspPostInit+0xdc>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d157      	bne.n	8001cda <HAL_TIM_MspPostInit+0xd2>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce8 <HAL_TIM_MspPostInit+0xe0>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ce8 <HAL_TIM_MspPostInit+0xe0>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce8 <HAL_TIM_MspPostInit+0xe0>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	4b29      	ldr	r3, [pc, #164]	@ (8001ce8 <HAL_TIM_MspPostInit+0xe0>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	4a28      	ldr	r2, [pc, #160]	@ (8001ce8 <HAL_TIM_MspPostInit+0xe0>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <HAL_TIM_MspPostInit+0xe0>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <HAL_TIM_MspPostInit+0xe0>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	4a22      	ldr	r2, [pc, #136]	@ (8001ce8 <HAL_TIM_MspPostInit+0xe0>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c66:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <HAL_TIM_MspPostInit+0xe0>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001c84:	2304      	movs	r3, #4
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4817      	ldr	r0, [pc, #92]	@ (8001cec <HAL_TIM_MspPostInit+0xe4>)
 8001c90:	f001 fa7e 	bl	8003190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	480f      	ldr	r0, [pc, #60]	@ (8001cf0 <HAL_TIM_MspPostInit+0xe8>)
 8001cb2:	f001 fa6d 	bl	8003190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001cb6:	f44f 53b8 	mov.w	r3, #5888	@ 0x1700
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001cc8:	2306      	movs	r3, #6
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd6:	f001 fa5b 	bl	8003190 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cda:	bf00      	nop
 8001cdc:	3728      	adds	r7, #40	@ 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40012c00 	.word	0x40012c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	48000800 	.word	0x48000800
 8001cf0:	48000400 	.word	0x48000400

08001cf4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b09a      	sub	sp, #104	@ 0x68
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	2244      	movs	r2, #68	@ 0x44
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f005 fe97 	bl	8007a48 <memset>
  if(huart->Instance==USART2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <HAL_UART_MspInit+0xa4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d135      	bne.n	8001d90 <HAL_UART_MspInit+0x9c>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d24:	2302      	movs	r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 ff91 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d3c:	f7ff fd32 	bl	80017a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d40:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <HAL_UART_MspInit+0xa8>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d44:	4a15      	ldr	r2, [pc, #84]	@ (8001d9c <HAL_UART_MspInit+0xa8>)
 8001d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <HAL_UART_MspInit+0xa8>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <HAL_UART_MspInit+0xa8>)
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d9c <HAL_UART_MspInit+0xa8>)
 8001d5e:	f043 0302 	orr.w	r3, r3, #2
 8001d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d64:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <HAL_UART_MspInit+0xa8>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001d70:	2318      	movs	r3, #24
 8001d72:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d80:	2307      	movs	r3, #7
 8001d82:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <HAL_UART_MspInit+0xac>)
 8001d8c:	f001 fa00 	bl	8003190 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d90:	bf00      	nop
 8001d92:	3768      	adds	r7, #104	@ 0x68
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40004400 	.word	0x40004400
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	48000400 	.word	0x48000400

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <NMI_Handler+0x4>

08001dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <HardFault_Handler+0x4>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <MemManage_Handler+0x4>

08001dbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfa:	f000 f891 	bl	8001f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e08:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <SystemInit+0x20>)
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e0e:	4a05      	ldr	r2, [pc, #20]	@ (8001e24 <SystemInit+0x20>)
 8001e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e28:	480d      	ldr	r0, [pc, #52]	@ (8001e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e2a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e2c:	f7ff ffea 	bl	8001e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e30:	480c      	ldr	r0, [pc, #48]	@ (8001e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e32:	490d      	ldr	r1, [pc, #52]	@ (8001e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e34:	4a0d      	ldr	r2, [pc, #52]	@ (8001e6c <LoopForever+0xe>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e48:	4c0a      	ldr	r4, [pc, #40]	@ (8001e74 <LoopForever+0x16>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001e56:	f005 fdff 	bl	8007a58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e5a:	f7fe ffe5 	bl	8000e28 <main>

08001e5e <LoopForever>:

LoopForever:
    b LoopForever
 8001e5e:	e7fe      	b.n	8001e5e <LoopForever>
  ldr   r0, =_estack
 8001e60:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e6c:	08007ed8 	.word	0x08007ed8
  ldr r2, =_sbss
 8001e70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e74:	20000304 	.word	0x20000304

08001e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC1_2_IRQHandler>

08001e7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f001 f951 	bl	800312c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f000 f80e 	bl	8001eac <HAL_InitTick>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	71fb      	strb	r3, [r7, #7]
 8001e9a:	e001      	b.n	8001ea0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e9c:	f7ff fc88 	bl	80017b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea0:	79fb      	ldrb	r3, [r7, #7]

}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001eb8:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <HAL_InitTick+0x68>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d022      	beq.n	8001f06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ec0:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <HAL_InitTick+0x6c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <HAL_InitTick+0x68>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 f94e 	bl	8003176 <HAL_SYSTICK_Config>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10f      	bne.n	8001f00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b0f      	cmp	r3, #15
 8001ee4:	d809      	bhi.n	8001efa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001eee:	f001 f928 	bl	8003142 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <HAL_InitTick+0x70>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e007      	b.n	8001f0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	e004      	b.n	8001f0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e001      	b.n	8001f0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000008 	.word	0x20000008
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000004 	.word	0x20000004

08001f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <HAL_IncTick+0x1c>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_IncTick+0x20>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a03      	ldr	r2, [pc, #12]	@ (8001f3c <HAL_IncTick+0x1c>)
 8001f30:	6013      	str	r3, [r2, #0]
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	20000300 	.word	0x20000300
 8001f40:	20000008 	.word	0x20000008

08001f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <HAL_GetTick+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000300 	.word	0x20000300

08001f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff ffee 	bl	8001f44 <HAL_GetTick>
 8001f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f74:	d004      	beq.n	8001f80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_Delay+0x40>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f80:	bf00      	nop
 8001f82:	f7ff ffdf 	bl	8001f44 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d8f7      	bhi.n	8001f82 <HAL_Delay+0x26>
  {
  }
}
 8001f92:	bf00      	nop
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	609a      	str	r2, [r3, #8]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3360      	adds	r3, #96	@ 0x60
 800201a:	461a      	mov	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <LL_ADC_SetOffset+0x44>)
 800202a:	4013      	ands	r3, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	4313      	orrs	r3, r2
 8002038:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002040:	bf00      	nop
 8002042:	371c      	adds	r7, #28
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	03fff000 	.word	0x03fff000

08002050 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3360      	adds	r3, #96	@ 0x60
 800205e:	461a      	mov	r2, r3
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3360      	adds	r3, #96	@ 0x60
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020a6:	bf00      	nop
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b087      	sub	sp, #28
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3360      	adds	r3, #96	@ 0x60
 80020c2:	461a      	mov	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3360      	adds	r3, #96	@ 0x60
 80020f8:	461a      	mov	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	431a      	orrs	r2, r3
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002112:	bf00      	nop
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	615a      	str	r2, [r3, #20]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3330      	adds	r3, #48	@ 0x30
 8002154:	461a      	mov	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	4413      	add	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	211f      	movs	r1, #31
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	401a      	ands	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	0e9b      	lsrs	r3, r3, #26
 800217c:	f003 011f 	and.w	r1, r3, #31
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	431a      	orrs	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002190:	bf00      	nop
 8002192:	371c      	adds	r7, #28
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3314      	adds	r3, #20
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0e5b      	lsrs	r3, r3, #25
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	0d1b      	lsrs	r3, r3, #20
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	2107      	movs	r1, #7
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	401a      	ands	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	0d1b      	lsrs	r3, r3, #20
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	431a      	orrs	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220c:	43db      	mvns	r3, r3
 800220e:	401a      	ands	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0318 	and.w	r3, r3, #24
 8002216:	4908      	ldr	r1, [pc, #32]	@ (8002238 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002218:	40d9      	lsrs	r1, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	400b      	ands	r3, r1
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	431a      	orrs	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	0007ffff 	.word	0x0007ffff

0800223c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800224c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6093      	str	r3, [r2, #8]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002274:	d101      	bne.n	800227a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002298:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800229c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022c4:	d101      	bne.n	80022ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <LL_ADC_IsEnabled+0x18>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <LL_ADC_IsEnabled+0x1a>
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b04      	cmp	r3, #4
 8002310:	d101      	bne.n	8002316 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b08      	cmp	r3, #8
 8002336:	d101      	bne.n	800233c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b089      	sub	sp, #36	@ 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e167      	b.n	8002636 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff fa3f 	bl	80017f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff67 	bl	8002260 <LL_ADC_IsDeepPowerDownEnabled>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff4d 	bl	800223c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff82 	bl	80022b0 <LL_ADC_IsInternalRegulatorEnabled>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d115      	bne.n	80023de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ff66 	bl	8002288 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023bc:	4ba0      	ldr	r3, [pc, #640]	@ (8002640 <HAL_ADC_Init+0x2f4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	099b      	lsrs	r3, r3, #6
 80023c2:	4aa0      	ldr	r2, [pc, #640]	@ (8002644 <HAL_ADC_Init+0x2f8>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	3301      	adds	r3, #1
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff64 	bl	80022b0 <LL_ADC_IsInternalRegulatorEnabled>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10d      	bne.n	800240a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f2:	f043 0210 	orr.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff75 	bl	80022fe <LL_ADC_REG_IsConversionOngoing>
 8002414:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b00      	cmp	r3, #0
 8002420:	f040 8100 	bne.w	8002624 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 80fc 	bne.w	8002624 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002430:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002434:	f043 0202 	orr.w	r2, r3, #2
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff49 	bl	80022d8 <LL_ADC_IsEnabled>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d111      	bne.n	8002470 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800244c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002450:	f7ff ff42 	bl	80022d8 <LL_ADC_IsEnabled>
 8002454:	4604      	mov	r4, r0
 8002456:	487c      	ldr	r0, [pc, #496]	@ (8002648 <HAL_ADC_Init+0x2fc>)
 8002458:	f7ff ff3e 	bl	80022d8 <LL_ADC_IsEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	4323      	orrs	r3, r4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d105      	bne.n	8002470 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4619      	mov	r1, r3
 800246a:	4878      	ldr	r0, [pc, #480]	@ (800264c <HAL_ADC_Init+0x300>)
 800246c:	f7ff fd98 	bl	8001fa0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	7f5b      	ldrb	r3, [r3, #29]
 8002474:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800247a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002480:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002486:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800248e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800249a:	2b01      	cmp	r3, #1
 800249c:	d106      	bne.n	80024ac <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	045b      	lsls	r3, r3, #17
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d009      	beq.n	80024c8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	4b60      	ldr	r3, [pc, #384]	@ (8002650 <HAL_ADC_Init+0x304>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	69b9      	ldr	r1, [r7, #24]
 80024d8:	430b      	orrs	r3, r1
 80024da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff14 	bl	8002324 <LL_ADC_INJ_IsConversionOngoing>
 80024fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d16d      	bne.n	80025e0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d16a      	bne.n	80025e0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800250e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002516:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002526:	f023 0302 	bic.w	r3, r3, #2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	69b9      	ldr	r1, [r7, #24]
 8002530:	430b      	orrs	r3, r1
 8002532:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d017      	beq.n	800256c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800254a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002554:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002558:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6911      	ldr	r1, [r2, #16]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	430b      	orrs	r3, r1
 8002566:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800256a:	e013      	b.n	8002594 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800257a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800258c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002590:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800259a:	2b01      	cmp	r3, #1
 800259c:	d118      	bne.n	80025d0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025b4:	4311      	orrs	r1, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025ba:	4311      	orrs	r1, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025c0:	430a      	orrs	r2, r1
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	611a      	str	r2, [r3, #16]
 80025ce:	e007      	b.n	80025e0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d10c      	bne.n	8002602 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f023 010f 	bic.w	r1, r3, #15
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	1e5a      	subs	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002600:	e007      	b.n	8002612 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 020f 	bic.w	r2, r2, #15
 8002610:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002616:	f023 0303 	bic.w	r3, r3, #3
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002622:	e007      	b.n	8002634 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	f043 0210 	orr.w	r2, r3, #16
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002634:	7ffb      	ldrb	r3, [r7, #31]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	@ 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd90      	pop	{r4, r7, pc}
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000
 8002644:	053e2d63 	.word	0x053e2d63
 8002648:	50000100 	.word	0x50000100
 800264c:	50000300 	.word	0x50000300
 8002650:	fff04007 	.word	0xfff04007

08002654 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b0b6      	sub	sp, #216	@ 0xd8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x22>
 8002672:	2302      	movs	r3, #2
 8002674:	e3c8      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x7b4>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fe3b 	bl	80022fe <LL_ADC_REG_IsConversionOngoing>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 83ad 	bne.w	8002dea <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	f7ff fd51 	bl	8002144 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fe29 	bl	80022fe <LL_ADC_REG_IsConversionOngoing>
 80026ac:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fe35 	bl	8002324 <LL_ADC_INJ_IsConversionOngoing>
 80026ba:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 81d9 	bne.w	8002a7a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f040 81d4 	bne.w	8002a7a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026da:	d10f      	bne.n	80026fc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2200      	movs	r2, #0
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7ff fd58 	bl	800219c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fd12 	bl	800211e <LL_ADC_SetSamplingTimeCommonConfig>
 80026fa:	e00e      	b.n	800271a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	461a      	mov	r2, r3
 800270a:	f7ff fd47 	bl	800219c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fd02 	bl	800211e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	08db      	lsrs	r3, r3, #3
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b04      	cmp	r3, #4
 800273a:	d022      	beq.n	8002782 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6919      	ldr	r1, [r3, #16]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800274c:	f7ff fc5c 	bl	8002008 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6919      	ldr	r1, [r3, #16]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	461a      	mov	r2, r3
 800275e:	f7ff fca8 	bl	80020b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800276e:	2b01      	cmp	r3, #1
 8002770:	d102      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x124>
 8002772:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002776:	e000      	b.n	800277a <HAL_ADC_ConfigChannel+0x126>
 8002778:	2300      	movs	r3, #0
 800277a:	461a      	mov	r2, r3
 800277c:	f7ff fcb4 	bl	80020e8 <LL_ADC_SetOffsetSaturation>
 8002780:	e17b      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fc61 	bl	8002050 <LL_ADC_GetOffsetChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x15a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fc56 	bl	8002050 <LL_ADC_GetOffsetChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	0e9b      	lsrs	r3, r3, #26
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	e01e      	b.n	80027ec <HAL_ADC_ConfigChannel+0x198>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fc4b 	bl	8002050 <LL_ADC_GetOffsetChannel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80027dc:	2320      	movs	r3, #32
 80027de:	e004      	b.n	80027ea <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80027e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x1b0>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	e018      	b.n	8002836 <HAL_ADC_ConfigChannel+0x1e2>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800281c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e004      	b.n	8002836 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800282c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002836:	429a      	cmp	r2, r3
 8002838:	d106      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fc1a 	bl	800207c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fbfe 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10a      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x220>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2101      	movs	r1, #1
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fbf3 	bl	8002050 <LL_ADC_GetOffsetChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	0e9b      	lsrs	r3, r3, #26
 800286e:	f003 021f 	and.w	r2, r3, #31
 8002872:	e01e      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x25e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fbe8 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002896:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800289a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80028a2:	2320      	movs	r3, #32
 80028a4:	e004      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80028a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d105      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x276>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	e018      	b.n	80028fc <HAL_ADC_ConfigChannel+0x2a8>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80028e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e004      	b.n	80028fc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80028f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d106      	bne.n	800290e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2200      	movs	r2, #0
 8002906:	2101      	movs	r1, #1
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fbb7 	bl	800207c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2102      	movs	r1, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fb9b 	bl	8002050 <LL_ADC_GetOffsetChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_ADC_ConfigChannel+0x2e6>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2102      	movs	r1, #2
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fb90 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	0e9b      	lsrs	r3, r3, #26
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	e01e      	b.n	8002978 <HAL_ADC_ConfigChannel+0x324>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2102      	movs	r1, #2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fb85 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002958:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800295c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002960:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e004      	b.n	8002976 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800296c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x33c>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0e9b      	lsrs	r3, r3, #26
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	e016      	b.n	80029be <HAL_ADC_ConfigChannel+0x36a>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80029a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80029a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e004      	b.n	80029be <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80029b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029be:	429a      	cmp	r2, r3
 80029c0:	d106      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2200      	movs	r2, #0
 80029c8:	2102      	movs	r1, #2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fb56 	bl	800207c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2103      	movs	r1, #3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fb3a 	bl	8002050 <LL_ADC_GetOffsetChannel>
 80029dc:	4603      	mov	r3, r0
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x3a8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2103      	movs	r1, #3
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fb2f 	bl	8002050 <LL_ADC_GetOffsetChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	f003 021f 	and.w	r2, r3, #31
 80029fa:	e017      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x3d8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2103      	movs	r1, #3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fb24 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a16:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002a1e:	2320      	movs	r3, #32
 8002a20:	e003      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002a22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a24:	fab3 f383 	clz	r3, r3
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d105      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x3f0>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0e9b      	lsrs	r3, r3, #26
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	e011      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x414>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	e003      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d106      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2103      	movs	r1, #3
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fb01 	bl	800207c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fc2a 	bl	80022d8 <LL_ADC_IsEnabled>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 8140 	bne.w	8002d0c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f7ff fbab 	bl	80021f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	4a8f      	ldr	r2, [pc, #572]	@ (8002ce0 <HAL_ADC_ConfigChannel+0x68c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	f040 8131 	bne.w	8002d0c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x47e>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	0e9b      	lsrs	r3, r3, #26
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2b09      	cmp	r3, #9
 8002ac8:	bf94      	ite	ls
 8002aca:	2301      	movls	r3, #1
 8002acc:	2300      	movhi	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	e019      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x4b2>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ae2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e003      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002aee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	2b09      	cmp	r3, #9
 8002afe:	bf94      	ite	ls
 8002b00:	2301      	movls	r3, #1
 8002b02:	2300      	movhi	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d079      	beq.n	8002bfe <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d107      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x4d2>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	0e9b      	lsrs	r3, r3, #26
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	069b      	lsls	r3, r3, #26
 8002b20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b24:	e015      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x4fe>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b36:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	e003      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	069b      	lsls	r3, r3, #26
 8002b4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x51e>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0e9b      	lsrs	r3, r3, #26
 8002b64:	3301      	adds	r3, #1
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	e017      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x54e>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b82:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	e003      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	ea42 0103 	orr.w	r1, r2, r3
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x574>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	0e9b      	lsrs	r3, r3, #26
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f003 021f 	and.w	r2, r3, #31
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	051b      	lsls	r3, r3, #20
 8002bc6:	e018      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x5a6>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e003      	b.n	8002bec <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	f003 021f 	and.w	r2, r3, #31
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	e081      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d107      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x5c6>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	0e9b      	lsrs	r3, r3, #26
 8002c10:	3301      	adds	r3, #1
 8002c12:	069b      	lsls	r3, r3, #26
 8002c14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c18:	e015      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x5f2>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002c32:	2320      	movs	r3, #32
 8002c34:	e003      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	3301      	adds	r3, #1
 8002c40:	069b      	lsls	r3, r3, #26
 8002c42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x612>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0e9b      	lsrs	r3, r3, #26
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	e017      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x642>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	61fb      	str	r3, [r7, #28]
  return result;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002c7e:	2320      	movs	r3, #32
 8002c80:	e003      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	2101      	movs	r1, #1
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	ea42 0103 	orr.w	r1, r2, r3
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x66e>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	0e9b      	lsrs	r3, r3, #26
 8002cac:	3301      	adds	r3, #1
 8002cae:	f003 021f 	and.w	r2, r3, #31
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3b1e      	subs	r3, #30
 8002cba:	051b      	lsls	r3, r3, #20
 8002cbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cc0:	e01e      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x6ac>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	613b      	str	r3, [r7, #16]
  return result;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d104      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002cda:	2320      	movs	r3, #32
 8002cdc:	e006      	b.n	8002cec <HAL_ADC_ConfigChannel+0x698>
 8002cde:	bf00      	nop
 8002ce0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	f003 021f 	and.w	r2, r3, #31
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b1e      	subs	r3, #30
 8002cfa:	051b      	lsls	r3, r3, #20
 8002cfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d00:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d06:	4619      	mov	r1, r3
 8002d08:	f7ff fa48 	bl	800219c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b3f      	ldr	r3, [pc, #252]	@ (8002e10 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d071      	beq.n	8002dfc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d18:	483e      	ldr	r0, [pc, #248]	@ (8002e14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d1a:	f7ff f967 	bl	8001fec <LL_ADC_GetCommonPathInternalCh>
 8002d1e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a3c      	ldr	r2, [pc, #240]	@ (8002e18 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_ADC_ConfigChannel+0x6e2>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3a      	ldr	r2, [pc, #232]	@ (8002e1c <HAL_ADC_ConfigChannel+0x7c8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d127      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d121      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d4a:	d157      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d54:	4619      	mov	r1, r3
 8002d56:	482f      	ldr	r0, [pc, #188]	@ (8002e14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d58:	f7ff f935 	bl	8001fc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d5c:	4b30      	ldr	r3, [pc, #192]	@ (8002e20 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	099b      	lsrs	r3, r3, #6
 8002d62:	4a30      	ldr	r2, [pc, #192]	@ (8002e24 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d76:	e002      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f9      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d84:	e03a      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a27      	ldr	r2, [pc, #156]	@ (8002e28 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d113      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10d      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a22      	ldr	r2, [pc, #136]	@ (8002e2c <HAL_ADC_ConfigChannel+0x7d8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d02a      	beq.n	8002dfc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002daa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dae:	4619      	mov	r1, r3
 8002db0:	4818      	ldr	r0, [pc, #96]	@ (8002e14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002db2:	f7ff f908 	bl	8001fc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db6:	e021      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d11c      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d116      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a16      	ldr	r2, [pc, #88]	@ (8002e2c <HAL_ADC_ConfigChannel+0x7d8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d011      	beq.n	8002dfc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ddc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002de0:	4619      	mov	r1, r3
 8002de2:	480c      	ldr	r0, [pc, #48]	@ (8002e14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002de4:	f7ff f8ef 	bl	8001fc6 <LL_ADC_SetCommonPathInternalCh>
 8002de8:	e008      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dee:	f043 0220 	orr.w	r2, r3, #32
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e04:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	37d8      	adds	r7, #216	@ 0xd8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	80080000 	.word	0x80080000
 8002e14:	50000300 	.word	0x50000300
 8002e18:	c3210000 	.word	0xc3210000
 8002e1c:	90c00010 	.word	0x90c00010
 8002e20:	20000000 	.word	0x20000000
 8002e24:	053e2d63 	.word	0x053e2d63
 8002e28:	c7520000 	.word	0xc7520000
 8002e2c:	50000100 	.word	0x50000100
 8002e30:	cb840000 	.word	0xcb840000

08002e34 <LL_ADC_IsEnabled>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <LL_ADC_IsEnabled+0x18>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <LL_ADC_IsEnabled+0x1a>
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_ADC_REG_IsConversionOngoing>:
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e80:	b590      	push	{r4, r7, lr}
 8002e82:	b0a1      	sub	sp, #132	@ 0x84
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e08b      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eb6:	d102      	bne.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002eb8:	4b41      	ldr	r3, [pc, #260]	@ (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	e001      	b.n	8002ec2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e06a      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ffb9 	bl	8002e5a <LL_ADC_REG_IsConversionOngoing>
 8002ee8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ffb3 	bl	8002e5a <LL_ADC_REG_IsConversionOngoing>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d14c      	bne.n	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002efa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d149      	bne.n	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f00:	4b30      	ldr	r3, [pc, #192]	@ (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002f02:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d028      	beq.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f1e:	035b      	lsls	r3, r3, #13
 8002f20:	430b      	orrs	r3, r1
 8002f22:	431a      	orrs	r2, r3
 8002f24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f28:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f2c:	f7ff ff82 	bl	8002e34 <LL_ADC_IsEnabled>
 8002f30:	4604      	mov	r4, r0
 8002f32:	4823      	ldr	r0, [pc, #140]	@ (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f34:	f7ff ff7e 	bl	8002e34 <LL_ADC_IsEnabled>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d133      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f48:	f023 030f 	bic.w	r3, r3, #15
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	6811      	ldr	r1, [r2, #0]
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	6892      	ldr	r2, [r2, #8]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	431a      	orrs	r2, r3
 8002f58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f5a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f5c:	e024      	b.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f68:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f6a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f6e:	f7ff ff61 	bl	8002e34 <LL_ADC_IsEnabled>
 8002f72:	4604      	mov	r4, r0
 8002f74:	4812      	ldr	r0, [pc, #72]	@ (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f76:	f7ff ff5d 	bl	8002e34 <LL_ADC_IsEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4323      	orrs	r3, r4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d112      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f8a:	f023 030f 	bic.w	r3, r3, #15
 8002f8e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002f90:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f92:	e009      	b.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002fa6:	e000      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fb2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3784      	adds	r7, #132	@ 0x84
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd90      	pop	{r4, r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	50000100 	.word	0x50000100
 8002fc4:	50000300 	.word	0x50000300

08002fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffa:	4a04      	ldr	r2, [pc, #16]	@ (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	60d3      	str	r3, [r2, #12]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003014:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <__NVIC_GetPriorityGrouping+0x18>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 0307 	and.w	r3, r3, #7
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0a      	blt.n	8003056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	490c      	ldr	r1, [pc, #48]	@ (8003078 <__NVIC_SetPriority+0x4c>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	440b      	add	r3, r1
 8003050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003054:	e00a      	b.n	800306c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4908      	ldr	r1, [pc, #32]	@ (800307c <__NVIC_SetPriority+0x50>)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	3b04      	subs	r3, #4
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	440b      	add	r3, r1
 800306a:	761a      	strb	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000e100 	.word	0xe000e100
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	@ 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43d9      	mvns	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	4313      	orrs	r3, r2
         );
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	@ 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f8:	d301      	bcc.n	80030fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00f      	b.n	800311e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003128 <SysTick_Config+0x40>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003106:	210f      	movs	r1, #15
 8003108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800310c:	f7ff ff8e 	bl	800302c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <SysTick_Config+0x40>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003116:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <SysTick_Config+0x40>)
 8003118:	2207      	movs	r2, #7
 800311a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000e010 	.word	0xe000e010

0800312c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff47 	bl	8002fc8 <__NVIC_SetPriorityGrouping>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003150:	f7ff ff5e 	bl	8003010 <__NVIC_GetPriorityGrouping>
 8003154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	6978      	ldr	r0, [r7, #20]
 800315c:	f7ff ff90 	bl	8003080 <NVIC_EncodePriority>
 8003160:	4602      	mov	r2, r0
 8003162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff5f 	bl	800302c <__NVIC_SetPriority>
}
 800316e:	bf00      	nop
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ffb2 	bl	80030e8 <SysTick_Config>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800319e:	e15a      	b.n	8003456 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2101      	movs	r1, #1
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	4013      	ands	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 814c 	beq.w	8003450 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d005      	beq.n	80031d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d130      	bne.n	8003232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2203      	movs	r2, #3
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003206:	2201      	movs	r2, #1
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	f003 0201 	and.w	r2, r3, #1
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b03      	cmp	r3, #3
 800323c:	d017      	beq.n	800326e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	2203      	movs	r2, #3
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d123      	bne.n	80032c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	08da      	lsrs	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3208      	adds	r2, #8
 8003282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	220f      	movs	r2, #15
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4013      	ands	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	08da      	lsrs	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3208      	adds	r2, #8
 80032bc:	6939      	ldr	r1, [r7, #16]
 80032be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2203      	movs	r2, #3
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0203 	and.w	r2, r3, #3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80a6 	beq.w	8003450 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003304:	4b5b      	ldr	r3, [pc, #364]	@ (8003474 <HAL_GPIO_Init+0x2e4>)
 8003306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003308:	4a5a      	ldr	r2, [pc, #360]	@ (8003474 <HAL_GPIO_Init+0x2e4>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003310:	4b58      	ldr	r3, [pc, #352]	@ (8003474 <HAL_GPIO_Init+0x2e4>)
 8003312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800331c:	4a56      	ldr	r2, [pc, #344]	@ (8003478 <HAL_GPIO_Init+0x2e8>)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	3302      	adds	r3, #2
 8003324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	220f      	movs	r2, #15
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003346:	d01f      	beq.n	8003388 <HAL_GPIO_Init+0x1f8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a4c      	ldr	r2, [pc, #304]	@ (800347c <HAL_GPIO_Init+0x2ec>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d019      	beq.n	8003384 <HAL_GPIO_Init+0x1f4>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a4b      	ldr	r2, [pc, #300]	@ (8003480 <HAL_GPIO_Init+0x2f0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d013      	beq.n	8003380 <HAL_GPIO_Init+0x1f0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a4a      	ldr	r2, [pc, #296]	@ (8003484 <HAL_GPIO_Init+0x2f4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00d      	beq.n	800337c <HAL_GPIO_Init+0x1ec>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a49      	ldr	r2, [pc, #292]	@ (8003488 <HAL_GPIO_Init+0x2f8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d007      	beq.n	8003378 <HAL_GPIO_Init+0x1e8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a48      	ldr	r2, [pc, #288]	@ (800348c <HAL_GPIO_Init+0x2fc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_GPIO_Init+0x1e4>
 8003370:	2305      	movs	r3, #5
 8003372:	e00a      	b.n	800338a <HAL_GPIO_Init+0x1fa>
 8003374:	2306      	movs	r3, #6
 8003376:	e008      	b.n	800338a <HAL_GPIO_Init+0x1fa>
 8003378:	2304      	movs	r3, #4
 800337a:	e006      	b.n	800338a <HAL_GPIO_Init+0x1fa>
 800337c:	2303      	movs	r3, #3
 800337e:	e004      	b.n	800338a <HAL_GPIO_Init+0x1fa>
 8003380:	2302      	movs	r3, #2
 8003382:	e002      	b.n	800338a <HAL_GPIO_Init+0x1fa>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_GPIO_Init+0x1fa>
 8003388:	2300      	movs	r3, #0
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	f002 0203 	and.w	r2, r2, #3
 8003390:	0092      	lsls	r2, r2, #2
 8003392:	4093      	lsls	r3, r2
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800339a:	4937      	ldr	r1, [pc, #220]	@ (8003478 <HAL_GPIO_Init+0x2e8>)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033a8:	4b39      	ldr	r3, [pc, #228]	@ (8003490 <HAL_GPIO_Init+0x300>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033cc:	4a30      	ldr	r2, [pc, #192]	@ (8003490 <HAL_GPIO_Init+0x300>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003490 <HAL_GPIO_Init+0x300>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033f6:	4a26      	ldr	r2, [pc, #152]	@ (8003490 <HAL_GPIO_Init+0x300>)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80033fc:	4b24      	ldr	r3, [pc, #144]	@ (8003490 <HAL_GPIO_Init+0x300>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	43db      	mvns	r3, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003420:	4a1b      	ldr	r2, [pc, #108]	@ (8003490 <HAL_GPIO_Init+0x300>)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003426:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <HAL_GPIO_Init+0x300>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800344a:	4a11      	ldr	r2, [pc, #68]	@ (8003490 <HAL_GPIO_Init+0x300>)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3301      	adds	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	f47f ae9d 	bne.w	80031a0 <HAL_GPIO_Init+0x10>
  }
}
 8003466:	bf00      	nop
 8003468:	bf00      	nop
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	40021000 	.word	0x40021000
 8003478:	40010000 	.word	0x40010000
 800347c:	48000400 	.word	0x48000400
 8003480:	48000800 	.word	0x48000800
 8003484:	48000c00 	.word	0x48000c00
 8003488:	48001000 	.word	0x48001000
 800348c:	48001400 	.word	0x48001400
 8003490:	40010400 	.word	0x40010400

08003494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
 80034a0:	4613      	mov	r3, r2
 80034a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034a4:	787b      	ldrb	r3, [r7, #1]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034b0:	e002      	b.n	80034b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034b2:	887a      	ldrh	r2, [r7, #2]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e08d      	b.n	80035f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fe fa42 	bl	8001974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2224      	movs	r2, #36	@ 0x24
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003514:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003524:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	e006      	b.n	800354c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800354a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d108      	bne.n	8003566 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003562:	605a      	str	r2, [r3, #4]
 8003564:	e007      	b.n	8003576 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003574:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003584:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003588:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003598:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69d9      	ldr	r1, [r3, #28]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1a      	ldr	r2, [r3, #32]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	461a      	mov	r2, r3
 8003608:	460b      	mov	r3, r1
 800360a:	817b      	strh	r3, [r7, #10]
 800360c:	4613      	mov	r3, r2
 800360e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b20      	cmp	r3, #32
 800361a:	f040 80fd 	bne.w	8003818 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_I2C_Master_Transmit+0x30>
 8003628:	2302      	movs	r3, #2
 800362a:	e0f6      	b.n	800381a <HAL_I2C_Master_Transmit+0x21e>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003634:	f7fe fc86 	bl	8001f44 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2319      	movs	r3, #25
 8003640:	2201      	movs	r2, #1
 8003642:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fa0a 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0e1      	b.n	800381a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2221      	movs	r2, #33	@ 0x21
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2210      	movs	r2, #16
 8003662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	893a      	ldrh	r2, [r7, #8]
 8003676:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	2bff      	cmp	r3, #255	@ 0xff
 8003686:	d906      	bls.n	8003696 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	22ff      	movs	r2, #255	@ 0xff
 800368c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800368e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e007      	b.n	80036a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80036a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d024      	beq.n	80036f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	781a      	ldrb	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	8979      	ldrh	r1, [r7, #10]
 80036ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003824 <HAL_I2C_Master_Transmit+0x228>)
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fc05 	bl	8003f00 <I2C_TransferConfig>
 80036f6:	e066      	b.n	80037c6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	8979      	ldrh	r1, [r7, #10]
 8003700:	4b48      	ldr	r3, [pc, #288]	@ (8003824 <HAL_I2C_Master_Transmit+0x228>)
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fbfa 	bl	8003f00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800370c:	e05b      	b.n	80037c6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	6a39      	ldr	r1, [r7, #32]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f9fd 	bl	8003b12 <I2C_WaitOnTXISFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e07b      	b.n	800381a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	781a      	ldrb	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d034      	beq.n	80037c6 <HAL_I2C_Master_Transmit+0x1ca>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003760:	2b00      	cmp	r3, #0
 8003762:	d130      	bne.n	80037c6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	2200      	movs	r2, #0
 800376c:	2180      	movs	r1, #128	@ 0x80
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f976 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e04d      	b.n	800381a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	2bff      	cmp	r3, #255	@ 0xff
 8003786:	d90e      	bls.n	80037a6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	22ff      	movs	r2, #255	@ 0xff
 800378c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003792:	b2da      	uxtb	r2, r3
 8003794:	8979      	ldrh	r1, [r7, #10]
 8003796:	2300      	movs	r3, #0
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fbae 	bl	8003f00 <I2C_TransferConfig>
 80037a4:	e00f      	b.n	80037c6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	8979      	ldrh	r1, [r7, #10]
 80037b8:	2300      	movs	r3, #0
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fb9d 	bl	8003f00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d19e      	bne.n	800370e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	6a39      	ldr	r1, [r7, #32]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f9e3 	bl	8003ba0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e01a      	b.n	800381a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2220      	movs	r2, #32
 80037ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003828 <HAL_I2C_Master_Transmit+0x22c>)
 80037f8:	400b      	ands	r3, r1
 80037fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	80002000 	.word	0x80002000
 8003828:	fe00e800 	.word	0xfe00e800

0800382c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af02      	add	r7, sp, #8
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	461a      	mov	r2, r3
 8003838:	460b      	mov	r3, r1
 800383a:	817b      	strh	r3, [r7, #10]
 800383c:	4613      	mov	r3, r2
 800383e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b20      	cmp	r3, #32
 800384a:	f040 80db 	bne.w	8003a04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_I2C_Master_Receive+0x30>
 8003858:	2302      	movs	r3, #2
 800385a:	e0d4      	b.n	8003a06 <HAL_I2C_Master_Receive+0x1da>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003864:	f7fe fb6e 	bl	8001f44 <HAL_GetTick>
 8003868:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	2319      	movs	r3, #25
 8003870:	2201      	movs	r2, #1
 8003872:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f8f2 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e0bf      	b.n	8003a06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2222      	movs	r2, #34	@ 0x22
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2210      	movs	r2, #16
 8003892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	893a      	ldrh	r2, [r7, #8]
 80038a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2bff      	cmp	r3, #255	@ 0xff
 80038b6:	d90e      	bls.n	80038d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	22ff      	movs	r2, #255	@ 0xff
 80038bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	8979      	ldrh	r1, [r7, #10]
 80038c6:	4b52      	ldr	r3, [pc, #328]	@ (8003a10 <HAL_I2C_Master_Receive+0x1e4>)
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 fb16 	bl	8003f00 <I2C_TransferConfig>
 80038d4:	e06d      	b.n	80039b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	8979      	ldrh	r1, [r7, #10]
 80038e8:	4b49      	ldr	r3, [pc, #292]	@ (8003a10 <HAL_I2C_Master_Receive+0x1e4>)
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fb05 	bl	8003f00 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80038f6:	e05c      	b.n	80039b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	6a39      	ldr	r1, [r7, #32]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f993 	bl	8003c28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e07c      	b.n	8003a06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d034      	beq.n	80039b2 <HAL_I2C_Master_Receive+0x186>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d130      	bne.n	80039b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	2200      	movs	r2, #0
 8003958:	2180      	movs	r1, #128	@ 0x80
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f880 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e04d      	b.n	8003a06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	2bff      	cmp	r3, #255	@ 0xff
 8003972:	d90e      	bls.n	8003992 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	22ff      	movs	r2, #255	@ 0xff
 8003978:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397e:	b2da      	uxtb	r2, r3
 8003980:	8979      	ldrh	r1, [r7, #10]
 8003982:	2300      	movs	r3, #0
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fab8 	bl	8003f00 <I2C_TransferConfig>
 8003990:	e00f      	b.n	80039b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	8979      	ldrh	r1, [r7, #10]
 80039a4:	2300      	movs	r3, #0
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 faa7 	bl	8003f00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d19d      	bne.n	80038f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	6a39      	ldr	r1, [r7, #32]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f8ed 	bl	8003ba0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e01a      	b.n	8003a06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2220      	movs	r2, #32
 80039d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6859      	ldr	r1, [r3, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <HAL_I2C_Master_Receive+0x1e8>)
 80039e4:	400b      	ands	r3, r1
 80039e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	80002400 	.word	0x80002400
 8003a14:	fe00e800 	.word	0xfe00e800

08003a18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d103      	bne.n	8003a36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2200      	movs	r2, #0
 8003a34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d007      	beq.n	8003a54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	619a      	str	r2, [r3, #24]
  }
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a70:	e03b      	b.n	8003aea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	6839      	ldr	r1, [r7, #0]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f962 	bl	8003d40 <I2C_IsErrorOccurred>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e041      	b.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a8c:	d02d      	beq.n	8003aea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8e:	f7fe fa59 	bl	8001f44 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d122      	bne.n	8003aea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d113      	bne.n	8003aea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e00f      	b.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4013      	ands	r3, r2
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d0b4      	beq.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b1e:	e033      	b.n	8003b88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f90b 	bl	8003d40 <I2C_IsErrorOccurred>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e031      	b.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b3a:	d025      	beq.n	8003b88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3c:	f7fe fa02 	bl	8001f44 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d302      	bcc.n	8003b52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d11a      	bne.n	8003b88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d013      	beq.n	8003b88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e007      	b.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d1c4      	bne.n	8003b20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bac:	e02f      	b.n	8003c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f8c4 	bl	8003d40 <I2C_IsErrorOccurred>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e02d      	b.n	8003c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	f7fe f9bf 	bl	8001f44 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11a      	bne.n	8003c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d013      	beq.n	8003c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e007      	b.n	8003c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d1c8      	bne.n	8003bae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003c38:	e071      	b.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f87e 	bl	8003d40 <I2C_IsErrorOccurred>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d13b      	bne.n	8003cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d138      	bne.n	8003cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d105      	bne.n	8003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b10      	cmp	r3, #16
 8003c88:	d121      	bne.n	8003cce <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2210      	movs	r2, #16
 8003c90:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2204      	movs	r2, #4
 8003c96:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b24      	ldr	r3, [pc, #144]	@ (8003d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003cac:	400b      	ands	r3, r1
 8003cae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	75fb      	strb	r3, [r7, #23]
 8003ccc:	e002      	b.n	8003cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003cd4:	f7fe f936 	bl	8001f44 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d119      	bne.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d116      	bne.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d00f      	beq.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d002      	beq.n	8003d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d083      	beq.n	8003c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	fe00e800 	.word	0xfe00e800

08003d40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08a      	sub	sp, #40	@ 0x28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d068      	beq.n	8003e3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2210      	movs	r2, #16
 8003d72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d74:	e049      	b.n	8003e0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d7c:	d045      	beq.n	8003e0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d7e:	f7fe f8e1 	bl	8001f44 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <I2C_IsErrorOccurred+0x54>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d13a      	bne.n	8003e0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003da6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db6:	d121      	bne.n	8003dfc <I2C_IsErrorOccurred+0xbc>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dbe:	d01d      	beq.n	8003dfc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d01a      	beq.n	8003dfc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003dd6:	f7fe f8b5 	bl	8001f44 <HAL_GetTick>
 8003dda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ddc:	e00e      	b.n	8003dfc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003dde:	f7fe f8b1 	bl	8001f44 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b19      	cmp	r3, #25
 8003dea:	d907      	bls.n	8003dfc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f043 0320 	orr.w	r3, r3, #32
 8003df2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003dfa:	e006      	b.n	8003e0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f003 0320 	and.w	r3, r3, #32
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d1e9      	bne.n	8003dde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d003      	beq.n	8003e20 <I2C_IsErrorOccurred+0xe0>
 8003e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0aa      	beq.n	8003d76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d103      	bne.n	8003e30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	f043 0304 	orr.w	r3, r3, #4
 8003e36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00b      	beq.n	8003e68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f043 0308 	orr.w	r3, r3, #8
 8003e78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00b      	beq.n	8003eac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f043 0302 	orr.w	r3, r3, #2
 8003e9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ea4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003eac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01c      	beq.n	8003eee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff fdaf 	bl	8003a18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <I2C_IsErrorOccurred+0x1bc>)
 8003ec6:	400b      	ands	r3, r1
 8003ec8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003eee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3728      	adds	r7, #40	@ 0x28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	fe00e800 	.word	0xfe00e800

08003f00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	817b      	strh	r3, [r7, #10]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f12:	897b      	ldrh	r3, [r7, #10]
 8003f14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f18:	7a7b      	ldrb	r3, [r7, #9]
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	0d5b      	lsrs	r3, r3, #21
 8003f3a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003f3e:	4b08      	ldr	r3, [pc, #32]	@ (8003f60 <I2C_TransferConfig+0x60>)
 8003f40:	430b      	orrs	r3, r1
 8003f42:	43db      	mvns	r3, r3
 8003f44:	ea02 0103 	and.w	r1, r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f52:	bf00      	nop
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	03ff63ff 	.word	0x03ff63ff

08003f64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d138      	bne.n	8003fec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e032      	b.n	8003fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	@ 0x24
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6819      	ldr	r1, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e000      	b.n	8003fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
  }
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b20      	cmp	r3, #32
 800400e:	d139      	bne.n	8004084 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800401a:	2302      	movs	r3, #2
 800401c:	e033      	b.n	8004086 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2224      	movs	r2, #36	@ 0x24
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800404c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e000      	b.n	8004086 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d141      	bne.n	8004126 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040a2:	4b4b      	ldr	r3, [pc, #300]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ae:	d131      	bne.n	8004114 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040b0:	4b47      	ldr	r3, [pc, #284]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040b6:	4a46      	ldr	r2, [pc, #280]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040c0:	4b43      	ldr	r3, [pc, #268]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040c8:	4a41      	ldr	r2, [pc, #260]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040d0:	4b40      	ldr	r3, [pc, #256]	@ (80041d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2232      	movs	r2, #50	@ 0x32
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	4a3f      	ldr	r2, [pc, #252]	@ (80041d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	0c9b      	lsrs	r3, r3, #18
 80040e2:	3301      	adds	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040e6:	e002      	b.n	80040ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ee:	4b38      	ldr	r3, [pc, #224]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fa:	d102      	bne.n	8004102 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f2      	bne.n	80040e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004102:	4b33      	ldr	r3, [pc, #204]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800410e:	d158      	bne.n	80041c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e057      	b.n	80041c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004114:	4b2e      	ldr	r3, [pc, #184]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800411a:	4a2d      	ldr	r2, [pc, #180]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004120:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004124:	e04d      	b.n	80041c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412c:	d141      	bne.n	80041b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800412e:	4b28      	ldr	r3, [pc, #160]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800413a:	d131      	bne.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800413c:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004142:	4a23      	ldr	r2, [pc, #140]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004148:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800414c:	4b20      	ldr	r3, [pc, #128]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004154:	4a1e      	ldr	r2, [pc, #120]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800415a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800415c:	4b1d      	ldr	r3, [pc, #116]	@ (80041d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2232      	movs	r2, #50	@ 0x32
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	4a1c      	ldr	r2, [pc, #112]	@ (80041d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	0c9b      	lsrs	r3, r3, #18
 800416e:	3301      	adds	r3, #1
 8004170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004172:	e002      	b.n	800417a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3b01      	subs	r3, #1
 8004178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800417a:	4b15      	ldr	r3, [pc, #84]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004186:	d102      	bne.n	800418e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f2      	bne.n	8004174 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800418e:	4b10      	ldr	r3, [pc, #64]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419a:	d112      	bne.n	80041c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e011      	b.n	80041c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041a0:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041a6:	4a0a      	ldr	r2, [pc, #40]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80041b0:	e007      	b.n	80041c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041b2:	4b07      	ldr	r3, [pc, #28]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041ba:	4a05      	ldr	r2, [pc, #20]	@ (80041d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40007000 	.word	0x40007000
 80041d4:	20000000 	.word	0x20000000
 80041d8:	431bde83 	.word	0x431bde83

080041dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041e0:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a04      	ldr	r2, [pc, #16]	@ (80041f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041ea:	6093      	str	r3, [r2, #8]
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40007000 	.word	0x40007000

080041fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e2fe      	b.n	800480c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d075      	beq.n	8004306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421a:	4b97      	ldr	r3, [pc, #604]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004224:	4b94      	ldr	r3, [pc, #592]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b0c      	cmp	r3, #12
 8004232:	d102      	bne.n	800423a <HAL_RCC_OscConfig+0x3e>
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d002      	beq.n	8004240 <HAL_RCC_OscConfig+0x44>
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d10b      	bne.n	8004258 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004240:	4b8d      	ldr	r3, [pc, #564]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d05b      	beq.n	8004304 <HAL_RCC_OscConfig+0x108>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d157      	bne.n	8004304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e2d9      	b.n	800480c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004260:	d106      	bne.n	8004270 <HAL_RCC_OscConfig+0x74>
 8004262:	4b85      	ldr	r3, [pc, #532]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a84      	ldr	r2, [pc, #528]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e01d      	b.n	80042ac <HAL_RCC_OscConfig+0xb0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x98>
 800427a:	4b7f      	ldr	r3, [pc, #508]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a7e      	ldr	r2, [pc, #504]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b7c      	ldr	r3, [pc, #496]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a7b      	ldr	r2, [pc, #492]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0xb0>
 8004294:	4b78      	ldr	r3, [pc, #480]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a77      	ldr	r2, [pc, #476]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b75      	ldr	r3, [pc, #468]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a74      	ldr	r2, [pc, #464]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fd fe46 	bl	8001f44 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fd fe42 	bl	8001f44 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	@ 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e29e      	b.n	800480c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0xc0>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd fe32 	bl	8001f44 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fd fe2e 	bl	8001f44 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	@ 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e28a      	b.n	800480c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042f6:	4b60      	ldr	r3, [pc, #384]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0xe8>
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d075      	beq.n	80043fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004312:	4b59      	ldr	r3, [pc, #356]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800431c:	4b56      	ldr	r3, [pc, #344]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b0c      	cmp	r3, #12
 800432a:	d102      	bne.n	8004332 <HAL_RCC_OscConfig+0x136>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d002      	beq.n	8004338 <HAL_RCC_OscConfig+0x13c>
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b04      	cmp	r3, #4
 8004336:	d11f      	bne.n	8004378 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004338:	4b4f      	ldr	r3, [pc, #316]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_OscConfig+0x154>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e25d      	b.n	800480c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004350:	4b49      	ldr	r3, [pc, #292]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	4946      	ldr	r1, [pc, #280]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004360:	4313      	orrs	r3, r2
 8004362:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004364:	4b45      	ldr	r3, [pc, #276]	@ (800447c <HAL_RCC_OscConfig+0x280>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f7fd fd9f 	bl	8001eac <HAL_InitTick>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d043      	beq.n	80043fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e249      	b.n	800480c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d023      	beq.n	80043c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004380:	4b3d      	ldr	r3, [pc, #244]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a3c      	ldr	r2, [pc, #240]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800438a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fd fdda 	bl	8001f44 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004394:	f7fd fdd6 	bl	8001f44 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e232      	b.n	800480c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a6:	4b34      	ldr	r3, [pc, #208]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	4b31      	ldr	r3, [pc, #196]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	061b      	lsls	r3, r3, #24
 80043c0:	492d      	ldr	r1, [pc, #180]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	604b      	str	r3, [r1, #4]
 80043c6:	e01a      	b.n	80043fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 80043ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fd fdb6 	bl	8001f44 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043dc:	f7fd fdb2 	bl	8001f44 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e20e      	b.n	800480c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ee:	4b22      	ldr	r3, [pc, #136]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x1e0>
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d041      	beq.n	800448e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d01c      	beq.n	800444c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004412:	4b19      	ldr	r3, [pc, #100]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004418:	4a17      	ldr	r2, [pc, #92]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004422:	f7fd fd8f 	bl	8001f44 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800442a:	f7fd fd8b 	bl	8001f44 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e1e7      	b.n	800480c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800443c:	4b0e      	ldr	r3, [pc, #56]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 800443e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0ef      	beq.n	800442a <HAL_RCC_OscConfig+0x22e>
 800444a:	e020      	b.n	800448e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800444c:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 800444e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004452:	4a09      	ldr	r2, [pc, #36]	@ (8004478 <HAL_RCC_OscConfig+0x27c>)
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fd fd72 	bl	8001f44 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004462:	e00d      	b.n	8004480 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004464:	f7fd fd6e 	bl	8001f44 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d906      	bls.n	8004480 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e1ca      	b.n	800480c <HAL_RCC_OscConfig+0x610>
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000
 800447c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004480:	4b8c      	ldr	r3, [pc, #560]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 8004482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1ea      	bne.n	8004464 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80a6 	beq.w	80045e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800449c:	2300      	movs	r3, #0
 800449e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044a0:	4b84      	ldr	r3, [pc, #528]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 80044a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_OscConfig+0x2b4>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x2b6>
 80044b0:	2300      	movs	r3, #0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b6:	4b7f      	ldr	r3, [pc, #508]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 80044b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ba:	4a7e      	ldr	r2, [pc, #504]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 80044bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044c2:	4b7c      	ldr	r3, [pc, #496]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 80044c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044ce:	2301      	movs	r3, #1
 80044d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d2:	4b79      	ldr	r3, [pc, #484]	@ (80046b8 <HAL_RCC_OscConfig+0x4bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d118      	bne.n	8004510 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044de:	4b76      	ldr	r3, [pc, #472]	@ (80046b8 <HAL_RCC_OscConfig+0x4bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a75      	ldr	r2, [pc, #468]	@ (80046b8 <HAL_RCC_OscConfig+0x4bc>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ea:	f7fd fd2b 	bl	8001f44 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7fd fd27 	bl	8001f44 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e183      	b.n	800480c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004504:	4b6c      	ldr	r3, [pc, #432]	@ (80046b8 <HAL_RCC_OscConfig+0x4bc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d108      	bne.n	800452a <HAL_RCC_OscConfig+0x32e>
 8004518:	4b66      	ldr	r3, [pc, #408]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451e:	4a65      	ldr	r2, [pc, #404]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004528:	e024      	b.n	8004574 <HAL_RCC_OscConfig+0x378>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b05      	cmp	r3, #5
 8004530:	d110      	bne.n	8004554 <HAL_RCC_OscConfig+0x358>
 8004532:	4b60      	ldr	r3, [pc, #384]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004538:	4a5e      	ldr	r2, [pc, #376]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 800453a:	f043 0304 	orr.w	r3, r3, #4
 800453e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004542:	4b5c      	ldr	r3, [pc, #368]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004548:	4a5a      	ldr	r2, [pc, #360]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004552:	e00f      	b.n	8004574 <HAL_RCC_OscConfig+0x378>
 8004554:	4b57      	ldr	r3, [pc, #348]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455a:	4a56      	ldr	r2, [pc, #344]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004564:	4b53      	ldr	r3, [pc, #332]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456a:	4a52      	ldr	r2, [pc, #328]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 800456c:	f023 0304 	bic.w	r3, r3, #4
 8004570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d016      	beq.n	80045aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fd fce2 	bl	8001f44 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004582:	e00a      	b.n	800459a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004584:	f7fd fcde 	bl	8001f44 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e138      	b.n	800480c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800459a:	4b46      	ldr	r3, [pc, #280]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0ed      	beq.n	8004584 <HAL_RCC_OscConfig+0x388>
 80045a8:	e015      	b.n	80045d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045aa:	f7fd fccb 	bl	8001f44 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b2:	f7fd fcc7 	bl	8001f44 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e121      	b.n	800480c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045c8:	4b3a      	ldr	r3, [pc, #232]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1ed      	bne.n	80045b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045d6:	7ffb      	ldrb	r3, [r7, #31]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d105      	bne.n	80045e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045dc:	4b35      	ldr	r3, [pc, #212]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 80045de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e0:	4a34      	ldr	r2, [pc, #208]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 80045e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d03c      	beq.n	800466e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01c      	beq.n	8004636 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045fc:	4b2d      	ldr	r3, [pc, #180]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 80045fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004602:	4a2c      	ldr	r2, [pc, #176]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fd fc9a 	bl	8001f44 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004614:	f7fd fc96 	bl	8001f44 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e0f2      	b.n	800480c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004626:	4b23      	ldr	r3, [pc, #140]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 8004628:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0ef      	beq.n	8004614 <HAL_RCC_OscConfig+0x418>
 8004634:	e01b      	b.n	800466e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004636:	4b1f      	ldr	r3, [pc, #124]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 8004638:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800463c:	4a1d      	ldr	r2, [pc, #116]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004646:	f7fd fc7d 	bl	8001f44 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800464e:	f7fd fc79 	bl	8001f44 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e0d5      	b.n	800480c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004660:	4b14      	ldr	r3, [pc, #80]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 8004662:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1ef      	bne.n	800464e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80c9 	beq.w	800480a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004678:	4b0e      	ldr	r3, [pc, #56]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 030c 	and.w	r3, r3, #12
 8004680:	2b0c      	cmp	r3, #12
 8004682:	f000 8083 	beq.w	800478c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d15e      	bne.n	800474c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468e:	4b09      	ldr	r3, [pc, #36]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a08      	ldr	r2, [pc, #32]	@ (80046b4 <HAL_RCC_OscConfig+0x4b8>)
 8004694:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7fd fc53 	bl	8001f44 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a0:	e00c      	b.n	80046bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fd fc4f 	bl	8001f44 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d905      	bls.n	80046bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e0ab      	b.n	800480c <HAL_RCC_OscConfig+0x610>
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046bc:	4b55      	ldr	r3, [pc, #340]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1ec      	bne.n	80046a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046c8:	4b52      	ldr	r3, [pc, #328]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	4b52      	ldr	r3, [pc, #328]	@ (8004818 <HAL_RCC_OscConfig+0x61c>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6a11      	ldr	r1, [r2, #32]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046d8:	3a01      	subs	r2, #1
 80046da:	0112      	lsls	r2, r2, #4
 80046dc:	4311      	orrs	r1, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80046e2:	0212      	lsls	r2, r2, #8
 80046e4:	4311      	orrs	r1, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80046ea:	0852      	lsrs	r2, r2, #1
 80046ec:	3a01      	subs	r2, #1
 80046ee:	0552      	lsls	r2, r2, #21
 80046f0:	4311      	orrs	r1, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046f6:	0852      	lsrs	r2, r2, #1
 80046f8:	3a01      	subs	r2, #1
 80046fa:	0652      	lsls	r2, r2, #25
 80046fc:	4311      	orrs	r1, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004702:	06d2      	lsls	r2, r2, #27
 8004704:	430a      	orrs	r2, r1
 8004706:	4943      	ldr	r1, [pc, #268]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 8004708:	4313      	orrs	r3, r2
 800470a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800470c:	4b41      	ldr	r3, [pc, #260]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a40      	ldr	r2, [pc, #256]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 8004712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004716:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004718:	4b3e      	ldr	r3, [pc, #248]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4a3d      	ldr	r2, [pc, #244]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 800471e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004722:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd fc0e 	bl	8001f44 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472c:	f7fd fc0a 	bl	8001f44 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e066      	b.n	800480c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473e:	4b35      	ldr	r3, [pc, #212]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x530>
 800474a:	e05e      	b.n	800480a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474c:	4b31      	ldr	r3, [pc, #196]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a30      	ldr	r2, [pc, #192]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 8004752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fd fbf4 	bl	8001f44 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004760:	f7fd fbf0 	bl	8001f44 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e04c      	b.n	800480c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004772:	4b28      	ldr	r3, [pc, #160]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800477e:	4b25      	ldr	r3, [pc, #148]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	4924      	ldr	r1, [pc, #144]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 8004784:	4b25      	ldr	r3, [pc, #148]	@ (800481c <HAL_RCC_OscConfig+0x620>)
 8004786:	4013      	ands	r3, r2
 8004788:	60cb      	str	r3, [r1, #12]
 800478a:	e03e      	b.n	800480a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e039      	b.n	800480c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004798:	4b1e      	ldr	r3, [pc, #120]	@ (8004814 <HAL_RCC_OscConfig+0x618>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 0203 	and.w	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d12c      	bne.n	8004806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	3b01      	subs	r3, #1
 80047b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d123      	bne.n	8004806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d11b      	bne.n	8004806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047da:	429a      	cmp	r2, r3
 80047dc:	d113      	bne.n	8004806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	085b      	lsrs	r3, r3, #1
 80047ea:	3b01      	subs	r3, #1
 80047ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d109      	bne.n	8004806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	3b01      	subs	r3, #1
 8004800:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d001      	beq.n	800480a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3720      	adds	r7, #32
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40021000 	.word	0x40021000
 8004818:	019f800c 	.word	0x019f800c
 800481c:	feeefffc 	.word	0xfeeefffc

08004820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e11e      	b.n	8004a76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004838:	4b91      	ldr	r3, [pc, #580]	@ (8004a80 <HAL_RCC_ClockConfig+0x260>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d910      	bls.n	8004868 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b8e      	ldr	r3, [pc, #568]	@ (8004a80 <HAL_RCC_ClockConfig+0x260>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 020f 	bic.w	r2, r3, #15
 800484e:	498c      	ldr	r1, [pc, #560]	@ (8004a80 <HAL_RCC_ClockConfig+0x260>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b8a      	ldr	r3, [pc, #552]	@ (8004a80 <HAL_RCC_ClockConfig+0x260>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e106      	b.n	8004a76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d073      	beq.n	800495c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d129      	bne.n	80048d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487c:	4b81      	ldr	r3, [pc, #516]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0f4      	b.n	8004a76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800488c:	f000 f99e 	bl	8004bcc <RCC_GetSysClockFreqFromPLLSource>
 8004890:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4a7c      	ldr	r2, [pc, #496]	@ (8004a88 <HAL_RCC_ClockConfig+0x268>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d93f      	bls.n	800491a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800489a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d033      	beq.n	800491a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d12f      	bne.n	800491a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ba:	4b72      	ldr	r3, [pc, #456]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048c2:	4a70      	ldr	r2, [pc, #448]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 80048c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048ca:	2380      	movs	r3, #128	@ 0x80
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	e024      	b.n	800491a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d109      	bne.n	80048f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0c6      	b.n	8004a76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048e8:	4b66      	ldr	r3, [pc, #408]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0be      	b.n	8004a76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048f8:	f000 f8ce 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4a61      	ldr	r2, [pc, #388]	@ (8004a88 <HAL_RCC_ClockConfig+0x268>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d909      	bls.n	800491a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004906:	4b5f      	ldr	r3, [pc, #380]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800490e:	4a5d      	ldr	r2, [pc, #372]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 8004910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004914:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004916:	2380      	movs	r3, #128	@ 0x80
 8004918:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800491a:	4b5a      	ldr	r3, [pc, #360]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f023 0203 	bic.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4957      	ldr	r1, [pc, #348]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 8004928:	4313      	orrs	r3, r2
 800492a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492c:	f7fd fb0a 	bl	8001f44 <HAL_GetTick>
 8004930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	e00a      	b.n	800494a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7fd fb06 	bl	8001f44 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e095      	b.n	8004a76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	4b4e      	ldr	r3, [pc, #312]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 020c 	and.w	r2, r3, #12
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	429a      	cmp	r2, r3
 800495a:	d1eb      	bne.n	8004934 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d023      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004974:	4b43      	ldr	r3, [pc, #268]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4a42      	ldr	r2, [pc, #264]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 800497a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800497e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800498c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004994:	4a3b      	ldr	r2, [pc, #236]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 8004996:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800499a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800499c:	4b39      	ldr	r3, [pc, #228]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4936      	ldr	r1, [pc, #216]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b80      	cmp	r3, #128	@ 0x80
 80049b4:	d105      	bne.n	80049c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049b6:	4b33      	ldr	r3, [pc, #204]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	4a32      	ldr	r2, [pc, #200]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 80049bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004a80 <HAL_RCC_ClockConfig+0x260>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d21d      	bcs.n	8004a0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a80 <HAL_RCC_ClockConfig+0x260>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f023 020f 	bic.w	r2, r3, #15
 80049d8:	4929      	ldr	r1, [pc, #164]	@ (8004a80 <HAL_RCC_ClockConfig+0x260>)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049e0:	f7fd fab0 	bl	8001f44 <HAL_GetTick>
 80049e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	e00a      	b.n	80049fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e8:	f7fd faac 	bl	8001f44 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e03b      	b.n	8004a76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fe:	4b20      	ldr	r3, [pc, #128]	@ (8004a80 <HAL_RCC_ClockConfig+0x260>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d1ed      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a18:	4b1a      	ldr	r3, [pc, #104]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	4917      	ldr	r1, [pc, #92]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a36:	4b13      	ldr	r3, [pc, #76]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	490f      	ldr	r1, [pc, #60]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a4a:	f000 f825 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	4b0c      	ldr	r3, [pc, #48]	@ (8004a84 <HAL_RCC_ClockConfig+0x264>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	490c      	ldr	r1, [pc, #48]	@ (8004a8c <HAL_RCC_ClockConfig+0x26c>)
 8004a5c:	5ccb      	ldrb	r3, [r1, r3]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	fa22 f303 	lsr.w	r3, r2, r3
 8004a66:	4a0a      	ldr	r2, [pc, #40]	@ (8004a90 <HAL_RCC_ClockConfig+0x270>)
 8004a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a94 <HAL_RCC_ClockConfig+0x274>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fd fa1c 	bl	8001eac <HAL_InitTick>
 8004a74:	4603      	mov	r3, r0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40022000 	.word	0x40022000
 8004a84:	40021000 	.word	0x40021000
 8004a88:	04c4b400 	.word	0x04c4b400
 8004a8c:	08007ab8 	.word	0x08007ab8
 8004a90:	20000000 	.word	0x20000000
 8004a94:	20000004 	.word	0x20000004

08004a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d102      	bne.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	e047      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ab0:	4b27      	ldr	r3, [pc, #156]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d102      	bne.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004abc:	4b26      	ldr	r3, [pc, #152]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	e03e      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ac2:	4b23      	ldr	r3, [pc, #140]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b0c      	cmp	r3, #12
 8004acc:	d136      	bne.n	8004b3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ace:	4b20      	ldr	r3, [pc, #128]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	091b      	lsrs	r3, r3, #4
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	d10c      	bne.n	8004b06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aec:	4a1a      	ldr	r2, [pc, #104]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	4a16      	ldr	r2, [pc, #88]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004af6:	68d2      	ldr	r2, [r2, #12]
 8004af8:	0a12      	lsrs	r2, r2, #8
 8004afa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	617b      	str	r3, [r7, #20]
      break;
 8004b04:	e00c      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b06:	4a13      	ldr	r2, [pc, #76]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	4a10      	ldr	r2, [pc, #64]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b10:	68d2      	ldr	r2, [r2, #12]
 8004b12:	0a12      	lsrs	r2, r2, #8
 8004b14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b18:	fb02 f303 	mul.w	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]
      break;
 8004b1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b20:	4b0b      	ldr	r3, [pc, #44]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	0e5b      	lsrs	r3, r3, #25
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e001      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b40:	693b      	ldr	r3, [r7, #16]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
 8004b54:	00f42400 	.word	0x00f42400
 8004b58:	007a1200 	.word	0x007a1200

08004b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b60:	4b03      	ldr	r3, [pc, #12]	@ (8004b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b62:	681b      	ldr	r3, [r3, #0]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	20000000 	.word	0x20000000

08004b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b78:	f7ff fff0 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	0a1b      	lsrs	r3, r3, #8
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	4904      	ldr	r1, [pc, #16]	@ (8004b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b8a:	5ccb      	ldrb	r3, [r1, r3]
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	08007ac8 	.word	0x08007ac8

08004ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ba4:	f7ff ffda 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b06      	ldr	r3, [pc, #24]	@ (8004bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0adb      	lsrs	r3, r3, #11
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4904      	ldr	r1, [pc, #16]	@ (8004bc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	08007ac8 	.word	0x08007ac8

08004bcc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8004c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d10c      	bne.n	8004c0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bf0:	4a17      	ldr	r2, [pc, #92]	@ (8004c50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	4a14      	ldr	r2, [pc, #80]	@ (8004c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bfa:	68d2      	ldr	r2, [r2, #12]
 8004bfc:	0a12      	lsrs	r2, r2, #8
 8004bfe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	617b      	str	r3, [r7, #20]
    break;
 8004c08:	e00c      	b.n	8004c24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c0a:	4a12      	ldr	r2, [pc, #72]	@ (8004c54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	4a0e      	ldr	r2, [pc, #56]	@ (8004c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c14:	68d2      	ldr	r2, [r2, #12]
 8004c16:	0a12      	lsrs	r2, r2, #8
 8004c18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c1c:	fb02 f303 	mul.w	r3, r2, r3
 8004c20:	617b      	str	r3, [r7, #20]
    break;
 8004c22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c24:	4b09      	ldr	r3, [pc, #36]	@ (8004c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	0e5b      	lsrs	r3, r3, #25
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	3301      	adds	r3, #1
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c3e:	687b      	ldr	r3, [r7, #4]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	007a1200 	.word	0x007a1200
 8004c54:	00f42400 	.word	0x00f42400

08004c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c60:	2300      	movs	r3, #0
 8004c62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c64:	2300      	movs	r3, #0
 8004c66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8098 	beq.w	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c76:	2300      	movs	r3, #0
 8004c78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7a:	4b43      	ldr	r3, [pc, #268]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10d      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c86:	4b40      	ldr	r3, [pc, #256]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c92:	4b3d      	ldr	r3, [pc, #244]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ca2:	4b3a      	ldr	r3, [pc, #232]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a39      	ldr	r2, [pc, #228]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cae:	f7fd f949 	bl	8001f44 <HAL_GetTick>
 8004cb2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cb4:	e009      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb6:	f7fd f945 	bl	8001f44 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d902      	bls.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	74fb      	strb	r3, [r7, #19]
        break;
 8004cc8:	e005      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cca:	4b30      	ldr	r3, [pc, #192]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0ef      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004cd6:	7cfb      	ldrb	r3, [r7, #19]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d159      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01e      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d019      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cf8:	4b23      	ldr	r3, [pc, #140]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d04:	4b20      	ldr	r3, [pc, #128]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d14:	4b1c      	ldr	r3, [pc, #112]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d24:	4a18      	ldr	r2, [pc, #96]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d016      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d36:	f7fd f905 	bl	8001f44 <HAL_GetTick>
 8004d3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d3c:	e00b      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3e:	f7fd f901 	bl	8001f44 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d902      	bls.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	74fb      	strb	r3, [r7, #19]
            break;
 8004d54:	e006      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d56:	4b0c      	ldr	r3, [pc, #48]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ec      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d64:	7cfb      	ldrb	r3, [r7, #19]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d6a:	4b07      	ldr	r3, [pc, #28]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	4903      	ldr	r1, [pc, #12]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d80:	e008      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	74bb      	strb	r3, [r7, #18]
 8004d86:	e005      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d90:	7cfb      	ldrb	r3, [r7, #19]
 8004d92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d94:	7c7b      	ldrb	r3, [r7, #17]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d105      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9a:	4ba6      	ldr	r3, [pc, #664]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9e:	4aa5      	ldr	r2, [pc, #660]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004db2:	4ba0      	ldr	r3, [pc, #640]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db8:	f023 0203 	bic.w	r2, r3, #3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	499c      	ldr	r1, [pc, #624]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dd4:	4b97      	ldr	r3, [pc, #604]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dda:	f023 020c 	bic.w	r2, r3, #12
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	4994      	ldr	r1, [pc, #592]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004df6:	4b8f      	ldr	r3, [pc, #572]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	498b      	ldr	r1, [pc, #556]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e18:	4b86      	ldr	r3, [pc, #536]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	4983      	ldr	r1, [pc, #524]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e3a:	4b7e      	ldr	r3, [pc, #504]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e40:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	497a      	ldr	r1, [pc, #488]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e5c:	4b75      	ldr	r3, [pc, #468]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e62:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	4972      	ldr	r1, [pc, #456]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	4969      	ldr	r1, [pc, #420]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ea0:	4b64      	ldr	r3, [pc, #400]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	4961      	ldr	r1, [pc, #388]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	4958      	ldr	r1, [pc, #352]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ee4:	4b53      	ldr	r3, [pc, #332]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef2:	4950      	ldr	r1, [pc, #320]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f02:	d105      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f04:	4b4b      	ldr	r3, [pc, #300]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4a4a      	ldr	r2, [pc, #296]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f1c:	4b45      	ldr	r3, [pc, #276]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	4942      	ldr	r1, [pc, #264]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a3c      	ldr	r2, [pc, #240]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f46:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f54:	4b37      	ldr	r3, [pc, #220]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f62:	4934      	ldr	r1, [pc, #208]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f72:	d105      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f74:	4b2f      	ldr	r3, [pc, #188]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a2e      	ldr	r2, [pc, #184]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f8c:	4b29      	ldr	r3, [pc, #164]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9a:	4926      	ldr	r1, [pc, #152]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fac:	4b21      	ldr	r3, [pc, #132]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a20      	ldr	r2, [pc, #128]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fb6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd2:	4918      	ldr	r1, [pc, #96]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe4:	4b13      	ldr	r3, [pc, #76]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a12      	ldr	r2, [pc, #72]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d015      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005002:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500a:	490a      	ldr	r1, [pc, #40]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005016:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800501c:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a04      	ldr	r2, [pc, #16]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005026:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005028:	7cbb      	ldrb	r3, [r7, #18]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000

08005038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e09d      	b.n	8005186 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	2b00      	cmp	r3, #0
 8005050:	d108      	bne.n	8005064 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800505a:	d009      	beq.n	8005070 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	61da      	str	r2, [r3, #28]
 8005062:	e005      	b.n	8005070 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fc fce8 	bl	8001a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050b0:	d902      	bls.n	80050b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e002      	b.n	80050be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80050c6:	d007      	beq.n	80050d8 <HAL_SPI_Init+0xa0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050d0:	d002      	beq.n	80050d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511a:	ea42 0103 	orr.w	r1, r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	0c1b      	lsrs	r3, r3, #16
 8005134:	f003 0204 	and.w	r2, r3, #4
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005154:	ea42 0103 	orr.w	r1, r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005174:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e049      	b.n	8005234 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7fc fd07 	bl	8001bc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3304      	adds	r3, #4
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f000 fa95 	bl	80056fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <HAL_TIM_PWM_Start_IT+0x28>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e03c      	b.n	80052de <HAL_TIM_PWM_Start_IT+0xa2>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b04      	cmp	r3, #4
 8005268:	d109      	bne.n	800527e <HAL_TIM_PWM_Start_IT+0x42>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b01      	cmp	r3, #1
 8005274:	bf14      	ite	ne
 8005276:	2301      	movne	r3, #1
 8005278:	2300      	moveq	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	e02f      	b.n	80052de <HAL_TIM_PWM_Start_IT+0xa2>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d109      	bne.n	8005298 <HAL_TIM_PWM_Start_IT+0x5c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	bf14      	ite	ne
 8005290:	2301      	movne	r3, #1
 8005292:	2300      	moveq	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	e022      	b.n	80052de <HAL_TIM_PWM_Start_IT+0xa2>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b0c      	cmp	r3, #12
 800529c:	d109      	bne.n	80052b2 <HAL_TIM_PWM_Start_IT+0x76>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	bf14      	ite	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	2300      	moveq	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	e015      	b.n	80052de <HAL_TIM_PWM_Start_IT+0xa2>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d109      	bne.n	80052cc <HAL_TIM_PWM_Start_IT+0x90>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e008      	b.n	80052de <HAL_TIM_PWM_Start_IT+0xa2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e0e2      	b.n	80054ac <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <HAL_TIM_PWM_Start_IT+0xba>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052f4:	e023      	b.n	800533e <HAL_TIM_PWM_Start_IT+0x102>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_PWM_Start_IT+0xca>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005304:	e01b      	b.n	800533e <HAL_TIM_PWM_Start_IT+0x102>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b08      	cmp	r3, #8
 800530a:	d104      	bne.n	8005316 <HAL_TIM_PWM_Start_IT+0xda>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005314:	e013      	b.n	800533e <HAL_TIM_PWM_Start_IT+0x102>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b0c      	cmp	r3, #12
 800531a:	d104      	bne.n	8005326 <HAL_TIM_PWM_Start_IT+0xea>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005324:	e00b      	b.n	800533e <HAL_TIM_PWM_Start_IT+0x102>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b10      	cmp	r3, #16
 800532a:	d104      	bne.n	8005336 <HAL_TIM_PWM_Start_IT+0xfa>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005334:	e003      	b.n	800533e <HAL_TIM_PWM_Start_IT+0x102>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b0c      	cmp	r3, #12
 8005342:	d841      	bhi.n	80053c8 <HAL_TIM_PWM_Start_IT+0x18c>
 8005344:	a201      	add	r2, pc, #4	@ (adr r2, 800534c <HAL_TIM_PWM_Start_IT+0x110>)
 8005346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534a:	bf00      	nop
 800534c:	08005381 	.word	0x08005381
 8005350:	080053c9 	.word	0x080053c9
 8005354:	080053c9 	.word	0x080053c9
 8005358:	080053c9 	.word	0x080053c9
 800535c:	08005393 	.word	0x08005393
 8005360:	080053c9 	.word	0x080053c9
 8005364:	080053c9 	.word	0x080053c9
 8005368:	080053c9 	.word	0x080053c9
 800536c:	080053a5 	.word	0x080053a5
 8005370:	080053c9 	.word	0x080053c9
 8005374:	080053c9 	.word	0x080053c9
 8005378:	080053c9 	.word	0x080053c9
 800537c:	080053b7 	.word	0x080053b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0202 	orr.w	r2, r2, #2
 800538e:	60da      	str	r2, [r3, #12]
      break;
 8005390:	e01d      	b.n	80053ce <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0204 	orr.w	r2, r2, #4
 80053a0:	60da      	str	r2, [r3, #12]
      break;
 80053a2:	e014      	b.n	80053ce <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0208 	orr.w	r2, r2, #8
 80053b2:	60da      	str	r2, [r3, #12]
      break;
 80053b4:	e00b      	b.n	80053ce <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0210 	orr.w	r2, r2, #16
 80053c4:	60da      	str	r2, [r3, #12]
      break;
 80053c6:	e002      	b.n	80053ce <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
      break;
 80053cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d16a      	bne.n	80054aa <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2201      	movs	r2, #1
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fd1f 	bl	8005e20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a33      	ldr	r2, [pc, #204]	@ (80054b4 <HAL_TIM_PWM_Start_IT+0x278>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <HAL_TIM_PWM_Start_IT+0x1d8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a31      	ldr	r2, [pc, #196]	@ (80054b8 <HAL_TIM_PWM_Start_IT+0x27c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00e      	beq.n	8005414 <HAL_TIM_PWM_Start_IT+0x1d8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a30      	ldr	r2, [pc, #192]	@ (80054bc <HAL_TIM_PWM_Start_IT+0x280>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d009      	beq.n	8005414 <HAL_TIM_PWM_Start_IT+0x1d8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2e      	ldr	r2, [pc, #184]	@ (80054c0 <HAL_TIM_PWM_Start_IT+0x284>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <HAL_TIM_PWM_Start_IT+0x1d8>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a2d      	ldr	r2, [pc, #180]	@ (80054c4 <HAL_TIM_PWM_Start_IT+0x288>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d101      	bne.n	8005418 <HAL_TIM_PWM_Start_IT+0x1dc>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <HAL_TIM_PWM_Start_IT+0x1de>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800542c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a20      	ldr	r2, [pc, #128]	@ (80054b4 <HAL_TIM_PWM_Start_IT+0x278>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d018      	beq.n	800546a <HAL_TIM_PWM_Start_IT+0x22e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005440:	d013      	beq.n	800546a <HAL_TIM_PWM_Start_IT+0x22e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a20      	ldr	r2, [pc, #128]	@ (80054c8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00e      	beq.n	800546a <HAL_TIM_PWM_Start_IT+0x22e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1e      	ldr	r2, [pc, #120]	@ (80054cc <HAL_TIM_PWM_Start_IT+0x290>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d009      	beq.n	800546a <HAL_TIM_PWM_Start_IT+0x22e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a17      	ldr	r2, [pc, #92]	@ (80054b8 <HAL_TIM_PWM_Start_IT+0x27c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d004      	beq.n	800546a <HAL_TIM_PWM_Start_IT+0x22e>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a15      	ldr	r2, [pc, #84]	@ (80054bc <HAL_TIM_PWM_Start_IT+0x280>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d115      	bne.n	8005496 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	4b17      	ldr	r3, [pc, #92]	@ (80054d0 <HAL_TIM_PWM_Start_IT+0x294>)
 8005472:	4013      	ands	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b06      	cmp	r3, #6
 800547a:	d015      	beq.n	80054a8 <HAL_TIM_PWM_Start_IT+0x26c>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005482:	d011      	beq.n	80054a8 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005494:	e008      	b.n	80054a8 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e000      	b.n	80054aa <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40013400 	.word	0x40013400
 80054bc:	40014000 	.word	0x40014000
 80054c0:	40014400 	.word	0x40014400
 80054c4:	40014800 	.word	0x40014800
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	00010007 	.word	0x00010007

080054d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e0ff      	b.n	80056f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b14      	cmp	r3, #20
 80054fe:	f200 80f0 	bhi.w	80056e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005502:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	0800555d 	.word	0x0800555d
 800550c:	080056e3 	.word	0x080056e3
 8005510:	080056e3 	.word	0x080056e3
 8005514:	080056e3 	.word	0x080056e3
 8005518:	0800559d 	.word	0x0800559d
 800551c:	080056e3 	.word	0x080056e3
 8005520:	080056e3 	.word	0x080056e3
 8005524:	080056e3 	.word	0x080056e3
 8005528:	080055df 	.word	0x080055df
 800552c:	080056e3 	.word	0x080056e3
 8005530:	080056e3 	.word	0x080056e3
 8005534:	080056e3 	.word	0x080056e3
 8005538:	0800561f 	.word	0x0800561f
 800553c:	080056e3 	.word	0x080056e3
 8005540:	080056e3 	.word	0x080056e3
 8005544:	080056e3 	.word	0x080056e3
 8005548:	08005661 	.word	0x08005661
 800554c:	080056e3 	.word	0x080056e3
 8005550:	080056e3 	.word	0x080056e3
 8005554:	080056e3 	.word	0x080056e3
 8005558:	080056a1 	.word	0x080056a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f966 	bl	8005834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0208 	orr.w	r2, r2, #8
 8005576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0204 	bic.w	r2, r2, #4
 8005586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6999      	ldr	r1, [r3, #24]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	619a      	str	r2, [r3, #24]
      break;
 800559a:	e0a5      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 f9d6 	bl	8005954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6999      	ldr	r1, [r3, #24]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	021a      	lsls	r2, r3, #8
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	619a      	str	r2, [r3, #24]
      break;
 80055dc:	e084      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fa3f 	bl	8005a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0208 	orr.w	r2, r2, #8
 80055f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0204 	bic.w	r2, r2, #4
 8005608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69d9      	ldr	r1, [r3, #28]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	61da      	str	r2, [r3, #28]
      break;
 800561c:	e064      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 faa7 	bl	8005b78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69d9      	ldr	r1, [r3, #28]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	021a      	lsls	r2, r3, #8
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	61da      	str	r2, [r3, #28]
      break;
 800565e:	e043      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68b9      	ldr	r1, [r7, #8]
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fb10 	bl	8005c8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0208 	orr.w	r2, r2, #8
 800567a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0204 	bic.w	r2, r2, #4
 800568a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800569e:	e023      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fb54 	bl	8005d54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	021a      	lsls	r2, r3, #8
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80056e0:	e002      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	75fb      	strb	r3, [r7, #23]
      break;
 80056e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop

080056fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a42      	ldr	r2, [pc, #264]	@ (8005818 <TIM_Base_SetConfig+0x11c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00f      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800571a:	d00b      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a3f      	ldr	r2, [pc, #252]	@ (800581c <TIM_Base_SetConfig+0x120>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a3e      	ldr	r2, [pc, #248]	@ (8005820 <TIM_Base_SetConfig+0x124>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a3d      	ldr	r2, [pc, #244]	@ (8005824 <TIM_Base_SetConfig+0x128>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a33      	ldr	r2, [pc, #204]	@ (8005818 <TIM_Base_SetConfig+0x11c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01b      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005754:	d017      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a30      	ldr	r2, [pc, #192]	@ (800581c <TIM_Base_SetConfig+0x120>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2f      	ldr	r2, [pc, #188]	@ (8005820 <TIM_Base_SetConfig+0x124>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00f      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a2e      	ldr	r2, [pc, #184]	@ (8005824 <TIM_Base_SetConfig+0x128>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00b      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2d      	ldr	r2, [pc, #180]	@ (8005828 <TIM_Base_SetConfig+0x12c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d007      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a2c      	ldr	r2, [pc, #176]	@ (800582c <TIM_Base_SetConfig+0x130>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2b      	ldr	r2, [pc, #172]	@ (8005830 <TIM_Base_SetConfig+0x134>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d108      	bne.n	8005798 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a16      	ldr	r2, [pc, #88]	@ (8005818 <TIM_Base_SetConfig+0x11c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00f      	beq.n	80057e4 <TIM_Base_SetConfig+0xe8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a17      	ldr	r2, [pc, #92]	@ (8005824 <TIM_Base_SetConfig+0x128>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00b      	beq.n	80057e4 <TIM_Base_SetConfig+0xe8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a16      	ldr	r2, [pc, #88]	@ (8005828 <TIM_Base_SetConfig+0x12c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d007      	beq.n	80057e4 <TIM_Base_SetConfig+0xe8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a15      	ldr	r2, [pc, #84]	@ (800582c <TIM_Base_SetConfig+0x130>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_Base_SetConfig+0xe8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a14      	ldr	r2, [pc, #80]	@ (8005830 <TIM_Base_SetConfig+0x134>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d103      	bne.n	80057ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d105      	bne.n	800580a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f023 0201 	bic.w	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	611a      	str	r2, [r3, #16]
  }
}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40012c00 	.word	0x40012c00
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40013400 	.word	0x40013400
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400
 8005830:	40014800 	.word	0x40014800

08005834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f023 0201 	bic.w	r2, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f023 0302 	bic.w	r3, r3, #2
 8005880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a2c      	ldr	r2, [pc, #176]	@ (8005940 <TIM_OC1_SetConfig+0x10c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00f      	beq.n	80058b4 <TIM_OC1_SetConfig+0x80>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a2b      	ldr	r2, [pc, #172]	@ (8005944 <TIM_OC1_SetConfig+0x110>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00b      	beq.n	80058b4 <TIM_OC1_SetConfig+0x80>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a2a      	ldr	r2, [pc, #168]	@ (8005948 <TIM_OC1_SetConfig+0x114>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_OC1_SetConfig+0x80>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a29      	ldr	r2, [pc, #164]	@ (800594c <TIM_OC1_SetConfig+0x118>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_OC1_SetConfig+0x80>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a28      	ldr	r2, [pc, #160]	@ (8005950 <TIM_OC1_SetConfig+0x11c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d10c      	bne.n	80058ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 0308 	bic.w	r3, r3, #8
 80058ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f023 0304 	bic.w	r3, r3, #4
 80058cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005940 <TIM_OC1_SetConfig+0x10c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00f      	beq.n	80058f6 <TIM_OC1_SetConfig+0xc2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005944 <TIM_OC1_SetConfig+0x110>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00b      	beq.n	80058f6 <TIM_OC1_SetConfig+0xc2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a19      	ldr	r2, [pc, #100]	@ (8005948 <TIM_OC1_SetConfig+0x114>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d007      	beq.n	80058f6 <TIM_OC1_SetConfig+0xc2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a18      	ldr	r2, [pc, #96]	@ (800594c <TIM_OC1_SetConfig+0x118>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d003      	beq.n	80058f6 <TIM_OC1_SetConfig+0xc2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a17      	ldr	r2, [pc, #92]	@ (8005950 <TIM_OC1_SetConfig+0x11c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d111      	bne.n	800591a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40013400 	.word	0x40013400
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800

08005954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f023 0210 	bic.w	r2, r3, #16
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800598e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f023 0320 	bic.w	r3, r3, #32
 80059a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a28      	ldr	r2, [pc, #160]	@ (8005a54 <TIM_OC2_SetConfig+0x100>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_OC2_SetConfig+0x6c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a27      	ldr	r2, [pc, #156]	@ (8005a58 <TIM_OC2_SetConfig+0x104>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d10d      	bne.n	80059dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a1d      	ldr	r2, [pc, #116]	@ (8005a54 <TIM_OC2_SetConfig+0x100>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00f      	beq.n	8005a04 <TIM_OC2_SetConfig+0xb0>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a58 <TIM_OC2_SetConfig+0x104>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00b      	beq.n	8005a04 <TIM_OC2_SetConfig+0xb0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a1b      	ldr	r2, [pc, #108]	@ (8005a5c <TIM_OC2_SetConfig+0x108>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d007      	beq.n	8005a04 <TIM_OC2_SetConfig+0xb0>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a60 <TIM_OC2_SetConfig+0x10c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d003      	beq.n	8005a04 <TIM_OC2_SetConfig+0xb0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a19      	ldr	r2, [pc, #100]	@ (8005a64 <TIM_OC2_SetConfig+0x110>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d113      	bne.n	8005a2c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40012c00 	.word	0x40012c00
 8005a58:	40013400 	.word	0x40013400
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40014400 	.word	0x40014400
 8005a64:	40014800 	.word	0x40014800

08005a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a27      	ldr	r2, [pc, #156]	@ (8005b64 <TIM_OC3_SetConfig+0xfc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC3_SetConfig+0x6a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a26      	ldr	r2, [pc, #152]	@ (8005b68 <TIM_OC3_SetConfig+0x100>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d10d      	bne.n	8005aee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b64 <TIM_OC3_SetConfig+0xfc>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00f      	beq.n	8005b16 <TIM_OC3_SetConfig+0xae>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b68 <TIM_OC3_SetConfig+0x100>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00b      	beq.n	8005b16 <TIM_OC3_SetConfig+0xae>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1a      	ldr	r2, [pc, #104]	@ (8005b6c <TIM_OC3_SetConfig+0x104>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_OC3_SetConfig+0xae>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a19      	ldr	r2, [pc, #100]	@ (8005b70 <TIM_OC3_SetConfig+0x108>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_OC3_SetConfig+0xae>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a18      	ldr	r2, [pc, #96]	@ (8005b74 <TIM_OC3_SetConfig+0x10c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d113      	bne.n	8005b3e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	621a      	str	r2, [r3, #32]
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40013400 	.word	0x40013400
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40014400 	.word	0x40014400
 8005b74:	40014800 	.word	0x40014800

08005b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	031b      	lsls	r3, r3, #12
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a28      	ldr	r2, [pc, #160]	@ (8005c78 <TIM_OC4_SetConfig+0x100>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d003      	beq.n	8005be4 <TIM_OC4_SetConfig+0x6c>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a27      	ldr	r2, [pc, #156]	@ (8005c7c <TIM_OC4_SetConfig+0x104>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d10d      	bne.n	8005c00 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	031b      	lsls	r3, r3, #12
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a1d      	ldr	r2, [pc, #116]	@ (8005c78 <TIM_OC4_SetConfig+0x100>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00f      	beq.n	8005c28 <TIM_OC4_SetConfig+0xb0>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005c7c <TIM_OC4_SetConfig+0x104>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00b      	beq.n	8005c28 <TIM_OC4_SetConfig+0xb0>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a1b      	ldr	r2, [pc, #108]	@ (8005c80 <TIM_OC4_SetConfig+0x108>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_OC4_SetConfig+0xb0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8005c84 <TIM_OC4_SetConfig+0x10c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_OC4_SetConfig+0xb0>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a19      	ldr	r2, [pc, #100]	@ (8005c88 <TIM_OC4_SetConfig+0x110>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d113      	bne.n	8005c50 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c2e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c36:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	019b      	lsls	r3, r3, #6
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	019b      	lsls	r3, r3, #6
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800

08005c8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005cd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	041b      	lsls	r3, r3, #16
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a17      	ldr	r2, [pc, #92]	@ (8005d40 <TIM_OC5_SetConfig+0xb4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00f      	beq.n	8005d06 <TIM_OC5_SetConfig+0x7a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a16      	ldr	r2, [pc, #88]	@ (8005d44 <TIM_OC5_SetConfig+0xb8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00b      	beq.n	8005d06 <TIM_OC5_SetConfig+0x7a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a15      	ldr	r2, [pc, #84]	@ (8005d48 <TIM_OC5_SetConfig+0xbc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_OC5_SetConfig+0x7a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a14      	ldr	r2, [pc, #80]	@ (8005d4c <TIM_OC5_SetConfig+0xc0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_OC5_SetConfig+0x7a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a13      	ldr	r2, [pc, #76]	@ (8005d50 <TIM_OC5_SetConfig+0xc4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d109      	bne.n	8005d1a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	021b      	lsls	r3, r3, #8
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	621a      	str	r2, [r3, #32]
}
 8005d34:	bf00      	nop
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	40012c00 	.word	0x40012c00
 8005d44:	40013400 	.word	0x40013400
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40014400 	.word	0x40014400
 8005d50:	40014800 	.word	0x40014800

08005d54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	051b      	lsls	r3, r3, #20
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a18      	ldr	r2, [pc, #96]	@ (8005e0c <TIM_OC6_SetConfig+0xb8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00f      	beq.n	8005dd0 <TIM_OC6_SetConfig+0x7c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a17      	ldr	r2, [pc, #92]	@ (8005e10 <TIM_OC6_SetConfig+0xbc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00b      	beq.n	8005dd0 <TIM_OC6_SetConfig+0x7c>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a16      	ldr	r2, [pc, #88]	@ (8005e14 <TIM_OC6_SetConfig+0xc0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <TIM_OC6_SetConfig+0x7c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a15      	ldr	r2, [pc, #84]	@ (8005e18 <TIM_OC6_SetConfig+0xc4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_OC6_SetConfig+0x7c>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a14      	ldr	r2, [pc, #80]	@ (8005e1c <TIM_OC6_SetConfig+0xc8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d109      	bne.n	8005de4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	029b      	lsls	r3, r3, #10
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	621a      	str	r2, [r3, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40012c00 	.word	0x40012c00
 8005e10:	40013400 	.word	0x40013400
 8005e14:	40014000 	.word	0x40014000
 8005e18:	40014400 	.word	0x40014400
 8005e1c:	40014800 	.word	0x40014800

08005e20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 031f 	and.w	r3, r3, #31
 8005e32:	2201      	movs	r2, #1
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a1a      	ldr	r2, [r3, #32]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	43db      	mvns	r3, r3
 8005e42:	401a      	ands	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1a      	ldr	r2, [r3, #32]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f003 031f 	and.w	r3, r3, #31
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	fa01 f303 	lsl.w	r3, r1, r3
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	621a      	str	r2, [r3, #32]
}
 8005e5e:	bf00      	nop
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d109      	bne.n	8005e94 <HAL_TIMEx_PWMN_Start_IT+0x28>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	bf14      	ite	ne
 8005e8c:	2301      	movne	r3, #1
 8005e8e:	2300      	moveq	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e022      	b.n	8005eda <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d109      	bne.n	8005eae <HAL_TIMEx_PWMN_Start_IT+0x42>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	bf14      	ite	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	2300      	moveq	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	e015      	b.n	8005eda <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d109      	bne.n	8005ec8 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	bf14      	ite	ne
 8005ec0:	2301      	movne	r3, #1
 8005ec2:	2300      	moveq	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	e008      	b.n	8005eda <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	bf14      	ite	ne
 8005ed4:	2301      	movne	r3, #1
 8005ed6:	2300      	moveq	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e0bc      	b.n	800605c <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIMEx_PWMN_Start_IT+0x86>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ef0:	e013      	b.n	8005f1a <HAL_TIMEx_PWMN_Start_IT+0xae>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d104      	bne.n	8005f02 <HAL_TIMEx_PWMN_Start_IT+0x96>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f00:	e00b      	b.n	8005f1a <HAL_TIMEx_PWMN_Start_IT+0xae>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d104      	bne.n	8005f12 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f10:	e003      	b.n	8005f1a <HAL_TIMEx_PWMN_Start_IT+0xae>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b0c      	cmp	r3, #12
 8005f1e:	d841      	bhi.n	8005fa4 <HAL_TIMEx_PWMN_Start_IT+0x138>
 8005f20:	a201      	add	r2, pc, #4	@ (adr r2, 8005f28 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005f5d 	.word	0x08005f5d
 8005f2c:	08005fa5 	.word	0x08005fa5
 8005f30:	08005fa5 	.word	0x08005fa5
 8005f34:	08005fa5 	.word	0x08005fa5
 8005f38:	08005f6f 	.word	0x08005f6f
 8005f3c:	08005fa5 	.word	0x08005fa5
 8005f40:	08005fa5 	.word	0x08005fa5
 8005f44:	08005fa5 	.word	0x08005fa5
 8005f48:	08005f81 	.word	0x08005f81
 8005f4c:	08005fa5 	.word	0x08005fa5
 8005f50:	08005fa5 	.word	0x08005fa5
 8005f54:	08005fa5 	.word	0x08005fa5
 8005f58:	08005f93 	.word	0x08005f93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0202 	orr.w	r2, r2, #2
 8005f6a:	60da      	str	r2, [r3, #12]
      break;
 8005f6c:	e01d      	b.n	8005faa <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0204 	orr.w	r2, r2, #4
 8005f7c:	60da      	str	r2, [r3, #12]
      break;
 8005f7e:	e014      	b.n	8005faa <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0208 	orr.w	r2, r2, #8
 8005f8e:	60da      	str	r2, [r3, #12]
      break;
 8005f90:	e00b      	b.n	8005faa <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0210 	orr.w	r2, r2, #16
 8005fa0:	60da      	str	r2, [r3, #12]
      break;
 8005fa2:	e002      	b.n	8005faa <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d154      	bne.n	800605a <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fbe:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 f965 	bl	8006298 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a20      	ldr	r2, [pc, #128]	@ (8006064 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d018      	beq.n	800601a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff0:	d013      	beq.n	800601a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8006068 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00e      	beq.n	800601a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1a      	ldr	r2, [pc, #104]	@ (800606c <HAL_TIMEx_PWMN_Start_IT+0x200>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d009      	beq.n	800601a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a19      	ldr	r2, [pc, #100]	@ (8006070 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d004      	beq.n	800601a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a17      	ldr	r2, [pc, #92]	@ (8006074 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d115      	bne.n	8006046 <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	4b15      	ldr	r3, [pc, #84]	@ (8006078 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 8006022:	4013      	ands	r3, r2
 8006024:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b06      	cmp	r3, #6
 800602a:	d015      	beq.n	8006058 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006032:	d011      	beq.n	8006058 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006044:	e008      	b.n	8006058 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0201 	orr.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e000      	b.n	800605a <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006058:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40012c00 	.word	0x40012c00
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800
 8006070:	40013400 	.word	0x40013400
 8006074:	40014000 	.word	0x40014000
 8006078:	00010007 	.word	0x00010007

0800607c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006090:	2302      	movs	r3, #2
 8006092:	e065      	b.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a2c      	ldr	r2, [pc, #176]	@ (800616c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d004      	beq.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d108      	bne.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80060ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80060e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a1b      	ldr	r2, [pc, #108]	@ (800616c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d018      	beq.n	8006134 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800610a:	d013      	beq.n	8006134 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a18      	ldr	r2, [pc, #96]	@ (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00e      	beq.n	8006134 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a17      	ldr	r2, [pc, #92]	@ (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d009      	beq.n	8006134 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a12      	ldr	r2, [pc, #72]	@ (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a13      	ldr	r2, [pc, #76]	@ (800617c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d10c      	bne.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800613a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	4313      	orrs	r3, r2
 8006144:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	40012c00 	.word	0x40012c00
 8006170:	40013400 	.word	0x40013400
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40014000 	.word	0x40014000

08006180 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006198:	2302      	movs	r3, #2
 800619a:	e073      	b.n	8006284 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	041b      	lsls	r3, r3, #16
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a19      	ldr	r2, [pc, #100]	@ (8006290 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d004      	beq.n	8006238 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a18      	ldr	r2, [pc, #96]	@ (8006294 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d11c      	bne.n	8006272 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006242:	051b      	lsls	r3, r3, #20
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	40012c00 	.word	0x40012c00
 8006294:	40013400 	.word	0x40013400

08006298 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	2204      	movs	r2, #4
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a1a      	ldr	r2, [r3, #32]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	43db      	mvns	r3, r3
 80062ba:	401a      	ands	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a1a      	ldr	r2, [r3, #32]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	fa01 f303 	lsl.w	r3, r1, r3
 80062d0:	431a      	orrs	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	621a      	str	r2, [r3, #32]
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b082      	sub	sp, #8
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e042      	b.n	800637a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fb fcf4 	bl	8001cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2224      	movs	r2, #36	@ 0x24
 8006310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0201 	bic.w	r2, r2, #1
 8006322:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 faf5 	bl	800691c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f826 	bl	8006384 <UART_SetConfig>
 8006338:	4603      	mov	r3, r0
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e01b      	b.n	800637a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006350:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006360:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f042 0201 	orr.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fb74 	bl	8006a60 <UART_CheckIdleState>
 8006378:	4603      	mov	r3, r0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006388:	b08c      	sub	sp, #48	@ 0x30
 800638a:	af00      	add	r7, sp, #0
 800638c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	431a      	orrs	r2, r3
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	431a      	orrs	r2, r3
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4bab      	ldr	r3, [pc, #684]	@ (8006660 <UART_SetConfig+0x2dc>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063bc:	430b      	orrs	r3, r1
 80063be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4aa0      	ldr	r2, [pc, #640]	@ (8006664 <UART_SetConfig+0x2e0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ec:	4313      	orrs	r3, r2
 80063ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80063fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	6812      	ldr	r2, [r2, #0]
 8006402:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006404:	430b      	orrs	r3, r1
 8006406:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	f023 010f 	bic.w	r1, r3, #15
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a91      	ldr	r2, [pc, #580]	@ (8006668 <UART_SetConfig+0x2e4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d125      	bne.n	8006474 <UART_SetConfig+0xf0>
 8006428:	4b90      	ldr	r3, [pc, #576]	@ (800666c <UART_SetConfig+0x2e8>)
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	2b03      	cmp	r3, #3
 8006434:	d81a      	bhi.n	800646c <UART_SetConfig+0xe8>
 8006436:	a201      	add	r2, pc, #4	@ (adr r2, 800643c <UART_SetConfig+0xb8>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	0800644d 	.word	0x0800644d
 8006440:	0800645d 	.word	0x0800645d
 8006444:	08006455 	.word	0x08006455
 8006448:	08006465 	.word	0x08006465
 800644c:	2301      	movs	r3, #1
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006452:	e0d6      	b.n	8006602 <UART_SetConfig+0x27e>
 8006454:	2302      	movs	r3, #2
 8006456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800645a:	e0d2      	b.n	8006602 <UART_SetConfig+0x27e>
 800645c:	2304      	movs	r3, #4
 800645e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006462:	e0ce      	b.n	8006602 <UART_SetConfig+0x27e>
 8006464:	2308      	movs	r3, #8
 8006466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800646a:	e0ca      	b.n	8006602 <UART_SetConfig+0x27e>
 800646c:	2310      	movs	r3, #16
 800646e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006472:	e0c6      	b.n	8006602 <UART_SetConfig+0x27e>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a7d      	ldr	r2, [pc, #500]	@ (8006670 <UART_SetConfig+0x2ec>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d138      	bne.n	80064f0 <UART_SetConfig+0x16c>
 800647e:	4b7b      	ldr	r3, [pc, #492]	@ (800666c <UART_SetConfig+0x2e8>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006484:	f003 030c 	and.w	r3, r3, #12
 8006488:	2b0c      	cmp	r3, #12
 800648a:	d82d      	bhi.n	80064e8 <UART_SetConfig+0x164>
 800648c:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <UART_SetConfig+0x110>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064c9 	.word	0x080064c9
 8006498:	080064e9 	.word	0x080064e9
 800649c:	080064e9 	.word	0x080064e9
 80064a0:	080064e9 	.word	0x080064e9
 80064a4:	080064d9 	.word	0x080064d9
 80064a8:	080064e9 	.word	0x080064e9
 80064ac:	080064e9 	.word	0x080064e9
 80064b0:	080064e9 	.word	0x080064e9
 80064b4:	080064d1 	.word	0x080064d1
 80064b8:	080064e9 	.word	0x080064e9
 80064bc:	080064e9 	.word	0x080064e9
 80064c0:	080064e9 	.word	0x080064e9
 80064c4:	080064e1 	.word	0x080064e1
 80064c8:	2300      	movs	r3, #0
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ce:	e098      	b.n	8006602 <UART_SetConfig+0x27e>
 80064d0:	2302      	movs	r3, #2
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064d6:	e094      	b.n	8006602 <UART_SetConfig+0x27e>
 80064d8:	2304      	movs	r3, #4
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064de:	e090      	b.n	8006602 <UART_SetConfig+0x27e>
 80064e0:	2308      	movs	r3, #8
 80064e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064e6:	e08c      	b.n	8006602 <UART_SetConfig+0x27e>
 80064e8:	2310      	movs	r3, #16
 80064ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ee:	e088      	b.n	8006602 <UART_SetConfig+0x27e>
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a5f      	ldr	r2, [pc, #380]	@ (8006674 <UART_SetConfig+0x2f0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d125      	bne.n	8006546 <UART_SetConfig+0x1c2>
 80064fa:	4b5c      	ldr	r3, [pc, #368]	@ (800666c <UART_SetConfig+0x2e8>)
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006500:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006504:	2b30      	cmp	r3, #48	@ 0x30
 8006506:	d016      	beq.n	8006536 <UART_SetConfig+0x1b2>
 8006508:	2b30      	cmp	r3, #48	@ 0x30
 800650a:	d818      	bhi.n	800653e <UART_SetConfig+0x1ba>
 800650c:	2b20      	cmp	r3, #32
 800650e:	d00a      	beq.n	8006526 <UART_SetConfig+0x1a2>
 8006510:	2b20      	cmp	r3, #32
 8006512:	d814      	bhi.n	800653e <UART_SetConfig+0x1ba>
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <UART_SetConfig+0x19a>
 8006518:	2b10      	cmp	r3, #16
 800651a:	d008      	beq.n	800652e <UART_SetConfig+0x1aa>
 800651c:	e00f      	b.n	800653e <UART_SetConfig+0x1ba>
 800651e:	2300      	movs	r3, #0
 8006520:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006524:	e06d      	b.n	8006602 <UART_SetConfig+0x27e>
 8006526:	2302      	movs	r3, #2
 8006528:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800652c:	e069      	b.n	8006602 <UART_SetConfig+0x27e>
 800652e:	2304      	movs	r3, #4
 8006530:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006534:	e065      	b.n	8006602 <UART_SetConfig+0x27e>
 8006536:	2308      	movs	r3, #8
 8006538:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800653c:	e061      	b.n	8006602 <UART_SetConfig+0x27e>
 800653e:	2310      	movs	r3, #16
 8006540:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006544:	e05d      	b.n	8006602 <UART_SetConfig+0x27e>
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a4b      	ldr	r2, [pc, #300]	@ (8006678 <UART_SetConfig+0x2f4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d125      	bne.n	800659c <UART_SetConfig+0x218>
 8006550:	4b46      	ldr	r3, [pc, #280]	@ (800666c <UART_SetConfig+0x2e8>)
 8006552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006556:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800655a:	2bc0      	cmp	r3, #192	@ 0xc0
 800655c:	d016      	beq.n	800658c <UART_SetConfig+0x208>
 800655e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006560:	d818      	bhi.n	8006594 <UART_SetConfig+0x210>
 8006562:	2b80      	cmp	r3, #128	@ 0x80
 8006564:	d00a      	beq.n	800657c <UART_SetConfig+0x1f8>
 8006566:	2b80      	cmp	r3, #128	@ 0x80
 8006568:	d814      	bhi.n	8006594 <UART_SetConfig+0x210>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <UART_SetConfig+0x1f0>
 800656e:	2b40      	cmp	r3, #64	@ 0x40
 8006570:	d008      	beq.n	8006584 <UART_SetConfig+0x200>
 8006572:	e00f      	b.n	8006594 <UART_SetConfig+0x210>
 8006574:	2300      	movs	r3, #0
 8006576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800657a:	e042      	b.n	8006602 <UART_SetConfig+0x27e>
 800657c:	2302      	movs	r3, #2
 800657e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006582:	e03e      	b.n	8006602 <UART_SetConfig+0x27e>
 8006584:	2304      	movs	r3, #4
 8006586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800658a:	e03a      	b.n	8006602 <UART_SetConfig+0x27e>
 800658c:	2308      	movs	r3, #8
 800658e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006592:	e036      	b.n	8006602 <UART_SetConfig+0x27e>
 8006594:	2310      	movs	r3, #16
 8006596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800659a:	e032      	b.n	8006602 <UART_SetConfig+0x27e>
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a30      	ldr	r2, [pc, #192]	@ (8006664 <UART_SetConfig+0x2e0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d12a      	bne.n	80065fc <UART_SetConfig+0x278>
 80065a6:	4b31      	ldr	r3, [pc, #196]	@ (800666c <UART_SetConfig+0x2e8>)
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065b4:	d01a      	beq.n	80065ec <UART_SetConfig+0x268>
 80065b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065ba:	d81b      	bhi.n	80065f4 <UART_SetConfig+0x270>
 80065bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c0:	d00c      	beq.n	80065dc <UART_SetConfig+0x258>
 80065c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c6:	d815      	bhi.n	80065f4 <UART_SetConfig+0x270>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <UART_SetConfig+0x250>
 80065cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065d0:	d008      	beq.n	80065e4 <UART_SetConfig+0x260>
 80065d2:	e00f      	b.n	80065f4 <UART_SetConfig+0x270>
 80065d4:	2300      	movs	r3, #0
 80065d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065da:	e012      	b.n	8006602 <UART_SetConfig+0x27e>
 80065dc:	2302      	movs	r3, #2
 80065de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065e2:	e00e      	b.n	8006602 <UART_SetConfig+0x27e>
 80065e4:	2304      	movs	r3, #4
 80065e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ea:	e00a      	b.n	8006602 <UART_SetConfig+0x27e>
 80065ec:	2308      	movs	r3, #8
 80065ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065f2:	e006      	b.n	8006602 <UART_SetConfig+0x27e>
 80065f4:	2310      	movs	r3, #16
 80065f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065fa:	e002      	b.n	8006602 <UART_SetConfig+0x27e>
 80065fc:	2310      	movs	r3, #16
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a17      	ldr	r2, [pc, #92]	@ (8006664 <UART_SetConfig+0x2e0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	f040 80a8 	bne.w	800675e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800660e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006612:	2b08      	cmp	r3, #8
 8006614:	d834      	bhi.n	8006680 <UART_SetConfig+0x2fc>
 8006616:	a201      	add	r2, pc, #4	@ (adr r2, 800661c <UART_SetConfig+0x298>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	08006641 	.word	0x08006641
 8006620:	08006681 	.word	0x08006681
 8006624:	08006649 	.word	0x08006649
 8006628:	08006681 	.word	0x08006681
 800662c:	0800664f 	.word	0x0800664f
 8006630:	08006681 	.word	0x08006681
 8006634:	08006681 	.word	0x08006681
 8006638:	08006681 	.word	0x08006681
 800663c:	08006657 	.word	0x08006657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006640:	f7fe fa98 	bl	8004b74 <HAL_RCC_GetPCLK1Freq>
 8006644:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006646:	e021      	b.n	800668c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006648:	4b0c      	ldr	r3, [pc, #48]	@ (800667c <UART_SetConfig+0x2f8>)
 800664a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800664c:	e01e      	b.n	800668c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664e:	f7fe fa23 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8006652:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006654:	e01a      	b.n	800668c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800665a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800665c:	e016      	b.n	800668c <UART_SetConfig+0x308>
 800665e:	bf00      	nop
 8006660:	cfff69f3 	.word	0xcfff69f3
 8006664:	40008000 	.word	0x40008000
 8006668:	40013800 	.word	0x40013800
 800666c:	40021000 	.word	0x40021000
 8006670:	40004400 	.word	0x40004400
 8006674:	40004800 	.word	0x40004800
 8006678:	40004c00 	.word	0x40004c00
 800667c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800668a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 812a 	beq.w	80068e8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006698:	4a9e      	ldr	r2, [pc, #632]	@ (8006914 <UART_SetConfig+0x590>)
 800669a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800669e:	461a      	mov	r2, r3
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	4613      	mov	r3, r2
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	4413      	add	r3, r2
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d305      	bcc.n	80066c4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d903      	bls.n	80066cc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066ca:	e10d      	b.n	80068e8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	2200      	movs	r2, #0
 80066d0:	60bb      	str	r3, [r7, #8]
 80066d2:	60fa      	str	r2, [r7, #12]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d8:	4a8e      	ldr	r2, [pc, #568]	@ (8006914 <UART_SetConfig+0x590>)
 80066da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2200      	movs	r2, #0
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066ee:	f7fa f8c9 	bl	8000884 <__aeabi_uldivmod>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4610      	mov	r0, r2
 80066f8:	4619      	mov	r1, r3
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	020b      	lsls	r3, r1, #8
 8006704:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006708:	0202      	lsls	r2, r0, #8
 800670a:	6979      	ldr	r1, [r7, #20]
 800670c:	6849      	ldr	r1, [r1, #4]
 800670e:	0849      	lsrs	r1, r1, #1
 8006710:	2000      	movs	r0, #0
 8006712:	460c      	mov	r4, r1
 8006714:	4605      	mov	r5, r0
 8006716:	eb12 0804 	adds.w	r8, r2, r4
 800671a:	eb43 0905 	adc.w	r9, r3, r5
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	469a      	mov	sl, r3
 8006726:	4693      	mov	fp, r2
 8006728:	4652      	mov	r2, sl
 800672a:	465b      	mov	r3, fp
 800672c:	4640      	mov	r0, r8
 800672e:	4649      	mov	r1, r9
 8006730:	f7fa f8a8 	bl	8000884 <__aeabi_uldivmod>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4613      	mov	r3, r2
 800673a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006742:	d308      	bcc.n	8006756 <UART_SetConfig+0x3d2>
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800674a:	d204      	bcs.n	8006756 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6a3a      	ldr	r2, [r7, #32]
 8006752:	60da      	str	r2, [r3, #12]
 8006754:	e0c8      	b.n	80068e8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800675c:	e0c4      	b.n	80068e8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006766:	d167      	bne.n	8006838 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006768:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800676c:	2b08      	cmp	r3, #8
 800676e:	d828      	bhi.n	80067c2 <UART_SetConfig+0x43e>
 8006770:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <UART_SetConfig+0x3f4>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	0800679d 	.word	0x0800679d
 800677c:	080067a5 	.word	0x080067a5
 8006780:	080067ad 	.word	0x080067ad
 8006784:	080067c3 	.word	0x080067c3
 8006788:	080067b3 	.word	0x080067b3
 800678c:	080067c3 	.word	0x080067c3
 8006790:	080067c3 	.word	0x080067c3
 8006794:	080067c3 	.word	0x080067c3
 8006798:	080067bb 	.word	0x080067bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800679c:	f7fe f9ea 	bl	8004b74 <HAL_RCC_GetPCLK1Freq>
 80067a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067a2:	e014      	b.n	80067ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a4:	f7fe f9fc 	bl	8004ba0 <HAL_RCC_GetPCLK2Freq>
 80067a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067aa:	e010      	b.n	80067ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006918 <UART_SetConfig+0x594>)
 80067ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067b0:	e00d      	b.n	80067ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067b2:	f7fe f971 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 80067b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067b8:	e009      	b.n	80067ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067c0:	e005      	b.n	80067ce <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80067cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 8089 	beq.w	80068e8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067da:	4a4e      	ldr	r2, [pc, #312]	@ (8006914 <UART_SetConfig+0x590>)
 80067dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067e0:	461a      	mov	r2, r3
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067e8:	005a      	lsls	r2, r3, #1
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	441a      	add	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	2b0f      	cmp	r3, #15
 8006800:	d916      	bls.n	8006830 <UART_SetConfig+0x4ac>
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006808:	d212      	bcs.n	8006830 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f023 030f 	bic.w	r3, r3, #15
 8006812:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	085b      	lsrs	r3, r3, #1
 8006818:	b29b      	uxth	r3, r3
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	b29a      	uxth	r2, r3
 8006820:	8bfb      	ldrh	r3, [r7, #30]
 8006822:	4313      	orrs	r3, r2
 8006824:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	8bfa      	ldrh	r2, [r7, #30]
 800682c:	60da      	str	r2, [r3, #12]
 800682e:	e05b      	b.n	80068e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006836:	e057      	b.n	80068e8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006838:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800683c:	2b08      	cmp	r3, #8
 800683e:	d828      	bhi.n	8006892 <UART_SetConfig+0x50e>
 8006840:	a201      	add	r2, pc, #4	@ (adr r2, 8006848 <UART_SetConfig+0x4c4>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	0800686d 	.word	0x0800686d
 800684c:	08006875 	.word	0x08006875
 8006850:	0800687d 	.word	0x0800687d
 8006854:	08006893 	.word	0x08006893
 8006858:	08006883 	.word	0x08006883
 800685c:	08006893 	.word	0x08006893
 8006860:	08006893 	.word	0x08006893
 8006864:	08006893 	.word	0x08006893
 8006868:	0800688b 	.word	0x0800688b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800686c:	f7fe f982 	bl	8004b74 <HAL_RCC_GetPCLK1Freq>
 8006870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006872:	e014      	b.n	800689e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006874:	f7fe f994 	bl	8004ba0 <HAL_RCC_GetPCLK2Freq>
 8006878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800687a:	e010      	b.n	800689e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800687c:	4b26      	ldr	r3, [pc, #152]	@ (8006918 <UART_SetConfig+0x594>)
 800687e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006880:	e00d      	b.n	800689e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006882:	f7fe f909 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8006886:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006888:	e009      	b.n	800689e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006890:	e005      	b.n	800689e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800689c:	bf00      	nop
    }

    if (pclk != 0U)
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d021      	beq.n	80068e8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006914 <UART_SetConfig+0x590>)
 80068aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068ae:	461a      	mov	r2, r3
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	441a      	add	r2, r3
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	2b0f      	cmp	r3, #15
 80068cc:	d909      	bls.n	80068e2 <UART_SetConfig+0x55e>
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d4:	d205      	bcs.n	80068e2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	b29a      	uxth	r2, r3
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60da      	str	r2, [r3, #12]
 80068e0:	e002      	b.n	80068e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2200      	movs	r2, #0
 80068fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2200      	movs	r2, #0
 8006902:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006904:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006908:	4618      	mov	r0, r3
 800690a:	3730      	adds	r7, #48	@ 0x30
 800690c:	46bd      	mov	sp, r7
 800690e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006912:	bf00      	nop
 8006914:	08007ad0 	.word	0x08007ad0
 8006918:	00f42400 	.word	0x00f42400

0800691c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00a      	beq.n	8006946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698e:	f003 0304 	and.w	r3, r3, #4
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00a      	beq.n	80069ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01a      	beq.n	8006a32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a1a:	d10a      	bne.n	8006a32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
  }
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b098      	sub	sp, #96	@ 0x60
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a70:	f7fb fa68 	bl	8001f44 <HAL_GetTick>
 8006a74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d12f      	bne.n	8006ae4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f88e 	bl	8006bb4 <UART_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d022      	beq.n	8006ae4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006abc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006abe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e6      	bne.n	8006a9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e063      	b.n	8006bac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0304 	and.w	r3, r3, #4
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d149      	bne.n	8006b86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006afa:	2200      	movs	r2, #0
 8006afc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f857 	bl	8006bb4 <UART_WaitOnFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d03c      	beq.n	8006b86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	623b      	str	r3, [r7, #32]
   return(result);
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e6      	bne.n	8006b0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3308      	adds	r3, #8
 8006b44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f023 0301 	bic.w	r3, r3, #1
 8006b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b5e:	61fa      	str	r2, [r7, #28]
 8006b60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	69b9      	ldr	r1, [r7, #24]
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e5      	bne.n	8006b3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e012      	b.n	8006bac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3758      	adds	r7, #88	@ 0x58
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc4:	e04f      	b.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bcc:	d04b      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bce:	f7fb f9b9 	bl	8001f44 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d302      	bcc.n	8006be4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e04e      	b.n	8006c86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d037      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b80      	cmp	r3, #128	@ 0x80
 8006bfa:	d034      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b40      	cmp	r3, #64	@ 0x40
 8006c00:	d031      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	f003 0308 	and.w	r3, r3, #8
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d110      	bne.n	8006c32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2208      	movs	r2, #8
 8006c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 f838 	bl	8006c8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2208      	movs	r2, #8
 8006c22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e029      	b.n	8006c86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c40:	d111      	bne.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f81e 	bl	8006c8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e00f      	b.n	8006c86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69da      	ldr	r2, [r3, #28]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	bf0c      	ite	eq
 8006c76:	2301      	moveq	r3, #1
 8006c78:	2300      	movne	r3, #0
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d0a0      	beq.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b095      	sub	sp, #84	@ 0x54
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e6      	bne.n	8006c96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3308      	adds	r3, #8
 8006cea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e3      	bne.n	8006cc8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d118      	bne.n	8006d3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f023 0310 	bic.w	r3, r3, #16
 8006d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d26:	61bb      	str	r3, [r7, #24]
 8006d28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6979      	ldr	r1, [r7, #20]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	613b      	str	r3, [r7, #16]
   return(result);
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e6      	bne.n	8006d08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d4e:	bf00      	nop
 8006d50:	3754      	adds	r7, #84	@ 0x54
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e027      	b.n	8006dc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2224      	movs	r2, #36	@ 0x24
 8006d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0201 	bic.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006de0:	2302      	movs	r3, #2
 8006de2:	e02d      	b.n	8006e40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2224      	movs	r2, #36	@ 0x24
 8006df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0201 	bic.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f84f 	bl	8006ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e02d      	b.n	8006ebc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2224      	movs	r2, #36	@ 0x24
 8006e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0201 	bic.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f811 	bl	8006ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d108      	bne.n	8006ee6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ee4:	e031      	b.n	8006f4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ee6:	2308      	movs	r3, #8
 8006ee8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006eea:	2308      	movs	r3, #8
 8006eec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	0e5b      	lsrs	r3, r3, #25
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	0f5b      	lsrs	r3, r3, #29
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	7b3a      	ldrb	r2, [r7, #12]
 8006f12:	4911      	ldr	r1, [pc, #68]	@ (8006f58 <UARTEx_SetNbDataToProcess+0x94>)
 8006f14:	5c8a      	ldrb	r2, [r1, r2]
 8006f16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f1a:	7b3a      	ldrb	r2, [r7, #12]
 8006f1c:	490f      	ldr	r1, [pc, #60]	@ (8006f5c <UARTEx_SetNbDataToProcess+0x98>)
 8006f1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	7b7a      	ldrb	r2, [r7, #13]
 8006f30:	4909      	ldr	r1, [pc, #36]	@ (8006f58 <UARTEx_SetNbDataToProcess+0x94>)
 8006f32:	5c8a      	ldrb	r2, [r1, r2]
 8006f34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f38:	7b7a      	ldrb	r2, [r7, #13]
 8006f3a:	4908      	ldr	r1, [pc, #32]	@ (8006f5c <UARTEx_SetNbDataToProcess+0x98>)
 8006f3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	08007ae8 	.word	0x08007ae8
 8006f5c:	08007af0 	.word	0x08007af0

08006f60 <cosf>:
 8006f60:	ee10 3a10 	vmov	r3, s0
 8006f64:	b507      	push	{r0, r1, r2, lr}
 8006f66:	4a1e      	ldr	r2, [pc, #120]	@ (8006fe0 <cosf+0x80>)
 8006f68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d806      	bhi.n	8006f7e <cosf+0x1e>
 8006f70:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8006fe4 <cosf+0x84>
 8006f74:	b003      	add	sp, #12
 8006f76:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f7a:	f000 b87b 	b.w	8007074 <__kernel_cosf>
 8006f7e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006f82:	d304      	bcc.n	8006f8e <cosf+0x2e>
 8006f84:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006f88:	b003      	add	sp, #12
 8006f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f8e:	4668      	mov	r0, sp
 8006f90:	f000 f910 	bl	80071b4 <__ieee754_rem_pio2f>
 8006f94:	f000 0003 	and.w	r0, r0, #3
 8006f98:	2801      	cmp	r0, #1
 8006f9a:	d009      	beq.n	8006fb0 <cosf+0x50>
 8006f9c:	2802      	cmp	r0, #2
 8006f9e:	d010      	beq.n	8006fc2 <cosf+0x62>
 8006fa0:	b9b0      	cbnz	r0, 8006fd0 <cosf+0x70>
 8006fa2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fa6:	ed9d 0a00 	vldr	s0, [sp]
 8006faa:	f000 f863 	bl	8007074 <__kernel_cosf>
 8006fae:	e7eb      	b.n	8006f88 <cosf+0x28>
 8006fb0:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fb4:	ed9d 0a00 	vldr	s0, [sp]
 8006fb8:	f000 f8b4 	bl	8007124 <__kernel_sinf>
 8006fbc:	eeb1 0a40 	vneg.f32	s0, s0
 8006fc0:	e7e2      	b.n	8006f88 <cosf+0x28>
 8006fc2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fc6:	ed9d 0a00 	vldr	s0, [sp]
 8006fca:	f000 f853 	bl	8007074 <__kernel_cosf>
 8006fce:	e7f5      	b.n	8006fbc <cosf+0x5c>
 8006fd0:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fd4:	ed9d 0a00 	vldr	s0, [sp]
 8006fd8:	2001      	movs	r0, #1
 8006fda:	f000 f8a3 	bl	8007124 <__kernel_sinf>
 8006fde:	e7d3      	b.n	8006f88 <cosf+0x28>
 8006fe0:	3f490fd8 	.word	0x3f490fd8
 8006fe4:	00000000 	.word	0x00000000

08006fe8 <sinf>:
 8006fe8:	ee10 3a10 	vmov	r3, s0
 8006fec:	b507      	push	{r0, r1, r2, lr}
 8006fee:	4a1f      	ldr	r2, [pc, #124]	@ (800706c <sinf+0x84>)
 8006ff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d807      	bhi.n	8007008 <sinf+0x20>
 8006ff8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8007070 <sinf+0x88>
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	b003      	add	sp, #12
 8007000:	f85d eb04 	ldr.w	lr, [sp], #4
 8007004:	f000 b88e 	b.w	8007124 <__kernel_sinf>
 8007008:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800700c:	d304      	bcc.n	8007018 <sinf+0x30>
 800700e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007012:	b003      	add	sp, #12
 8007014:	f85d fb04 	ldr.w	pc, [sp], #4
 8007018:	4668      	mov	r0, sp
 800701a:	f000 f8cb 	bl	80071b4 <__ieee754_rem_pio2f>
 800701e:	f000 0003 	and.w	r0, r0, #3
 8007022:	2801      	cmp	r0, #1
 8007024:	d00a      	beq.n	800703c <sinf+0x54>
 8007026:	2802      	cmp	r0, #2
 8007028:	d00f      	beq.n	800704a <sinf+0x62>
 800702a:	b9c0      	cbnz	r0, 800705e <sinf+0x76>
 800702c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007030:	ed9d 0a00 	vldr	s0, [sp]
 8007034:	2001      	movs	r0, #1
 8007036:	f000 f875 	bl	8007124 <__kernel_sinf>
 800703a:	e7ea      	b.n	8007012 <sinf+0x2a>
 800703c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007040:	ed9d 0a00 	vldr	s0, [sp]
 8007044:	f000 f816 	bl	8007074 <__kernel_cosf>
 8007048:	e7e3      	b.n	8007012 <sinf+0x2a>
 800704a:	eddd 0a01 	vldr	s1, [sp, #4]
 800704e:	ed9d 0a00 	vldr	s0, [sp]
 8007052:	2001      	movs	r0, #1
 8007054:	f000 f866 	bl	8007124 <__kernel_sinf>
 8007058:	eeb1 0a40 	vneg.f32	s0, s0
 800705c:	e7d9      	b.n	8007012 <sinf+0x2a>
 800705e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007062:	ed9d 0a00 	vldr	s0, [sp]
 8007066:	f000 f805 	bl	8007074 <__kernel_cosf>
 800706a:	e7f5      	b.n	8007058 <sinf+0x70>
 800706c:	3f490fd8 	.word	0x3f490fd8
 8007070:	00000000 	.word	0x00000000

08007074 <__kernel_cosf>:
 8007074:	ee10 3a10 	vmov	r3, s0
 8007078:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800707c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007080:	eef0 6a40 	vmov.f32	s13, s0
 8007084:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007088:	d204      	bcs.n	8007094 <__kernel_cosf+0x20>
 800708a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800708e:	ee17 2a90 	vmov	r2, s15
 8007092:	b342      	cbz	r2, 80070e6 <__kernel_cosf+0x72>
 8007094:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007098:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8007104 <__kernel_cosf+0x90>
 800709c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8007108 <__kernel_cosf+0x94>
 80070a0:	4a1a      	ldr	r2, [pc, #104]	@ (800710c <__kernel_cosf+0x98>)
 80070a2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80070a6:	4293      	cmp	r3, r2
 80070a8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007110 <__kernel_cosf+0x9c>
 80070ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80070b0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8007114 <__kernel_cosf+0xa0>
 80070b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80070b8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8007118 <__kernel_cosf+0xa4>
 80070bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80070c0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800711c <__kernel_cosf+0xa8>
 80070c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80070c8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80070cc:	ee26 6a07 	vmul.f32	s12, s12, s14
 80070d0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80070d4:	eee7 0a06 	vfma.f32	s1, s14, s12
 80070d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070dc:	d804      	bhi.n	80070e8 <__kernel_cosf+0x74>
 80070de:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80070e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80070e6:	4770      	bx	lr
 80070e8:	4a0d      	ldr	r2, [pc, #52]	@ (8007120 <__kernel_cosf+0xac>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	bf9a      	itte	ls
 80070ee:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80070f2:	ee07 3a10 	vmovls	s14, r3
 80070f6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80070fa:	ee30 0a47 	vsub.f32	s0, s0, s14
 80070fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007102:	e7ec      	b.n	80070de <__kernel_cosf+0x6a>
 8007104:	ad47d74e 	.word	0xad47d74e
 8007108:	310f74f6 	.word	0x310f74f6
 800710c:	3e999999 	.word	0x3e999999
 8007110:	b493f27c 	.word	0xb493f27c
 8007114:	37d00d01 	.word	0x37d00d01
 8007118:	bab60b61 	.word	0xbab60b61
 800711c:	3d2aaaab 	.word	0x3d2aaaab
 8007120:	3f480000 	.word	0x3f480000

08007124 <__kernel_sinf>:
 8007124:	ee10 3a10 	vmov	r3, s0
 8007128:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800712c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007130:	d204      	bcs.n	800713c <__kernel_sinf+0x18>
 8007132:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007136:	ee17 3a90 	vmov	r3, s15
 800713a:	b35b      	cbz	r3, 8007194 <__kernel_sinf+0x70>
 800713c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007140:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8007198 <__kernel_sinf+0x74>
 8007144:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800719c <__kernel_sinf+0x78>
 8007148:	eea7 6a27 	vfma.f32	s12, s14, s15
 800714c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80071a0 <__kernel_sinf+0x7c>
 8007150:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007154:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80071a4 <__kernel_sinf+0x80>
 8007158:	eea7 6a87 	vfma.f32	s12, s15, s14
 800715c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80071a8 <__kernel_sinf+0x84>
 8007160:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007164:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007168:	b930      	cbnz	r0, 8007178 <__kernel_sinf+0x54>
 800716a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80071ac <__kernel_sinf+0x88>
 800716e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007172:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007176:	4770      	bx	lr
 8007178:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800717c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8007180:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007184:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007188:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80071b0 <__kernel_sinf+0x8c>
 800718c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007190:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	2f2ec9d3 	.word	0x2f2ec9d3
 800719c:	b2d72f34 	.word	0xb2d72f34
 80071a0:	3638ef1b 	.word	0x3638ef1b
 80071a4:	b9500d01 	.word	0xb9500d01
 80071a8:	3c088889 	.word	0x3c088889
 80071ac:	be2aaaab 	.word	0xbe2aaaab
 80071b0:	3e2aaaab 	.word	0x3e2aaaab

080071b4 <__ieee754_rem_pio2f>:
 80071b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071b6:	ee10 6a10 	vmov	r6, s0
 80071ba:	4b88      	ldr	r3, [pc, #544]	@ (80073dc <__ieee754_rem_pio2f+0x228>)
 80071bc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80071c0:	429d      	cmp	r5, r3
 80071c2:	b087      	sub	sp, #28
 80071c4:	4604      	mov	r4, r0
 80071c6:	d805      	bhi.n	80071d4 <__ieee754_rem_pio2f+0x20>
 80071c8:	2300      	movs	r3, #0
 80071ca:	ed80 0a00 	vstr	s0, [r0]
 80071ce:	6043      	str	r3, [r0, #4]
 80071d0:	2000      	movs	r0, #0
 80071d2:	e022      	b.n	800721a <__ieee754_rem_pio2f+0x66>
 80071d4:	4b82      	ldr	r3, [pc, #520]	@ (80073e0 <__ieee754_rem_pio2f+0x22c>)
 80071d6:	429d      	cmp	r5, r3
 80071d8:	d83a      	bhi.n	8007250 <__ieee754_rem_pio2f+0x9c>
 80071da:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80071de:	2e00      	cmp	r6, #0
 80071e0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80073e4 <__ieee754_rem_pio2f+0x230>
 80071e4:	4a80      	ldr	r2, [pc, #512]	@ (80073e8 <__ieee754_rem_pio2f+0x234>)
 80071e6:	f023 030f 	bic.w	r3, r3, #15
 80071ea:	dd18      	ble.n	800721e <__ieee754_rem_pio2f+0x6a>
 80071ec:	4293      	cmp	r3, r2
 80071ee:	ee70 7a47 	vsub.f32	s15, s0, s14
 80071f2:	bf09      	itett	eq
 80071f4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80073ec <__ieee754_rem_pio2f+0x238>
 80071f8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80073f0 <__ieee754_rem_pio2f+0x23c>
 80071fc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80073f4 <__ieee754_rem_pio2f+0x240>
 8007200:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007204:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8007208:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800720c:	ed80 7a00 	vstr	s14, [r0]
 8007210:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007214:	edc0 7a01 	vstr	s15, [r0, #4]
 8007218:	2001      	movs	r0, #1
 800721a:	b007      	add	sp, #28
 800721c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800721e:	4293      	cmp	r3, r2
 8007220:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007224:	bf09      	itett	eq
 8007226:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80073ec <__ieee754_rem_pio2f+0x238>
 800722a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80073f0 <__ieee754_rem_pio2f+0x23c>
 800722e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80073f4 <__ieee754_rem_pio2f+0x240>
 8007232:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007236:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800723a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800723e:	ed80 7a00 	vstr	s14, [r0]
 8007242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007246:	edc0 7a01 	vstr	s15, [r0, #4]
 800724a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800724e:	e7e4      	b.n	800721a <__ieee754_rem_pio2f+0x66>
 8007250:	4b69      	ldr	r3, [pc, #420]	@ (80073f8 <__ieee754_rem_pio2f+0x244>)
 8007252:	429d      	cmp	r5, r3
 8007254:	d873      	bhi.n	800733e <__ieee754_rem_pio2f+0x18a>
 8007256:	f000 f8dd 	bl	8007414 <fabsf>
 800725a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80073fc <__ieee754_rem_pio2f+0x248>
 800725e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007262:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800726a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800726e:	ee17 0a90 	vmov	r0, s15
 8007272:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80073e4 <__ieee754_rem_pio2f+0x230>
 8007276:	eea7 0a67 	vfms.f32	s0, s14, s15
 800727a:	281f      	cmp	r0, #31
 800727c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80073f0 <__ieee754_rem_pio2f+0x23c>
 8007280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007284:	eeb1 6a47 	vneg.f32	s12, s14
 8007288:	ee70 6a67 	vsub.f32	s13, s0, s15
 800728c:	ee16 1a90 	vmov	r1, s13
 8007290:	dc09      	bgt.n	80072a6 <__ieee754_rem_pio2f+0xf2>
 8007292:	4a5b      	ldr	r2, [pc, #364]	@ (8007400 <__ieee754_rem_pio2f+0x24c>)
 8007294:	1e47      	subs	r7, r0, #1
 8007296:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800729a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800729e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d107      	bne.n	80072b6 <__ieee754_rem_pio2f+0x102>
 80072a6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80072aa:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80072ae:	2a08      	cmp	r2, #8
 80072b0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80072b4:	dc14      	bgt.n	80072e0 <__ieee754_rem_pio2f+0x12c>
 80072b6:	6021      	str	r1, [r4, #0]
 80072b8:	ed94 7a00 	vldr	s14, [r4]
 80072bc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80072c0:	2e00      	cmp	r6, #0
 80072c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80072c6:	ed84 0a01 	vstr	s0, [r4, #4]
 80072ca:	daa6      	bge.n	800721a <__ieee754_rem_pio2f+0x66>
 80072cc:	eeb1 7a47 	vneg.f32	s14, s14
 80072d0:	eeb1 0a40 	vneg.f32	s0, s0
 80072d4:	ed84 7a00 	vstr	s14, [r4]
 80072d8:	ed84 0a01 	vstr	s0, [r4, #4]
 80072dc:	4240      	negs	r0, r0
 80072de:	e79c      	b.n	800721a <__ieee754_rem_pio2f+0x66>
 80072e0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80073ec <__ieee754_rem_pio2f+0x238>
 80072e4:	eef0 6a40 	vmov.f32	s13, s0
 80072e8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80072ec:	ee70 7a66 	vsub.f32	s15, s0, s13
 80072f0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80072f4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80073f4 <__ieee754_rem_pio2f+0x240>
 80072f8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80072fc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007300:	ee15 2a90 	vmov	r2, s11
 8007304:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007308:	1a5b      	subs	r3, r3, r1
 800730a:	2b19      	cmp	r3, #25
 800730c:	dc04      	bgt.n	8007318 <__ieee754_rem_pio2f+0x164>
 800730e:	edc4 5a00 	vstr	s11, [r4]
 8007312:	eeb0 0a66 	vmov.f32	s0, s13
 8007316:	e7cf      	b.n	80072b8 <__ieee754_rem_pio2f+0x104>
 8007318:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8007404 <__ieee754_rem_pio2f+0x250>
 800731c:	eeb0 0a66 	vmov.f32	s0, s13
 8007320:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007324:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007328:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8007408 <__ieee754_rem_pio2f+0x254>
 800732c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007330:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007334:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007338:	ed84 7a00 	vstr	s14, [r4]
 800733c:	e7bc      	b.n	80072b8 <__ieee754_rem_pio2f+0x104>
 800733e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8007342:	d306      	bcc.n	8007352 <__ieee754_rem_pio2f+0x19e>
 8007344:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007348:	edc0 7a01 	vstr	s15, [r0, #4]
 800734c:	edc0 7a00 	vstr	s15, [r0]
 8007350:	e73e      	b.n	80071d0 <__ieee754_rem_pio2f+0x1c>
 8007352:	15ea      	asrs	r2, r5, #23
 8007354:	3a86      	subs	r2, #134	@ 0x86
 8007356:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007362:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800740c <__ieee754_rem_pio2f+0x258>
 8007366:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800736a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800736e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007372:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007376:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800737a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800737e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007382:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007386:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800738a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800738e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007392:	edcd 7a05 	vstr	s15, [sp, #20]
 8007396:	d11e      	bne.n	80073d6 <__ieee754_rem_pio2f+0x222>
 8007398:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800739c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a0:	bf0c      	ite	eq
 80073a2:	2301      	moveq	r3, #1
 80073a4:	2302      	movne	r3, #2
 80073a6:	491a      	ldr	r1, [pc, #104]	@ (8007410 <__ieee754_rem_pio2f+0x25c>)
 80073a8:	9101      	str	r1, [sp, #4]
 80073aa:	2102      	movs	r1, #2
 80073ac:	9100      	str	r1, [sp, #0]
 80073ae:	a803      	add	r0, sp, #12
 80073b0:	4621      	mov	r1, r4
 80073b2:	f000 f837 	bl	8007424 <__kernel_rem_pio2f>
 80073b6:	2e00      	cmp	r6, #0
 80073b8:	f6bf af2f 	bge.w	800721a <__ieee754_rem_pio2f+0x66>
 80073bc:	edd4 7a00 	vldr	s15, [r4]
 80073c0:	eef1 7a67 	vneg.f32	s15, s15
 80073c4:	edc4 7a00 	vstr	s15, [r4]
 80073c8:	edd4 7a01 	vldr	s15, [r4, #4]
 80073cc:	eef1 7a67 	vneg.f32	s15, s15
 80073d0:	edc4 7a01 	vstr	s15, [r4, #4]
 80073d4:	e782      	b.n	80072dc <__ieee754_rem_pio2f+0x128>
 80073d6:	2303      	movs	r3, #3
 80073d8:	e7e5      	b.n	80073a6 <__ieee754_rem_pio2f+0x1f2>
 80073da:	bf00      	nop
 80073dc:	3f490fd8 	.word	0x3f490fd8
 80073e0:	4016cbe3 	.word	0x4016cbe3
 80073e4:	3fc90f80 	.word	0x3fc90f80
 80073e8:	3fc90fd0 	.word	0x3fc90fd0
 80073ec:	37354400 	.word	0x37354400
 80073f0:	37354443 	.word	0x37354443
 80073f4:	2e85a308 	.word	0x2e85a308
 80073f8:	43490f80 	.word	0x43490f80
 80073fc:	3f22f984 	.word	0x3f22f984
 8007400:	08007af8 	.word	0x08007af8
 8007404:	2e85a300 	.word	0x2e85a300
 8007408:	248d3132 	.word	0x248d3132
 800740c:	43800000 	.word	0x43800000
 8007410:	08007b78 	.word	0x08007b78

08007414 <fabsf>:
 8007414:	ee10 3a10 	vmov	r3, s0
 8007418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800741c:	ee00 3a10 	vmov	s0, r3
 8007420:	4770      	bx	lr
	...

08007424 <__kernel_rem_pio2f>:
 8007424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	ed2d 8b04 	vpush	{d8-d9}
 800742c:	b0d9      	sub	sp, #356	@ 0x164
 800742e:	4690      	mov	r8, r2
 8007430:	9001      	str	r0, [sp, #4]
 8007432:	4ab6      	ldr	r2, [pc, #728]	@ (800770c <__kernel_rem_pio2f+0x2e8>)
 8007434:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8007436:	f118 0f04 	cmn.w	r8, #4
 800743a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800743e:	460f      	mov	r7, r1
 8007440:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007444:	db26      	blt.n	8007494 <__kernel_rem_pio2f+0x70>
 8007446:	f1b8 0203 	subs.w	r2, r8, #3
 800744a:	bf48      	it	mi
 800744c:	f108 0204 	addmi.w	r2, r8, #4
 8007450:	10d2      	asrs	r2, r2, #3
 8007452:	1c55      	adds	r5, r2, #1
 8007454:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007456:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800771c <__kernel_rem_pio2f+0x2f8>
 800745a:	00e8      	lsls	r0, r5, #3
 800745c:	eba2 060b 	sub.w	r6, r2, fp
 8007460:	9002      	str	r0, [sp, #8]
 8007462:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8007466:	eb0a 0c0b 	add.w	ip, sl, fp
 800746a:	ac1c      	add	r4, sp, #112	@ 0x70
 800746c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8007470:	2000      	movs	r0, #0
 8007472:	4560      	cmp	r0, ip
 8007474:	dd10      	ble.n	8007498 <__kernel_rem_pio2f+0x74>
 8007476:	a91c      	add	r1, sp, #112	@ 0x70
 8007478:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800747c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8007480:	2600      	movs	r6, #0
 8007482:	4556      	cmp	r6, sl
 8007484:	dc24      	bgt.n	80074d0 <__kernel_rem_pio2f+0xac>
 8007486:	f8dd e004 	ldr.w	lr, [sp, #4]
 800748a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800771c <__kernel_rem_pio2f+0x2f8>
 800748e:	4684      	mov	ip, r0
 8007490:	2400      	movs	r4, #0
 8007492:	e016      	b.n	80074c2 <__kernel_rem_pio2f+0x9e>
 8007494:	2200      	movs	r2, #0
 8007496:	e7dc      	b.n	8007452 <__kernel_rem_pio2f+0x2e>
 8007498:	42c6      	cmn	r6, r0
 800749a:	bf5d      	ittte	pl
 800749c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80074a0:	ee07 1a90 	vmovpl	s15, r1
 80074a4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80074a8:	eef0 7a47 	vmovmi.f32	s15, s14
 80074ac:	ece4 7a01 	vstmia	r4!, {s15}
 80074b0:	3001      	adds	r0, #1
 80074b2:	e7de      	b.n	8007472 <__kernel_rem_pio2f+0x4e>
 80074b4:	ecfe 6a01 	vldmia	lr!, {s13}
 80074b8:	ed3c 7a01 	vldmdb	ip!, {s14}
 80074bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80074c0:	3401      	adds	r4, #1
 80074c2:	455c      	cmp	r4, fp
 80074c4:	ddf6      	ble.n	80074b4 <__kernel_rem_pio2f+0x90>
 80074c6:	ece9 7a01 	vstmia	r9!, {s15}
 80074ca:	3601      	adds	r6, #1
 80074cc:	3004      	adds	r0, #4
 80074ce:	e7d8      	b.n	8007482 <__kernel_rem_pio2f+0x5e>
 80074d0:	a908      	add	r1, sp, #32
 80074d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074d6:	9104      	str	r1, [sp, #16]
 80074d8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80074da:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8007718 <__kernel_rem_pio2f+0x2f4>
 80074de:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8007714 <__kernel_rem_pio2f+0x2f0>
 80074e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80074e6:	9203      	str	r2, [sp, #12]
 80074e8:	4654      	mov	r4, sl
 80074ea:	00a2      	lsls	r2, r4, #2
 80074ec:	9205      	str	r2, [sp, #20]
 80074ee:	aa58      	add	r2, sp, #352	@ 0x160
 80074f0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80074f4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80074f8:	a944      	add	r1, sp, #272	@ 0x110
 80074fa:	aa08      	add	r2, sp, #32
 80074fc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007500:	4694      	mov	ip, r2
 8007502:	4626      	mov	r6, r4
 8007504:	2e00      	cmp	r6, #0
 8007506:	dc4c      	bgt.n	80075a2 <__kernel_rem_pio2f+0x17e>
 8007508:	4628      	mov	r0, r5
 800750a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800750e:	f000 fa35 	bl	800797c <scalbnf>
 8007512:	eeb0 8a40 	vmov.f32	s16, s0
 8007516:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800751a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800751e:	f000 f9e9 	bl	80078f4 <floorf>
 8007522:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8007526:	eea0 8a67 	vfms.f32	s16, s0, s15
 800752a:	2d00      	cmp	r5, #0
 800752c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007530:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007534:	ee17 9a90 	vmov	r9, s15
 8007538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800753c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007540:	dd41      	ble.n	80075c6 <__kernel_rem_pio2f+0x1a2>
 8007542:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8007546:	a908      	add	r1, sp, #32
 8007548:	f1c5 0e08 	rsb	lr, r5, #8
 800754c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8007550:	fa46 f00e 	asr.w	r0, r6, lr
 8007554:	4481      	add	r9, r0
 8007556:	fa00 f00e 	lsl.w	r0, r0, lr
 800755a:	1a36      	subs	r6, r6, r0
 800755c:	f1c5 0007 	rsb	r0, r5, #7
 8007560:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8007564:	4106      	asrs	r6, r0
 8007566:	2e00      	cmp	r6, #0
 8007568:	dd3c      	ble.n	80075e4 <__kernel_rem_pio2f+0x1c0>
 800756a:	f04f 0e00 	mov.w	lr, #0
 800756e:	f109 0901 	add.w	r9, r9, #1
 8007572:	4670      	mov	r0, lr
 8007574:	4574      	cmp	r4, lr
 8007576:	dc68      	bgt.n	800764a <__kernel_rem_pio2f+0x226>
 8007578:	2d00      	cmp	r5, #0
 800757a:	dd03      	ble.n	8007584 <__kernel_rem_pio2f+0x160>
 800757c:	2d01      	cmp	r5, #1
 800757e:	d074      	beq.n	800766a <__kernel_rem_pio2f+0x246>
 8007580:	2d02      	cmp	r5, #2
 8007582:	d07d      	beq.n	8007680 <__kernel_rem_pio2f+0x25c>
 8007584:	2e02      	cmp	r6, #2
 8007586:	d12d      	bne.n	80075e4 <__kernel_rem_pio2f+0x1c0>
 8007588:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800758c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007590:	b340      	cbz	r0, 80075e4 <__kernel_rem_pio2f+0x1c0>
 8007592:	4628      	mov	r0, r5
 8007594:	9306      	str	r3, [sp, #24]
 8007596:	f000 f9f1 	bl	800797c <scalbnf>
 800759a:	9b06      	ldr	r3, [sp, #24]
 800759c:	ee38 8a40 	vsub.f32	s16, s16, s0
 80075a0:	e020      	b.n	80075e4 <__kernel_rem_pio2f+0x1c0>
 80075a2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80075a6:	3e01      	subs	r6, #1
 80075a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075b0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80075b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80075b8:	ecac 0a01 	vstmia	ip!, {s0}
 80075bc:	ed30 0a01 	vldmdb	r0!, {s0}
 80075c0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80075c4:	e79e      	b.n	8007504 <__kernel_rem_pio2f+0xe0>
 80075c6:	d105      	bne.n	80075d4 <__kernel_rem_pio2f+0x1b0>
 80075c8:	1e60      	subs	r0, r4, #1
 80075ca:	a908      	add	r1, sp, #32
 80075cc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80075d0:	11f6      	asrs	r6, r6, #7
 80075d2:	e7c8      	b.n	8007566 <__kernel_rem_pio2f+0x142>
 80075d4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80075d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80075dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e0:	da31      	bge.n	8007646 <__kernel_rem_pio2f+0x222>
 80075e2:	2600      	movs	r6, #0
 80075e4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80075e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ec:	f040 8098 	bne.w	8007720 <__kernel_rem_pio2f+0x2fc>
 80075f0:	1e60      	subs	r0, r4, #1
 80075f2:	2200      	movs	r2, #0
 80075f4:	4550      	cmp	r0, sl
 80075f6:	da4b      	bge.n	8007690 <__kernel_rem_pio2f+0x26c>
 80075f8:	2a00      	cmp	r2, #0
 80075fa:	d065      	beq.n	80076c8 <__kernel_rem_pio2f+0x2a4>
 80075fc:	3c01      	subs	r4, #1
 80075fe:	ab08      	add	r3, sp, #32
 8007600:	3d08      	subs	r5, #8
 8007602:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f8      	beq.n	80075fc <__kernel_rem_pio2f+0x1d8>
 800760a:	4628      	mov	r0, r5
 800760c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007610:	f000 f9b4 	bl	800797c <scalbnf>
 8007614:	1c63      	adds	r3, r4, #1
 8007616:	aa44      	add	r2, sp, #272	@ 0x110
 8007618:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8007718 <__kernel_rem_pio2f+0x2f4>
 800761c:	0099      	lsls	r1, r3, #2
 800761e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007622:	4623      	mov	r3, r4
 8007624:	2b00      	cmp	r3, #0
 8007626:	f280 80a9 	bge.w	800777c <__kernel_rem_pio2f+0x358>
 800762a:	4623      	mov	r3, r4
 800762c:	2b00      	cmp	r3, #0
 800762e:	f2c0 80c7 	blt.w	80077c0 <__kernel_rem_pio2f+0x39c>
 8007632:	aa44      	add	r2, sp, #272	@ 0x110
 8007634:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007638:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8007710 <__kernel_rem_pio2f+0x2ec>
 800763c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800771c <__kernel_rem_pio2f+0x2f8>
 8007640:	2000      	movs	r0, #0
 8007642:	1ae2      	subs	r2, r4, r3
 8007644:	e0b1      	b.n	80077aa <__kernel_rem_pio2f+0x386>
 8007646:	2602      	movs	r6, #2
 8007648:	e78f      	b.n	800756a <__kernel_rem_pio2f+0x146>
 800764a:	f852 1b04 	ldr.w	r1, [r2], #4
 800764e:	b948      	cbnz	r0, 8007664 <__kernel_rem_pio2f+0x240>
 8007650:	b121      	cbz	r1, 800765c <__kernel_rem_pio2f+0x238>
 8007652:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8007656:	f842 1c04 	str.w	r1, [r2, #-4]
 800765a:	2101      	movs	r1, #1
 800765c:	f10e 0e01 	add.w	lr, lr, #1
 8007660:	4608      	mov	r0, r1
 8007662:	e787      	b.n	8007574 <__kernel_rem_pio2f+0x150>
 8007664:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8007668:	e7f5      	b.n	8007656 <__kernel_rem_pio2f+0x232>
 800766a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800766e:	aa08      	add	r2, sp, #32
 8007670:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007674:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007678:	a908      	add	r1, sp, #32
 800767a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800767e:	e781      	b.n	8007584 <__kernel_rem_pio2f+0x160>
 8007680:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8007684:	aa08      	add	r2, sp, #32
 8007686:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800768a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800768e:	e7f3      	b.n	8007678 <__kernel_rem_pio2f+0x254>
 8007690:	a908      	add	r1, sp, #32
 8007692:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007696:	3801      	subs	r0, #1
 8007698:	430a      	orrs	r2, r1
 800769a:	e7ab      	b.n	80075f4 <__kernel_rem_pio2f+0x1d0>
 800769c:	3201      	adds	r2, #1
 800769e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80076a2:	2e00      	cmp	r6, #0
 80076a4:	d0fa      	beq.n	800769c <__kernel_rem_pio2f+0x278>
 80076a6:	9905      	ldr	r1, [sp, #20]
 80076a8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80076ac:	eb0d 0001 	add.w	r0, sp, r1
 80076b0:	18e6      	adds	r6, r4, r3
 80076b2:	a91c      	add	r1, sp, #112	@ 0x70
 80076b4:	f104 0c01 	add.w	ip, r4, #1
 80076b8:	384c      	subs	r0, #76	@ 0x4c
 80076ba:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80076be:	4422      	add	r2, r4
 80076c0:	4562      	cmp	r2, ip
 80076c2:	da04      	bge.n	80076ce <__kernel_rem_pio2f+0x2aa>
 80076c4:	4614      	mov	r4, r2
 80076c6:	e710      	b.n	80074ea <__kernel_rem_pio2f+0xc6>
 80076c8:	9804      	ldr	r0, [sp, #16]
 80076ca:	2201      	movs	r2, #1
 80076cc:	e7e7      	b.n	800769e <__kernel_rem_pio2f+0x27a>
 80076ce:	9903      	ldr	r1, [sp, #12]
 80076d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80076d4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80076d8:	9105      	str	r1, [sp, #20]
 80076da:	ee07 1a90 	vmov	s15, r1
 80076de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076e2:	2400      	movs	r4, #0
 80076e4:	ece6 7a01 	vstmia	r6!, {s15}
 80076e8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800771c <__kernel_rem_pio2f+0x2f8>
 80076ec:	46b1      	mov	r9, r6
 80076ee:	455c      	cmp	r4, fp
 80076f0:	dd04      	ble.n	80076fc <__kernel_rem_pio2f+0x2d8>
 80076f2:	ece0 7a01 	vstmia	r0!, {s15}
 80076f6:	f10c 0c01 	add.w	ip, ip, #1
 80076fa:	e7e1      	b.n	80076c0 <__kernel_rem_pio2f+0x29c>
 80076fc:	ecfe 6a01 	vldmia	lr!, {s13}
 8007700:	ed39 7a01 	vldmdb	r9!, {s14}
 8007704:	3401      	adds	r4, #1
 8007706:	eee6 7a87 	vfma.f32	s15, s13, s14
 800770a:	e7f0      	b.n	80076ee <__kernel_rem_pio2f+0x2ca>
 800770c:	08007ebc 	.word	0x08007ebc
 8007710:	08007e90 	.word	0x08007e90
 8007714:	43800000 	.word	0x43800000
 8007718:	3b800000 	.word	0x3b800000
 800771c:	00000000 	.word	0x00000000
 8007720:	9b02      	ldr	r3, [sp, #8]
 8007722:	eeb0 0a48 	vmov.f32	s0, s16
 8007726:	eba3 0008 	sub.w	r0, r3, r8
 800772a:	f000 f927 	bl	800797c <scalbnf>
 800772e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8007714 <__kernel_rem_pio2f+0x2f0>
 8007732:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773a:	db19      	blt.n	8007770 <__kernel_rem_pio2f+0x34c>
 800773c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8007718 <__kernel_rem_pio2f+0x2f4>
 8007740:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007744:	aa08      	add	r2, sp, #32
 8007746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800774a:	3508      	adds	r5, #8
 800774c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007750:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007758:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800775c:	ee10 3a10 	vmov	r3, s0
 8007760:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007764:	ee17 3a90 	vmov	r3, s15
 8007768:	3401      	adds	r4, #1
 800776a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800776e:	e74c      	b.n	800760a <__kernel_rem_pio2f+0x1e6>
 8007770:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007774:	aa08      	add	r2, sp, #32
 8007776:	ee10 3a10 	vmov	r3, s0
 800777a:	e7f6      	b.n	800776a <__kernel_rem_pio2f+0x346>
 800777c:	a808      	add	r0, sp, #32
 800777e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007782:	9001      	str	r0, [sp, #4]
 8007784:	ee07 0a90 	vmov	s15, r0
 8007788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800778c:	3b01      	subs	r3, #1
 800778e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007792:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007796:	ed62 7a01 	vstmdb	r2!, {s15}
 800779a:	e743      	b.n	8007624 <__kernel_rem_pio2f+0x200>
 800779c:	ecfc 6a01 	vldmia	ip!, {s13}
 80077a0:	ecb5 7a01 	vldmia	r5!, {s14}
 80077a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80077a8:	3001      	adds	r0, #1
 80077aa:	4550      	cmp	r0, sl
 80077ac:	dc01      	bgt.n	80077b2 <__kernel_rem_pio2f+0x38e>
 80077ae:	4290      	cmp	r0, r2
 80077b0:	ddf4      	ble.n	800779c <__kernel_rem_pio2f+0x378>
 80077b2:	a858      	add	r0, sp, #352	@ 0x160
 80077b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80077b8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80077bc:	3b01      	subs	r3, #1
 80077be:	e735      	b.n	800762c <__kernel_rem_pio2f+0x208>
 80077c0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	dc09      	bgt.n	80077da <__kernel_rem_pio2f+0x3b6>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	dc27      	bgt.n	800781a <__kernel_rem_pio2f+0x3f6>
 80077ca:	d040      	beq.n	800784e <__kernel_rem_pio2f+0x42a>
 80077cc:	f009 0007 	and.w	r0, r9, #7
 80077d0:	b059      	add	sp, #356	@ 0x164
 80077d2:	ecbd 8b04 	vpop	{d8-d9}
 80077d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077da:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d1f5      	bne.n	80077cc <__kernel_rem_pio2f+0x3a8>
 80077e0:	aa30      	add	r2, sp, #192	@ 0xc0
 80077e2:	1f0b      	subs	r3, r1, #4
 80077e4:	4413      	add	r3, r2
 80077e6:	461a      	mov	r2, r3
 80077e8:	4620      	mov	r0, r4
 80077ea:	2800      	cmp	r0, #0
 80077ec:	dc50      	bgt.n	8007890 <__kernel_rem_pio2f+0x46c>
 80077ee:	4622      	mov	r2, r4
 80077f0:	2a01      	cmp	r2, #1
 80077f2:	dc5d      	bgt.n	80078b0 <__kernel_rem_pio2f+0x48c>
 80077f4:	ab30      	add	r3, sp, #192	@ 0xc0
 80077f6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800771c <__kernel_rem_pio2f+0x2f8>
 80077fa:	440b      	add	r3, r1
 80077fc:	2c01      	cmp	r4, #1
 80077fe:	dc67      	bgt.n	80078d0 <__kernel_rem_pio2f+0x4ac>
 8007800:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8007804:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8007808:	2e00      	cmp	r6, #0
 800780a:	d167      	bne.n	80078dc <__kernel_rem_pio2f+0x4b8>
 800780c:	edc7 6a00 	vstr	s13, [r7]
 8007810:	ed87 7a01 	vstr	s14, [r7, #4]
 8007814:	edc7 7a02 	vstr	s15, [r7, #8]
 8007818:	e7d8      	b.n	80077cc <__kernel_rem_pio2f+0x3a8>
 800781a:	ab30      	add	r3, sp, #192	@ 0xc0
 800781c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800771c <__kernel_rem_pio2f+0x2f8>
 8007820:	440b      	add	r3, r1
 8007822:	4622      	mov	r2, r4
 8007824:	2a00      	cmp	r2, #0
 8007826:	da24      	bge.n	8007872 <__kernel_rem_pio2f+0x44e>
 8007828:	b34e      	cbz	r6, 800787e <__kernel_rem_pio2f+0x45a>
 800782a:	eef1 7a47 	vneg.f32	s15, s14
 800782e:	edc7 7a00 	vstr	s15, [r7]
 8007832:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8007836:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800783a:	aa31      	add	r2, sp, #196	@ 0xc4
 800783c:	2301      	movs	r3, #1
 800783e:	429c      	cmp	r4, r3
 8007840:	da20      	bge.n	8007884 <__kernel_rem_pio2f+0x460>
 8007842:	b10e      	cbz	r6, 8007848 <__kernel_rem_pio2f+0x424>
 8007844:	eef1 7a67 	vneg.f32	s15, s15
 8007848:	edc7 7a01 	vstr	s15, [r7, #4]
 800784c:	e7be      	b.n	80077cc <__kernel_rem_pio2f+0x3a8>
 800784e:	ab30      	add	r3, sp, #192	@ 0xc0
 8007850:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800771c <__kernel_rem_pio2f+0x2f8>
 8007854:	440b      	add	r3, r1
 8007856:	2c00      	cmp	r4, #0
 8007858:	da05      	bge.n	8007866 <__kernel_rem_pio2f+0x442>
 800785a:	b10e      	cbz	r6, 8007860 <__kernel_rem_pio2f+0x43c>
 800785c:	eef1 7a67 	vneg.f32	s15, s15
 8007860:	edc7 7a00 	vstr	s15, [r7]
 8007864:	e7b2      	b.n	80077cc <__kernel_rem_pio2f+0x3a8>
 8007866:	ed33 7a01 	vldmdb	r3!, {s14}
 800786a:	3c01      	subs	r4, #1
 800786c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007870:	e7f1      	b.n	8007856 <__kernel_rem_pio2f+0x432>
 8007872:	ed73 7a01 	vldmdb	r3!, {s15}
 8007876:	3a01      	subs	r2, #1
 8007878:	ee37 7a27 	vadd.f32	s14, s14, s15
 800787c:	e7d2      	b.n	8007824 <__kernel_rem_pio2f+0x400>
 800787e:	eef0 7a47 	vmov.f32	s15, s14
 8007882:	e7d4      	b.n	800782e <__kernel_rem_pio2f+0x40a>
 8007884:	ecb2 7a01 	vldmia	r2!, {s14}
 8007888:	3301      	adds	r3, #1
 800788a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800788e:	e7d6      	b.n	800783e <__kernel_rem_pio2f+0x41a>
 8007890:	ed72 7a01 	vldmdb	r2!, {s15}
 8007894:	edd2 6a01 	vldr	s13, [r2, #4]
 8007898:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800789c:	3801      	subs	r0, #1
 800789e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078a2:	ed82 7a00 	vstr	s14, [r2]
 80078a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078aa:	edc2 7a01 	vstr	s15, [r2, #4]
 80078ae:	e79c      	b.n	80077ea <__kernel_rem_pio2f+0x3c6>
 80078b0:	ed73 7a01 	vldmdb	r3!, {s15}
 80078b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80078b8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80078bc:	3a01      	subs	r2, #1
 80078be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078c2:	ed83 7a00 	vstr	s14, [r3]
 80078c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ca:	edc3 7a01 	vstr	s15, [r3, #4]
 80078ce:	e78f      	b.n	80077f0 <__kernel_rem_pio2f+0x3cc>
 80078d0:	ed33 7a01 	vldmdb	r3!, {s14}
 80078d4:	3c01      	subs	r4, #1
 80078d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078da:	e78f      	b.n	80077fc <__kernel_rem_pio2f+0x3d8>
 80078dc:	eef1 6a66 	vneg.f32	s13, s13
 80078e0:	eeb1 7a47 	vneg.f32	s14, s14
 80078e4:	edc7 6a00 	vstr	s13, [r7]
 80078e8:	ed87 7a01 	vstr	s14, [r7, #4]
 80078ec:	eef1 7a67 	vneg.f32	s15, s15
 80078f0:	e790      	b.n	8007814 <__kernel_rem_pio2f+0x3f0>
 80078f2:	bf00      	nop

080078f4 <floorf>:
 80078f4:	ee10 3a10 	vmov	r3, s0
 80078f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80078fc:	3a7f      	subs	r2, #127	@ 0x7f
 80078fe:	2a16      	cmp	r2, #22
 8007900:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007904:	dc2b      	bgt.n	800795e <floorf+0x6a>
 8007906:	2a00      	cmp	r2, #0
 8007908:	da12      	bge.n	8007930 <floorf+0x3c>
 800790a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007970 <floorf+0x7c>
 800790e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007912:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791a:	dd06      	ble.n	800792a <floorf+0x36>
 800791c:	2b00      	cmp	r3, #0
 800791e:	da24      	bge.n	800796a <floorf+0x76>
 8007920:	2900      	cmp	r1, #0
 8007922:	4b14      	ldr	r3, [pc, #80]	@ (8007974 <floorf+0x80>)
 8007924:	bf08      	it	eq
 8007926:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800792a:	ee00 3a10 	vmov	s0, r3
 800792e:	4770      	bx	lr
 8007930:	4911      	ldr	r1, [pc, #68]	@ (8007978 <floorf+0x84>)
 8007932:	4111      	asrs	r1, r2
 8007934:	420b      	tst	r3, r1
 8007936:	d0fa      	beq.n	800792e <floorf+0x3a>
 8007938:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8007970 <floorf+0x7c>
 800793c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007940:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007948:	ddef      	ble.n	800792a <floorf+0x36>
 800794a:	2b00      	cmp	r3, #0
 800794c:	bfbe      	ittt	lt
 800794e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8007952:	fa40 f202 	asrlt.w	r2, r0, r2
 8007956:	189b      	addlt	r3, r3, r2
 8007958:	ea23 0301 	bic.w	r3, r3, r1
 800795c:	e7e5      	b.n	800792a <floorf+0x36>
 800795e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007962:	d3e4      	bcc.n	800792e <floorf+0x3a>
 8007964:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007968:	4770      	bx	lr
 800796a:	2300      	movs	r3, #0
 800796c:	e7dd      	b.n	800792a <floorf+0x36>
 800796e:	bf00      	nop
 8007970:	7149f2ca 	.word	0x7149f2ca
 8007974:	bf800000 	.word	0xbf800000
 8007978:	007fffff 	.word	0x007fffff

0800797c <scalbnf>:
 800797c:	ee10 3a10 	vmov	r3, s0
 8007980:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8007984:	d02b      	beq.n	80079de <scalbnf+0x62>
 8007986:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800798a:	d302      	bcc.n	8007992 <scalbnf+0x16>
 800798c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007990:	4770      	bx	lr
 8007992:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007996:	d123      	bne.n	80079e0 <scalbnf+0x64>
 8007998:	4b24      	ldr	r3, [pc, #144]	@ (8007a2c <scalbnf+0xb0>)
 800799a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007a30 <scalbnf+0xb4>
 800799e:	4298      	cmp	r0, r3
 80079a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80079a4:	db17      	blt.n	80079d6 <scalbnf+0x5a>
 80079a6:	ee10 3a10 	vmov	r3, s0
 80079aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80079ae:	3a19      	subs	r2, #25
 80079b0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80079b4:	4288      	cmp	r0, r1
 80079b6:	dd15      	ble.n	80079e4 <scalbnf+0x68>
 80079b8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007a34 <scalbnf+0xb8>
 80079bc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007a38 <scalbnf+0xbc>
 80079c0:	ee10 3a10 	vmov	r3, s0
 80079c4:	eeb0 7a67 	vmov.f32	s14, s15
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	bfb8      	it	lt
 80079cc:	eef0 7a66 	vmovlt.f32	s15, s13
 80079d0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80079d4:	4770      	bx	lr
 80079d6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007a3c <scalbnf+0xc0>
 80079da:	ee27 0a80 	vmul.f32	s0, s15, s0
 80079de:	4770      	bx	lr
 80079e0:	0dd2      	lsrs	r2, r2, #23
 80079e2:	e7e5      	b.n	80079b0 <scalbnf+0x34>
 80079e4:	4410      	add	r0, r2
 80079e6:	28fe      	cmp	r0, #254	@ 0xfe
 80079e8:	dce6      	bgt.n	80079b8 <scalbnf+0x3c>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	dd06      	ble.n	80079fc <scalbnf+0x80>
 80079ee:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80079f2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80079f6:	ee00 3a10 	vmov	s0, r3
 80079fa:	4770      	bx	lr
 80079fc:	f110 0f16 	cmn.w	r0, #22
 8007a00:	da09      	bge.n	8007a16 <scalbnf+0x9a>
 8007a02:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8007a3c <scalbnf+0xc0>
 8007a06:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007a40 <scalbnf+0xc4>
 8007a0a:	ee10 3a10 	vmov	r3, s0
 8007a0e:	eeb0 7a67 	vmov.f32	s14, s15
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	e7d9      	b.n	80079ca <scalbnf+0x4e>
 8007a16:	3019      	adds	r0, #25
 8007a18:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007a1c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007a20:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007a44 <scalbnf+0xc8>
 8007a24:	ee07 3a90 	vmov	s15, r3
 8007a28:	e7d7      	b.n	80079da <scalbnf+0x5e>
 8007a2a:	bf00      	nop
 8007a2c:	ffff3cb0 	.word	0xffff3cb0
 8007a30:	4c000000 	.word	0x4c000000
 8007a34:	7149f2ca 	.word	0x7149f2ca
 8007a38:	f149f2ca 	.word	0xf149f2ca
 8007a3c:	0da24260 	.word	0x0da24260
 8007a40:	8da24260 	.word	0x8da24260
 8007a44:	33000000 	.word	0x33000000

08007a48 <memset>:
 8007a48:	4402      	add	r2, r0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d100      	bne.n	8007a52 <memset+0xa>
 8007a50:	4770      	bx	lr
 8007a52:	f803 1b01 	strb.w	r1, [r3], #1
 8007a56:	e7f9      	b.n	8007a4c <memset+0x4>

08007a58 <__libc_init_array>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8007a90 <__libc_init_array+0x38>)
 8007a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8007a94 <__libc_init_array+0x3c>)
 8007a5e:	1b64      	subs	r4, r4, r5
 8007a60:	10a4      	asrs	r4, r4, #2
 8007a62:	2600      	movs	r6, #0
 8007a64:	42a6      	cmp	r6, r4
 8007a66:	d109      	bne.n	8007a7c <__libc_init_array+0x24>
 8007a68:	4d0b      	ldr	r5, [pc, #44]	@ (8007a98 <__libc_init_array+0x40>)
 8007a6a:	4c0c      	ldr	r4, [pc, #48]	@ (8007a9c <__libc_init_array+0x44>)
 8007a6c:	f000 f818 	bl	8007aa0 <_init>
 8007a70:	1b64      	subs	r4, r4, r5
 8007a72:	10a4      	asrs	r4, r4, #2
 8007a74:	2600      	movs	r6, #0
 8007a76:	42a6      	cmp	r6, r4
 8007a78:	d105      	bne.n	8007a86 <__libc_init_array+0x2e>
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a80:	4798      	blx	r3
 8007a82:	3601      	adds	r6, #1
 8007a84:	e7ee      	b.n	8007a64 <__libc_init_array+0xc>
 8007a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a8a:	4798      	blx	r3
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	e7f2      	b.n	8007a76 <__libc_init_array+0x1e>
 8007a90:	08007ed0 	.word	0x08007ed0
 8007a94:	08007ed0 	.word	0x08007ed0
 8007a98:	08007ed0 	.word	0x08007ed0
 8007a9c:	08007ed4 	.word	0x08007ed4

08007aa0 <_init>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	bf00      	nop
 8007aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa6:	bc08      	pop	{r3}
 8007aa8:	469e      	mov	lr, r3
 8007aaa:	4770      	bx	lr

08007aac <_fini>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	bf00      	nop
 8007ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab2:	bc08      	pop	{r3}
 8007ab4:	469e      	mov	lr, r3
 8007ab6:	4770      	bx	lr
