
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fa0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002178  08002178  00003178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002188  08002188  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002188  08002188  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002188  08002188  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002188  08002188  00003188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800218c  0800218c  0000318c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002190  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  0800219c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  0800219c  000040a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006aa2  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000145d  00000000  00000000  0000aade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0000bf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ab  00000000  00000000  0000c6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8c3  00000000  00000000  0000cc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000803b  00000000  00000000  00028546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae78c  00000000  00000000  00030581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ded0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d9c  00000000  00000000  000ded50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000e0aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002160 	.word	0x08002160

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002160 	.word	0x08002160

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fa8a 	bl	8000736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f891 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f90d 	bl	8000444 <MX_GPIO_Init>
  MX_SPI2_Init();
 800022a:	f000 f8cd 	bl	80003c8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, SLEEP_N_Pin, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2104      	movs	r1, #4
 8000232:	4840      	ldr	r0, [pc, #256]	@ (8000334 <main+0x11c>)
 8000234:	f000 fd78 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000238:	200a      	movs	r0, #10
 800023a:	f000 faed 	bl	8000818 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, SCS_N_Pin, GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	2102      	movs	r1, #2
 8000242:	483c      	ldr	r0, [pc, #240]	@ (8000334 <main+0x11c>)
 8000244:	f000 fd70 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SLEEP_N_Pin, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	2104      	movs	r1, #4
 800024c:	4839      	ldr	r0, [pc, #228]	@ (8000334 <main+0x11c>)
 800024e:	f000 fd6b 	bl	8000d28 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	uint16_t addr = 0x0;
 8000252:	2300      	movs	r3, #0
 8000254:	817b      	strh	r3, [r7, #10]
	uint16_t mode = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	813b      	strh	r3, [r7, #8]
	uint16_t data = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	80fb      	strh	r3, [r7, #6]

	addr <<= 11;
 800025e:	897b      	ldrh	r3, [r7, #10]
 8000260:	02db      	lsls	r3, r3, #11
 8000262:	817b      	strh	r3, [r7, #10]
	mode <<= 15;
 8000264:	893b      	ldrh	r3, [r7, #8]
 8000266:	03db      	lsls	r3, r3, #15
 8000268:	813b      	strh	r3, [r7, #8]
	uint16_t calc = (mode & 0x8000) | (addr & 0x7E00) | (data & 0x00FF);
 800026a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800026e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000272:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000276:	b21a      	sxth	r2, r3
 8000278:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800027c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8000280:	b21b      	sxth	r3, r3
 8000282:	4313      	orrs	r3, r2
 8000284:	b21a      	sxth	r2, r3
 8000286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	b21b      	sxth	r3, r3
 800028e:	4313      	orrs	r3, r2
 8000290:	b21b      	sxth	r3, r3
 8000292:	81fb      	strh	r3, [r7, #14]
	uint16_t parity = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	81bb      	strh	r3, [r7, #12]

	while(calc) {
 8000298:	e00c      	b.n	80002b4 <main+0x9c>
		parity ^= (calc & 1);
 800029a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	b21a      	sxth	r2, r3
 80002a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80002a8:	4053      	eors	r3, r2
 80002aa:	b21b      	sxth	r3, r3
 80002ac:	81bb      	strh	r3, [r7, #12]
		calc >>= 1;
 80002ae:	89fb      	ldrh	r3, [r7, #14]
 80002b0:	085b      	lsrs	r3, r3, #1
 80002b2:	81fb      	strh	r3, [r7, #14]
	while(calc) {
 80002b4:	89fb      	ldrh	r3, [r7, #14]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d1ef      	bne.n	800029a <main+0x82>
	}
	parity <<= 8;
 80002ba:	89bb      	ldrh	r3, [r7, #12]
 80002bc:	021b      	lsls	r3, r3, #8
 80002be:	81bb      	strh	r3, [r7, #12]

	uint16_t txData = mode | addr | parity | (data & 0x00FF);
 80002c0:	893a      	ldrh	r2, [r7, #8]
 80002c2:	897b      	ldrh	r3, [r7, #10]
 80002c4:	4313      	orrs	r3, r2
 80002c6:	b29a      	uxth	r2, r3
 80002c8:	89bb      	ldrh	r3, [r7, #12]
 80002ca:	4313      	orrs	r3, r2
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	b21a      	sxth	r2, r3
 80002d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	b21b      	sxth	r3, r3
 80002d8:	4313      	orrs	r3, r2
 80002da:	b21b      	sxth	r3, r3
 80002dc:	80bb      	strh	r3, [r7, #4]
	TX_Buffer[0] = txData >> 8;
 80002de:	88bb      	ldrh	r3, [r7, #4]
 80002e0:	0a1b      	lsrs	r3, r3, #8
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <main+0x120>)
 80002e6:	801a      	strh	r2, [r3, #0]
	TX_Buffer[1] = txData & 0xFF;
 80002e8:	88bb      	ldrh	r3, [r7, #4]
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	4b12      	ldr	r3, [pc, #72]	@ (8000338 <main+0x120>)
 80002f0:	805a      	strh	r2, [r3, #2]
	TX_Buffer[2] = 0;
 80002f2:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <main+0x120>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	809a      	strh	r2, [r3, #4]
	HAL_GPIO_WritePin(GPIOC, SCS_N_Pin, 0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2102      	movs	r1, #2
 80002fc:	480d      	ldr	r0, [pc, #52]	@ (8000334 <main+0x11c>)
 80002fe:	f000 fd13 	bl	8000d28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000302:	2001      	movs	r0, #1
 8000304:	f000 fa88 	bl	8000818 <HAL_Delay>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)TX_Buffer, (uint8_t*)RX_Buffer, 2, 100000);
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <main+0x124>)
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	2302      	movs	r3, #2
 800030e:	4a0c      	ldr	r2, [pc, #48]	@ (8000340 <main+0x128>)
 8000310:	4909      	ldr	r1, [pc, #36]	@ (8000338 <main+0x120>)
 8000312:	480c      	ldr	r0, [pc, #48]	@ (8000344 <main+0x12c>)
 8000314:	f001 fb75 	bl	8001a02 <HAL_SPI_TransmitReceive>
 8000318:	4603      	mov	r3, r0
 800031a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOC, SCS_N_Pin, 1);
 800031c:	2201      	movs	r2, #1
 800031e:	2102      	movs	r1, #2
 8000320:	4804      	ldr	r0, [pc, #16]	@ (8000334 <main+0x11c>)
 8000322:	f000 fd01 	bl	8000d28 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8000326:	2064      	movs	r0, #100	@ 0x64
 8000328:	f000 fa76 	bl	8000818 <HAL_Delay>

	HAL_Delay(100);
 800032c:	2064      	movs	r0, #100	@ 0x64
 800032e:	f000 fa73 	bl	8000818 <HAL_Delay>
  while(1){
 8000332:	e78e      	b.n	8000252 <main+0x3a>
 8000334:	48000800 	.word	0x48000800
 8000338:	2000008c 	.word	0x2000008c
 800033c:	000186a0 	.word	0x000186a0
 8000340:	20000094 	.word	0x20000094
 8000344:	20000028 	.word	0x20000028

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b094      	sub	sp, #80	@ 0x50
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0318 	add.w	r3, r7, #24
 8000352:	2238      	movs	r2, #56	@ 0x38
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f001 fed6 	bl	8002108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800036a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800036e:	f000 fcf3 	bl	8000d58 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000372:	2302      	movs	r3, #2
 8000374:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000376:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800037a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800037c:	2340      	movs	r3, #64	@ 0x40
 800037e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000380:	2300      	movs	r3, #0
 8000382:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000384:	f107 0318 	add.w	r3, r7, #24
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fd99 	bl	8000ec0 <HAL_RCC_OscConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000394:	f000 f8b8 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000398:	230f      	movs	r3, #15
 800039a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800039c:	2301      	movs	r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f001 f897 	bl	80014e4 <HAL_RCC_ClockConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003bc:	f000 f8a4 	bl	8000508 <Error_Handler>
  }
}
 80003c0:	bf00      	nop
 80003c2:	3750      	adds	r7, #80	@ 0x50
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003cc:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <MX_SPI2_Init+0x74>)
 80003ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000440 <MX_SPI2_Init+0x78>)
 80003d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003d2:	4b1a      	ldr	r3, [pc, #104]	@ (800043c <MX_SPI2_Init+0x74>)
 80003d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003da:	4b18      	ldr	r3, [pc, #96]	@ (800043c <MX_SPI2_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80003e0:	4b16      	ldr	r3, [pc, #88]	@ (800043c <MX_SPI2_Init+0x74>)
 80003e2:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80003e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e8:	4b14      	ldr	r3, [pc, #80]	@ (800043c <MX_SPI2_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ee:	4b13      	ldr	r3, [pc, #76]	@ (800043c <MX_SPI2_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003f4:	4b11      	ldr	r3, [pc, #68]	@ (800043c <MX_SPI2_Init+0x74>)
 80003f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <MX_SPI2_Init+0x74>)
 80003fe:	2228      	movs	r2, #40	@ 0x28
 8000400:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000402:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <MX_SPI2_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000408:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <MX_SPI2_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <MX_SPI2_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000414:	4b09      	ldr	r3, [pc, #36]	@ (800043c <MX_SPI2_Init+0x74>)
 8000416:	2207      	movs	r2, #7
 8000418:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800041a:	4b08      	ldr	r3, [pc, #32]	@ (800043c <MX_SPI2_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <MX_SPI2_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000426:	4805      	ldr	r0, [pc, #20]	@ (800043c <MX_SPI2_Init+0x74>)
 8000428:	f001 fa40 	bl	80018ac <HAL_SPI_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 f869 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000028 	.word	0x20000028
 8000440:	40003800 	.word	0x40003800

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	@ 0x28
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b29      	ldr	r3, [pc, #164]	@ (8000500 <MX_GPIO_Init+0xbc>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045e:	4a28      	ldr	r2, [pc, #160]	@ (8000500 <MX_GPIO_Init+0xbc>)
 8000460:	f043 0320 	orr.w	r3, r3, #32
 8000464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000466:	4b26      	ldr	r3, [pc, #152]	@ (8000500 <MX_GPIO_Init+0xbc>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046a:	f003 0320 	and.w	r3, r3, #32
 800046e:	613b      	str	r3, [r7, #16]
 8000470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000472:	4b23      	ldr	r3, [pc, #140]	@ (8000500 <MX_GPIO_Init+0xbc>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000476:	4a22      	ldr	r2, [pc, #136]	@ (8000500 <MX_GPIO_Init+0xbc>)
 8000478:	f043 0304 	orr.w	r3, r3, #4
 800047c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800047e:	4b20      	ldr	r3, [pc, #128]	@ (8000500 <MX_GPIO_Init+0xbc>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000482:	f003 0304 	and.w	r3, r3, #4
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	4b1d      	ldr	r3, [pc, #116]	@ (8000500 <MX_GPIO_Init+0xbc>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	4a1c      	ldr	r2, [pc, #112]	@ (8000500 <MX_GPIO_Init+0xbc>)
 8000490:	f043 0302 	orr.w	r3, r3, #2
 8000494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000496:	4b1a      	ldr	r3, [pc, #104]	@ (8000500 <MX_GPIO_Init+0xbc>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049a:	f003 0302 	and.w	r3, r3, #2
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b17      	ldr	r3, [pc, #92]	@ (8000500 <MX_GPIO_Init+0xbc>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a6:	4a16      	ldr	r2, [pc, #88]	@ (8000500 <MX_GPIO_Init+0xbc>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ae:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <MX_GPIO_Init+0xbc>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRVOFF_Pin|SCS_N_Pin|SLEEP_N_Pin, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2107      	movs	r1, #7
 80004be:	4811      	ldr	r0, [pc, #68]	@ (8000504 <MX_GPIO_Init+0xc0>)
 80004c0:	f000 fc32 	bl	8000d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRVOFF_Pin SCS_N_Pin SLEEP_N_Pin */
  GPIO_InitStruct.Pin = DRVOFF_Pin|SCS_N_Pin|SLEEP_N_Pin;
 80004c4:	2307      	movs	r3, #7
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
 80004ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	2300      	movs	r3, #0
 80004d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	4619      	mov	r1, r3
 80004da:	480a      	ldr	r0, [pc, #40]	@ (8000504 <MX_GPIO_Init+0xc0>)
 80004dc:	f000 faa2 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_N_Pin */
  GPIO_InitStruct.Pin = FAULT_N_Pin;
 80004e0:	2308      	movs	r3, #8
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_N_GPIO_Port, &GPIO_InitStruct);
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4619      	mov	r1, r3
 80004f2:	4804      	ldr	r0, [pc, #16]	@ (8000504 <MX_GPIO_Init+0xc0>)
 80004f4:	f000 fa96 	bl	8000a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004f8:	bf00      	nop
 80004fa:	3728      	adds	r7, #40	@ 0x28
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000
 8000504:	48000800 	.word	0x48000800

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <Error_Handler+0x8>

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <HAL_MspInit+0x44>)
 800051c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <HAL_MspInit+0x44>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6613      	str	r3, [r2, #96]	@ 0x60
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <HAL_MspInit+0x44>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <HAL_MspInit+0x44>)
 8000534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000536:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <HAL_MspInit+0x44>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053c:	6593      	str	r3, [r2, #88]	@ 0x58
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <HAL_MspInit+0x44>)
 8000540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800054a:	f000 fca9 	bl	8000ea0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08c      	sub	sp, #48	@ 0x30
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 031c 	add.w	r3, r7, #28
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a35      	ldr	r2, [pc, #212]	@ (8000650 <HAL_SPI_MspInit+0xf4>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d163      	bne.n	8000646 <HAL_SPI_MspInit+0xea>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800057e:	4b35      	ldr	r3, [pc, #212]	@ (8000654 <HAL_SPI_MspInit+0xf8>)
 8000580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000582:	4a34      	ldr	r2, [pc, #208]	@ (8000654 <HAL_SPI_MspInit+0xf8>)
 8000584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000588:	6593      	str	r3, [r2, #88]	@ 0x58
 800058a:	4b32      	ldr	r3, [pc, #200]	@ (8000654 <HAL_SPI_MspInit+0xf8>)
 800058c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800058e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000592:	61bb      	str	r3, [r7, #24]
 8000594:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000596:	4b2f      	ldr	r3, [pc, #188]	@ (8000654 <HAL_SPI_MspInit+0xf8>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	4a2e      	ldr	r2, [pc, #184]	@ (8000654 <HAL_SPI_MspInit+0xf8>)
 800059c:	f043 0320 	orr.w	r3, r3, #32
 80005a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000654 <HAL_SPI_MspInit+0xf8>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	f003 0320 	and.w	r3, r3, #32
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b29      	ldr	r3, [pc, #164]	@ (8000654 <HAL_SPI_MspInit+0xf8>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	4a28      	ldr	r2, [pc, #160]	@ (8000654 <HAL_SPI_MspInit+0xf8>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ba:	4b26      	ldr	r3, [pc, #152]	@ (8000654 <HAL_SPI_MspInit+0xf8>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b23      	ldr	r3, [pc, #140]	@ (8000654 <HAL_SPI_MspInit+0xf8>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	4a22      	ldr	r2, [pc, #136]	@ (8000654 <HAL_SPI_MspInit+0xf8>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d2:	4b20      	ldr	r3, [pc, #128]	@ (8000654 <HAL_SPI_MspInit+0xf8>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PF9     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e4:	2302      	movs	r3, #2
 80005e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005e8:	2302      	movs	r3, #2
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ec:	2302      	movs	r3, #2
 80005ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f0:	2305      	movs	r3, #5
 80005f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4619      	mov	r1, r3
 80005fa:	4817      	ldr	r0, [pc, #92]	@ (8000658 <HAL_SPI_MspInit+0xfc>)
 80005fc:	f000 fa12 	bl	8000a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000600:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	2302      	movs	r3, #2
 8000608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060a:	2301      	movs	r3, #1
 800060c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060e:	2302      	movs	r3, #2
 8000610:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000612:	2305      	movs	r3, #5
 8000614:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	4619      	mov	r1, r3
 800061c:	480f      	ldr	r0, [pc, #60]	@ (800065c <HAL_SPI_MspInit+0x100>)
 800061e:	f000 fa01 	bl	8000a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000622:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800062c:	2302      	movs	r3, #2
 800062e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000630:	2302      	movs	r3, #2
 8000632:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000634:	2305      	movs	r3, #5
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000642:	f000 f9ef 	bl	8000a24 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000646:	bf00      	nop
 8000648:	3730      	adds	r7, #48	@ 0x30
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40003800 	.word	0x40003800
 8000654:	40021000 	.word	0x40021000
 8000658:	48001400 	.word	0x48001400
 800065c:	48000400 	.word	0x48000400

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <NMI_Handler+0x4>

08000668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <MemManage_Handler+0x4>

08000678 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <BusFault_Handler+0x4>

08000680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <UsageFault_Handler+0x4>

08000688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b6:	f000 f891 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <SystemInit+0x20>)
 80006c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ca:	4a05      	ldr	r2, [pc, #20]	@ (80006e0 <SystemInit+0x20>)
 80006cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e4:	480d      	ldr	r0, [pc, #52]	@ (800071c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e8:	f7ff ffea 	bl	80006c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480c      	ldr	r0, [pc, #48]	@ (8000720 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ee:	490d      	ldr	r1, [pc, #52]	@ (8000724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <LoopForever+0xe>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	@ (800072c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000704:	4c0a      	ldr	r4, [pc, #40]	@ (8000730 <LoopForever+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000712:	f001 fd01 	bl	8002118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000716:	f7ff fd7f 	bl	8000218 <main>

0800071a <LoopForever>:

LoopForever:
    b LoopForever
 800071a:	e7fe      	b.n	800071a <LoopForever>
  ldr   r0, =_estack
 800071c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000728:	08002190 	.word	0x08002190
  ldr r2, =_sbss
 800072c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000730:	200000a0 	.word	0x200000a0

08000734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_2_IRQHandler>

08000736 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800073c:	2300      	movs	r3, #0
 800073e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f93d 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000746:	200f      	movs	r0, #15
 8000748:	f000 f80e 	bl	8000768 <HAL_InitTick>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	71fb      	strb	r3, [r7, #7]
 8000756:	e001      	b.n	800075c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000758:	f7ff fedc 	bl	8000514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800075c:	79fb      	ldrb	r3, [r7, #7]

}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000774:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <HAL_InitTick+0x68>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d022      	beq.n	80007c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800077c:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <HAL_InitTick+0x6c>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <HAL_InitTick+0x68>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000788:	fbb1 f3f3 	udiv	r3, r1, r3
 800078c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f93a 	bl	8000a0a <HAL_SYSTICK_Config>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d10f      	bne.n	80007bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b0f      	cmp	r3, #15
 80007a0:	d809      	bhi.n	80007b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a2:	2200      	movs	r2, #0
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	f04f 30ff 	mov.w	r0, #4294967295
 80007aa:	f000 f914 	bl	80009d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_InitTick+0x70>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	e007      	b.n	80007c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	e004      	b.n	80007c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007bc:	2301      	movs	r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e001      	b.n	80007c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000008 	.word	0x20000008
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000004 	.word	0x20000004

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <HAL_IncTick+0x1c>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <HAL_IncTick+0x20>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	4a03      	ldr	r2, [pc, #12]	@ (80007f8 <HAL_IncTick+0x1c>)
 80007ec:	6013      	str	r3, [r2, #0]
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	2000009c 	.word	0x2000009c
 80007fc:	20000008 	.word	0x20000008

08000800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;
 8000804:	4b03      	ldr	r3, [pc, #12]	@ (8000814 <HAL_GetTick+0x14>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	2000009c 	.word	0x2000009c

08000818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000820:	f7ff ffee 	bl	8000800 <HAL_GetTick>
 8000824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000830:	d004      	beq.n	800083c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_Delay+0x40>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4413      	add	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800083c:	bf00      	nop
 800083e:	f7ff ffdf 	bl	8000800 <HAL_GetTick>
 8000842:	4602      	mov	r2, r0
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	429a      	cmp	r2, r3
 800084c:	d8f7      	bhi.n	800083e <HAL_Delay+0x26>
  {
  }
}
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000008 	.word	0x20000008

0800085c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000884:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800088c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088e:	4a04      	ldr	r2, [pc, #16]	@ (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	60d3      	str	r3, [r2, #12]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a8:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <__NVIC_GetPriorityGrouping+0x18>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	f003 0307 	and.w	r3, r3, #7
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	@ (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	@ (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	@ 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	@ 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f7ff ff8e 	bl	80008c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff47 	bl	800085c <__NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009e4:	f7ff ff5e 	bl	80008a4 <__NVIC_GetPriorityGrouping>
 80009e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	f7ff ff90 	bl	8000914 <NVIC_EncodePriority>
 80009f4:	4602      	mov	r2, r0
 80009f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff5f 	bl	80008c0 <__NVIC_SetPriority>
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffb2 	bl	800097c <SysTick_Config>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a32:	e15a      	b.n	8000cea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f000 814c 	beq.w	8000ce4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f003 0303 	and.w	r3, r3, #3
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d005      	beq.n	8000a64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d130      	bne.n	8000ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	f003 0201 	and.w	r2, r3, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d017      	beq.n	8000b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	2203      	movs	r2, #3
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0303 	and.w	r3, r3, #3
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d123      	bne.n	8000b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	08da      	lsrs	r2, r3, #3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3208      	adds	r2, #8
 8000b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	220f      	movs	r2, #15
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f003 0307 	and.w	r3, r3, #7
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	08da      	lsrs	r2, r3, #3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3208      	adds	r2, #8
 8000b50:	6939      	ldr	r1, [r7, #16]
 8000b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0203 	and.w	r2, r3, #3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 80a6 	beq.w	8000ce4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b98:	4b5b      	ldr	r3, [pc, #364]	@ (8000d08 <HAL_GPIO_Init+0x2e4>)
 8000b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b9c:	4a5a      	ldr	r2, [pc, #360]	@ (8000d08 <HAL_GPIO_Init+0x2e4>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ba4:	4b58      	ldr	r3, [pc, #352]	@ (8000d08 <HAL_GPIO_Init+0x2e4>)
 8000ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bb0:	4a56      	ldr	r2, [pc, #344]	@ (8000d0c <HAL_GPIO_Init+0x2e8>)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bda:	d01f      	beq.n	8000c1c <HAL_GPIO_Init+0x1f8>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a4c      	ldr	r2, [pc, #304]	@ (8000d10 <HAL_GPIO_Init+0x2ec>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d019      	beq.n	8000c18 <HAL_GPIO_Init+0x1f4>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a4b      	ldr	r2, [pc, #300]	@ (8000d14 <HAL_GPIO_Init+0x2f0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d013      	beq.n	8000c14 <HAL_GPIO_Init+0x1f0>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a4a      	ldr	r2, [pc, #296]	@ (8000d18 <HAL_GPIO_Init+0x2f4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d00d      	beq.n	8000c10 <HAL_GPIO_Init+0x1ec>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a49      	ldr	r2, [pc, #292]	@ (8000d1c <HAL_GPIO_Init+0x2f8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d007      	beq.n	8000c0c <HAL_GPIO_Init+0x1e8>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a48      	ldr	r2, [pc, #288]	@ (8000d20 <HAL_GPIO_Init+0x2fc>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d101      	bne.n	8000c08 <HAL_GPIO_Init+0x1e4>
 8000c04:	2305      	movs	r3, #5
 8000c06:	e00a      	b.n	8000c1e <HAL_GPIO_Init+0x1fa>
 8000c08:	2306      	movs	r3, #6
 8000c0a:	e008      	b.n	8000c1e <HAL_GPIO_Init+0x1fa>
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	e006      	b.n	8000c1e <HAL_GPIO_Init+0x1fa>
 8000c10:	2303      	movs	r3, #3
 8000c12:	e004      	b.n	8000c1e <HAL_GPIO_Init+0x1fa>
 8000c14:	2302      	movs	r3, #2
 8000c16:	e002      	b.n	8000c1e <HAL_GPIO_Init+0x1fa>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <HAL_GPIO_Init+0x1fa>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	f002 0203 	and.w	r2, r2, #3
 8000c24:	0092      	lsls	r2, r2, #2
 8000c26:	4093      	lsls	r3, r2
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c2e:	4937      	ldr	r1, [pc, #220]	@ (8000d0c <HAL_GPIO_Init+0x2e8>)
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3302      	adds	r3, #2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c3c:	4b39      	ldr	r3, [pc, #228]	@ (8000d24 <HAL_GPIO_Init+0x300>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c60:	4a30      	ldr	r2, [pc, #192]	@ (8000d24 <HAL_GPIO_Init+0x300>)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c66:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <HAL_GPIO_Init+0x300>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c8a:	4a26      	ldr	r2, [pc, #152]	@ (8000d24 <HAL_GPIO_Init+0x300>)
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000c90:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <HAL_GPIO_Init+0x300>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <HAL_GPIO_Init+0x300>)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <HAL_GPIO_Init+0x300>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cde:	4a11      	ldr	r2, [pc, #68]	@ (8000d24 <HAL_GPIO_Init+0x300>)
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f47f ae9d 	bne.w	8000a34 <HAL_GPIO_Init+0x10>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	371c      	adds	r7, #28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	48000400 	.word	0x48000400
 8000d14:	48000800 	.word	0x48000800
 8000d18:	48000c00 	.word	0x48000c00
 8000d1c:	48001000 	.word	0x48001000
 8000d20:	48001400 	.word	0x48001400
 8000d24:	40010400 	.word	0x40010400

08000d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	807b      	strh	r3, [r7, #2]
 8000d34:	4613      	mov	r3, r2
 8000d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d38:	787b      	ldrb	r3, [r7, #1]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d3e:	887a      	ldrh	r2, [r7, #2]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d44:	e002      	b.n	8000d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d141      	bne.n	8000dea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d66:	4b4b      	ldr	r3, [pc, #300]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d72:	d131      	bne.n	8000dd8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d74:	4b47      	ldr	r3, [pc, #284]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d7a:	4a46      	ldr	r2, [pc, #280]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d84:	4b43      	ldr	r3, [pc, #268]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d8c:	4a41      	ldr	r2, [pc, #260]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d94:	4b40      	ldr	r3, [pc, #256]	@ (8000e98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2232      	movs	r2, #50	@ 0x32
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000da0:	fba2 2303 	umull	r2, r3, r2, r3
 8000da4:	0c9b      	lsrs	r3, r3, #18
 8000da6:	3301      	adds	r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000daa:	e002      	b.n	8000db2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000db2:	4b38      	ldr	r3, [pc, #224]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dbe:	d102      	bne.n	8000dc6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f2      	bne.n	8000dac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dc6:	4b33      	ldr	r3, [pc, #204]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dd2:	d158      	bne.n	8000e86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e057      	b.n	8000e88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dde:	4a2d      	ldr	r2, [pc, #180]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000de4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000de8:	e04d      	b.n	8000e86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000df0:	d141      	bne.n	8000e76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000df2:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dfe:	d131      	bne.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e00:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e06:	4a23      	ldr	r2, [pc, #140]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e10:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e18:	4a1e      	ldr	r2, [pc, #120]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2232      	movs	r2, #50	@ 0x32
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	0c9b      	lsrs	r3, r3, #18
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e36:	e002      	b.n	8000e3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e4a:	d102      	bne.n	8000e52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f2      	bne.n	8000e38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e5e:	d112      	bne.n	8000e86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e011      	b.n	8000e88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000e74:	e007      	b.n	8000e86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e76:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e7e:	4a05      	ldr	r2, [pc, #20]	@ (8000e94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e84:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40007000 	.word	0x40007000
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	431bde83 	.word	0x431bde83

08000ea0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000eaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eae:	6093      	str	r3, [r2, #8]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e2fe      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d075      	beq.n	8000fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ede:	4b97      	ldr	r3, [pc, #604]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f003 030c 	and.w	r3, r3, #12
 8000ee6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ee8:	4b94      	ldr	r3, [pc, #592]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2b0c      	cmp	r3, #12
 8000ef6:	d102      	bne.n	8000efe <HAL_RCC_OscConfig+0x3e>
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d002      	beq.n	8000f04 <HAL_RCC_OscConfig+0x44>
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d10b      	bne.n	8000f1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f04:	4b8d      	ldr	r3, [pc, #564]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d05b      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x108>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d157      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e2d9      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f24:	d106      	bne.n	8000f34 <HAL_RCC_OscConfig+0x74>
 8000f26:	4b85      	ldr	r3, [pc, #532]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a84      	ldr	r2, [pc, #528]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e01d      	b.n	8000f70 <HAL_RCC_OscConfig+0xb0>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f3c:	d10c      	bne.n	8000f58 <HAL_RCC_OscConfig+0x98>
 8000f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a7e      	ldr	r2, [pc, #504]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	4b7c      	ldr	r3, [pc, #496]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a7b      	ldr	r2, [pc, #492]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e00b      	b.n	8000f70 <HAL_RCC_OscConfig+0xb0>
 8000f58:	4b78      	ldr	r3, [pc, #480]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a77      	ldr	r2, [pc, #476]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b75      	ldr	r3, [pc, #468]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a74      	ldr	r2, [pc, #464]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d013      	beq.n	8000fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f78:	f7ff fc42 	bl	8000800 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f80:	f7ff fc3e 	bl	8000800 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b64      	cmp	r3, #100	@ 0x64
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e29e      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f92:	4b6a      	ldr	r3, [pc, #424]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f0      	beq.n	8000f80 <HAL_RCC_OscConfig+0xc0>
 8000f9e:	e014      	b.n	8000fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fc2e 	bl	8000800 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fc2a 	bl	8000800 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	@ 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e28a      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fba:	4b60      	ldr	r3, [pc, #384]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f0      	bne.n	8000fa8 <HAL_RCC_OscConfig+0xe8>
 8000fc6:	e000      	b.n	8000fca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d075      	beq.n	80010c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fd6:	4b59      	ldr	r3, [pc, #356]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fe0:	4b56      	ldr	r3, [pc, #344]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2b0c      	cmp	r3, #12
 8000fee:	d102      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x136>
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d002      	beq.n	8000ffc <HAL_RCC_OscConfig+0x13c>
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d11f      	bne.n	800103c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ffc:	4b4f      	ldr	r3, [pc, #316]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <HAL_RCC_OscConfig+0x154>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e25d      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001014:	4b49      	ldr	r3, [pc, #292]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	061b      	lsls	r3, r3, #24
 8001022:	4946      	ldr	r1, [pc, #280]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001028:	4b45      	ldr	r3, [pc, #276]	@ (8001140 <HAL_RCC_OscConfig+0x280>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fb9b 	bl	8000768 <HAL_InitTick>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d043      	beq.n	80010c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e249      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d023      	beq.n	800108c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001044:	4b3d      	ldr	r3, [pc, #244]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a3c      	ldr	r2, [pc, #240]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 800104a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800104e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff fbd6 	bl	8000800 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001058:	f7ff fbd2 	bl	8000800 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e232      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800106a:	4b34      	ldr	r3, [pc, #208]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001076:	4b31      	ldr	r3, [pc, #196]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	061b      	lsls	r3, r3, #24
 8001084:	492d      	ldr	r1, [pc, #180]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001086:	4313      	orrs	r3, r2
 8001088:	604b      	str	r3, [r1, #4]
 800108a:	e01a      	b.n	80010c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800108c:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a2a      	ldr	r2, [pc, #168]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001092:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fbb2 	bl	8000800 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fbae 	bl	8000800 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e20e      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010b2:	4b22      	ldr	r3, [pc, #136]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x1e0>
 80010be:	e000      	b.n	80010c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d041      	beq.n	8001152 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d01c      	beq.n	8001110 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 80010d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010dc:	4a17      	ldr	r2, [pc, #92]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e6:	f7ff fb8b 	bl	8000800 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ee:	f7ff fb87 	bl	8000800 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e1e7      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0ef      	beq.n	80010ee <HAL_RCC_OscConfig+0x22e>
 800110e:	e020      	b.n	8001152 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001116:	4a09      	ldr	r2, [pc, #36]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001120:	f7ff fb6e 	bl	8000800 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001126:	e00d      	b.n	8001144 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001128:	f7ff fb6a 	bl	8000800 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d906      	bls.n	8001144 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e1ca      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001144:	4b8c      	ldr	r3, [pc, #560]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1ea      	bne.n	8001128 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 80a6 	beq.w	80012ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001164:	4b84      	ldr	r3, [pc, #528]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_RCC_OscConfig+0x2b4>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x2b6>
 8001174:	2300      	movs	r3, #0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00d      	beq.n	8001196 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b7f      	ldr	r3, [pc, #508]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	4a7e      	ldr	r2, [pc, #504]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001184:	6593      	str	r3, [r2, #88]	@ 0x58
 8001186:	4b7c      	ldr	r3, [pc, #496]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001192:	2301      	movs	r3, #1
 8001194:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001196:	4b79      	ldr	r3, [pc, #484]	@ (800137c <HAL_RCC_OscConfig+0x4bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d118      	bne.n	80011d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011a2:	4b76      	ldr	r3, [pc, #472]	@ (800137c <HAL_RCC_OscConfig+0x4bc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a75      	ldr	r2, [pc, #468]	@ (800137c <HAL_RCC_OscConfig+0x4bc>)
 80011a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ae:	f7ff fb27 	bl	8000800 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b6:	f7ff fb23 	bl	8000800 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e183      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c8:	4b6c      	ldr	r3, [pc, #432]	@ (800137c <HAL_RCC_OscConfig+0x4bc>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d108      	bne.n	80011ee <HAL_RCC_OscConfig+0x32e>
 80011dc:	4b66      	ldr	r3, [pc, #408]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80011de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011e2:	4a65      	ldr	r2, [pc, #404]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011ec:	e024      	b.n	8001238 <HAL_RCC_OscConfig+0x378>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d110      	bne.n	8001218 <HAL_RCC_OscConfig+0x358>
 80011f6:	4b60      	ldr	r3, [pc, #384]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80011f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011fc:	4a5e      	ldr	r2, [pc, #376]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001206:	4b5c      	ldr	r3, [pc, #368]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800120c:	4a5a      	ldr	r2, [pc, #360]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001216:	e00f      	b.n	8001238 <HAL_RCC_OscConfig+0x378>
 8001218:	4b57      	ldr	r3, [pc, #348]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800121a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800121e:	4a56      	ldr	r2, [pc, #344]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001220:	f023 0301 	bic.w	r3, r3, #1
 8001224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001228:	4b53      	ldr	r3, [pc, #332]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800122e:	4a52      	ldr	r2, [pc, #328]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d016      	beq.n	800126e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001240:	f7ff fade 	bl	8000800 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001246:	e00a      	b.n	800125e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001248:	f7ff fada 	bl	8000800 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001256:	4293      	cmp	r3, r2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e138      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800125e:	4b46      	ldr	r3, [pc, #280]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0ed      	beq.n	8001248 <HAL_RCC_OscConfig+0x388>
 800126c:	e015      	b.n	800129a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126e:	f7ff fac7 	bl	8000800 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff fac3 	bl	8000800 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e121      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800128c:	4b3a      	ldr	r3, [pc, #232]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800128e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1ed      	bne.n	8001276 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800129a:	7ffb      	ldrb	r3, [r7, #31]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d105      	bne.n	80012ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a0:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a4:	4a34      	ldr	r2, [pc, #208]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0320 	and.w	r3, r3, #32
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d03c      	beq.n	8001332 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d01c      	beq.n	80012fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff fa96 	bl	8000800 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012d8:	f7ff fa92 	bl	8000800 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e0f2      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012ea:	4b23      	ldr	r3, [pc, #140]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ef      	beq.n	80012d8 <HAL_RCC_OscConfig+0x418>
 80012f8:	e01b      	b.n	8001332 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001300:	4a1d      	ldr	r2, [pc, #116]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130a:	f7ff fa79 	bl	8000800 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001312:	f7ff fa75 	bl	8000800 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e0d5      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001326:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1ef      	bne.n	8001312 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 80c9 	beq.w	80014ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800133c:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b0c      	cmp	r3, #12
 8001346:	f000 8083 	beq.w	8001450 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d15e      	bne.n	8001410 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001358:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800135c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135e:	f7ff fa4f 	bl	8000800 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001364:	e00c      	b.n	8001380 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001366:	f7ff fa4b 	bl	8000800 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d905      	bls.n	8001380 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e0ab      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
 8001378:	40021000 	.word	0x40021000
 800137c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001380:	4b55      	ldr	r3, [pc, #340]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1ec      	bne.n	8001366 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138c:	4b52      	ldr	r3, [pc, #328]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	4b52      	ldr	r3, [pc, #328]	@ (80014dc <HAL_RCC_OscConfig+0x61c>)
 8001392:	4013      	ands	r3, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6a11      	ldr	r1, [r2, #32]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800139c:	3a01      	subs	r2, #1
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	4311      	orrs	r1, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80013a6:	0212      	lsls	r2, r2, #8
 80013a8:	4311      	orrs	r1, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80013ae:	0852      	lsrs	r2, r2, #1
 80013b0:	3a01      	subs	r2, #1
 80013b2:	0552      	lsls	r2, r2, #21
 80013b4:	4311      	orrs	r1, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80013ba:	0852      	lsrs	r2, r2, #1
 80013bc:	3a01      	subs	r2, #1
 80013be:	0652      	lsls	r2, r2, #25
 80013c0:	4311      	orrs	r1, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80013c6:	06d2      	lsls	r2, r2, #27
 80013c8:	430a      	orrs	r2, r1
 80013ca:	4943      	ldr	r1, [pc, #268]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d0:	4b41      	ldr	r3, [pc, #260]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a40      	ldr	r2, [pc, #256]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 80013d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013dc:	4b3e      	ldr	r3, [pc, #248]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	4a3d      	ldr	r2, [pc, #244]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 80013e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fa0a 	bl	8000800 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fa06 	bl	8000800 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e066      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001402:	4b35      	ldr	r3, [pc, #212]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x530>
 800140e:	e05e      	b.n	80014ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001410:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a30      	ldr	r2, [pc, #192]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 8001416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800141a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff f9f0 	bl	8000800 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff f9ec 	bl	8000800 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e04c      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001436:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001442:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	4924      	ldr	r1, [pc, #144]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 8001448:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <HAL_RCC_OscConfig+0x620>)
 800144a:	4013      	ands	r3, r2
 800144c:	60cb      	str	r3, [r1, #12]
 800144e:	e03e      	b.n	80014ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e039      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <HAL_RCC_OscConfig+0x618>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f003 0203 	and.w	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	429a      	cmp	r2, r3
 800146e:	d12c      	bne.n	80014ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147a:	3b01      	subs	r3, #1
 800147c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d123      	bne.n	80014ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d11b      	bne.n	80014ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800149e:	429a      	cmp	r2, r3
 80014a0:	d113      	bne.n	80014ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	3b01      	subs	r3, #1
 80014b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d109      	bne.n	80014ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	3b01      	subs	r3, #1
 80014c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	019f800c 	.word	0x019f800c
 80014e0:	feeefffc 	.word	0xfeeefffc

080014e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e11e      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014fc:	4b91      	ldr	r3, [pc, #580]	@ (8001744 <HAL_RCC_ClockConfig+0x260>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d910      	bls.n	800152c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b8e      	ldr	r3, [pc, #568]	@ (8001744 <HAL_RCC_ClockConfig+0x260>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 020f 	bic.w	r2, r3, #15
 8001512:	498c      	ldr	r1, [pc, #560]	@ (8001744 <HAL_RCC_ClockConfig+0x260>)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b8a      	ldr	r3, [pc, #552]	@ (8001744 <HAL_RCC_ClockConfig+0x260>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e106      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d073      	beq.n	8001620 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d129      	bne.n	8001594 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001540:	4b81      	ldr	r3, [pc, #516]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0f4      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001550:	f000 f966 	bl	8001820 <RCC_GetSysClockFreqFromPLLSource>
 8001554:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4a7c      	ldr	r2, [pc, #496]	@ (800174c <HAL_RCC_ClockConfig+0x268>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d93f      	bls.n	80015de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800155e:	4b7a      	ldr	r3, [pc, #488]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001572:	2b00      	cmp	r3, #0
 8001574:	d033      	beq.n	80015de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800157a:	2b00      	cmp	r3, #0
 800157c:	d12f      	bne.n	80015de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800157e:	4b72      	ldr	r3, [pc, #456]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001586:	4a70      	ldr	r2, [pc, #448]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800158c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800158e:	2380      	movs	r3, #128	@ 0x80
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e024      	b.n	80015de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d107      	bne.n	80015ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159c:	4b6a      	ldr	r3, [pc, #424]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d109      	bne.n	80015bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0c6      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ac:	4b66      	ldr	r3, [pc, #408]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0be      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80015bc:	f000 f8ce 	bl	800175c <HAL_RCC_GetSysClockFreq>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4a61      	ldr	r2, [pc, #388]	@ (800174c <HAL_RCC_ClockConfig+0x268>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d909      	bls.n	80015de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80015d2:	4a5d      	ldr	r2, [pc, #372]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80015da:	2380      	movs	r3, #128	@ 0x80
 80015dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015de:	4b5a      	ldr	r3, [pc, #360]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f023 0203 	bic.w	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4957      	ldr	r1, [pc, #348]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015f0:	f7ff f906 	bl	8000800 <HAL_GetTick>
 80015f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	e00a      	b.n	800160e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f8:	f7ff f902 	bl	8000800 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e095      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	4b4e      	ldr	r3, [pc, #312]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 020c 	and.w	r2, r3, #12
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	429a      	cmp	r2, r3
 800161e:	d1eb      	bne.n	80015f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d023      	beq.n	8001674 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001638:	4b43      	ldr	r3, [pc, #268]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	4a42      	ldr	r2, [pc, #264]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 800163e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001642:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001650:	4b3d      	ldr	r3, [pc, #244]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001658:	4a3b      	ldr	r2, [pc, #236]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 800165a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800165e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001660:	4b39      	ldr	r3, [pc, #228]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4936      	ldr	r1, [pc, #216]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 800166e:	4313      	orrs	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
 8001672:	e008      	b.n	8001686 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b80      	cmp	r3, #128	@ 0x80
 8001678:	d105      	bne.n	8001686 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800167a:	4b33      	ldr	r3, [pc, #204]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	4a32      	ldr	r2, [pc, #200]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001680:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001684:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001686:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <HAL_RCC_ClockConfig+0x260>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d21d      	bcs.n	80016d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001694:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <HAL_RCC_ClockConfig+0x260>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 020f 	bic.w	r2, r3, #15
 800169c:	4929      	ldr	r1, [pc, #164]	@ (8001744 <HAL_RCC_ClockConfig+0x260>)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016a4:	f7ff f8ac 	bl	8000800 <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ac:	f7ff f8a8 	bl	8000800 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e03b      	b.n	800173a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_RCC_ClockConfig+0x260>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1ed      	bne.n	80016ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4917      	ldr	r1, [pc, #92]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fa:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	490f      	ldr	r1, [pc, #60]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800170e:	f000 f825 	bl	800175c <HAL_RCC_GetSysClockFreq>
 8001712:	4602      	mov	r2, r0
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <HAL_RCC_ClockConfig+0x264>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	490c      	ldr	r1, [pc, #48]	@ (8001750 <HAL_RCC_ClockConfig+0x26c>)
 8001720:	5ccb      	ldrb	r3, [r1, r3]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <HAL_RCC_ClockConfig+0x270>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_RCC_ClockConfig+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f818 	bl	8000768 <HAL_InitTick>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40022000 	.word	0x40022000
 8001748:	40021000 	.word	0x40021000
 800174c:	04c4b400 	.word	0x04c4b400
 8001750:	08002178 	.word	0x08002178
 8001754:	20000000 	.word	0x20000000
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001762:	4b2c      	ldr	r3, [pc, #176]	@ (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b04      	cmp	r3, #4
 800176c:	d102      	bne.n	8001774 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800176e:	4b2a      	ldr	r3, [pc, #168]	@ (8001818 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	e047      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d102      	bne.n	8001786 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001780:	4b26      	ldr	r3, [pc, #152]	@ (800181c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	e03e      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001786:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d136      	bne.n	8001800 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800179c:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3301      	adds	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d10c      	bne.n	80017ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017b0:	4a1a      	ldr	r2, [pc, #104]	@ (800181c <HAL_RCC_GetSysClockFreq+0xc0>)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ba:	68d2      	ldr	r2, [r2, #12]
 80017bc:	0a12      	lsrs	r2, r2, #8
 80017be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
      break;
 80017c8:	e00c      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017ca:	4a13      	ldr	r2, [pc, #76]	@ (8001818 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4a10      	ldr	r2, [pc, #64]	@ (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017d4:	68d2      	ldr	r2, [r2, #12]
 80017d6:	0a12      	lsrs	r2, r2, #8
 80017d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	617b      	str	r3, [r7, #20]
      break;
 80017e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0e5b      	lsrs	r3, r3, #25
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	3301      	adds	r3, #1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	e001      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001804:	693b      	ldr	r3, [r7, #16]
}
 8001806:	4618      	mov	r0, r3
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	00f42400 	.word	0x00f42400
 800181c:	007a1200 	.word	0x007a1200

08001820 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001826:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d10c      	bne.n	800185e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001844:	4a17      	ldr	r2, [pc, #92]	@ (80018a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	fbb2 f3f3 	udiv	r3, r2, r3
 800184c:	4a14      	ldr	r2, [pc, #80]	@ (80018a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800184e:	68d2      	ldr	r2, [r2, #12]
 8001850:	0a12      	lsrs	r2, r2, #8
 8001852:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
    break;
 800185c:	e00c      	b.n	8001878 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800185e:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	4a0e      	ldr	r2, [pc, #56]	@ (80018a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001868:	68d2      	ldr	r2, [r2, #12]
 800186a:	0a12      	lsrs	r2, r2, #8
 800186c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	617b      	str	r3, [r7, #20]
    break;
 8001876:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0e5b      	lsrs	r3, r3, #25
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	3301      	adds	r3, #1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001892:	687b      	ldr	r3, [r7, #4]
}
 8001894:	4618      	mov	r0, r3
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000
 80018a4:	007a1200 	.word	0x007a1200
 80018a8:	00f42400 	.word	0x00f42400

080018ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e09d      	b.n	80019fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d108      	bne.n	80018d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80018ce:	d009      	beq.n	80018e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
 80018d6:	e005      	b.n	80018e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7fe fe2c 	bl	800055c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800191a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001924:	d902      	bls.n	800192c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	e002      	b.n	8001932 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800192c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001930:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800193a:	d007      	beq.n	800194c <HAL_SPI_Init+0xa0>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001944:	d002      	beq.n	800194c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800198e:	ea42 0103 	orr.w	r1, r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001996:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	0c1b      	lsrs	r3, r3, #16
 80019a8:	f003 0204 	and.w	r2, r3, #4
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80019c8:	ea42 0103 	orr.w	r1, r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69da      	ldr	r2, [r3, #28]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b08a      	sub	sp, #40	@ 0x28
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001a10:	2301      	movs	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a14:	f7fe fef4 	bl	8000800 <HAL_GetTick>
 8001a18:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001a20:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a30:	7ffb      	ldrb	r3, [r7, #31]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d00c      	beq.n	8001a50 <HAL_SPI_TransmitReceive+0x4e>
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a3c:	d106      	bne.n	8001a4c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_SPI_TransmitReceive+0x4a>
 8001a46:	7ffb      	ldrb	r3, [r7, #31]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d001      	beq.n	8001a50 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e1f3      	b.n	8001e38 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_SPI_TransmitReceive+0x60>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <HAL_SPI_TransmitReceive+0x60>
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e1e8      	b.n	8001e38 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_SPI_TransmitReceive+0x72>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e1e1      	b.n	8001e38 <HAL_SPI_TransmitReceive+0x436>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d003      	beq.n	8001a90 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2205      	movs	r2, #5
 8001a8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	887a      	ldrh	r2, [r7, #2]
 8001ab6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001ad2:	d802      	bhi.n	8001ada <HAL_SPI_TransmitReceive+0xd8>
 8001ad4:	8abb      	ldrh	r3, [r7, #20]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d908      	bls.n	8001aec <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	e007      	b.n	8001afc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001afa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b06:	2b40      	cmp	r3, #64	@ 0x40
 8001b08:	d007      	beq.n	8001b1a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001b22:	f240 8083 	bls.w	8001c2c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_SPI_TransmitReceive+0x132>
 8001b2e:	8afb      	ldrh	r3, [r7, #22]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d16f      	bne.n	8001c14 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b38:	881a      	ldrh	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b44:	1c9a      	adds	r2, r3, #2
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b58:	e05c      	b.n	8001c14 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d11b      	bne.n	8001ba0 <HAL_SPI_TransmitReceive+0x19e>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d016      	beq.n	8001ba0 <HAL_SPI_TransmitReceive+0x19e>
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d113      	bne.n	8001ba0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b7c:	881a      	ldrh	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b88:	1c9a      	adds	r2, r3, #2
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d11c      	bne.n	8001be8 <HAL_SPI_TransmitReceive+0x1e6>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	b292      	uxth	r2, r2
 8001bc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	1c9a      	adds	r2, r3, #2
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001be4:	2301      	movs	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001be8:	f7fe fe0a 	bl	8000800 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d80d      	bhi.n	8001c14 <HAL_SPI_TransmitReceive+0x212>
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfe:	d009      	beq.n	8001c14 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e111      	b.n	8001e38 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d19d      	bne.n	8001b5a <HAL_SPI_TransmitReceive+0x158>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d197      	bne.n	8001b5a <HAL_SPI_TransmitReceive+0x158>
 8001c2a:	e0e5      	b.n	8001df8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_SPI_TransmitReceive+0x23a>
 8001c34:	8afb      	ldrh	r3, [r7, #22]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	f040 80d1 	bne.w	8001dde <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d912      	bls.n	8001c6c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4a:	881a      	ldrh	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c56:	1c9a      	adds	r2, r3, #2
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	3b02      	subs	r3, #2
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c6a:	e0b8      	b.n	8001dde <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	330c      	adds	r3, #12
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c92:	e0a4      	b.n	8001dde <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d134      	bne.n	8001d0c <HAL_SPI_TransmitReceive+0x30a>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d02f      	beq.n	8001d0c <HAL_SPI_TransmitReceive+0x30a>
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d12c      	bne.n	8001d0c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d912      	bls.n	8001ce2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc0:	881a      	ldrh	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ccc:	1c9a      	adds	r2, r3, #2
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b02      	subs	r3, #2
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001ce0:	e012      	b.n	8001d08 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	330c      	adds	r3, #12
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d148      	bne.n	8001dac <HAL_SPI_TransmitReceive+0x3aa>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d042      	beq.n	8001dac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d923      	bls.n	8001d7a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	b292      	uxth	r2, r2
 8001d3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	1c9a      	adds	r2, r3, #2
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b02      	subs	r3, #2
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d81f      	bhi.n	8001da8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	e016      	b.n	8001da8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f103 020c 	add.w	r2, r3, #12
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	7812      	ldrb	r2, [r2, #0]
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001da8:	2301      	movs	r3, #1
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001dac:	f7fe fd28 	bl	8000800 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d803      	bhi.n	8001dc4 <HAL_SPI_TransmitReceive+0x3c2>
 8001dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc2:	d102      	bne.n	8001dca <HAL_SPI_TransmitReceive+0x3c8>
 8001dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e02c      	b.n	8001e38 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f47f af55 	bne.w	8001c94 <HAL_SPI_TransmitReceive+0x292>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f af4e 	bne.w	8001c94 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001df8:	6a3a      	ldr	r2, [r7, #32]
 8001dfa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f93d 	bl	800207c <SPI_EndRxTxTransaction>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00e      	b.n	8001e38 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8001e36:	2300      	movs	r3, #0
  }
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3728      	adds	r7, #40	@ 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e50:	f7fe fcd6 	bl	8000800 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e60:	f7fe fcce 	bl	8000800 <HAL_GetTick>
 8001e64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e66:	4b39      	ldr	r3, [pc, #228]	@ (8001f4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	015b      	lsls	r3, r3, #5
 8001e6c:	0d1b      	lsrs	r3, r3, #20
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	fb02 f303 	mul.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e76:	e054      	b.n	8001f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7e:	d050      	beq.n	8001f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e80:	f7fe fcbe 	bl	8000800 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d902      	bls.n	8001e96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d13d      	bne.n	8001f12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001ea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001eae:	d111      	bne.n	8001ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001eb8:	d004      	beq.n	8001ec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec2:	d107      	bne.n	8001ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001edc:	d10f      	bne.n	8001efe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e017      	b.n	8001f42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	bf0c      	ite	eq
 8001f32:	2301      	moveq	r3, #1
 8001f34:	2300      	movne	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d19b      	bne.n	8001e78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000000 	.word	0x20000000

08001f50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001f62:	f7fe fc4d 	bl	8000800 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8001f72:	f7fe fc45 	bl	8000800 <HAL_GetTick>
 8001f76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001f80:	4b3d      	ldr	r3, [pc, #244]	@ (8002078 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00da      	lsls	r2, r3, #3
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	0d1b      	lsrs	r3, r3, #20
 8001f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
 8001f96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001f98:	e060      	b.n	800205c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001fa0:	d107      	bne.n	8001fb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d104      	bne.n	8001fb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d050      	beq.n	800205c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fba:	f7fe fc21 	bl	8000800 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d902      	bls.n	8001fd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d13d      	bne.n	800204c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001fde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fe8:	d111      	bne.n	800200e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ff2:	d004      	beq.n	8001ffe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffc:	d107      	bne.n	800200e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800200c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002016:	d10f      	bne.n	8002038 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002036:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e010      	b.n	800206e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	3b01      	subs	r3, #1
 800205a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	d196      	bne.n	8001f9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3728      	adds	r7, #40	@ 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000

0800207c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2200      	movs	r2, #0
 8002090:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7ff ff5b 	bl	8001f50 <SPI_WaitFifoStateUntilTimeout>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e027      	b.n	8002100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2200      	movs	r2, #0
 80020b8:	2180      	movs	r1, #128	@ 0x80
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff fec0 	bl	8001e40 <SPI_WaitFlagStateUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ca:	f043 0220 	orr.w	r2, r3, #32
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e014      	b.n	8002100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2200      	movs	r2, #0
 80020de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7ff ff34 	bl	8001f50 <SPI_WaitFifoStateUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f2:	f043 0220 	orr.w	r2, r3, #32
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e000      	b.n	8002100 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <memset>:
 8002108:	4402      	add	r2, r0
 800210a:	4603      	mov	r3, r0
 800210c:	4293      	cmp	r3, r2
 800210e:	d100      	bne.n	8002112 <memset+0xa>
 8002110:	4770      	bx	lr
 8002112:	f803 1b01 	strb.w	r1, [r3], #1
 8002116:	e7f9      	b.n	800210c <memset+0x4>

08002118 <__libc_init_array>:
 8002118:	b570      	push	{r4, r5, r6, lr}
 800211a:	4d0d      	ldr	r5, [pc, #52]	@ (8002150 <__libc_init_array+0x38>)
 800211c:	4c0d      	ldr	r4, [pc, #52]	@ (8002154 <__libc_init_array+0x3c>)
 800211e:	1b64      	subs	r4, r4, r5
 8002120:	10a4      	asrs	r4, r4, #2
 8002122:	2600      	movs	r6, #0
 8002124:	42a6      	cmp	r6, r4
 8002126:	d109      	bne.n	800213c <__libc_init_array+0x24>
 8002128:	4d0b      	ldr	r5, [pc, #44]	@ (8002158 <__libc_init_array+0x40>)
 800212a:	4c0c      	ldr	r4, [pc, #48]	@ (800215c <__libc_init_array+0x44>)
 800212c:	f000 f818 	bl	8002160 <_init>
 8002130:	1b64      	subs	r4, r4, r5
 8002132:	10a4      	asrs	r4, r4, #2
 8002134:	2600      	movs	r6, #0
 8002136:	42a6      	cmp	r6, r4
 8002138:	d105      	bne.n	8002146 <__libc_init_array+0x2e>
 800213a:	bd70      	pop	{r4, r5, r6, pc}
 800213c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002140:	4798      	blx	r3
 8002142:	3601      	adds	r6, #1
 8002144:	e7ee      	b.n	8002124 <__libc_init_array+0xc>
 8002146:	f855 3b04 	ldr.w	r3, [r5], #4
 800214a:	4798      	blx	r3
 800214c:	3601      	adds	r6, #1
 800214e:	e7f2      	b.n	8002136 <__libc_init_array+0x1e>
 8002150:	08002188 	.word	0x08002188
 8002154:	08002188 	.word	0x08002188
 8002158:	08002188 	.word	0x08002188
 800215c:	0800218c 	.word	0x0800218c

08002160 <_init>:
 8002160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002162:	bf00      	nop
 8002164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002166:	bc08      	pop	{r3}
 8002168:	469e      	mov	lr, r3
 800216a:	4770      	bx	lr

0800216c <_fini>:
 800216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216e:	bf00      	nop
 8002170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002172:	bc08      	pop	{r3}
 8002174:	469e      	mov	lr, r3
 8002176:	4770      	bx	lr
