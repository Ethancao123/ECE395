
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007558  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08007730  08007730  00008730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007948  08007948  0000900c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007948  08007948  00008948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007950  08007950  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007950  08007950  00008950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007954  08007954  00008954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007958  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000000c  08007964  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08007964  00009304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cec1  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000315f  00000000  00000000  00025efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00029060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013bd  00000000  00000000  0002a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023cc9  00000000  00000000  0002bd35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c716  00000000  00000000  0004f9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e37fd  00000000  00000000  0006c114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f911  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071d4  00000000  00000000  0014f954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00156b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007718 	.word	0x08007718

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007718 	.word	0x08007718

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_d2f>:
 8000944:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000948:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800094c:	bf24      	itt	cs
 800094e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000952:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000956:	d90d      	bls.n	8000974 <__aeabi_d2f+0x30>
 8000958:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800095c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000960:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000964:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000968:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800096c:	bf08      	it	eq
 800096e:	f020 0001 	biceq.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000978:	d121      	bne.n	80009be <__aeabi_d2f+0x7a>
 800097a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800097e:	bfbc      	itt	lt
 8000980:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000984:	4770      	bxlt	lr
 8000986:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800098a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800098e:	f1c2 0218 	rsb	r2, r2, #24
 8000992:	f1c2 0c20 	rsb	ip, r2, #32
 8000996:	fa10 f30c 	lsls.w	r3, r0, ip
 800099a:	fa20 f002 	lsr.w	r0, r0, r2
 800099e:	bf18      	it	ne
 80009a0:	f040 0001 	orrne.w	r0, r0, #1
 80009a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ac:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b0:	ea40 000c 	orr.w	r0, r0, ip
 80009b4:	fa23 f302 	lsr.w	r3, r3, r2
 80009b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009bc:	e7cc      	b.n	8000958 <__aeabi_d2f+0x14>
 80009be:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009c2:	d107      	bne.n	80009d4 <__aeabi_d2f+0x90>
 80009c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c8:	bf1e      	ittt	ne
 80009ca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ce:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009d2:	4770      	bxne	lr
 80009d4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009f8:	f000 b988 	b.w	8000d0c <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	468e      	mov	lr, r1
 8000a1c:	4604      	mov	r4, r0
 8000a1e:	4688      	mov	r8, r1
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d14a      	bne.n	8000aba <__udivmoddi4+0xa6>
 8000a24:	428a      	cmp	r2, r1
 8000a26:	4617      	mov	r7, r2
 8000a28:	d962      	bls.n	8000af0 <__udivmoddi4+0xdc>
 8000a2a:	fab2 f682 	clz	r6, r2
 8000a2e:	b14e      	cbz	r6, 8000a44 <__udivmoddi4+0x30>
 8000a30:	f1c6 0320 	rsb	r3, r6, #32
 8000a34:	fa01 f806 	lsl.w	r8, r1, r6
 8000a38:	fa20 f303 	lsr.w	r3, r0, r3
 8000a3c:	40b7      	lsls	r7, r6
 8000a3e:	ea43 0808 	orr.w	r8, r3, r8
 8000a42:	40b4      	lsls	r4, r6
 8000a44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a48:	fa1f fc87 	uxth.w	ip, r7
 8000a4c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a50:	0c23      	lsrs	r3, r4, #16
 8000a52:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a5a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d909      	bls.n	8000a76 <__udivmoddi4+0x62>
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000a68:	f080 80ea 	bcs.w	8000c40 <__udivmoddi4+0x22c>
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	f240 80e7 	bls.w	8000c40 <__udivmoddi4+0x22c>
 8000a72:	3902      	subs	r1, #2
 8000a74:	443b      	add	r3, r7
 8000a76:	1a9a      	subs	r2, r3, r2
 8000a78:	b2a3      	uxth	r3, r4
 8000a7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a86:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a8a:	459c      	cmp	ip, r3
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0x8e>
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000a94:	f080 80d6 	bcs.w	8000c44 <__udivmoddi4+0x230>
 8000a98:	459c      	cmp	ip, r3
 8000a9a:	f240 80d3 	bls.w	8000c44 <__udivmoddi4+0x230>
 8000a9e:	443b      	add	r3, r7
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000aa6:	eba3 030c 	sub.w	r3, r3, ip
 8000aaa:	2100      	movs	r1, #0
 8000aac:	b11d      	cbz	r5, 8000ab6 <__udivmoddi4+0xa2>
 8000aae:	40f3      	lsrs	r3, r6
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d905      	bls.n	8000aca <__udivmoddi4+0xb6>
 8000abe:	b10d      	cbz	r5, 8000ac4 <__udivmoddi4+0xb0>
 8000ac0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	e7f5      	b.n	8000ab6 <__udivmoddi4+0xa2>
 8000aca:	fab3 f183 	clz	r1, r3
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d146      	bne.n	8000b60 <__udivmoddi4+0x14c>
 8000ad2:	4573      	cmp	r3, lr
 8000ad4:	d302      	bcc.n	8000adc <__udivmoddi4+0xc8>
 8000ad6:	4282      	cmp	r2, r0
 8000ad8:	f200 8105 	bhi.w	8000ce6 <__udivmoddi4+0x2d2>
 8000adc:	1a84      	subs	r4, r0, r2
 8000ade:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	4690      	mov	r8, r2
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	d0e5      	beq.n	8000ab6 <__udivmoddi4+0xa2>
 8000aea:	e9c5 4800 	strd	r4, r8, [r5]
 8000aee:	e7e2      	b.n	8000ab6 <__udivmoddi4+0xa2>
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	f000 8090 	beq.w	8000c16 <__udivmoddi4+0x202>
 8000af6:	fab2 f682 	clz	r6, r2
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	f040 80a4 	bne.w	8000c48 <__udivmoddi4+0x234>
 8000b00:	1a8a      	subs	r2, r1, r2
 8000b02:	0c03      	lsrs	r3, r0, #16
 8000b04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b08:	b280      	uxth	r0, r0
 8000b0a:	b2bc      	uxth	r4, r7
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b12:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d907      	bls.n	8000b32 <__udivmoddi4+0x11e>
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b28:	d202      	bcs.n	8000b30 <__udivmoddi4+0x11c>
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	f200 80e0 	bhi.w	8000cf0 <__udivmoddi4+0x2dc>
 8000b30:	46c4      	mov	ip, r8
 8000b32:	1a9b      	subs	r3, r3, r2
 8000b34:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b38:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b3c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b40:	fb02 f404 	mul.w	r4, r2, r4
 8000b44:	429c      	cmp	r4, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x144>
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x142>
 8000b50:	429c      	cmp	r4, r3
 8000b52:	f200 80ca 	bhi.w	8000cea <__udivmoddi4+0x2d6>
 8000b56:	4602      	mov	r2, r0
 8000b58:	1b1b      	subs	r3, r3, r4
 8000b5a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b5e:	e7a5      	b.n	8000aac <__udivmoddi4+0x98>
 8000b60:	f1c1 0620 	rsb	r6, r1, #32
 8000b64:	408b      	lsls	r3, r1
 8000b66:	fa22 f706 	lsr.w	r7, r2, r6
 8000b6a:	431f      	orrs	r7, r3
 8000b6c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b70:	fa20 f306 	lsr.w	r3, r0, r6
 8000b74:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b78:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b7c:	4323      	orrs	r3, r4
 8000b7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b82:	fa1f fc87 	uxth.w	ip, r7
 8000b86:	fbbe f0f9 	udiv	r0, lr, r9
 8000b8a:	0c1c      	lsrs	r4, r3, #16
 8000b8c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b90:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b94:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b98:	45a6      	cmp	lr, r4
 8000b9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b9e:	d909      	bls.n	8000bb4 <__udivmoddi4+0x1a0>
 8000ba0:	193c      	adds	r4, r7, r4
 8000ba2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ba6:	f080 809c 	bcs.w	8000ce2 <__udivmoddi4+0x2ce>
 8000baa:	45a6      	cmp	lr, r4
 8000bac:	f240 8099 	bls.w	8000ce2 <__udivmoddi4+0x2ce>
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	443c      	add	r4, r7
 8000bb4:	eba4 040e 	sub.w	r4, r4, lr
 8000bb8:	fa1f fe83 	uxth.w	lr, r3
 8000bbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000bc4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bc8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bcc:	45a4      	cmp	ip, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x1ce>
 8000bd0:	193c      	adds	r4, r7, r4
 8000bd2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000bd6:	f080 8082 	bcs.w	8000cde <__udivmoddi4+0x2ca>
 8000bda:	45a4      	cmp	ip, r4
 8000bdc:	d97f      	bls.n	8000cde <__udivmoddi4+0x2ca>
 8000bde:	3b02      	subs	r3, #2
 8000be0:	443c      	add	r4, r7
 8000be2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000be6:	eba4 040c 	sub.w	r4, r4, ip
 8000bea:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bee:	4564      	cmp	r4, ip
 8000bf0:	4673      	mov	r3, lr
 8000bf2:	46e1      	mov	r9, ip
 8000bf4:	d362      	bcc.n	8000cbc <__udivmoddi4+0x2a8>
 8000bf6:	d05f      	beq.n	8000cb8 <__udivmoddi4+0x2a4>
 8000bf8:	b15d      	cbz	r5, 8000c12 <__udivmoddi4+0x1fe>
 8000bfa:	ebb8 0203 	subs.w	r2, r8, r3
 8000bfe:	eb64 0409 	sbc.w	r4, r4, r9
 8000c02:	fa04 f606 	lsl.w	r6, r4, r6
 8000c06:	fa22 f301 	lsr.w	r3, r2, r1
 8000c0a:	431e      	orrs	r6, r3
 8000c0c:	40cc      	lsrs	r4, r1
 8000c0e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c12:	2100      	movs	r1, #0
 8000c14:	e74f      	b.n	8000ab6 <__udivmoddi4+0xa2>
 8000c16:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c1a:	0c01      	lsrs	r1, r0, #16
 8000c1c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c26:	463b      	mov	r3, r7
 8000c28:	4638      	mov	r0, r7
 8000c2a:	463c      	mov	r4, r7
 8000c2c:	46b8      	mov	r8, r7
 8000c2e:	46be      	mov	lr, r7
 8000c30:	2620      	movs	r6, #32
 8000c32:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c36:	eba2 0208 	sub.w	r2, r2, r8
 8000c3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c3e:	e766      	b.n	8000b0e <__udivmoddi4+0xfa>
 8000c40:	4601      	mov	r1, r0
 8000c42:	e718      	b.n	8000a76 <__udivmoddi4+0x62>
 8000c44:	4610      	mov	r0, r2
 8000c46:	e72c      	b.n	8000aa2 <__udivmoddi4+0x8e>
 8000c48:	f1c6 0220 	rsb	r2, r6, #32
 8000c4c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	40b1      	lsls	r1, r6
 8000c54:	fa20 f202 	lsr.w	r2, r0, r2
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c62:	b2bc      	uxth	r4, r7
 8000c64:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c68:	0c11      	lsrs	r1, r2, #16
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb08 f904 	mul.w	r9, r8, r4
 8000c72:	40b0      	lsls	r0, r6
 8000c74:	4589      	cmp	r9, r1
 8000c76:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c7a:	b280      	uxth	r0, r0
 8000c7c:	d93e      	bls.n	8000cfc <__udivmoddi4+0x2e8>
 8000c7e:	1879      	adds	r1, r7, r1
 8000c80:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000c84:	d201      	bcs.n	8000c8a <__udivmoddi4+0x276>
 8000c86:	4589      	cmp	r9, r1
 8000c88:	d81f      	bhi.n	8000cca <__udivmoddi4+0x2b6>
 8000c8a:	eba1 0109 	sub.w	r1, r1, r9
 8000c8e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c92:	fb09 f804 	mul.w	r8, r9, r4
 8000c96:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c9a:	b292      	uxth	r2, r2
 8000c9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca0:	4542      	cmp	r2, r8
 8000ca2:	d229      	bcs.n	8000cf8 <__udivmoddi4+0x2e4>
 8000ca4:	18ba      	adds	r2, r7, r2
 8000ca6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000caa:	d2c4      	bcs.n	8000c36 <__udivmoddi4+0x222>
 8000cac:	4542      	cmp	r2, r8
 8000cae:	d2c2      	bcs.n	8000c36 <__udivmoddi4+0x222>
 8000cb0:	f1a9 0102 	sub.w	r1, r9, #2
 8000cb4:	443a      	add	r2, r7
 8000cb6:	e7be      	b.n	8000c36 <__udivmoddi4+0x222>
 8000cb8:	45f0      	cmp	r8, lr
 8000cba:	d29d      	bcs.n	8000bf8 <__udivmoddi4+0x1e4>
 8000cbc:	ebbe 0302 	subs.w	r3, lr, r2
 8000cc0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cc4:	3801      	subs	r0, #1
 8000cc6:	46e1      	mov	r9, ip
 8000cc8:	e796      	b.n	8000bf8 <__udivmoddi4+0x1e4>
 8000cca:	eba7 0909 	sub.w	r9, r7, r9
 8000cce:	4449      	add	r1, r9
 8000cd0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cd4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cd8:	fb09 f804 	mul.w	r8, r9, r4
 8000cdc:	e7db      	b.n	8000c96 <__udivmoddi4+0x282>
 8000cde:	4673      	mov	r3, lr
 8000ce0:	e77f      	b.n	8000be2 <__udivmoddi4+0x1ce>
 8000ce2:	4650      	mov	r0, sl
 8000ce4:	e766      	b.n	8000bb4 <__udivmoddi4+0x1a0>
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	e6fd      	b.n	8000ae6 <__udivmoddi4+0xd2>
 8000cea:	443b      	add	r3, r7
 8000cec:	3a02      	subs	r2, #2
 8000cee:	e733      	b.n	8000b58 <__udivmoddi4+0x144>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	443b      	add	r3, r7
 8000cf6:	e71c      	b.n	8000b32 <__udivmoddi4+0x11e>
 8000cf8:	4649      	mov	r1, r9
 8000cfa:	e79c      	b.n	8000c36 <__udivmoddi4+0x222>
 8000cfc:	eba1 0109 	sub.w	r1, r1, r9
 8000d00:	46c4      	mov	ip, r8
 8000d02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d06:	fb09 f804 	mul.w	r8, r9, r4
 8000d0a:	e7c4      	b.n	8000c96 <__udivmoddi4+0x282>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <_ZN6DriverC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
 *      Author: ethancao
 */
#include "stm32g4xx_hal.h"
#include "drv8316.h"

Driver::Driver(SPI_HandleTypeDef* _spi, GPIO_TypeDef *_sleepPort,
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	807b      	strh	r3, [r7, #2]
	uint16_t _sleepPin, GPIO_TypeDef *_scsPort, uint16_t _scsPin) {
	spi = _spi;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	609a      	str	r2, [r3, #8]
	sleepPort = _sleepPort;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	60da      	str	r2, [r3, #12]
	sleepPin = _sleepPin;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	887a      	ldrh	r2, [r7, #2]
 8000d2e:	821a      	strh	r2, [r3, #16]
	scsPort = _scsPort;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	615a      	str	r2, [r3, #20]
	scsPin = _scsPin;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	8bba      	ldrh	r2, [r7, #28]
 8000d3a:	831a      	strh	r2, [r3, #24]
	return;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_ZN6Driver4initEv>:

void Driver::init() {
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	reset();
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f804 	bl	8000d60 <_ZN6Driver5resetEv>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_ZN6Driver5resetEv>:

void Driver::reset() {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sleepPort, sleepPin, GPIO_PIN_RESET);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68d8      	ldr	r0, [r3, #12]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	8a1b      	ldrh	r3, [r3, #16]
 8000d70:	2200      	movs	r2, #0
 8000d72:	4619      	mov	r1, r3
 8000d74:	f002 fb7c 	bl	8003470 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d78:	200a      	movs	r0, #10
 8000d7a:	f001 f8dd 	bl	8001f38 <HAL_Delay>
	HAL_GPIO_WritePin(scsPort, scsPin, GPIO_PIN_SET);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6958      	ldr	r0, [r3, #20]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	8b1b      	ldrh	r3, [r3, #24]
 8000d86:	2201      	movs	r2, #1
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f002 fb71 	bl	8003470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sleepPort, sleepPin, GPIO_PIN_SET);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68d8      	ldr	r0, [r3, #12]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	8a1b      	ldrh	r3, [r3, #16]
 8000d96:	2201      	movs	r2, #1
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f002 fb69 	bl	8003470 <HAL_GPIO_WritePin>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b094      	sub	sp, #80	@ 0x50
 8000dac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dae:	f001 f852 	bl	8001e56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db2:	f000 f913 	bl	8000fdc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db6:	f000 fc4b 	bl	8001650 <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 8000dba:	f000 fa9d 	bl	80012f8 <_ZL12MX_SPI2_Initv>
  MX_ADC1_Init();
 8000dbe:	f000 f957 	bl	8001070 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8000dc2:	f000 fa4b 	bl	800125c <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8000dc6:	f000 fb1b 	bl	8001400 <_ZL12MX_TIM1_Initv>
  MX_ADC2_Init();
 8000dca:	f000 f9d7 	bl	800117c <_ZL12MX_ADC2_Initv>
  MX_SPI3_Init();
 8000dce:	f000 fad5 	bl	800137c <_ZL12MX_SPI3_Initv>
  MX_USART2_UART_Init();
 8000dd2:	f000 fbdd 	bl	8001590 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  uint8_t temp[12][3];
  Driver drv(&hspi2, GPIOC, SLEEP_N_Pin, GPIOC, SCS_N_Pin);
 8000dd6:	1d38      	adds	r0, r7, #4
 8000dd8:	2302      	movs	r3, #2
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <main+0xa4>)
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2304      	movs	r3, #4
 8000de2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e4c <main+0xa4>)
 8000de4:	491a      	ldr	r1, [pc, #104]	@ (8000e50 <main+0xa8>)
 8000de6:	f7ff ff93 	bl	8000d10 <_ZN6DriverC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
  drv.init();
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ffac 	bl	8000d4a <_ZN6Driver4initEv>

  HAL_TIM_PWM_Start_IT (&htim1, TIM_CHANNEL_1);
 8000df2:	2100      	movs	r1, #0
 8000df4:	4817      	ldr	r0, [pc, #92]	@ (8000e54 <main+0xac>)
 8000df6:	f003 fd59 	bl	80048ac <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT (&htim1, TIM_CHANNEL_2);
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	4815      	ldr	r0, [pc, #84]	@ (8000e54 <main+0xac>)
 8000dfe:	f003 fd55 	bl	80048ac <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT (&htim1, TIM_CHANNEL_3);
 8000e02:	2108      	movs	r1, #8
 8000e04:	4813      	ldr	r0, [pc, #76]	@ (8000e54 <main+0xac>)
 8000e06:	f003 fd51 	bl	80048ac <HAL_TIM_PWM_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4811      	ldr	r0, [pc, #68]	@ (8000e54 <main+0xac>)
 8000e0e:	f004 fb65 	bl	80054dc <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 8000e12:	2104      	movs	r1, #4
 8000e14:	480f      	ldr	r0, [pc, #60]	@ (8000e54 <main+0xac>)
 8000e16:	f004 fb61 	bl	80054dc <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8000e1a:	2108      	movs	r1, #8
 8000e1c:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <main+0xac>)
 8000e1e:	f004 fb5d 	bl	80054dc <HAL_TIMEx_PWMN_Start_IT>
//	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
//	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
//	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
//	  HAL_Delay(1000);
    /* USER CODE BEGIN 3 */
	 for(int i = 0; i < 360; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e26:	e00b      	b.n	8000e40 <main+0x98>
		 outputElecAngle(i,30); //use >20 for power
 8000e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	211e      	movs	r1, #30
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f812 	bl	8000e58 <_Z15outputElecAnglett>
	 	 HAL_Delay(100);
 8000e34:	2064      	movs	r0, #100	@ 0x64
 8000e36:	f001 f87f 	bl	8001f38 <HAL_Delay>
	 for(int i = 0; i < 360; i++) {
 8000e3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e42:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000e46:	dbef      	blt.n	8000e28 <main+0x80>
	 }
  }
 8000e48:	e7eb      	b.n	8000e22 <main+0x7a>
 8000e4a:	bf00      	nop
 8000e4c:	48000800 	.word	0x48000800
 8000e50:	20000154 	.word	0x20000154
 8000e54:	2000021c 	.word	0x2000021c

08000e58 <_Z15outputElecAnglett>:
  /* USER CODE END 3 */
}

void outputElecAngle(uint16_t angle, uint16_t power) {
 8000e58:	b5b0      	push	{r4, r5, r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460a      	mov	r2, r1
 8000e62:	80fb      	strh	r3, [r7, #6]
 8000e64:	4613      	mov	r3, r2
 8000e66:	80bb      	strh	r3, [r7, #4]
	angle %= 360;
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	4958      	ldr	r1, [pc, #352]	@ (8000fd0 <_Z15outputElecAnglett+0x178>)
 8000e6e:	fba1 1202 	umull	r1, r2, r1, r2
 8000e72:	0892      	lsrs	r2, r2, #2
 8000e74:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000e78:	fb01 f202 	mul.w	r2, r1, r2
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	80fb      	strh	r3, [r7, #6]
	//polar to xy
	float alpha = cos(angle) * power;
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fc4e 	bl	8001724 <_ZSt3cosItEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e88:	ec55 4b10 	vmov	r4, r5, d0
 8000e8c:	88bb      	ldrh	r3, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fc3e 	bl	8000710 <__aeabi_i2d>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4620      	mov	r0, r4
 8000e9a:	4629      	mov	r1, r5
 8000e9c:	f7ff f9bc 	bl	8000218 <__aeabi_dmul>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fd4c 	bl	8000944 <__aeabi_d2f>
 8000eac:	4603      	mov	r3, r0
 8000eae:	61fb      	str	r3, [r7, #28]
	float beta = sin(angle) * power;
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fc50 	bl	8001758 <_ZSt3sinItEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000eb8:	ec55 4b10 	vmov	r4, r5, d0
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fc26 	bl	8000710 <__aeabi_i2d>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4620      	mov	r0, r4
 8000eca:	4629      	mov	r1, r5
 8000ecc:	f7ff f9a4 	bl	8000218 <__aeabi_dmul>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff fd34 	bl	8000944 <__aeabi_d2f>
 8000edc:	4603      	mov	r3, r0
 8000ede:	61bb      	str	r3, [r7, #24]
	//Clarke transform
	float a = alpha;
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	617b      	str	r3, [r7, #20]
	float b = -0.5*alpha + 0.8660254*beta; //sqrt(3)/2 is weird const
 8000ee4:	69f8      	ldr	r0, [r7, #28]
 8000ee6:	f7ff fc25 	bl	8000734 <__aeabi_f2d>
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	4b39      	ldr	r3, [pc, #228]	@ (8000fd4 <_Z15outputElecAnglett+0x17c>)
 8000ef0:	f7ff f992 	bl	8000218 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4614      	mov	r4, r2
 8000efa:	461d      	mov	r5, r3
 8000efc:	69b8      	ldr	r0, [r7, #24]
 8000efe:	f7ff fc19 	bl	8000734 <__aeabi_f2d>
 8000f02:	a331      	add	r3, pc, #196	@ (adr r3, 8000fc8 <_Z15outputElecAnglett+0x170>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff f986 	bl	8000218 <__aeabi_dmul>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4620      	mov	r0, r4
 8000f12:	4629      	mov	r1, r5
 8000f14:	f7ff fab0 	bl	8000478 <__adddf3>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff fd10 	bl	8000944 <__aeabi_d2f>
 8000f24:	4603      	mov	r3, r0
 8000f26:	613b      	str	r3, [r7, #16]
	float c = -0.5*alpha - 0.8660254*beta;
 8000f28:	69f8      	ldr	r0, [r7, #28]
 8000f2a:	f7ff fc03 	bl	8000734 <__aeabi_f2d>
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <_Z15outputElecAnglett+0x17c>)
 8000f34:	f7ff f970 	bl	8000218 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4614      	mov	r4, r2
 8000f3e:	461d      	mov	r5, r3
 8000f40:	69b8      	ldr	r0, [r7, #24]
 8000f42:	f7ff fbf7 	bl	8000734 <__aeabi_f2d>
 8000f46:	a320      	add	r3, pc, #128	@ (adr r3, 8000fc8 <_Z15outputElecAnglett+0x170>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff f964 	bl	8000218 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4620      	mov	r0, r4
 8000f56:	4629      	mov	r1, r5
 8000f58:	f7ff fa8c 	bl	8000474 <__aeabi_dsub>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fcee 	bl	8000944 <__aeabi_d2f>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60fb      	str	r3, [r7, #12]
	uint8_t pwma = ((uint8_t)a) + 150; //scale to center of pwm range
 8000f6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f74:	edc7 7a00 	vstr	s15, [r7]
 8000f78:	783b      	ldrb	r3, [r7, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	3b6a      	subs	r3, #106	@ 0x6a
 8000f7e:	72fb      	strb	r3, [r7, #11]
	uint8_t pwmb = ((uint8_t)b) + 150;
 8000f80:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f88:	edc7 7a00 	vstr	s15, [r7]
 8000f8c:	783b      	ldrb	r3, [r7, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	3b6a      	subs	r3, #106	@ 0x6a
 8000f92:	72bb      	strb	r3, [r7, #10]
	uint8_t pwmc = ((uint8_t)c) + 150;
 8000f94:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9c:	edc7 7a00 	vstr	s15, [r7]
 8000fa0:	783b      	ldrb	r3, [r7, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	3b6a      	subs	r3, #106	@ 0x6a
 8000fa6:	727b      	strb	r3, [r7, #9]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwma);
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <_Z15outputElecAnglett+0x180>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	7afa      	ldrb	r2, [r7, #11]
 8000fae:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmb);
 8000fb0:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <_Z15outputElecAnglett+0x180>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	7aba      	ldrb	r2, [r7, #10]
 8000fb6:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwmc);
 8000fb8:	4b07      	ldr	r3, [pc, #28]	@ (8000fd8 <_Z15outputElecAnglett+0x180>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	7a7a      	ldrb	r2, [r7, #9]
 8000fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc8:	e6502b91 	.word	0xe6502b91
 8000fcc:	3febb67a 	.word	0x3febb67a
 8000fd0:	16c16c17 	.word	0x16c16c17
 8000fd4:	bfe00000 	.word	0xbfe00000
 8000fd8:	2000021c 	.word	0x2000021c

08000fdc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	@ 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	2238      	movs	r2, #56	@ 0x38
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 fb68 	bl	80076c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001002:	f002 fb7f 	bl	8003704 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001010:	2340      	movs	r3, #64	@ 0x40
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0318 	add.w	r3, r7, #24
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fc25 	bl	800386c <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf14      	ite	ne
 8001028:	2301      	movne	r3, #1
 800102a:	2300      	moveq	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8001032:	f000 fb71 	bl	8001718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
 8001038:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800103a:	2301      	movs	r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f002 ff1e 	bl	8003e90 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	bf14      	ite	ne
 800105a:	2301      	movne	r3, #1
 800105c:	2300      	moveq	r3, #0
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8001064:	f000 fb58 	bl	8001718 <Error_Handler>
  }
}
 8001068:	bf00      	nop
 800106a:	3750      	adds	r7, #80	@ 0x50
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	@ 0x30
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f006 fb19 	bl	80076c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800108e:	4b39      	ldr	r3, [pc, #228]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 8001090:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001094:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001096:	4b37      	ldr	r3, [pc, #220]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 8001098:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109e:	4b35      	ldr	r3, [pc, #212]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a4:	4b33      	ldr	r3, [pc, #204]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010aa:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010b0:	4b30      	ldr	r3, [pc, #192]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010b8:	2204      	movs	r2, #4
 80010ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010be:	2200      	movs	r2, #0
 80010c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ce:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d6:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010d8:	2200      	movs	r2, #0
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010dc:	4b25      	ldr	r3, [pc, #148]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010de:	2200      	movs	r2, #0
 80010e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e2:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ea:	4b22      	ldr	r3, [pc, #136]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010f0:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	481e      	ldr	r0, [pc, #120]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 80010fa:	f001 f915 	bl	8002328 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf14      	ite	ne
 8001104:	2301      	movne	r3, #1
 8001106:	2300      	moveq	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800110e:	f000 fb03 	bl	8001718 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001116:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	4815      	ldr	r0, [pc, #84]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 800111e:	f001 fe9d 	bl	8002e5c <HAL_ADCEx_MultiModeConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf14      	ite	ne
 8001128:	2301      	movne	r3, #1
 800112a:	2300      	moveq	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 8001132:	f000 faf1 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <_ZL12MX_ADC1_Initv+0x108>)
 8001138:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800113a:	2306      	movs	r3, #6
 800113c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001142:	237f      	movs	r3, #127	@ 0x7f
 8001144:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001146:	2304      	movs	r3, #4
 8001148:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	4808      	ldr	r0, [pc, #32]	@ (8001174 <_ZL12MX_ADC1_Initv+0x104>)
 8001154:	f001 fa6c 	bl	8002630 <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf14      	ite	ne
 800115e:	2301      	movne	r3, #1
 8001160:	2300      	moveq	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8001168:	f000 fad6 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3730      	adds	r7, #48	@ 0x30
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000028 	.word	0x20000028
 8001178:	08600004 	.word	0x08600004

0800117c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2220      	movs	r2, #32
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f006 fa99 	bl	80076c0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800118e:	4b30      	ldr	r3, [pc, #192]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 8001190:	4a30      	ldr	r2, [pc, #192]	@ (8001254 <_ZL12MX_ADC2_Initv+0xd8>)
 8001192:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001194:	4b2e      	ldr	r3, [pc, #184]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 8001196:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800119a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800119c:	4b2c      	ldr	r3, [pc, #176]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011a8:	4b29      	ldr	r3, [pc, #164]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ae:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b4:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011b6:	2204      	movs	r2, #4
 80011b8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011ba:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011c0:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011c6:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011cc:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011da:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011ee:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011f6:	4816      	ldr	r0, [pc, #88]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 80011f8:	f001 f896 	bl	8002328 <HAL_ADC_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bf14      	ite	ne
 8001202:	2301      	movne	r3, #1
 8001204:	2300      	moveq	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 800120c:	f000 fa84 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <_ZL12MX_ADC2_Initv+0xdc>)
 8001212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001214:	2306      	movs	r3, #6
 8001216:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800121c:	237f      	movs	r3, #127	@ 0x7f
 800121e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001220:	2304      	movs	r3, #4
 8001222:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	4808      	ldr	r0, [pc, #32]	@ (8001250 <_ZL12MX_ADC2_Initv+0xd4>)
 800122e:	f001 f9ff 	bl	8002630 <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf14      	ite	ne
 8001238:	2301      	movne	r3, #1
 800123a:	2300      	moveq	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 8001242:	f000 fa69 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000094 	.word	0x20000094
 8001254:	50000100 	.word	0x50000100
 8001258:	0c900008 	.word	0x0c900008

0800125c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001260:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <_ZL12MX_I2C1_Initv+0x90>)
 8001262:	4a23      	ldr	r2, [pc, #140]	@ (80012f0 <_ZL12MX_I2C1_Initv+0x94>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8001266:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <_ZL12MX_I2C1_Initv+0x90>)
 8001268:	4a22      	ldr	r2, [pc, #136]	@ (80012f4 <_ZL12MX_I2C1_Initv+0x98>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <_ZL12MX_I2C1_Initv+0x90>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001272:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <_ZL12MX_I2C1_Initv+0x90>)
 8001274:	2201      	movs	r2, #1
 8001276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <_ZL12MX_I2C1_Initv+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800127e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <_ZL12MX_I2C1_Initv+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <_ZL12MX_I2C1_Initv+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128a:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <_ZL12MX_I2C1_Initv+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001290:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <_ZL12MX_I2C1_Initv+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001296:	4815      	ldr	r0, [pc, #84]	@ (80012ec <_ZL12MX_I2C1_Initv+0x90>)
 8001298:	f002 f902 	bl	80034a0 <HAL_I2C_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	bf14      	ite	ne
 80012a2:	2301      	movne	r3, #1
 80012a4:	2300      	moveq	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80012ac:	f000 fa34 	bl	8001718 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b0:	2100      	movs	r1, #0
 80012b2:	480e      	ldr	r0, [pc, #56]	@ (80012ec <_ZL12MX_I2C1_Initv+0x90>)
 80012b4:	f002 f98f 	bl	80035d6 <HAL_I2CEx_ConfigAnalogFilter>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bf14      	ite	ne
 80012be:	2301      	movne	r3, #1
 80012c0:	2300      	moveq	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80012c8:	f000 fa26 	bl	8001718 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4807      	ldr	r0, [pc, #28]	@ (80012ec <_ZL12MX_I2C1_Initv+0x90>)
 80012d0:	f002 f9cc 	bl	800366c <HAL_I2CEx_ConfigDigitalFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf14      	ite	ne
 80012da:	2301      	movne	r3, #1
 80012dc:	2300      	moveq	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80012e4:	f000 fa18 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000100 	.word	0x20000100
 80012f0:	40005400 	.word	0x40005400
 80012f4:	00503d58 	.word	0x00503d58

080012f8 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 80012fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001378 <_ZL12MX_SPI2_Initv+0x80>)
 8001300:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001302:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 8001304:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001308:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001310:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 8001312:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001316:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 8001326:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800132a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 800132e:	2228      	movs	r2, #40	@ 0x28
 8001330:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 8001340:	2200      	movs	r2, #0
 8001342:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 8001346:	2207      	movs	r2, #7
 8001348:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 8001352:	2200      	movs	r2, #0
 8001354:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001356:	4807      	ldr	r0, [pc, #28]	@ (8001374 <_ZL12MX_SPI2_Initv+0x7c>)
 8001358:	f003 f9a6 	bl	80046a8 <HAL_SPI_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf14      	ite	ne
 8001362:	2301      	movne	r3, #1
 8001364:	2300      	moveq	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 800136c:	f000 f9d4 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000154 	.word	0x20000154
 8001378:	40003800 	.word	0x40003800

0800137c <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 8001382:	4a1e      	ldr	r2, [pc, #120]	@ (80013fc <_ZL12MX_SPI3_Initv+0x80>)
 8001384:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 8001388:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800138c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800138e:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001394:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 8001396:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800139a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139c:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 80013aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 80013ca:	2207      	movs	r2, #7
 80013cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 80013d6:	2208      	movs	r2, #8
 80013d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013da:	4807      	ldr	r0, [pc, #28]	@ (80013f8 <_ZL12MX_SPI3_Initv+0x7c>)
 80013dc:	f003 f964 	bl	80046a8 <HAL_SPI_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf14      	ite	ne
 80013e6:	2301      	movne	r3, #1
 80013e8:	2300      	moveq	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 80013f0:	f000 f992 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200001b8 	.word	0x200001b8
 80013fc:	40003c00 	.word	0x40003c00

08001400 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b098      	sub	sp, #96	@ 0x60
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001406:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001412:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2234      	movs	r2, #52	@ 0x34
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f006 f947 	bl	80076c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001432:	4b55      	ldr	r3, [pc, #340]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 8001434:	4a55      	ldr	r2, [pc, #340]	@ (800158c <_ZL12MX_TIM1_Initv+0x18c>)
 8001436:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001438:	4b53      	ldr	r3, [pc, #332]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800143e:	4b52      	ldr	r3, [pc, #328]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 8001440:	2260      	movs	r2, #96	@ 0x60
 8001442:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 300;
 8001444:	4b50      	ldr	r3, [pc, #320]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 8001446:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800144a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b4e      	ldr	r3, [pc, #312]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001452:	4b4d      	ldr	r3, [pc, #308]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 8001454:	2201      	movs	r2, #1
 8001456:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b4b      	ldr	r3, [pc, #300]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800145e:	484a      	ldr	r0, [pc, #296]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 8001460:	f003 f9cd 	bl	80047fe <HAL_TIM_PWM_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf14      	ite	ne
 800146a:	2301      	movne	r3, #1
 800146c:	2300      	moveq	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8001474:	f000 f950 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001484:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001488:	4619      	mov	r1, r3
 800148a:	483f      	ldr	r0, [pc, #252]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 800148c:	f004 f92e 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	bf14      	ite	ne
 8001496:	2301      	movne	r3, #1
 8001498:	2300      	moveq	r3, #0
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 80014a0:	f000 f93a 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a4:	2360      	movs	r3, #96	@ 0x60
 80014a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ac:	2300      	movs	r3, #0
 80014ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014b0:	2300      	movs	r3, #0
 80014b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80014bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014c6:	2200      	movs	r2, #0
 80014c8:	4619      	mov	r1, r3
 80014ca:	482f      	ldr	r0, [pc, #188]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 80014cc:	f003 fb3a 	bl	8004b44 <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf14      	ite	ne
 80014d6:	2301      	movne	r3, #1
 80014d8:	2300      	moveq	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 80014e0:	f000 f91a 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014e8:	2204      	movs	r2, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4826      	ldr	r0, [pc, #152]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 80014ee:	f003 fb29 	bl	8004b44 <HAL_TIM_PWM_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 8001502:	f000 f909 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001506:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800150a:	2208      	movs	r2, #8
 800150c:	4619      	mov	r1, r3
 800150e:	481e      	ldr	r0, [pc, #120]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 8001510:	f003 fb18 	bl	8004b44 <HAL_TIM_PWM_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	bf14      	ite	ne
 800151a:	2301      	movne	r3, #1
 800151c:	2300      	moveq	r3, #0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8001524:	f000 f8f8 	bl	8001718 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]

  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001538:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800153c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800154a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4809      	ldr	r0, [pc, #36]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 8001562:	f004 f945 	bl	80057f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	bf14      	ite	ne
 800156c:	2301      	movne	r3, #1
 800156e:	2300      	moveq	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <_ZL12MX_TIM1_Initv+0x17a>
  {
    Error_Handler();
 8001576:	f000 f8cf 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800157a:	4803      	ldr	r0, [pc, #12]	@ (8001588 <_ZL12MX_TIM1_Initv+0x188>)
 800157c:	f000 fb32 	bl	8001be4 <HAL_TIM_MspPostInit>

}
 8001580:	bf00      	nop
 8001582:	3760      	adds	r7, #96	@ 0x60
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000021c 	.word	0x2000021c
 800158c:	40012c00 	.word	0x40012c00

08001590 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001594:	4b2c      	ldr	r3, [pc, #176]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001596:	4a2d      	ldr	r2, [pc, #180]	@ (800164c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159a:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b29      	ldr	r3, [pc, #164]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b26      	ldr	r3, [pc, #152]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b23      	ldr	r3, [pc, #140]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d8:	481b      	ldr	r0, [pc, #108]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015da:	f004 f9ba 	bl	8005952 <HAL_UART_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf14      	ite	ne
 80015e4:	2301      	movne	r3, #1
 80015e6:	2300      	moveq	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80015ee:	f000 f893 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f2:	2100      	movs	r1, #0
 80015f4:	4814      	ldr	r0, [pc, #80]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015f6:	f004 ff21 	bl	800643c <HAL_UARTEx_SetTxFifoThreshold>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800160a:	f000 f885 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160e:	2100      	movs	r1, #0
 8001610:	480d      	ldr	r0, [pc, #52]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001612:	f004 ff51 	bl	80064b8 <HAL_UARTEx_SetRxFifoThreshold>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf14      	ite	ne
 800161c:	2301      	movne	r3, #1
 800161e:	2300      	moveq	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001626:	f000 f877 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800162a:	4807      	ldr	r0, [pc, #28]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800162c:	f004 fecd 	bl	80063ca <HAL_UARTEx_DisableFifoMode>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	bf14      	ite	ne
 8001636:	2301      	movne	r3, #1
 8001638:	2300      	moveq	r3, #0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001640:	f000 f86a 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000268 	.word	0x20000268
 800164c:	40004400 	.word	0x40004400

08001650 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	@ 0x28
 8001654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <_ZL12MX_GPIO_Initv+0xc0>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	4a29      	ldr	r2, [pc, #164]	@ (8001710 <_ZL12MX_GPIO_Initv+0xc0>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001672:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <_ZL12MX_GPIO_Initv+0xc0>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800167e:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <_ZL12MX_GPIO_Initv+0xc0>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	4a23      	ldr	r2, [pc, #140]	@ (8001710 <_ZL12MX_GPIO_Initv+0xc0>)
 8001684:	f043 0320 	orr.w	r3, r3, #32
 8001688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168a:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <_ZL12MX_GPIO_Initv+0xc0>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	f003 0320 	and.w	r3, r3, #32
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b1e      	ldr	r3, [pc, #120]	@ (8001710 <_ZL12MX_GPIO_Initv+0xc0>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <_ZL12MX_GPIO_Initv+0xc0>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <_ZL12MX_GPIO_Initv+0xc0>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <_ZL12MX_GPIO_Initv+0xc0>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	4a17      	ldr	r2, [pc, #92]	@ (8001710 <_ZL12MX_GPIO_Initv+0xc0>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <_ZL12MX_GPIO_Initv+0xc0>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CSN_Pin|DRVOFF_Pin|SCS_N_Pin|SLEEP_N_Pin
 80016c6:	2200      	movs	r2, #0
 80016c8:	f244 2107 	movw	r1, #16903	@ 0x4207
 80016cc:	4811      	ldr	r0, [pc, #68]	@ (8001714 <_ZL12MX_GPIO_Initv+0xc4>)
 80016ce:	f001 fecf 	bl	8003470 <HAL_GPIO_WritePin>
                          |NRF_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NRF_CSN_Pin DRVOFF_Pin SCS_N_Pin SLEEP_N_Pin
                           NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|DRVOFF_Pin|SCS_N_Pin|SLEEP_N_Pin
 80016d2:	f244 2307 	movw	r3, #16903	@ 0x4207
 80016d6:	617b      	str	r3, [r7, #20]
                          |NRF_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	480a      	ldr	r0, [pc, #40]	@ (8001714 <_ZL12MX_GPIO_Initv+0xc4>)
 80016ec:	f001 fd3e 	bl	800316c <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_N_Pin */
  GPIO_InitStruct.Pin = FAULT_N_Pin;
 80016f0:	2308      	movs	r3, #8
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_N_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	4804      	ldr	r0, [pc, #16]	@ (8001714 <_ZL12MX_GPIO_Initv+0xc4>)
 8001704:	f001 fd32 	bl	800316c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000
 8001714:	48000800 	.word	0x48000800

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <Error_Handler+0x8>

08001724 <_ZSt3cosItEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
    { return __builtin_cos(__x); }
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ffdd 	bl	80006f0 <__aeabi_ui2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	ec43 2b10 	vmov	d0, r2, r3
 800173e:	f004 ff47 	bl	80065d0 <cos>
 8001742:	eeb0 7a40 	vmov.f32	s14, s0
 8001746:	eef0 7a60 	vmov.f32	s15, s1
 800174a:	eeb0 0a47 	vmov.f32	s0, s14
 800174e:	eef0 0a67 	vmov.f32	s1, s15
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_ZSt3sinItEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sin(_Tp __x)
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
    { return __builtin_sin(__x); }
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe ffc3 	bl	80006f0 <__aeabi_ui2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	ec43 2b10 	vmov	d0, r2, r3
 8001772:	f004 ff81 	bl	8006678 <sin>
 8001776:	eeb0 7a40 	vmov.f32	s14, s0
 800177a:	eef0 7a60 	vmov.f32	s15, s1
 800177e:	eeb0 0a47 	vmov.f32	s0, s14
 8001782:	eef0 0a67 	vmov.f32	s1, s15
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <HAL_MspInit+0x44>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001796:	4a0e      	ldr	r2, [pc, #56]	@ (80017d0 <HAL_MspInit+0x44>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6613      	str	r3, [r2, #96]	@ 0x60
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <HAL_MspInit+0x44>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <HAL_MspInit+0x44>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	4a08      	ldr	r2, [pc, #32]	@ (80017d0 <HAL_MspInit+0x44>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_MspInit+0x44>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017c2:	f002 f843 	bl	800384c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b09e      	sub	sp, #120	@ 0x78
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ec:	f107 0320 	add.w	r3, r7, #32
 80017f0:	2244      	movs	r2, #68	@ 0x44
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f005 ff63 	bl	80076c0 <memset>
  if(hadc->Instance==ADC1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001802:	d156      	bne.n	80018b2 <HAL_ADC_MspInit+0xde>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001808:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800180a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800180e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	4618      	mov	r0, r3
 8001816:	f002 fd57 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001820:	f7ff ff7a 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001824:	4b46      	ldr	r3, [pc, #280]	@ (8001940 <HAL_ADC_MspInit+0x16c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a45      	ldr	r2, [pc, #276]	@ (8001940 <HAL_ADC_MspInit+0x16c>)
 800182c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800182e:	4b44      	ldr	r3, [pc, #272]	@ (8001940 <HAL_ADC_MspInit+0x16c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d10b      	bne.n	800184e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001836:	4b43      	ldr	r3, [pc, #268]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	4a42      	ldr	r2, [pc, #264]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 800183c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001842:	4b40      	ldr	r3, [pc, #256]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b3d      	ldr	r3, [pc, #244]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	4a3c      	ldr	r2, [pc, #240]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185a:	4b3a      	ldr	r3, [pc, #232]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	4b37      	ldr	r3, [pc, #220]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	4a36      	ldr	r2, [pc, #216]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001872:	4b34      	ldr	r3, [pc, #208]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800187e:	2306      	movs	r3, #6
 8001880:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001882:	2303      	movs	r3, #3
 8001884:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001894:	f001 fc6a 	bl	800316c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001898:	2303      	movs	r3, #3
 800189a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189c:	2303      	movs	r3, #3
 800189e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018a8:	4619      	mov	r1, r3
 80018aa:	4827      	ldr	r0, [pc, #156]	@ (8001948 <HAL_ADC_MspInit+0x174>)
 80018ac:	f001 fc5e 	bl	800316c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80018b0:	e042      	b.n	8001938 <HAL_ADC_MspInit+0x164>
  else if(hadc->Instance==ADC2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a25      	ldr	r2, [pc, #148]	@ (800194c <HAL_ADC_MspInit+0x178>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d13d      	bne.n	8001938 <HAL_ADC_MspInit+0x164>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80018bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80018c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c8:	f107 0320 	add.w	r3, r7, #32
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fcfb 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_ADC_MspInit+0x108>
      Error_Handler();
 80018d8:	f7ff ff1e 	bl	8001718 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018dc:	4b18      	ldr	r3, [pc, #96]	@ (8001940 <HAL_ADC_MspInit+0x16c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	4a17      	ldr	r2, [pc, #92]	@ (8001940 <HAL_ADC_MspInit+0x16c>)
 80018e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <HAL_ADC_MspInit+0x16c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d10b      	bne.n	8001906 <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f2:	4a14      	ldr	r2, [pc, #80]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 80018f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190a:	4a0e      	ldr	r2, [pc, #56]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001912:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <HAL_ADC_MspInit+0x170>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800191e:	23c0      	movs	r3, #192	@ 0xc0
 8001920:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800192e:	4619      	mov	r1, r3
 8001930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001934:	f001 fc1a 	bl	800316c <HAL_GPIO_Init>
}
 8001938:	bf00      	nop
 800193a:	3778      	adds	r7, #120	@ 0x78
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200002fc 	.word	0x200002fc
 8001944:	40021000 	.word	0x40021000
 8001948:	48000400 	.word	0x48000400
 800194c:	50000100 	.word	0x50000100

08001950 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b09c      	sub	sp, #112	@ 0x70
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001968:	f107 0318 	add.w	r3, r7, #24
 800196c:	2244      	movs	r2, #68	@ 0x44
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f005 fea5 	bl	80076c0 <memset>
  if(hi2c->Instance==I2C1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a30 <HAL_I2C_MspInit+0xe0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d153      	bne.n	8001a28 <HAL_I2C_MspInit+0xd8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001980:	2340      	movs	r3, #64	@ 0x40
 8001982:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001988:	f107 0318 	add.w	r3, r7, #24
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fc9b 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001998:	f7ff febe 	bl	8001718 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <HAL_I2C_MspInit+0xe4>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a0:	4a24      	ldr	r2, [pc, #144]	@ (8001a34 <HAL_I2C_MspInit+0xe4>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a8:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <HAL_I2C_MspInit+0xe4>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <HAL_I2C_MspInit+0xe4>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a34 <HAL_I2C_MspInit+0xe4>)
 80019ba:	f043 0302 	orr.w	r3, r3, #2
 80019be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <HAL_I2C_MspInit+0xe4>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d2:	2312      	movs	r3, #18
 80019d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019de:	2304      	movs	r3, #4
 80019e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019e6:	4619      	mov	r1, r3
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ec:	f001 fbbe 	bl	800316c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f4:	2312      	movs	r3, #18
 80019f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a00:	2304      	movs	r3, #4
 8001a02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <HAL_I2C_MspInit+0xe8>)
 8001a0c:	f001 fbae 	bl	800316c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <HAL_I2C_MspInit+0xe4>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a14:	4a07      	ldr	r2, [pc, #28]	@ (8001a34 <HAL_I2C_MspInit+0xe4>)
 8001a16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_I2C_MspInit+0xe4>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a28:	bf00      	nop
 8001a2a:	3770      	adds	r7, #112	@ 0x70
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40005400 	.word	0x40005400
 8001a34:	40021000 	.word	0x40021000
 8001a38:	48000400 	.word	0x48000400

08001a3c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08e      	sub	sp, #56	@ 0x38
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a4c      	ldr	r2, [pc, #304]	@ (8001b8c <HAL_SPI_MspInit+0x150>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d164      	bne.n	8001b28 <HAL_SPI_MspInit+0xec>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a62:	4a4b      	ldr	r2, [pc, #300]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a6a:	4b49      	ldr	r3, [pc, #292]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a76:	4b46      	ldr	r3, [pc, #280]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	4a45      	ldr	r2, [pc, #276]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a7c:	f043 0320 	orr.w	r3, r3, #32
 8001a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a82:	4b43      	ldr	r3, [pc, #268]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	4b40      	ldr	r3, [pc, #256]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	4a3f      	ldr	r2, [pc, #252]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	4a39      	ldr	r2, [pc, #228]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab2:	4b37      	ldr	r3, [pc, #220]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PF9     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001abe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001acc:	2302      	movs	r3, #2
 8001ace:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ad0:	2305      	movs	r3, #5
 8001ad2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	482e      	ldr	r0, [pc, #184]	@ (8001b94 <HAL_SPI_MspInit+0x158>)
 8001adc:	f001 fb46 	bl	800316c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001ae0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aee:	2302      	movs	r3, #2
 8001af0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af2:	2305      	movs	r3, #5
 8001af4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001afa:	4619      	mov	r1, r3
 8001afc:	4826      	ldr	r0, [pc, #152]	@ (8001b98 <HAL_SPI_MspInit+0x15c>)
 8001afe:	f001 fb35 	bl	800316c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b10:	2302      	movs	r3, #2
 8001b12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b14:	2305      	movs	r3, #5
 8001b16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b22:	f001 fb23 	bl	800316c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b26:	e02d      	b.n	8001b84 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI3)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b9c <HAL_SPI_MspInit+0x160>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d128      	bne.n	8001b84 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b32:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	4a16      	ldr	r2, [pc, #88]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001b38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b3e:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4e:	4a10      	ldr	r2, [pc, #64]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b56:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <HAL_SPI_MspInit+0x154>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b62:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b74:	2306      	movs	r3, #6
 8001b76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4808      	ldr	r0, [pc, #32]	@ (8001ba0 <HAL_SPI_MspInit+0x164>)
 8001b80:	f001 faf4 	bl	800316c <HAL_GPIO_Init>
}
 8001b84:	bf00      	nop
 8001b86:	3738      	adds	r7, #56	@ 0x38
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40003800 	.word	0x40003800
 8001b90:	40021000 	.word	0x40021000
 8001b94:	48001400 	.word	0x48001400
 8001b98:	48000400 	.word	0x48000400
 8001b9c:	40003c00 	.word	0x40003c00
 8001ba0:	48000800 	.word	0x48000800

08001ba4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <HAL_TIM_PWM_MspInit+0x38>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10b      	bne.n	8001bce <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bba:	4a09      	ldr	r2, [pc, #36]	@ (8001be0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bbc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40012c00 	.word	0x40012c00
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a2f      	ldr	r2, [pc, #188]	@ (8001cc0 <HAL_TIM_MspPostInit+0xdc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d157      	bne.n	8001cb6 <HAL_TIM_MspPostInit+0xd2>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <HAL_TIM_MspPostInit+0xe0>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc4 <HAL_TIM_MspPostInit+0xe0>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c12:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc4 <HAL_TIM_MspPostInit+0xe0>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	4b29      	ldr	r3, [pc, #164]	@ (8001cc4 <HAL_TIM_MspPostInit+0xe0>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	4a28      	ldr	r2, [pc, #160]	@ (8001cc4 <HAL_TIM_MspPostInit+0xe0>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2a:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <HAL_TIM_MspPostInit+0xe0>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b23      	ldr	r3, [pc, #140]	@ (8001cc4 <HAL_TIM_MspPostInit+0xe0>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	4a22      	ldr	r2, [pc, #136]	@ (8001cc4 <HAL_TIM_MspPostInit+0xe0>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c42:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <HAL_TIM_MspPostInit+0xe0>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001c60:	2304      	movs	r3, #4
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4817      	ldr	r0, [pc, #92]	@ (8001cc8 <HAL_TIM_MspPostInit+0xe4>)
 8001c6c:	f001 fa7e 	bl	800316c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001c82:	2304      	movs	r3, #4
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480f      	ldr	r0, [pc, #60]	@ (8001ccc <HAL_TIM_MspPostInit+0xe8>)
 8001c8e:	f001 fa6d 	bl	800316c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001c92:	f44f 53b8 	mov.w	r3, #5888	@ 0x1700
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ca4:	2306      	movs	r3, #6
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cb2:	f001 fa5b 	bl	800316c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	@ 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40012c00 	.word	0x40012c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	48000800 	.word	0x48000800
 8001ccc:	48000400 	.word	0x48000400

08001cd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b09a      	sub	sp, #104	@ 0x68
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	2244      	movs	r2, #68	@ 0x44
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f005 fce5 	bl	80076c0 <memset>
  if(huart->Instance==USART2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001d74 <HAL_UART_MspInit+0xa4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d135      	bne.n	8001d6c <HAL_UART_MspInit+0x9c>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d00:	2302      	movs	r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 fadb 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d18:	f7ff fcfe 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1c:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <HAL_UART_MspInit+0xa8>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d20:	4a15      	ldr	r2, [pc, #84]	@ (8001d78 <HAL_UART_MspInit+0xa8>)
 8001d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <HAL_UART_MspInit+0xa8>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d34:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_UART_MspInit+0xa8>)
 8001d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d38:	4a0f      	ldr	r2, [pc, #60]	@ (8001d78 <HAL_UART_MspInit+0xa8>)
 8001d3a:	f043 0302 	orr.w	r3, r3, #2
 8001d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d40:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <HAL_UART_MspInit+0xa8>)
 8001d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001d4c:	2318      	movs	r3, #24
 8001d4e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d64:	4619      	mov	r1, r3
 8001d66:	4805      	ldr	r0, [pc, #20]	@ (8001d7c <HAL_UART_MspInit+0xac>)
 8001d68:	f001 fa00 	bl	800316c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d6c:	bf00      	nop
 8001d6e:	3768      	adds	r7, #104	@ 0x68
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40004400 	.word	0x40004400
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	48000400 	.word	0x48000400

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <NMI_Handler+0x4>

08001d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <MemManage_Handler+0x4>

08001d98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd6:	f000 f891 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <SystemInit+0x20>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dea:	4a05      	ldr	r2, [pc, #20]	@ (8001e00 <SystemInit+0x20>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e04:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e06:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e08:	f7ff ffea 	bl	8001de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e0c:	480c      	ldr	r0, [pc, #48]	@ (8001e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e0e:	490d      	ldr	r1, [pc, #52]	@ (8001e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e10:	4a0d      	ldr	r2, [pc, #52]	@ (8001e48 <LoopForever+0xe>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e24:	4c0a      	ldr	r4, [pc, #40]	@ (8001e50 <LoopForever+0x16>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001e32:	f005 fc4d 	bl	80076d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e36:	f7fe ffb7 	bl	8000da8 <main>

08001e3a <LoopForever>:

LoopForever:
    b LoopForever
 8001e3a:	e7fe      	b.n	8001e3a <LoopForever>
  ldr   r0, =_estack
 8001e3c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e48:	08007958 	.word	0x08007958
  ldr r2, =_sbss
 8001e4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e50:	20000304 	.word	0x20000304

08001e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC1_2_IRQHandler>

08001e56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e60:	2003      	movs	r0, #3
 8001e62:	f001 f951 	bl	8003108 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e66:	200f      	movs	r0, #15
 8001e68:	f000 f80e 	bl	8001e88 <HAL_InitTick>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	e001      	b.n	8001e7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e78:	f7ff fc88 	bl	800178c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e7c:	79fb      	ldrb	r3, [r7, #7]

}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e94:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <HAL_InitTick+0x68>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d022      	beq.n	8001ee2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_InitTick+0x6c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <HAL_InitTick+0x68>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f001 f94e 	bl	8003152 <HAL_SYSTICK_Config>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10f      	bne.n	8001edc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b0f      	cmp	r3, #15
 8001ec0:	d809      	bhi.n	8001ed6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001eca:	f001 f928 	bl	800311e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ece:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <HAL_InitTick+0x70>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	e007      	b.n	8001ee6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	e004      	b.n	8001ee6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e001      	b.n	8001ee6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_IncTick+0x1c>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_IncTick+0x20>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	4a03      	ldr	r2, [pc, #12]	@ (8001f18 <HAL_IncTick+0x1c>)
 8001f0c:	6013      	str	r3, [r2, #0]
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	20000300 	.word	0x20000300
 8001f1c:	20000008 	.word	0x20000008

08001f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b03      	ldr	r3, [pc, #12]	@ (8001f34 <HAL_GetTick+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000300 	.word	0x20000300

08001f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff ffee 	bl	8001f20 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f50:	d004      	beq.n	8001f5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f52:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <HAL_Delay+0x40>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4413      	add	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5c:	bf00      	nop
 8001f5e:	f7ff ffdf 	bl	8001f20 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d8f7      	bhi.n	8001f5e <HAL_Delay+0x26>
  {
  }
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000008 	.word	0x20000008

08001f7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	609a      	str	r2, [r3, #8]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	609a      	str	r2, [r3, #8]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3360      	adds	r3, #96	@ 0x60
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <LL_ADC_SetOffset+0x44>)
 8002006:	4013      	ands	r3, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	4313      	orrs	r3, r2
 8002014:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800201c:	bf00      	nop
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	03fff000 	.word	0x03fff000

0800202c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3360      	adds	r3, #96	@ 0x60
 800203a:	461a      	mov	r2, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3360      	adds	r3, #96	@ 0x60
 8002068:	461a      	mov	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	431a      	orrs	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800208e:	b480      	push	{r7}
 8002090:	b087      	sub	sp, #28
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3360      	adds	r3, #96	@ 0x60
 800209e:	461a      	mov	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020b8:	bf00      	nop
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3360      	adds	r3, #96	@ 0x60
 80020d4:	461a      	mov	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80020ee:	bf00      	nop
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	615a      	str	r2, [r3, #20]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3330      	adds	r3, #48	@ 0x30
 8002130:	461a      	mov	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	4413      	add	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	211f      	movs	r1, #31
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	401a      	ands	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	0e9b      	lsrs	r3, r3, #26
 8002158:	f003 011f 	and.w	r1, r3, #31
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	431a      	orrs	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800216c:	bf00      	nop
 800216e:	371c      	adds	r7, #28
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3314      	adds	r3, #20
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	0e5b      	lsrs	r3, r3, #25
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	4413      	add	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	0d1b      	lsrs	r3, r3, #20
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2107      	movs	r1, #7
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	401a      	ands	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0d1b      	lsrs	r3, r3, #20
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	431a      	orrs	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e8:	43db      	mvns	r3, r3
 80021ea:	401a      	ands	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0318 	and.w	r3, r3, #24
 80021f2:	4908      	ldr	r1, [pc, #32]	@ (8002214 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021f4:	40d9      	lsrs	r1, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	400b      	ands	r3, r1
 80021fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fe:	431a      	orrs	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	0007ffff 	.word	0x0007ffff

08002218 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6093      	str	r3, [r2, #8]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800224c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002250:	d101      	bne.n	8002256 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002274:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002278:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022a0:	d101      	bne.n	80022a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <LL_ADC_IsEnabled+0x18>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <LL_ADC_IsEnabled+0x1a>
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d101      	bne.n	80022f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b08      	cmp	r3, #8
 8002312:	d101      	bne.n	8002318 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b089      	sub	sp, #36	@ 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e167      	b.n	8002612 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff fa3f 	bl	80017d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff67 	bl	800223c <LL_ADC_IsDeepPowerDownEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff4d 	bl	8002218 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff82 	bl	800228c <LL_ADC_IsInternalRegulatorEnabled>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d115      	bne.n	80023ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff66 	bl	8002264 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002398:	4ba0      	ldr	r3, [pc, #640]	@ (800261c <HAL_ADC_Init+0x2f4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	4aa0      	ldr	r2, [pc, #640]	@ (8002620 <HAL_ADC_Init+0x2f8>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	099b      	lsrs	r3, r3, #6
 80023a6:	3301      	adds	r3, #1
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023ac:	e002      	b.n	80023b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f9      	bne.n	80023ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff64 	bl	800228c <LL_ADC_IsInternalRegulatorEnabled>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10d      	bne.n	80023e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ce:	f043 0210 	orr.w	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff75 	bl	80022da <LL_ADC_REG_IsConversionOngoing>
 80023f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 8100 	bne.w	8002600 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f040 80fc 	bne.w	8002600 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002410:	f043 0202 	orr.w	r2, r3, #2
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff49 	bl	80022b4 <LL_ADC_IsEnabled>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d111      	bne.n	800244c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002428:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800242c:	f7ff ff42 	bl	80022b4 <LL_ADC_IsEnabled>
 8002430:	4604      	mov	r4, r0
 8002432:	487c      	ldr	r0, [pc, #496]	@ (8002624 <HAL_ADC_Init+0x2fc>)
 8002434:	f7ff ff3e 	bl	80022b4 <LL_ADC_IsEnabled>
 8002438:	4603      	mov	r3, r0
 800243a:	4323      	orrs	r3, r4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4619      	mov	r1, r3
 8002446:	4878      	ldr	r0, [pc, #480]	@ (8002628 <HAL_ADC_Init+0x300>)
 8002448:	f7ff fd98 	bl	8001f7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7f5b      	ldrb	r3, [r3, #29]
 8002450:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002456:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800245c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002462:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800246a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002476:	2b01      	cmp	r3, #1
 8002478:	d106      	bne.n	8002488 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247e:	3b01      	subs	r3, #1
 8002480:	045b      	lsls	r3, r3, #17
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	4b60      	ldr	r3, [pc, #384]	@ (800262c <HAL_ADC_Init+0x304>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	69b9      	ldr	r1, [r7, #24]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff14 	bl	8002300 <LL_ADC_INJ_IsConversionOngoing>
 80024d8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d16d      	bne.n	80025bc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d16a      	bne.n	80025bc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024ea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024f2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002502:	f023 0302 	bic.w	r3, r3, #2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	430b      	orrs	r3, r1
 800250e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d017      	beq.n	8002548 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002526:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002530:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002534:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6911      	ldr	r1, [r2, #16]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	430b      	orrs	r3, r1
 8002542:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002546:	e013      	b.n	8002570 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002556:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002568:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800256c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002576:	2b01      	cmp	r3, #1
 8002578:	d118      	bne.n	80025ac <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002590:	4311      	orrs	r1, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002596:	4311      	orrs	r1, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800259c:	430a      	orrs	r2, r1
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	e007      	b.n	80025bc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d10c      	bne.n	80025de <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f023 010f 	bic.w	r1, r3, #15
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	1e5a      	subs	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	631a      	str	r2, [r3, #48]	@ 0x30
 80025dc:	e007      	b.n	80025ee <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 020f 	bic.w	r2, r2, #15
 80025ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025fe:	e007      	b.n	8002610 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002604:	f043 0210 	orr.w	r2, r3, #16
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002610:	7ffb      	ldrb	r3, [r7, #31]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3724      	adds	r7, #36	@ 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd90      	pop	{r4, r7, pc}
 800261a:	bf00      	nop
 800261c:	20000000 	.word	0x20000000
 8002620:	053e2d63 	.word	0x053e2d63
 8002624:	50000100 	.word	0x50000100
 8002628:	50000300 	.word	0x50000300
 800262c:	fff04007 	.word	0xfff04007

08002630 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0b6      	sub	sp, #216	@ 0xd8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x22>
 800264e:	2302      	movs	r3, #2
 8002650:	e3c8      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x7b4>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fe3b 	bl	80022da <LL_ADC_REG_IsConversionOngoing>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 83ad 	bne.w	8002dc6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	f7ff fd51 	bl	8002120 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fe29 	bl	80022da <LL_ADC_REG_IsConversionOngoing>
 8002688:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fe35 	bl	8002300 <LL_ADC_INJ_IsConversionOngoing>
 8002696:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800269a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 81d9 	bne.w	8002a56 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f040 81d4 	bne.w	8002a56 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026b6:	d10f      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2200      	movs	r2, #0
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7ff fd58 	bl	8002178 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fd12 	bl	80020fa <LL_ADC_SetSamplingTimeCommonConfig>
 80026d6:	e00e      	b.n	80026f6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6819      	ldr	r1, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	461a      	mov	r2, r3
 80026e6:	f7ff fd47 	bl	8002178 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fd02 	bl	80020fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	08db      	lsrs	r3, r3, #3
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d022      	beq.n	800275e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6919      	ldr	r1, [r3, #16]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002728:	f7ff fc5c 	bl	8001fe4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6919      	ldr	r1, [r3, #16]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	461a      	mov	r2, r3
 800273a:	f7ff fca8 	bl	800208e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800274a:	2b01      	cmp	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x124>
 800274e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002752:	e000      	b.n	8002756 <HAL_ADC_ConfigChannel+0x126>
 8002754:	2300      	movs	r3, #0
 8002756:	461a      	mov	r2, r3
 8002758:	f7ff fcb4 	bl	80020c4 <LL_ADC_SetOffsetSaturation>
 800275c:	e17b      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fc61 	bl	800202c <LL_ADC_GetOffsetChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <HAL_ADC_ConfigChannel+0x15a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fc56 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	0e9b      	lsrs	r3, r3, #26
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	e01e      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x198>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fc4b 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80027b8:	2320      	movs	r3, #32
 80027ba:	e004      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80027bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x1b0>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0e9b      	lsrs	r3, r3, #26
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	e018      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1e2>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80027f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80027fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002804:	2320      	movs	r3, #32
 8002806:	e004      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002808:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002812:	429a      	cmp	r2, r3
 8002814:	d106      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fc1a 	bl	8002058 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2101      	movs	r1, #1
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fbfe 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002830:	4603      	mov	r3, r0
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x220>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2101      	movs	r1, #1
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fbf3 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	f003 021f 	and.w	r2, r3, #31
 800284e:	e01e      	b.n	800288e <HAL_ADC_ConfigChannel+0x25e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2101      	movs	r1, #1
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fbe8 	bl	800202c <LL_ADC_GetOffsetChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800286e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002872:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800287e:	2320      	movs	r3, #32
 8002880:	e004      	b.n	800288c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x276>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	0e9b      	lsrs	r3, r3, #26
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	e018      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x2a8>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80028c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80028ca:	2320      	movs	r3, #32
 80028cc:	e004      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80028ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028d8:	429a      	cmp	r2, r3
 80028da:	d106      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2200      	movs	r2, #0
 80028e2:	2101      	movs	r1, #1
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fbb7 	bl	8002058 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2102      	movs	r1, #2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fb9b 	bl	800202c <LL_ADC_GetOffsetChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x2e6>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2102      	movs	r1, #2
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fb90 	bl	800202c <LL_ADC_GetOffsetChannel>
 800290c:	4603      	mov	r3, r0
 800290e:	0e9b      	lsrs	r3, r3, #26
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	e01e      	b.n	8002954 <HAL_ADC_ConfigChannel+0x324>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2102      	movs	r1, #2
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fb85 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002934:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002938:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800293c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002944:	2320      	movs	r3, #32
 8002946:	e004      	b.n	8002952 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002948:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_ADC_ConfigChannel+0x33c>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	0e9b      	lsrs	r3, r3, #26
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	e016      	b.n	800299a <HAL_ADC_ConfigChannel+0x36a>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800297e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002984:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e004      	b.n	800299a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002990:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800299a:	429a      	cmp	r2, r3
 800299c:	d106      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2200      	movs	r2, #0
 80029a4:	2102      	movs	r1, #2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fb56 	bl	8002058 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2103      	movs	r1, #3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fb3a 	bl	800202c <LL_ADC_GetOffsetChannel>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x3a8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2103      	movs	r1, #3
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fb2f 	bl	800202c <LL_ADC_GetOffsetChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 021f 	and.w	r2, r3, #31
 80029d6:	e017      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x3d8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2103      	movs	r1, #3
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fb24 	bl	800202c <LL_ADC_GetOffsetChannel>
 80029e4:	4603      	mov	r3, r0
 80029e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80029f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029f2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80029f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80029fa:	2320      	movs	r3, #32
 80029fc:	e003      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80029fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x3f0>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	e011      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x414>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e003      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d106      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2103      	movs	r1, #3
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fb01 	bl	8002058 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fc2a 	bl	80022b4 <LL_ADC_IsEnabled>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 8140 	bne.w	8002ce8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6819      	ldr	r1, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	461a      	mov	r2, r3
 8002a76:	f7ff fbab 	bl	80021d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	4a8f      	ldr	r2, [pc, #572]	@ (8002cbc <HAL_ADC_ConfigChannel+0x68c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	f040 8131 	bne.w	8002ce8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x47e>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	0e9b      	lsrs	r3, r3, #26
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2b09      	cmp	r3, #9
 8002aa4:	bf94      	ite	ls
 8002aa6:	2301      	movls	r3, #1
 8002aa8:	2300      	movhi	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	e019      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x4b2>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002abc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002abe:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ac0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e003      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002aca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	2b09      	cmp	r3, #9
 8002ada:	bf94      	ite	ls
 8002adc:	2301      	movls	r3, #1
 8002ade:	2300      	movhi	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d079      	beq.n	8002bda <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d107      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x4d2>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0e9b      	lsrs	r3, r3, #26
 8002af8:	3301      	adds	r3, #1
 8002afa:	069b      	lsls	r3, r3, #26
 8002afc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b00:	e015      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x4fe>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b12:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e003      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	3301      	adds	r3, #1
 8002b28:	069b      	lsls	r3, r3, #26
 8002b2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x51e>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	0e9b      	lsrs	r3, r3, #26
 8002b40:	3301      	adds	r3, #1
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	e017      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x54e>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002b66:	2320      	movs	r3, #32
 8002b68:	e003      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	2101      	movs	r1, #1
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	ea42 0103 	orr.w	r1, r2, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x574>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	0e9b      	lsrs	r3, r3, #26
 8002b94:	3301      	adds	r3, #1
 8002b96:	f003 021f 	and.w	r2, r3, #31
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	051b      	lsls	r3, r3, #20
 8002ba2:	e018      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x5a6>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e003      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f003 021f 	and.w	r2, r3, #31
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd6:	430b      	orrs	r3, r1
 8002bd8:	e081      	b.n	8002cde <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d107      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x5c6>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	0e9b      	lsrs	r3, r3, #26
 8002bec:	3301      	adds	r3, #1
 8002bee:	069b      	lsls	r3, r3, #26
 8002bf0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bf4:	e015      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x5f2>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c06:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e003      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	069b      	lsls	r3, r3, #26
 8002c1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x612>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	0e9b      	lsrs	r3, r3, #26
 8002c34:	3301      	adds	r3, #1
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	e017      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x642>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	61fb      	str	r3, [r7, #28]
  return result;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	e003      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	3301      	adds	r3, #1
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	ea42 0103 	orr.w	r1, r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10d      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x66e>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	0e9b      	lsrs	r3, r3, #26
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f003 021f 	and.w	r2, r3, #31
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	3b1e      	subs	r3, #30
 8002c96:	051b      	lsls	r3, r3, #20
 8002c98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c9c:	e01e      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x6ac>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	613b      	str	r3, [r7, #16]
  return result;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d104      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e006      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x698>
 8002cba:	bf00      	nop
 8002cbc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f003 021f 	and.w	r2, r3, #31
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b1e      	subs	r3, #30
 8002cd6:	051b      	lsls	r3, r3, #20
 8002cd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cdc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7ff fa48 	bl	8002178 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b3f      	ldr	r3, [pc, #252]	@ (8002dec <HAL_ADC_ConfigChannel+0x7bc>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d071      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cf4:	483e      	ldr	r0, [pc, #248]	@ (8002df0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002cf6:	f7ff f967 	bl	8001fc8 <LL_ADC_GetCommonPathInternalCh>
 8002cfa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a3c      	ldr	r2, [pc, #240]	@ (8002df4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_ADC_ConfigChannel+0x6e2>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a3a      	ldr	r2, [pc, #232]	@ (8002df8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d127      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d121      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d26:	d157      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d30:	4619      	mov	r1, r3
 8002d32:	482f      	ldr	r0, [pc, #188]	@ (8002df0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d34:	f7ff f935 	bl	8001fa2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d38:	4b30      	ldr	r3, [pc, #192]	@ (8002dfc <HAL_ADC_ConfigChannel+0x7cc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	4a30      	ldr	r2, [pc, #192]	@ (8002e00 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	099b      	lsrs	r3, r3, #6
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d52:	e002      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f9      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d60:	e03a      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a27      	ldr	r2, [pc, #156]	@ (8002e04 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d113      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10d      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a22      	ldr	r2, [pc, #136]	@ (8002e08 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d02a      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4818      	ldr	r0, [pc, #96]	@ (8002df0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d8e:	f7ff f908 	bl	8001fa2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d92:	e021      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1c      	ldr	r2, [pc, #112]	@ (8002e0c <HAL_ADC_ConfigChannel+0x7dc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d11c      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a16      	ldr	r2, [pc, #88]	@ (8002e08 <HAL_ADC_ConfigChannel+0x7d8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d011      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002db4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002db8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	480c      	ldr	r0, [pc, #48]	@ (8002df0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dc0:	f7ff f8ef 	bl	8001fa2 <LL_ADC_SetCommonPathInternalCh>
 8002dc4:	e008      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dca:	f043 0220 	orr.w	r2, r3, #32
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002de0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	37d8      	adds	r7, #216	@ 0xd8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	80080000 	.word	0x80080000
 8002df0:	50000300 	.word	0x50000300
 8002df4:	c3210000 	.word	0xc3210000
 8002df8:	90c00010 	.word	0x90c00010
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	053e2d63 	.word	0x053e2d63
 8002e04:	c7520000 	.word	0xc7520000
 8002e08:	50000100 	.word	0x50000100
 8002e0c:	cb840000 	.word	0xcb840000

08002e10 <LL_ADC_IsEnabled>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <LL_ADC_IsEnabled+0x18>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <LL_ADC_IsEnabled+0x1a>
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d101      	bne.n	8002e4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b0a1      	sub	sp, #132	@ 0x84
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e08b      	b.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002e82:	2300      	movs	r3, #0
 8002e84:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002e86:	2300      	movs	r3, #0
 8002e88:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e92:	d102      	bne.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e94:	4b41      	ldr	r3, [pc, #260]	@ (8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	e001      	b.n	8002e9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e06a      	b.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ffb9 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 8002ec4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ffb3 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d14c      	bne.n	8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002ed6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d149      	bne.n	8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002edc:	4b30      	ldr	r3, [pc, #192]	@ (8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002ede:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d028      	beq.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ee8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002efa:	035b      	lsls	r3, r3, #13
 8002efc:	430b      	orrs	r3, r1
 8002efe:	431a      	orrs	r2, r3
 8002f00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f08:	f7ff ff82 	bl	8002e10 <LL_ADC_IsEnabled>
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	4823      	ldr	r0, [pc, #140]	@ (8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f10:	f7ff ff7e 	bl	8002e10 <LL_ADC_IsEnabled>
 8002f14:	4603      	mov	r3, r0
 8002f16:	4323      	orrs	r3, r4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d133      	bne.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f24:	f023 030f 	bic.w	r3, r3, #15
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	6811      	ldr	r1, [r2, #0]
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	6892      	ldr	r2, [r2, #8]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	431a      	orrs	r2, r3
 8002f34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f36:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f38:	e024      	b.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f44:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f46:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f4a:	f7ff ff61 	bl	8002e10 <LL_ADC_IsEnabled>
 8002f4e:	4604      	mov	r4, r0
 8002f50:	4812      	ldr	r0, [pc, #72]	@ (8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f52:	f7ff ff5d 	bl	8002e10 <LL_ADC_IsEnabled>
 8002f56:	4603      	mov	r3, r0
 8002f58:	4323      	orrs	r3, r4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d112      	bne.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f66:	f023 030f 	bic.w	r3, r3, #15
 8002f6a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002f6c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f6e:	e009      	b.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002f82:	e000      	b.n	8002f86 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3784      	adds	r7, #132	@ 0x84
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd90      	pop	{r4, r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	50000100 	.word	0x50000100
 8002fa0:	50000300 	.word	0x50000300

08002fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fd6:	4a04      	ldr	r2, [pc, #16]	@ (8002fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	60d3      	str	r3, [r2, #12]
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff0:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <__NVIC_GetPriorityGrouping+0x18>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	f003 0307 	and.w	r3, r3, #7
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003018:	2b00      	cmp	r3, #0
 800301a:	db0a      	blt.n	8003032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	b2da      	uxtb	r2, r3
 8003020:	490c      	ldr	r1, [pc, #48]	@ (8003054 <__NVIC_SetPriority+0x4c>)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	0112      	lsls	r2, r2, #4
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	440b      	add	r3, r1
 800302c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003030:	e00a      	b.n	8003048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4908      	ldr	r1, [pc, #32]	@ (8003058 <__NVIC_SetPriority+0x50>)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	3b04      	subs	r3, #4
 8003040:	0112      	lsls	r2, r2, #4
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	440b      	add	r3, r1
 8003046:	761a      	strb	r2, [r3, #24]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000e100 	.word	0xe000e100
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	@ 0x24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f1c3 0307 	rsb	r3, r3, #7
 8003076:	2b04      	cmp	r3, #4
 8003078:	bf28      	it	cs
 800307a:	2304      	movcs	r3, #4
 800307c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3304      	adds	r3, #4
 8003082:	2b06      	cmp	r3, #6
 8003084:	d902      	bls.n	800308c <NVIC_EncodePriority+0x30>
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3b03      	subs	r3, #3
 800308a:	e000      	b.n	800308e <NVIC_EncodePriority+0x32>
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	401a      	ands	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	43d9      	mvns	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	4313      	orrs	r3, r2
         );
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	@ 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d4:	d301      	bcc.n	80030da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d6:	2301      	movs	r3, #1
 80030d8:	e00f      	b.n	80030fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030da:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <SysTick_Config+0x40>)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030e2:	210f      	movs	r1, #15
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030e8:	f7ff ff8e 	bl	8003008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ec:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <SysTick_Config+0x40>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f2:	4b04      	ldr	r3, [pc, #16]	@ (8003104 <SysTick_Config+0x40>)
 80030f4:	2207      	movs	r2, #7
 80030f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	e000e010 	.word	0xe000e010

08003108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ff47 	bl	8002fa4 <__NVIC_SetPriorityGrouping>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	4603      	mov	r3, r0
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800312c:	f7ff ff5e 	bl	8002fec <__NVIC_GetPriorityGrouping>
 8003130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	6978      	ldr	r0, [r7, #20]
 8003138:	f7ff ff90 	bl	800305c <NVIC_EncodePriority>
 800313c:	4602      	mov	r2, r0
 800313e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff5f 	bl	8003008 <__NVIC_SetPriority>
}
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ffb2 	bl	80030c4 <SysTick_Config>
 8003160:	4603      	mov	r3, r0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800317a:	e15a      	b.n	8003432 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fa01 f303 	lsl.w	r3, r1, r3
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 814c 	beq.w	800342c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b01      	cmp	r3, #1
 800319e:	d005      	beq.n	80031ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d130      	bne.n	800320e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031e2:	2201      	movs	r2, #1
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 0201 	and.w	r2, r3, #1
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b03      	cmp	r3, #3
 8003218:	d017      	beq.n	800324a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2203      	movs	r2, #3
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d123      	bne.n	800329e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	08da      	lsrs	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3208      	adds	r2, #8
 800325e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	08da      	lsrs	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3208      	adds	r2, #8
 8003298:	6939      	ldr	r1, [r7, #16]
 800329a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2203      	movs	r2, #3
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0203 	and.w	r2, r3, #3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80a6 	beq.w	800342c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e0:	4b5b      	ldr	r3, [pc, #364]	@ (8003450 <HAL_GPIO_Init+0x2e4>)
 80032e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003450 <HAL_GPIO_Init+0x2e4>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80032ec:	4b58      	ldr	r3, [pc, #352]	@ (8003450 <HAL_GPIO_Init+0x2e4>)
 80032ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f8:	4a56      	ldr	r2, [pc, #344]	@ (8003454 <HAL_GPIO_Init+0x2e8>)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	3302      	adds	r3, #2
 8003300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	220f      	movs	r2, #15
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003322:	d01f      	beq.n	8003364 <HAL_GPIO_Init+0x1f8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a4c      	ldr	r2, [pc, #304]	@ (8003458 <HAL_GPIO_Init+0x2ec>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d019      	beq.n	8003360 <HAL_GPIO_Init+0x1f4>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a4b      	ldr	r2, [pc, #300]	@ (800345c <HAL_GPIO_Init+0x2f0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d013      	beq.n	800335c <HAL_GPIO_Init+0x1f0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a4a      	ldr	r2, [pc, #296]	@ (8003460 <HAL_GPIO_Init+0x2f4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00d      	beq.n	8003358 <HAL_GPIO_Init+0x1ec>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a49      	ldr	r2, [pc, #292]	@ (8003464 <HAL_GPIO_Init+0x2f8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d007      	beq.n	8003354 <HAL_GPIO_Init+0x1e8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a48      	ldr	r2, [pc, #288]	@ (8003468 <HAL_GPIO_Init+0x2fc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_GPIO_Init+0x1e4>
 800334c:	2305      	movs	r3, #5
 800334e:	e00a      	b.n	8003366 <HAL_GPIO_Init+0x1fa>
 8003350:	2306      	movs	r3, #6
 8003352:	e008      	b.n	8003366 <HAL_GPIO_Init+0x1fa>
 8003354:	2304      	movs	r3, #4
 8003356:	e006      	b.n	8003366 <HAL_GPIO_Init+0x1fa>
 8003358:	2303      	movs	r3, #3
 800335a:	e004      	b.n	8003366 <HAL_GPIO_Init+0x1fa>
 800335c:	2302      	movs	r3, #2
 800335e:	e002      	b.n	8003366 <HAL_GPIO_Init+0x1fa>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_GPIO_Init+0x1fa>
 8003364:	2300      	movs	r3, #0
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	f002 0203 	and.w	r2, r2, #3
 800336c:	0092      	lsls	r2, r2, #2
 800336e:	4093      	lsls	r3, r2
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003376:	4937      	ldr	r1, [pc, #220]	@ (8003454 <HAL_GPIO_Init+0x2e8>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003384:	4b39      	ldr	r3, [pc, #228]	@ (800346c <HAL_GPIO_Init+0x300>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	43db      	mvns	r3, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033a8:	4a30      	ldr	r2, [pc, #192]	@ (800346c <HAL_GPIO_Init+0x300>)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033ae:	4b2f      	ldr	r3, [pc, #188]	@ (800346c <HAL_GPIO_Init+0x300>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033d2:	4a26      	ldr	r2, [pc, #152]	@ (800346c <HAL_GPIO_Init+0x300>)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80033d8:	4b24      	ldr	r3, [pc, #144]	@ (800346c <HAL_GPIO_Init+0x300>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4013      	ands	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033fc:	4a1b      	ldr	r2, [pc, #108]	@ (800346c <HAL_GPIO_Init+0x300>)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003402:	4b1a      	ldr	r3, [pc, #104]	@ (800346c <HAL_GPIO_Init+0x300>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	43db      	mvns	r3, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4013      	ands	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003426:	4a11      	ldr	r2, [pc, #68]	@ (800346c <HAL_GPIO_Init+0x300>)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	3301      	adds	r3, #1
 8003430:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	f47f ae9d 	bne.w	800317c <HAL_GPIO_Init+0x10>
  }
}
 8003442:	bf00      	nop
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40021000 	.word	0x40021000
 8003454:	40010000 	.word	0x40010000
 8003458:	48000400 	.word	0x48000400
 800345c:	48000800 	.word	0x48000800
 8003460:	48000c00 	.word	0x48000c00
 8003464:	48001000 	.word	0x48001000
 8003468:	48001400 	.word	0x48001400
 800346c:	40010400 	.word	0x40010400

08003470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	807b      	strh	r3, [r7, #2]
 800347c:	4613      	mov	r3, r2
 800347e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003480:	787b      	ldrb	r3, [r7, #1]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800348c:	e002      	b.n	8003494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800348e:	887a      	ldrh	r2, [r7, #2]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e08d      	b.n	80035ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fe fa42 	bl	8001950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	@ 0x24
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003500:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	e006      	b.n	8003528 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003526:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d108      	bne.n	8003542 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	e007      	b.n	8003552 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003550:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003564:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003574:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69d9      	ldr	r1, [r3, #28]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1a      	ldr	r2, [r3, #32]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d138      	bne.n	800365e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e032      	b.n	8003660 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2224      	movs	r2, #36	@ 0x24
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003628:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0201 	orr.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	e000      	b.n	8003660 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800365e:	2302      	movs	r3, #2
  }
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b20      	cmp	r3, #32
 8003680:	d139      	bne.n	80036f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800368c:	2302      	movs	r3, #2
 800368e:	e033      	b.n	80036f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	@ 0x24
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e000      	b.n	80036f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
  }
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d141      	bne.n	8003796 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003712:	4b4b      	ldr	r3, [pc, #300]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800371a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800371e:	d131      	bne.n	8003784 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003720:	4b47      	ldr	r3, [pc, #284]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003726:	4a46      	ldr	r2, [pc, #280]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800372c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003730:	4b43      	ldr	r3, [pc, #268]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003738:	4a41      	ldr	r2, [pc, #260]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800373e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003740:	4b40      	ldr	r3, [pc, #256]	@ (8003844 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2232      	movs	r2, #50	@ 0x32
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	4a3f      	ldr	r2, [pc, #252]	@ (8003848 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	0c9b      	lsrs	r3, r3, #18
 8003752:	3301      	adds	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003756:	e002      	b.n	800375e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3b01      	subs	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375e:	4b38      	ldr	r3, [pc, #224]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800376a:	d102      	bne.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f2      	bne.n	8003758 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003772:	4b33      	ldr	r3, [pc, #204]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800377e:	d158      	bne.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e057      	b.n	8003834 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003784:	4b2e      	ldr	r3, [pc, #184]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800378a:	4a2d      	ldr	r2, [pc, #180]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003790:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003794:	e04d      	b.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800379c:	d141      	bne.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800379e:	4b28      	ldr	r3, [pc, #160]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037aa:	d131      	bne.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037ac:	4b24      	ldr	r3, [pc, #144]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037b2:	4a23      	ldr	r2, [pc, #140]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037bc:	4b20      	ldr	r3, [pc, #128]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003844 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2232      	movs	r2, #50	@ 0x32
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003848 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	0c9b      	lsrs	r3, r3, #18
 80037de:	3301      	adds	r3, #1
 80037e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e2:	e002      	b.n	80037ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ea:	4b15      	ldr	r3, [pc, #84]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f6:	d102      	bne.n	80037fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f2      	bne.n	80037e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037fe:	4b10      	ldr	r3, [pc, #64]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800380a:	d112      	bne.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e011      	b.n	8003834 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003810:	4b0b      	ldr	r3, [pc, #44]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003816:	4a0a      	ldr	r2, [pc, #40]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003820:	e007      	b.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003822:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800382a:	4a05      	ldr	r2, [pc, #20]	@ (8003840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003830:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	40007000 	.word	0x40007000
 8003844:	20000000 	.word	0x20000000
 8003848:	431bde83 	.word	0x431bde83

0800384c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003850:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a04      	ldr	r2, [pc, #16]	@ (8003868 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800385a:	6093      	str	r3, [r2, #8]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40007000 	.word	0x40007000

0800386c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e2fe      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d075      	beq.n	8003976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800388a:	4b97      	ldr	r3, [pc, #604]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003894:	4b94      	ldr	r3, [pc, #592]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	d102      	bne.n	80038aa <HAL_RCC_OscConfig+0x3e>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d002      	beq.n	80038b0 <HAL_RCC_OscConfig+0x44>
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d10b      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	4b8d      	ldr	r3, [pc, #564]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d05b      	beq.n	8003974 <HAL_RCC_OscConfig+0x108>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d157      	bne.n	8003974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e2d9      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d0:	d106      	bne.n	80038e0 <HAL_RCC_OscConfig+0x74>
 80038d2:	4b85      	ldr	r3, [pc, #532]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a84      	ldr	r2, [pc, #528]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e01d      	b.n	800391c <HAL_RCC_OscConfig+0xb0>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e8:	d10c      	bne.n	8003904 <HAL_RCC_OscConfig+0x98>
 80038ea:	4b7f      	ldr	r3, [pc, #508]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a7e      	ldr	r2, [pc, #504]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 80038f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a7b      	ldr	r2, [pc, #492]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e00b      	b.n	800391c <HAL_RCC_OscConfig+0xb0>
 8003904:	4b78      	ldr	r3, [pc, #480]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a77      	ldr	r2, [pc, #476]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 800390a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b75      	ldr	r3, [pc, #468]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a74      	ldr	r2, [pc, #464]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800391a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d013      	beq.n	800394c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fe fafc 	bl	8001f20 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7fe faf8 	bl	8001f20 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	@ 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e29e      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800393e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0xc0>
 800394a:	e014      	b.n	8003976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fe fae8 	bl	8001f20 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003954:	f7fe fae4 	bl	8001f20 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	@ 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e28a      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003966:	4b60      	ldr	r3, [pc, #384]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0xe8>
 8003972:	e000      	b.n	8003976 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d075      	beq.n	8003a6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003982:	4b59      	ldr	r3, [pc, #356]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800398c:	4b56      	ldr	r3, [pc, #344]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b0c      	cmp	r3, #12
 800399a:	d102      	bne.n	80039a2 <HAL_RCC_OscConfig+0x136>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d002      	beq.n	80039a8 <HAL_RCC_OscConfig+0x13c>
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d11f      	bne.n	80039e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a8:	4b4f      	ldr	r3, [pc, #316]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_OscConfig+0x154>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e25d      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c0:	4b49      	ldr	r3, [pc, #292]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	4946      	ldr	r1, [pc, #280]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039d4:	4b45      	ldr	r3, [pc, #276]	@ (8003aec <HAL_RCC_OscConfig+0x280>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fe fa55 	bl	8001e88 <HAL_InitTick>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d043      	beq.n	8003a6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e249      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d023      	beq.n	8003a38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 80039f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe fa90 	bl	8001f20 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a04:	f7fe fa8c 	bl	8001f20 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e232      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a16:	4b34      	ldr	r3, [pc, #208]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a22:	4b31      	ldr	r3, [pc, #196]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	061b      	lsls	r3, r3, #24
 8003a30:	492d      	ldr	r1, [pc, #180]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	604b      	str	r3, [r1, #4]
 8003a36:	e01a      	b.n	8003a6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a38:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003a3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fe fa6c 	bl	8001f20 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4c:	f7fe fa68 	bl	8001f20 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e20e      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a5e:	4b22      	ldr	r3, [pc, #136]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x1e0>
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d041      	beq.n	8003afe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01c      	beq.n	8003abc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a82:	4b19      	ldr	r3, [pc, #100]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a88:	4a17      	ldr	r2, [pc, #92]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fe fa45 	bl	8001f20 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9a:	f7fe fa41 	bl	8001f20 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1e7      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0ef      	beq.n	8003a9a <HAL_RCC_OscConfig+0x22e>
 8003aba:	e020      	b.n	8003afe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003abc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ac2:	4a09      	ldr	r2, [pc, #36]	@ (8003ae8 <HAL_RCC_OscConfig+0x27c>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fe fa28 	bl	8001f20 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ad2:	e00d      	b.n	8003af0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad4:	f7fe fa24 	bl	8001f20 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d906      	bls.n	8003af0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1ca      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003af0:	4b8c      	ldr	r3, [pc, #560]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1ea      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 80a6 	beq.w	8003c58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b10:	4b84      	ldr	r3, [pc, #528]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_OscConfig+0x2b4>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x2b6>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b26:	4b7f      	ldr	r3, [pc, #508]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b32:	4b7c      	ldr	r3, [pc, #496]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b42:	4b79      	ldr	r3, [pc, #484]	@ (8003d28 <HAL_RCC_OscConfig+0x4bc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d118      	bne.n	8003b80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b4e:	4b76      	ldr	r3, [pc, #472]	@ (8003d28 <HAL_RCC_OscConfig+0x4bc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a75      	ldr	r2, [pc, #468]	@ (8003d28 <HAL_RCC_OscConfig+0x4bc>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5a:	f7fe f9e1 	bl	8001f20 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b62:	f7fe f9dd 	bl	8001f20 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e183      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b74:	4b6c      	ldr	r3, [pc, #432]	@ (8003d28 <HAL_RCC_OscConfig+0x4bc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d108      	bne.n	8003b9a <HAL_RCC_OscConfig+0x32e>
 8003b88:	4b66      	ldr	r3, [pc, #408]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8e:	4a65      	ldr	r2, [pc, #404]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b98:	e024      	b.n	8003be4 <HAL_RCC_OscConfig+0x378>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	d110      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x358>
 8003ba2:	4b60      	ldr	r3, [pc, #384]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba8:	4a5e      	ldr	r2, [pc, #376]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb8:	4a5a      	ldr	r2, [pc, #360]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bc2:	e00f      	b.n	8003be4 <HAL_RCC_OscConfig+0x378>
 8003bc4:	4b57      	ldr	r3, [pc, #348]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bca:	4a56      	ldr	r2, [pc, #344]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bd4:	4b53      	ldr	r3, [pc, #332]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bda:	4a52      	ldr	r2, [pc, #328]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d016      	beq.n	8003c1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bec:	f7fe f998 	bl	8001f20 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf4:	f7fe f994 	bl	8001f20 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e138      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0a:	4b46      	ldr	r3, [pc, #280]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0ed      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x388>
 8003c18:	e015      	b.n	8003c46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1a:	f7fe f981 	bl	8001f20 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c20:	e00a      	b.n	8003c38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c22:	f7fe f97d 	bl	8001f20 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e121      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c38:	4b3a      	ldr	r3, [pc, #232]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1ed      	bne.n	8003c22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c46:	7ffb      	ldrb	r3, [r7, #31]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d105      	bne.n	8003c58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4c:	4b35      	ldr	r3, [pc, #212]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c50:	4a34      	ldr	r2, [pc, #208]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c56:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d03c      	beq.n	8003cde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01c      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c72:	4a2c      	ldr	r2, [pc, #176]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fe f950 	bl	8001f20 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c84:	f7fe f94c 	bl	8001f20 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e0f2      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c96:	4b23      	ldr	r3, [pc, #140]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ef      	beq.n	8003c84 <HAL_RCC_OscConfig+0x418>
 8003ca4:	e01b      	b.n	8003cde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cac:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb6:	f7fe f933 	bl	8001f20 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cbe:	f7fe f92f 	bl	8001f20 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e0d5      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cd0:	4b14      	ldr	r3, [pc, #80]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1ef      	bne.n	8003cbe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80c9 	beq.w	8003e7a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	f000 8083 	beq.w	8003dfc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d15e      	bne.n	8003dbc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfe:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a08      	ldr	r2, [pc, #32]	@ (8003d24 <HAL_RCC_OscConfig+0x4b8>)
 8003d04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fe f909 	bl	8001f20 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d10:	e00c      	b.n	8003d2c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fe f905 	bl	8001f20 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d905      	bls.n	8003d2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e0ab      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2c:	4b55      	ldr	r3, [pc, #340]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ec      	bne.n	8003d12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d38:	4b52      	ldr	r3, [pc, #328]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	4b52      	ldr	r3, [pc, #328]	@ (8003e88 <HAL_RCC_OscConfig+0x61c>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6a11      	ldr	r1, [r2, #32]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d48:	3a01      	subs	r2, #1
 8003d4a:	0112      	lsls	r2, r2, #4
 8003d4c:	4311      	orrs	r1, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003d52:	0212      	lsls	r2, r2, #8
 8003d54:	4311      	orrs	r1, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d5a:	0852      	lsrs	r2, r2, #1
 8003d5c:	3a01      	subs	r2, #1
 8003d5e:	0552      	lsls	r2, r2, #21
 8003d60:	4311      	orrs	r1, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d66:	0852      	lsrs	r2, r2, #1
 8003d68:	3a01      	subs	r2, #1
 8003d6a:	0652      	lsls	r2, r2, #25
 8003d6c:	4311      	orrs	r1, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d72:	06d2      	lsls	r2, r2, #27
 8003d74:	430a      	orrs	r2, r1
 8003d76:	4943      	ldr	r1, [pc, #268]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d7c:	4b41      	ldr	r3, [pc, #260]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a40      	ldr	r2, [pc, #256]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d88:	4b3e      	ldr	r3, [pc, #248]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a3d      	ldr	r2, [pc, #244]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe f8c4 	bl	8001f20 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fe f8c0 	bl	8001f20 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e066      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dae:	4b35      	ldr	r3, [pc, #212]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x530>
 8003dba:	e05e      	b.n	8003e7a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbc:	4b31      	ldr	r3, [pc, #196]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a30      	ldr	r2, [pc, #192]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe f8aa 	bl	8001f20 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fe f8a6 	bl	8001f20 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e04c      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de2:	4b28      	ldr	r3, [pc, #160]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003dee:	4b25      	ldr	r3, [pc, #148]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	4924      	ldr	r1, [pc, #144]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003df4:	4b25      	ldr	r3, [pc, #148]	@ (8003e8c <HAL_RCC_OscConfig+0x620>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	60cb      	str	r3, [r1, #12]
 8003dfa:	e03e      	b.n	8003e7a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e039      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e08:	4b1e      	ldr	r3, [pc, #120]	@ (8003e84 <HAL_RCC_OscConfig+0x618>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f003 0203 	and.w	r2, r3, #3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d12c      	bne.n	8003e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	3b01      	subs	r3, #1
 8003e28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d123      	bne.n	8003e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d11b      	bne.n	8003e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d113      	bne.n	8003e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d109      	bne.n	8003e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	019f800c 	.word	0x019f800c
 8003e8c:	feeefffc 	.word	0xfeeefffc

08003e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e11e      	b.n	80040e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b91      	ldr	r3, [pc, #580]	@ (80040f0 <HAL_RCC_ClockConfig+0x260>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d910      	bls.n	8003ed8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b8e      	ldr	r3, [pc, #568]	@ (80040f0 <HAL_RCC_ClockConfig+0x260>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 020f 	bic.w	r2, r3, #15
 8003ebe:	498c      	ldr	r1, [pc, #560]	@ (80040f0 <HAL_RCC_ClockConfig+0x260>)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec6:	4b8a      	ldr	r3, [pc, #552]	@ (80040f0 <HAL_RCC_ClockConfig+0x260>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e106      	b.n	80040e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d073      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d129      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eec:	4b81      	ldr	r3, [pc, #516]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0f4      	b.n	80040e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003efc:	f000 f99e 	bl	800423c <RCC_GetSysClockFreqFromPLLSource>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4a7c      	ldr	r2, [pc, #496]	@ (80040f8 <HAL_RCC_ClockConfig+0x268>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d93f      	bls.n	8003f8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d033      	beq.n	8003f8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d12f      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f2a:	4b72      	ldr	r3, [pc, #456]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f32:	4a70      	ldr	r2, [pc, #448]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f3a:	2380      	movs	r3, #128	@ 0x80
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	e024      	b.n	8003f8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f48:	4b6a      	ldr	r3, [pc, #424]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0c6      	b.n	80040e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f58:	4b66      	ldr	r3, [pc, #408]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0be      	b.n	80040e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f68:	f000 f8ce 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4a61      	ldr	r2, [pc, #388]	@ (80040f8 <HAL_RCC_ClockConfig+0x268>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d909      	bls.n	8003f8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f76:	4b5f      	ldr	r3, [pc, #380]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f7e:	4a5d      	ldr	r2, [pc, #372]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f86:	2380      	movs	r3, #128	@ 0x80
 8003f88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f8a:	4b5a      	ldr	r3, [pc, #360]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f023 0203 	bic.w	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4957      	ldr	r1, [pc, #348]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9c:	f7fd ffc0 	bl	8001f20 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	e00a      	b.n	8003fba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa4:	f7fd ffbc 	bl	8001f20 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e095      	b.n	80040e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	4b4e      	ldr	r3, [pc, #312]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 020c 	and.w	r2, r3, #12
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d1eb      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d023      	beq.n	8004020 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe4:	4b43      	ldr	r3, [pc, #268]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a42      	ldr	r2, [pc, #264]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003fea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004004:	4a3b      	ldr	r2, [pc, #236]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8004006:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800400a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b39      	ldr	r3, [pc, #228]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4936      	ldr	r1, [pc, #216]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
 800401e:	e008      	b.n	8004032 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b80      	cmp	r3, #128	@ 0x80
 8004024:	d105      	bne.n	8004032 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004026:	4b33      	ldr	r3, [pc, #204]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	4a32      	ldr	r2, [pc, #200]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 800402c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004030:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004032:	4b2f      	ldr	r3, [pc, #188]	@ (80040f0 <HAL_RCC_ClockConfig+0x260>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d21d      	bcs.n	800407c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004040:	4b2b      	ldr	r3, [pc, #172]	@ (80040f0 <HAL_RCC_ClockConfig+0x260>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 020f 	bic.w	r2, r3, #15
 8004048:	4929      	ldr	r1, [pc, #164]	@ (80040f0 <HAL_RCC_ClockConfig+0x260>)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	4313      	orrs	r3, r2
 800404e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004050:	f7fd ff66 	bl	8001f20 <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	e00a      	b.n	800406e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004058:	f7fd ff62 	bl	8001f20 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e03b      	b.n	80040e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b20      	ldr	r3, [pc, #128]	@ (80040f0 <HAL_RCC_ClockConfig+0x260>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d1ed      	bne.n	8004058 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004088:	4b1a      	ldr	r3, [pc, #104]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4917      	ldr	r1, [pc, #92]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a6:	4b13      	ldr	r3, [pc, #76]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	490f      	ldr	r1, [pc, #60]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040ba:	f000 f825 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 80040be:	4602      	mov	r2, r0
 80040c0:	4b0c      	ldr	r3, [pc, #48]	@ (80040f4 <HAL_RCC_ClockConfig+0x264>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	490c      	ldr	r1, [pc, #48]	@ (80040fc <HAL_RCC_ClockConfig+0x26c>)
 80040cc:	5ccb      	ldrb	r3, [r1, r3]
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	fa22 f303 	lsr.w	r3, r2, r3
 80040d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004100 <HAL_RCC_ClockConfig+0x270>)
 80040d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040da:	4b0a      	ldr	r3, [pc, #40]	@ (8004104 <HAL_RCC_ClockConfig+0x274>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fd fed2 	bl	8001e88 <HAL_InitTick>
 80040e4:	4603      	mov	r3, r0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40022000 	.word	0x40022000
 80040f4:	40021000 	.word	0x40021000
 80040f8:	04c4b400 	.word	0x04c4b400
 80040fc:	08007730 	.word	0x08007730
 8004100:	20000000 	.word	0x20000000
 8004104:	20000004 	.word	0x20000004

08004108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800410e:	4b2c      	ldr	r3, [pc, #176]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b04      	cmp	r3, #4
 8004118:	d102      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800411a:	4b2a      	ldr	r3, [pc, #168]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	e047      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004120:	4b27      	ldr	r3, [pc, #156]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	2b08      	cmp	r3, #8
 800412a:	d102      	bne.n	8004132 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800412c:	4b26      	ldr	r3, [pc, #152]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	e03e      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004132:	4b23      	ldr	r3, [pc, #140]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d136      	bne.n	80041ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800413e:	4b20      	ldr	r3, [pc, #128]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004148:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	3301      	adds	r3, #1
 8004154:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d10c      	bne.n	8004176 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800415c:	4a1a      	ldr	r2, [pc, #104]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	4a16      	ldr	r2, [pc, #88]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004166:	68d2      	ldr	r2, [r2, #12]
 8004168:	0a12      	lsrs	r2, r2, #8
 800416a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	617b      	str	r3, [r7, #20]
      break;
 8004174:	e00c      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004176:	4a13      	ldr	r2, [pc, #76]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	fbb2 f3f3 	udiv	r3, r2, r3
 800417e:	4a10      	ldr	r2, [pc, #64]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004180:	68d2      	ldr	r2, [r2, #12]
 8004182:	0a12      	lsrs	r2, r2, #8
 8004184:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004188:	fb02 f303 	mul.w	r3, r2, r3
 800418c:	617b      	str	r3, [r7, #20]
      break;
 800418e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004190:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	0e5b      	lsrs	r3, r3, #25
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	3301      	adds	r3, #1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	e001      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041b0:	693b      	ldr	r3, [r7, #16]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	00f42400 	.word	0x00f42400
 80041c8:	007a1200 	.word	0x007a1200

080041cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d0:	4b03      	ldr	r3, [pc, #12]	@ (80041e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000000 	.word	0x20000000

080041e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041e8:	f7ff fff0 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4904      	ldr	r1, [pc, #16]	@ (800420c <HAL_RCC_GetPCLK1Freq+0x28>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004204:	4618      	mov	r0, r3
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000
 800420c:	08007740 	.word	0x08007740

08004210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004214:	f7ff ffda 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	0adb      	lsrs	r3, r3, #11
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	4904      	ldr	r1, [pc, #16]	@ (8004238 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004226:	5ccb      	ldrb	r3, [r1, r3]
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004230:	4618      	mov	r0, r3
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000
 8004238:	08007740 	.word	0x08007740

0800423c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004242:	4b1e      	ldr	r3, [pc, #120]	@ (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800424c:	4b1b      	ldr	r3, [pc, #108]	@ (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b03      	cmp	r3, #3
 800425e:	d10c      	bne.n	800427a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004260:	4a17      	ldr	r2, [pc, #92]	@ (80042c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	4a14      	ldr	r2, [pc, #80]	@ (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800426a:	68d2      	ldr	r2, [r2, #12]
 800426c:	0a12      	lsrs	r2, r2, #8
 800426e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	617b      	str	r3, [r7, #20]
    break;
 8004278:	e00c      	b.n	8004294 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800427a:	4a12      	ldr	r2, [pc, #72]	@ (80042c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004282:	4a0e      	ldr	r2, [pc, #56]	@ (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004284:	68d2      	ldr	r2, [r2, #12]
 8004286:	0a12      	lsrs	r2, r2, #8
 8004288:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800428c:	fb02 f303 	mul.w	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]
    break;
 8004292:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004294:	4b09      	ldr	r3, [pc, #36]	@ (80042bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	0e5b      	lsrs	r3, r3, #25
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	3301      	adds	r3, #1
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80042ae:	687b      	ldr	r3, [r7, #4]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	40021000 	.word	0x40021000
 80042c0:	007a1200 	.word	0x007a1200
 80042c4:	00f42400 	.word	0x00f42400

080042c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042d0:	2300      	movs	r3, #0
 80042d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042d4:	2300      	movs	r3, #0
 80042d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8098 	beq.w	8004416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ea:	4b43      	ldr	r3, [pc, #268]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10d      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	4b40      	ldr	r3, [pc, #256]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fa:	4a3f      	ldr	r2, [pc, #252]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004300:	6593      	str	r3, [r2, #88]	@ 0x58
 8004302:	4b3d      	ldr	r3, [pc, #244]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430e:	2301      	movs	r3, #1
 8004310:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004312:	4b3a      	ldr	r3, [pc, #232]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a39      	ldr	r2, [pc, #228]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800431c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800431e:	f7fd fdff 	bl	8001f20 <HAL_GetTick>
 8004322:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004324:	e009      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004326:	f7fd fdfb 	bl	8001f20 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d902      	bls.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	74fb      	strb	r3, [r7, #19]
        break;
 8004338:	e005      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800433a:	4b30      	ldr	r3, [pc, #192]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0ef      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004346:	7cfb      	ldrb	r3, [r7, #19]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d159      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800434c:	4b2a      	ldr	r3, [pc, #168]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004356:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01e      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	429a      	cmp	r2, r3
 8004366:	d019      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004368:	4b23      	ldr	r3, [pc, #140]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004372:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004374:	4b20      	ldr	r3, [pc, #128]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437a:	4a1f      	ldr	r2, [pc, #124]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800437c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004384:	4b1c      	ldr	r3, [pc, #112]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438a:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800438c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004394:	4a18      	ldr	r2, [pc, #96]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d016      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fd fdbb 	bl	8001f20 <HAL_GetTick>
 80043aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ac:	e00b      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ae:	f7fd fdb7 	bl	8001f20 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043bc:	4293      	cmp	r3, r2
 80043be:	d902      	bls.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	74fb      	strb	r3, [r7, #19]
            break;
 80043c4:	e006      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c6:	4b0c      	ldr	r3, [pc, #48]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ec      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043da:	4b07      	ldr	r3, [pc, #28]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	4903      	ldr	r1, [pc, #12]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043f0:	e008      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043f2:	7cfb      	ldrb	r3, [r7, #19]
 80043f4:	74bb      	strb	r3, [r7, #18]
 80043f6:	e005      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004404:	7c7b      	ldrb	r3, [r7, #17]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d105      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4ba6      	ldr	r3, [pc, #664]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440e:	4aa5      	ldr	r2, [pc, #660]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004414:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004422:	4ba0      	ldr	r3, [pc, #640]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004428:	f023 0203 	bic.w	r2, r3, #3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	499c      	ldr	r1, [pc, #624]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004444:	4b97      	ldr	r3, [pc, #604]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444a:	f023 020c 	bic.w	r2, r3, #12
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4994      	ldr	r1, [pc, #592]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004466:	4b8f      	ldr	r3, [pc, #572]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	498b      	ldr	r1, [pc, #556]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004488:	4b86      	ldr	r3, [pc, #536]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	4983      	ldr	r1, [pc, #524]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044aa:	4b7e      	ldr	r3, [pc, #504]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	497a      	ldr	r1, [pc, #488]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044cc:	4b75      	ldr	r3, [pc, #468]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	4972      	ldr	r1, [pc, #456]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044ee:	4b6d      	ldr	r3, [pc, #436]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	4969      	ldr	r1, [pc, #420]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004510:	4b64      	ldr	r3, [pc, #400]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004516:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	4961      	ldr	r1, [pc, #388]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004532:	4b5c      	ldr	r3, [pc, #368]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004538:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	4958      	ldr	r1, [pc, #352]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004550:	2b00      	cmp	r3, #0
 8004552:	d015      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004554:	4b53      	ldr	r3, [pc, #332]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004562:	4950      	ldr	r1, [pc, #320]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004572:	d105      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004574:	4b4b      	ldr	r3, [pc, #300]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a4a      	ldr	r2, [pc, #296]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800457e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004588:	2b00      	cmp	r3, #0
 800458a:	d015      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800458c:	4b45      	ldr	r3, [pc, #276]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004592:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	4942      	ldr	r1, [pc, #264]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045aa:	d105      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ac:	4b3d      	ldr	r3, [pc, #244]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4a3c      	ldr	r2, [pc, #240]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045b6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d015      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045c4:	4b37      	ldr	r3, [pc, #220]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	4934      	ldr	r1, [pc, #208]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045e2:	d105      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e4:	4b2f      	ldr	r3, [pc, #188]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a2e      	ldr	r2, [pc, #184]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d015      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045fc:	4b29      	ldr	r3, [pc, #164]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004602:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460a:	4926      	ldr	r1, [pc, #152]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004616:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800461a:	d105      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800461c:	4b21      	ldr	r3, [pc, #132]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a20      	ldr	r2, [pc, #128]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004626:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004634:	4b1b      	ldr	r3, [pc, #108]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	4918      	ldr	r1, [pc, #96]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004652:	d105      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004654:	4b13      	ldr	r3, [pc, #76]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a12      	ldr	r2, [pc, #72]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800465e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800466c:	4b0d      	ldr	r3, [pc, #52]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467a:	490a      	ldr	r1, [pc, #40]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004686:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800468a:	d105      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800468c:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a04      	ldr	r2, [pc, #16]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004696:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004698:	7cbb      	ldrb	r3, [r7, #18]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000

080046a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e09d      	b.n	80047f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d108      	bne.n	80046d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ca:	d009      	beq.n	80046e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]
 80046d2:	e005      	b.n	80046e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fd f99e 	bl	8001a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004716:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004720:	d902      	bls.n	8004728 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e002      	b.n	800472e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800472c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004736:	d007      	beq.n	8004748 <HAL_SPI_Init+0xa0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004740:	d002      	beq.n	8004748 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478a:	ea42 0103 	orr.w	r1, r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004792:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	0c1b      	lsrs	r3, r3, #16
 80047a4:	f003 0204 	and.w	r2, r3, #4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80047c4:	ea42 0103 	orr.w	r1, r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e049      	b.n	80048a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fd f9bd 	bl	8001ba4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f000 fa95 	bl	8004d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <HAL_TIM_PWM_Start_IT+0x28>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	e03c      	b.n	800494e <HAL_TIM_PWM_Start_IT+0xa2>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d109      	bne.n	80048ee <HAL_TIM_PWM_Start_IT+0x42>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	e02f      	b.n	800494e <HAL_TIM_PWM_Start_IT+0xa2>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d109      	bne.n	8004908 <HAL_TIM_PWM_Start_IT+0x5c>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e022      	b.n	800494e <HAL_TIM_PWM_Start_IT+0xa2>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b0c      	cmp	r3, #12
 800490c:	d109      	bne.n	8004922 <HAL_TIM_PWM_Start_IT+0x76>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e015      	b.n	800494e <HAL_TIM_PWM_Start_IT+0xa2>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b10      	cmp	r3, #16
 8004926:	d109      	bne.n	800493c <HAL_TIM_PWM_Start_IT+0x90>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e008      	b.n	800494e <HAL_TIM_PWM_Start_IT+0xa2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	bf14      	ite	ne
 8004948:	2301      	movne	r3, #1
 800494a:	2300      	moveq	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e0e2      	b.n	8004b1c <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d104      	bne.n	8004966 <HAL_TIM_PWM_Start_IT+0xba>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004964:	e023      	b.n	80049ae <HAL_TIM_PWM_Start_IT+0x102>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b04      	cmp	r3, #4
 800496a:	d104      	bne.n	8004976 <HAL_TIM_PWM_Start_IT+0xca>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004974:	e01b      	b.n	80049ae <HAL_TIM_PWM_Start_IT+0x102>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d104      	bne.n	8004986 <HAL_TIM_PWM_Start_IT+0xda>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004984:	e013      	b.n	80049ae <HAL_TIM_PWM_Start_IT+0x102>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d104      	bne.n	8004996 <HAL_TIM_PWM_Start_IT+0xea>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004994:	e00b      	b.n	80049ae <HAL_TIM_PWM_Start_IT+0x102>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b10      	cmp	r3, #16
 800499a:	d104      	bne.n	80049a6 <HAL_TIM_PWM_Start_IT+0xfa>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049a4:	e003      	b.n	80049ae <HAL_TIM_PWM_Start_IT+0x102>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b0c      	cmp	r3, #12
 80049b2:	d841      	bhi.n	8004a38 <HAL_TIM_PWM_Start_IT+0x18c>
 80049b4:	a201      	add	r2, pc, #4	@ (adr r2, 80049bc <HAL_TIM_PWM_Start_IT+0x110>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049f1 	.word	0x080049f1
 80049c0:	08004a39 	.word	0x08004a39
 80049c4:	08004a39 	.word	0x08004a39
 80049c8:	08004a39 	.word	0x08004a39
 80049cc:	08004a03 	.word	0x08004a03
 80049d0:	08004a39 	.word	0x08004a39
 80049d4:	08004a39 	.word	0x08004a39
 80049d8:	08004a39 	.word	0x08004a39
 80049dc:	08004a15 	.word	0x08004a15
 80049e0:	08004a39 	.word	0x08004a39
 80049e4:	08004a39 	.word	0x08004a39
 80049e8:	08004a39 	.word	0x08004a39
 80049ec:	08004a27 	.word	0x08004a27
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0202 	orr.w	r2, r2, #2
 80049fe:	60da      	str	r2, [r3, #12]
      break;
 8004a00:	e01d      	b.n	8004a3e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0204 	orr.w	r2, r2, #4
 8004a10:	60da      	str	r2, [r3, #12]
      break;
 8004a12:	e014      	b.n	8004a3e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0208 	orr.w	r2, r2, #8
 8004a22:	60da      	str	r2, [r3, #12]
      break;
 8004a24:	e00b      	b.n	8004a3e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0210 	orr.w	r2, r2, #16
 8004a34:	60da      	str	r2, [r3, #12]
      break;
 8004a36:	e002      	b.n	8004a3e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d16a      	bne.n	8004b1a <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fd1f 	bl	8005490 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a33      	ldr	r2, [pc, #204]	@ (8004b24 <HAL_TIM_PWM_Start_IT+0x278>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d013      	beq.n	8004a84 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a31      	ldr	r2, [pc, #196]	@ (8004b28 <HAL_TIM_PWM_Start_IT+0x27c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00e      	beq.n	8004a84 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a30      	ldr	r2, [pc, #192]	@ (8004b2c <HAL_TIM_PWM_Start_IT+0x280>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d009      	beq.n	8004a84 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2e      	ldr	r2, [pc, #184]	@ (8004b30 <HAL_TIM_PWM_Start_IT+0x284>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8004b34 <HAL_TIM_PWM_Start_IT+0x288>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d101      	bne.n	8004a88 <HAL_TIM_PWM_Start_IT+0x1dc>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <HAL_TIM_PWM_Start_IT+0x1de>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a20      	ldr	r2, [pc, #128]	@ (8004b24 <HAL_TIM_PWM_Start_IT+0x278>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d018      	beq.n	8004ada <HAL_TIM_PWM_Start_IT+0x22e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab0:	d013      	beq.n	8004ada <HAL_TIM_PWM_Start_IT+0x22e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a20      	ldr	r2, [pc, #128]	@ (8004b38 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <HAL_TIM_PWM_Start_IT+0x22e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b3c <HAL_TIM_PWM_Start_IT+0x290>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_TIM_PWM_Start_IT+0x22e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a17      	ldr	r2, [pc, #92]	@ (8004b28 <HAL_TIM_PWM_Start_IT+0x27c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_TIM_PWM_Start_IT+0x22e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a15      	ldr	r2, [pc, #84]	@ (8004b2c <HAL_TIM_PWM_Start_IT+0x280>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d115      	bne.n	8004b06 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	4b17      	ldr	r3, [pc, #92]	@ (8004b40 <HAL_TIM_PWM_Start_IT+0x294>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b06      	cmp	r3, #6
 8004aea:	d015      	beq.n	8004b18 <HAL_TIM_PWM_Start_IT+0x26c>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af2:	d011      	beq.n	8004b18 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	e008      	b.n	8004b18 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e000      	b.n	8004b1a <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	40013400 	.word	0x40013400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40014400 	.word	0x40014400
 8004b34:	40014800 	.word	0x40014800
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	00010007 	.word	0x00010007

08004b44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e0ff      	b.n	8004d62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b14      	cmp	r3, #20
 8004b6e:	f200 80f0 	bhi.w	8004d52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b72:	a201      	add	r2, pc, #4	@ (adr r2, 8004b78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b78:	08004bcd 	.word	0x08004bcd
 8004b7c:	08004d53 	.word	0x08004d53
 8004b80:	08004d53 	.word	0x08004d53
 8004b84:	08004d53 	.word	0x08004d53
 8004b88:	08004c0d 	.word	0x08004c0d
 8004b8c:	08004d53 	.word	0x08004d53
 8004b90:	08004d53 	.word	0x08004d53
 8004b94:	08004d53 	.word	0x08004d53
 8004b98:	08004c4f 	.word	0x08004c4f
 8004b9c:	08004d53 	.word	0x08004d53
 8004ba0:	08004d53 	.word	0x08004d53
 8004ba4:	08004d53 	.word	0x08004d53
 8004ba8:	08004c8f 	.word	0x08004c8f
 8004bac:	08004d53 	.word	0x08004d53
 8004bb0:	08004d53 	.word	0x08004d53
 8004bb4:	08004d53 	.word	0x08004d53
 8004bb8:	08004cd1 	.word	0x08004cd1
 8004bbc:	08004d53 	.word	0x08004d53
 8004bc0:	08004d53 	.word	0x08004d53
 8004bc4:	08004d53 	.word	0x08004d53
 8004bc8:	08004d11 	.word	0x08004d11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 f966 	bl	8004ea4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0208 	orr.w	r2, r2, #8
 8004be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0204 	bic.w	r2, r2, #4
 8004bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6999      	ldr	r1, [r3, #24]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	619a      	str	r2, [r3, #24]
      break;
 8004c0a:	e0a5      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 f9d6 	bl	8004fc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6999      	ldr	r1, [r3, #24]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	021a      	lsls	r2, r3, #8
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	619a      	str	r2, [r3, #24]
      break;
 8004c4c:	e084      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fa3f 	bl	80050d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0208 	orr.w	r2, r2, #8
 8004c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0204 	bic.w	r2, r2, #4
 8004c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69d9      	ldr	r1, [r3, #28]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	61da      	str	r2, [r3, #28]
      break;
 8004c8c:	e064      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 faa7 	bl	80051e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69d9      	ldr	r1, [r3, #28]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	021a      	lsls	r2, r3, #8
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	61da      	str	r2, [r3, #28]
      break;
 8004cce:	e043      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fb10 	bl	80052fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0208 	orr.w	r2, r2, #8
 8004cea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0204 	bic.w	r2, r2, #4
 8004cfa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004d0e:	e023      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fb54 	bl	80053c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d3a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	021a      	lsls	r2, r3, #8
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004d50:	e002      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	75fb      	strb	r3, [r7, #23]
      break;
 8004d56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop

08004d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a42      	ldr	r2, [pc, #264]	@ (8004e88 <TIM_Base_SetConfig+0x11c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00f      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8a:	d00b      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a3f      	ldr	r2, [pc, #252]	@ (8004e8c <TIM_Base_SetConfig+0x120>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d007      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a3e      	ldr	r2, [pc, #248]	@ (8004e90 <TIM_Base_SetConfig+0x124>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a3d      	ldr	r2, [pc, #244]	@ (8004e94 <TIM_Base_SetConfig+0x128>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d108      	bne.n	8004db6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a33      	ldr	r2, [pc, #204]	@ (8004e88 <TIM_Base_SetConfig+0x11c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01b      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc4:	d017      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a30      	ldr	r2, [pc, #192]	@ (8004e8c <TIM_Base_SetConfig+0x120>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a2f      	ldr	r2, [pc, #188]	@ (8004e90 <TIM_Base_SetConfig+0x124>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00f      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a2e      	ldr	r2, [pc, #184]	@ (8004e94 <TIM_Base_SetConfig+0x128>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00b      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e98 <TIM_Base_SetConfig+0x12c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2c      	ldr	r2, [pc, #176]	@ (8004e9c <TIM_Base_SetConfig+0x130>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea0 <TIM_Base_SetConfig+0x134>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d108      	bne.n	8004e08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a16      	ldr	r2, [pc, #88]	@ (8004e88 <TIM_Base_SetConfig+0x11c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00f      	beq.n	8004e54 <TIM_Base_SetConfig+0xe8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a17      	ldr	r2, [pc, #92]	@ (8004e94 <TIM_Base_SetConfig+0x128>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <TIM_Base_SetConfig+0xe8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a16      	ldr	r2, [pc, #88]	@ (8004e98 <TIM_Base_SetConfig+0x12c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d007      	beq.n	8004e54 <TIM_Base_SetConfig+0xe8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <TIM_Base_SetConfig+0x130>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <TIM_Base_SetConfig+0xe8>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <TIM_Base_SetConfig+0x134>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d103      	bne.n	8004e5c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d105      	bne.n	8004e7a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	611a      	str	r2, [r3, #16]
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40012c00 	.word	0x40012c00
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	40013400 	.word	0x40013400
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	40014400 	.word	0x40014400
 8004ea0:	40014800 	.word	0x40014800

08004ea4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f023 0201 	bic.w	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0303 	bic.w	r3, r3, #3
 8004ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f023 0302 	bic.w	r3, r3, #2
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb0 <TIM_OC1_SetConfig+0x10c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00f      	beq.n	8004f24 <TIM_OC1_SetConfig+0x80>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb4 <TIM_OC1_SetConfig+0x110>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00b      	beq.n	8004f24 <TIM_OC1_SetConfig+0x80>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb8 <TIM_OC1_SetConfig+0x114>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d007      	beq.n	8004f24 <TIM_OC1_SetConfig+0x80>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a29      	ldr	r2, [pc, #164]	@ (8004fbc <TIM_OC1_SetConfig+0x118>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <TIM_OC1_SetConfig+0x80>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a28      	ldr	r2, [pc, #160]	@ (8004fc0 <TIM_OC1_SetConfig+0x11c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d10c      	bne.n	8004f3e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 0308 	bic.w	r3, r3, #8
 8004f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f023 0304 	bic.w	r3, r3, #4
 8004f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb0 <TIM_OC1_SetConfig+0x10c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00f      	beq.n	8004f66 <TIM_OC1_SetConfig+0xc2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb4 <TIM_OC1_SetConfig+0x110>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00b      	beq.n	8004f66 <TIM_OC1_SetConfig+0xc2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a19      	ldr	r2, [pc, #100]	@ (8004fb8 <TIM_OC1_SetConfig+0x114>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d007      	beq.n	8004f66 <TIM_OC1_SetConfig+0xc2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a18      	ldr	r2, [pc, #96]	@ (8004fbc <TIM_OC1_SetConfig+0x118>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <TIM_OC1_SetConfig+0xc2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a17      	ldr	r2, [pc, #92]	@ (8004fc0 <TIM_OC1_SetConfig+0x11c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d111      	bne.n	8004f8a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	621a      	str	r2, [r3, #32]
}
 8004fa4:	bf00      	nop
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40013400 	.word	0x40013400
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40014400 	.word	0x40014400
 8004fc0:	40014800 	.word	0x40014800

08004fc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f023 0210 	bic.w	r2, r3, #16
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f023 0320 	bic.w	r3, r3, #32
 8005012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a28      	ldr	r2, [pc, #160]	@ (80050c4 <TIM_OC2_SetConfig+0x100>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_OC2_SetConfig+0x6c>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a27      	ldr	r2, [pc, #156]	@ (80050c8 <TIM_OC2_SetConfig+0x104>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d10d      	bne.n	800504c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800504a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a1d      	ldr	r2, [pc, #116]	@ (80050c4 <TIM_OC2_SetConfig+0x100>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00f      	beq.n	8005074 <TIM_OC2_SetConfig+0xb0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a1c      	ldr	r2, [pc, #112]	@ (80050c8 <TIM_OC2_SetConfig+0x104>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00b      	beq.n	8005074 <TIM_OC2_SetConfig+0xb0>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a1b      	ldr	r2, [pc, #108]	@ (80050cc <TIM_OC2_SetConfig+0x108>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d007      	beq.n	8005074 <TIM_OC2_SetConfig+0xb0>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a1a      	ldr	r2, [pc, #104]	@ (80050d0 <TIM_OC2_SetConfig+0x10c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_OC2_SetConfig+0xb0>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a19      	ldr	r2, [pc, #100]	@ (80050d4 <TIM_OC2_SetConfig+0x110>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d113      	bne.n	800509c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800507a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	621a      	str	r2, [r3, #32]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40012c00 	.word	0x40012c00
 80050c8:	40013400 	.word	0x40013400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40014400 	.word	0x40014400
 80050d4:	40014800 	.word	0x40014800

080050d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0303 	bic.w	r3, r3, #3
 8005112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a27      	ldr	r2, [pc, #156]	@ (80051d4 <TIM_OC3_SetConfig+0xfc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d003      	beq.n	8005142 <TIM_OC3_SetConfig+0x6a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a26      	ldr	r2, [pc, #152]	@ (80051d8 <TIM_OC3_SetConfig+0x100>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d10d      	bne.n	800515e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800515c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1c      	ldr	r2, [pc, #112]	@ (80051d4 <TIM_OC3_SetConfig+0xfc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00f      	beq.n	8005186 <TIM_OC3_SetConfig+0xae>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a1b      	ldr	r2, [pc, #108]	@ (80051d8 <TIM_OC3_SetConfig+0x100>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00b      	beq.n	8005186 <TIM_OC3_SetConfig+0xae>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1a      	ldr	r2, [pc, #104]	@ (80051dc <TIM_OC3_SetConfig+0x104>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <TIM_OC3_SetConfig+0xae>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a19      	ldr	r2, [pc, #100]	@ (80051e0 <TIM_OC3_SetConfig+0x108>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_OC3_SetConfig+0xae>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a18      	ldr	r2, [pc, #96]	@ (80051e4 <TIM_OC3_SetConfig+0x10c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d113      	bne.n	80051ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800518c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40013400 	.word	0x40013400
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40014400 	.word	0x40014400
 80051e4:	40014800 	.word	0x40014800

080051e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	031b      	lsls	r3, r3, #12
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a28      	ldr	r2, [pc, #160]	@ (80052e8 <TIM_OC4_SetConfig+0x100>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_OC4_SetConfig+0x6c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a27      	ldr	r2, [pc, #156]	@ (80052ec <TIM_OC4_SetConfig+0x104>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d10d      	bne.n	8005270 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800525a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	031b      	lsls	r3, r3, #12
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800526e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a1d      	ldr	r2, [pc, #116]	@ (80052e8 <TIM_OC4_SetConfig+0x100>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00f      	beq.n	8005298 <TIM_OC4_SetConfig+0xb0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a1c      	ldr	r2, [pc, #112]	@ (80052ec <TIM_OC4_SetConfig+0x104>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00b      	beq.n	8005298 <TIM_OC4_SetConfig+0xb0>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a1b      	ldr	r2, [pc, #108]	@ (80052f0 <TIM_OC4_SetConfig+0x108>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d007      	beq.n	8005298 <TIM_OC4_SetConfig+0xb0>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a1a      	ldr	r2, [pc, #104]	@ (80052f4 <TIM_OC4_SetConfig+0x10c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d003      	beq.n	8005298 <TIM_OC4_SetConfig+0xb0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a19      	ldr	r2, [pc, #100]	@ (80052f8 <TIM_OC4_SetConfig+0x110>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d113      	bne.n	80052c0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800529e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	019b      	lsls	r3, r3, #6
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	019b      	lsls	r3, r3, #6
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40013400 	.word	0x40013400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800

080052fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800532a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005340:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	041b      	lsls	r3, r3, #16
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a17      	ldr	r2, [pc, #92]	@ (80053b0 <TIM_OC5_SetConfig+0xb4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00f      	beq.n	8005376 <TIM_OC5_SetConfig+0x7a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a16      	ldr	r2, [pc, #88]	@ (80053b4 <TIM_OC5_SetConfig+0xb8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00b      	beq.n	8005376 <TIM_OC5_SetConfig+0x7a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a15      	ldr	r2, [pc, #84]	@ (80053b8 <TIM_OC5_SetConfig+0xbc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d007      	beq.n	8005376 <TIM_OC5_SetConfig+0x7a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a14      	ldr	r2, [pc, #80]	@ (80053bc <TIM_OC5_SetConfig+0xc0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d003      	beq.n	8005376 <TIM_OC5_SetConfig+0x7a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a13      	ldr	r2, [pc, #76]	@ (80053c0 <TIM_OC5_SetConfig+0xc4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d109      	bne.n	800538a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800537c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	621a      	str	r2, [r3, #32]
}
 80053a4:	bf00      	nop
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40013400 	.word	0x40013400
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40014400 	.word	0x40014400
 80053c0:	40014800 	.word	0x40014800

080053c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800540a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	051b      	lsls	r3, r3, #20
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a18      	ldr	r2, [pc, #96]	@ (800547c <TIM_OC6_SetConfig+0xb8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00f      	beq.n	8005440 <TIM_OC6_SetConfig+0x7c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a17      	ldr	r2, [pc, #92]	@ (8005480 <TIM_OC6_SetConfig+0xbc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00b      	beq.n	8005440 <TIM_OC6_SetConfig+0x7c>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a16      	ldr	r2, [pc, #88]	@ (8005484 <TIM_OC6_SetConfig+0xc0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d007      	beq.n	8005440 <TIM_OC6_SetConfig+0x7c>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a15      	ldr	r2, [pc, #84]	@ (8005488 <TIM_OC6_SetConfig+0xc4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_OC6_SetConfig+0x7c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a14      	ldr	r2, [pc, #80]	@ (800548c <TIM_OC6_SetConfig+0xc8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d109      	bne.n	8005454 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005446:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	029b      	lsls	r3, r3, #10
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40013400 	.word	0x40013400
 8005484:	40014000 	.word	0x40014000
 8005488:	40014400 	.word	0x40014400
 800548c:	40014800 	.word	0x40014800

08005490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	2201      	movs	r2, #1
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1a      	ldr	r2, [r3, #32]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	43db      	mvns	r3, r3
 80054b2:	401a      	ands	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1a      	ldr	r2, [r3, #32]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 031f 	and.w	r3, r3, #31
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	fa01 f303 	lsl.w	r3, r1, r3
 80054c8:	431a      	orrs	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d109      	bne.n	8005504 <HAL_TIMEx_PWMN_Start_IT+0x28>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	e022      	b.n	800554a <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b04      	cmp	r3, #4
 8005508:	d109      	bne.n	800551e <HAL_TIMEx_PWMN_Start_IT+0x42>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b01      	cmp	r3, #1
 8005514:	bf14      	ite	ne
 8005516:	2301      	movne	r3, #1
 8005518:	2300      	moveq	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	e015      	b.n	800554a <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b08      	cmp	r3, #8
 8005522:	d109      	bne.n	8005538 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	e008      	b.n	800554a <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b01      	cmp	r3, #1
 8005542:	bf14      	ite	ne
 8005544:	2301      	movne	r3, #1
 8005546:	2300      	moveq	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e0bc      	b.n	80056cc <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <HAL_TIMEx_PWMN_Start_IT+0x86>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005560:	e013      	b.n	800558a <HAL_TIMEx_PWMN_Start_IT+0xae>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b04      	cmp	r3, #4
 8005566:	d104      	bne.n	8005572 <HAL_TIMEx_PWMN_Start_IT+0x96>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005570:	e00b      	b.n	800558a <HAL_TIMEx_PWMN_Start_IT+0xae>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d104      	bne.n	8005582 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005580:	e003      	b.n	800558a <HAL_TIMEx_PWMN_Start_IT+0xae>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2202      	movs	r2, #2
 8005586:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b0c      	cmp	r3, #12
 800558e:	d841      	bhi.n	8005614 <HAL_TIMEx_PWMN_Start_IT+0x138>
 8005590:	a201      	add	r2, pc, #4	@ (adr r2, 8005598 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 8005592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005596:	bf00      	nop
 8005598:	080055cd 	.word	0x080055cd
 800559c:	08005615 	.word	0x08005615
 80055a0:	08005615 	.word	0x08005615
 80055a4:	08005615 	.word	0x08005615
 80055a8:	080055df 	.word	0x080055df
 80055ac:	08005615 	.word	0x08005615
 80055b0:	08005615 	.word	0x08005615
 80055b4:	08005615 	.word	0x08005615
 80055b8:	080055f1 	.word	0x080055f1
 80055bc:	08005615 	.word	0x08005615
 80055c0:	08005615 	.word	0x08005615
 80055c4:	08005615 	.word	0x08005615
 80055c8:	08005603 	.word	0x08005603
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0202 	orr.w	r2, r2, #2
 80055da:	60da      	str	r2, [r3, #12]
      break;
 80055dc:	e01d      	b.n	800561a <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0204 	orr.w	r2, r2, #4
 80055ec:	60da      	str	r2, [r3, #12]
      break;
 80055ee:	e014      	b.n	800561a <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0208 	orr.w	r2, r2, #8
 80055fe:	60da      	str	r2, [r3, #12]
      break;
 8005600:	e00b      	b.n	800561a <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0210 	orr.w	r2, r2, #16
 8005610:	60da      	str	r2, [r3, #12]
      break;
 8005612:	e002      	b.n	800561a <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	bf00      	nop
  }

  if (status == HAL_OK)
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d154      	bne.n	80056ca <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800562e:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2204      	movs	r2, #4
 8005636:	6839      	ldr	r1, [r7, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f000 f965 	bl	8005908 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800564c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a20      	ldr	r2, [pc, #128]	@ (80056d4 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005660:	d013      	beq.n	800568a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1c      	ldr	r2, [pc, #112]	@ (80056d8 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1a      	ldr	r2, [pc, #104]	@ (80056dc <HAL_TIMEx_PWMN_Start_IT+0x200>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a19      	ldr	r2, [pc, #100]	@ (80056e0 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a17      	ldr	r2, [pc, #92]	@ (80056e4 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d115      	bne.n	80056b6 <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	4b15      	ldr	r3, [pc, #84]	@ (80056e8 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 8005692:	4013      	ands	r3, r2
 8005694:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b06      	cmp	r3, #6
 800569a:	d015      	beq.n	80056c8 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a2:	d011      	beq.n	80056c8 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b4:	e008      	b.n	80056c8 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0201 	orr.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	e000      	b.n	80056ca <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40013400 	.word	0x40013400
 80056e4:	40014000 	.word	0x40014000
 80056e8:	00010007 	.word	0x00010007

080056ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005700:	2302      	movs	r3, #2
 8005702:	e065      	b.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2c      	ldr	r2, [pc, #176]	@ (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d004      	beq.n	8005738 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2b      	ldr	r2, [pc, #172]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d108      	bne.n	800574a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800573e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005754:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1b      	ldr	r2, [pc, #108]	@ (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d018      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800577a:	d013      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a18      	ldr	r2, [pc, #96]	@ (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a17      	ldr	r2, [pc, #92]	@ (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a12      	ldr	r2, [pc, #72]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a13      	ldr	r2, [pc, #76]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d10c      	bne.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40013400 	.word	0x40013400
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40014000 	.word	0x40014000

080057f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005808:	2302      	movs	r3, #2
 800580a:	e073      	b.n	80058f4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a19      	ldr	r2, [pc, #100]	@ (8005900 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a18      	ldr	r2, [pc, #96]	@ (8005904 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d11c      	bne.n	80058e2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	051b      	lsls	r3, r3, #20
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40013400 	.word	0x40013400

08005908 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	2204      	movs	r2, #4
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	43db      	mvns	r3, r3
 800592a:	401a      	ands	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1a      	ldr	r2, [r3, #32]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	fa01 f303 	lsl.w	r3, r1, r3
 8005940:	431a      	orrs	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	621a      	str	r2, [r3, #32]
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e042      	b.n	80059ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fc f9aa 	bl	8001cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2224      	movs	r2, #36	@ 0x24
 8005980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 faf5 	bl	8005f8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f826 	bl	80059f4 <UART_SetConfig>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e01b      	b.n	80059ea <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fb74 	bl	80060d0 <UART_CheckIdleState>
 80059e8:	4603      	mov	r3, r0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f8:	b08c      	sub	sp, #48	@ 0x30
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4bab      	ldr	r3, [pc, #684]	@ (8005cd0 <UART_SetConfig+0x2dc>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4aa0      	ldr	r2, [pc, #640]	@ (8005cd4 <UART_SetConfig+0x2e0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d004      	beq.n	8005a60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005a6a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	6812      	ldr	r2, [r2, #0]
 8005a72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a74:	430b      	orrs	r3, r1
 8005a76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	f023 010f 	bic.w	r1, r3, #15
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a91      	ldr	r2, [pc, #580]	@ (8005cd8 <UART_SetConfig+0x2e4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d125      	bne.n	8005ae4 <UART_SetConfig+0xf0>
 8005a98:	4b90      	ldr	r3, [pc, #576]	@ (8005cdc <UART_SetConfig+0x2e8>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d81a      	bhi.n	8005adc <UART_SetConfig+0xe8>
 8005aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8005aac <UART_SetConfig+0xb8>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005abd 	.word	0x08005abd
 8005ab0:	08005acd 	.word	0x08005acd
 8005ab4:	08005ac5 	.word	0x08005ac5
 8005ab8:	08005ad5 	.word	0x08005ad5
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ac2:	e0d6      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aca:	e0d2      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005acc:	2304      	movs	r3, #4
 8005ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ad2:	e0ce      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005ad4:	2308      	movs	r3, #8
 8005ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ada:	e0ca      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005adc:	2310      	movs	r3, #16
 8005ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ae2:	e0c6      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a7d      	ldr	r2, [pc, #500]	@ (8005ce0 <UART_SetConfig+0x2ec>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d138      	bne.n	8005b60 <UART_SetConfig+0x16c>
 8005aee:	4b7b      	ldr	r3, [pc, #492]	@ (8005cdc <UART_SetConfig+0x2e8>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af4:	f003 030c 	and.w	r3, r3, #12
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	d82d      	bhi.n	8005b58 <UART_SetConfig+0x164>
 8005afc:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <UART_SetConfig+0x110>)
 8005afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b02:	bf00      	nop
 8005b04:	08005b39 	.word	0x08005b39
 8005b08:	08005b59 	.word	0x08005b59
 8005b0c:	08005b59 	.word	0x08005b59
 8005b10:	08005b59 	.word	0x08005b59
 8005b14:	08005b49 	.word	0x08005b49
 8005b18:	08005b59 	.word	0x08005b59
 8005b1c:	08005b59 	.word	0x08005b59
 8005b20:	08005b59 	.word	0x08005b59
 8005b24:	08005b41 	.word	0x08005b41
 8005b28:	08005b59 	.word	0x08005b59
 8005b2c:	08005b59 	.word	0x08005b59
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b51 	.word	0x08005b51
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b3e:	e098      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005b40:	2302      	movs	r3, #2
 8005b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b46:	e094      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005b48:	2304      	movs	r3, #4
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b4e:	e090      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005b50:	2308      	movs	r3, #8
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b56:	e08c      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005b58:	2310      	movs	r3, #16
 8005b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b5e:	e088      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a5f      	ldr	r2, [pc, #380]	@ (8005ce4 <UART_SetConfig+0x2f0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d125      	bne.n	8005bb6 <UART_SetConfig+0x1c2>
 8005b6a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cdc <UART_SetConfig+0x2e8>)
 8005b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b74:	2b30      	cmp	r3, #48	@ 0x30
 8005b76:	d016      	beq.n	8005ba6 <UART_SetConfig+0x1b2>
 8005b78:	2b30      	cmp	r3, #48	@ 0x30
 8005b7a:	d818      	bhi.n	8005bae <UART_SetConfig+0x1ba>
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d00a      	beq.n	8005b96 <UART_SetConfig+0x1a2>
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d814      	bhi.n	8005bae <UART_SetConfig+0x1ba>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <UART_SetConfig+0x19a>
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	d008      	beq.n	8005b9e <UART_SetConfig+0x1aa>
 8005b8c:	e00f      	b.n	8005bae <UART_SetConfig+0x1ba>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b94:	e06d      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005b96:	2302      	movs	r3, #2
 8005b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b9c:	e069      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005b9e:	2304      	movs	r3, #4
 8005ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ba4:	e065      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005ba6:	2308      	movs	r3, #8
 8005ba8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bac:	e061      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005bae:	2310      	movs	r3, #16
 8005bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bb4:	e05d      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a4b      	ldr	r2, [pc, #300]	@ (8005ce8 <UART_SetConfig+0x2f4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d125      	bne.n	8005c0c <UART_SetConfig+0x218>
 8005bc0:	4b46      	ldr	r3, [pc, #280]	@ (8005cdc <UART_SetConfig+0x2e8>)
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005bca:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bcc:	d016      	beq.n	8005bfc <UART_SetConfig+0x208>
 8005bce:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bd0:	d818      	bhi.n	8005c04 <UART_SetConfig+0x210>
 8005bd2:	2b80      	cmp	r3, #128	@ 0x80
 8005bd4:	d00a      	beq.n	8005bec <UART_SetConfig+0x1f8>
 8005bd6:	2b80      	cmp	r3, #128	@ 0x80
 8005bd8:	d814      	bhi.n	8005c04 <UART_SetConfig+0x210>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <UART_SetConfig+0x1f0>
 8005bde:	2b40      	cmp	r3, #64	@ 0x40
 8005be0:	d008      	beq.n	8005bf4 <UART_SetConfig+0x200>
 8005be2:	e00f      	b.n	8005c04 <UART_SetConfig+0x210>
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bea:	e042      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005bec:	2302      	movs	r3, #2
 8005bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bf2:	e03e      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bfa:	e03a      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005bfc:	2308      	movs	r3, #8
 8005bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c02:	e036      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005c04:	2310      	movs	r3, #16
 8005c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c0a:	e032      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a30      	ldr	r2, [pc, #192]	@ (8005cd4 <UART_SetConfig+0x2e0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d12a      	bne.n	8005c6c <UART_SetConfig+0x278>
 8005c16:	4b31      	ldr	r3, [pc, #196]	@ (8005cdc <UART_SetConfig+0x2e8>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c24:	d01a      	beq.n	8005c5c <UART_SetConfig+0x268>
 8005c26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c2a:	d81b      	bhi.n	8005c64 <UART_SetConfig+0x270>
 8005c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c30:	d00c      	beq.n	8005c4c <UART_SetConfig+0x258>
 8005c32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c36:	d815      	bhi.n	8005c64 <UART_SetConfig+0x270>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <UART_SetConfig+0x250>
 8005c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c40:	d008      	beq.n	8005c54 <UART_SetConfig+0x260>
 8005c42:	e00f      	b.n	8005c64 <UART_SetConfig+0x270>
 8005c44:	2300      	movs	r3, #0
 8005c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c4a:	e012      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c52:	e00e      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005c54:	2304      	movs	r3, #4
 8005c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c5a:	e00a      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c62:	e006      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005c64:	2310      	movs	r3, #16
 8005c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c6a:	e002      	b.n	8005c72 <UART_SetConfig+0x27e>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a17      	ldr	r2, [pc, #92]	@ (8005cd4 <UART_SetConfig+0x2e0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	f040 80a8 	bne.w	8005dce <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d834      	bhi.n	8005cf0 <UART_SetConfig+0x2fc>
 8005c86:	a201      	add	r2, pc, #4	@ (adr r2, 8005c8c <UART_SetConfig+0x298>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cf1 	.word	0x08005cf1
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005cbf 	.word	0x08005cbf
 8005ca0:	08005cf1 	.word	0x08005cf1
 8005ca4:	08005cf1 	.word	0x08005cf1
 8005ca8:	08005cf1 	.word	0x08005cf1
 8005cac:	08005cc7 	.word	0x08005cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb0:	f7fe fa98 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 8005cb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cb6:	e021      	b.n	8005cfc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <UART_SetConfig+0x2f8>)
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cbc:	e01e      	b.n	8005cfc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cbe:	f7fe fa23 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 8005cc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cc4:	e01a      	b.n	8005cfc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ccc:	e016      	b.n	8005cfc <UART_SetConfig+0x308>
 8005cce:	bf00      	nop
 8005cd0:	cfff69f3 	.word	0xcfff69f3
 8005cd4:	40008000 	.word	0x40008000
 8005cd8:	40013800 	.word	0x40013800
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	40004400 	.word	0x40004400
 8005ce4:	40004800 	.word	0x40004800
 8005ce8:	40004c00 	.word	0x40004c00
 8005cec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005cfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 812a 	beq.w	8005f58 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	4a9e      	ldr	r2, [pc, #632]	@ (8005f84 <UART_SetConfig+0x590>)
 8005d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d305      	bcc.n	8005d34 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d903      	bls.n	8005d3c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d3a:	e10d      	b.n	8005f58 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3e:	2200      	movs	r2, #0
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	60fa      	str	r2, [r7, #12]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	4a8e      	ldr	r2, [pc, #568]	@ (8005f84 <UART_SetConfig+0x590>)
 8005d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2200      	movs	r2, #0
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d5e:	f7fa fe41 	bl	80009e4 <__aeabi_uldivmod>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4610      	mov	r0, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	020b      	lsls	r3, r1, #8
 8005d74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d78:	0202      	lsls	r2, r0, #8
 8005d7a:	6979      	ldr	r1, [r7, #20]
 8005d7c:	6849      	ldr	r1, [r1, #4]
 8005d7e:	0849      	lsrs	r1, r1, #1
 8005d80:	2000      	movs	r0, #0
 8005d82:	460c      	mov	r4, r1
 8005d84:	4605      	mov	r5, r0
 8005d86:	eb12 0804 	adds.w	r8, r2, r4
 8005d8a:	eb43 0905 	adc.w	r9, r3, r5
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	469a      	mov	sl, r3
 8005d96:	4693      	mov	fp, r2
 8005d98:	4652      	mov	r2, sl
 8005d9a:	465b      	mov	r3, fp
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	4649      	mov	r1, r9
 8005da0:	f7fa fe20 	bl	80009e4 <__aeabi_uldivmod>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4613      	mov	r3, r2
 8005daa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005db2:	d308      	bcc.n	8005dc6 <UART_SetConfig+0x3d2>
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dba:	d204      	bcs.n	8005dc6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	60da      	str	r2, [r3, #12]
 8005dc4:	e0c8      	b.n	8005f58 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005dcc:	e0c4      	b.n	8005f58 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dd6:	d167      	bne.n	8005ea8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005dd8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d828      	bhi.n	8005e32 <UART_SetConfig+0x43e>
 8005de0:	a201      	add	r2, pc, #4	@ (adr r2, 8005de8 <UART_SetConfig+0x3f4>)
 8005de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de6:	bf00      	nop
 8005de8:	08005e0d 	.word	0x08005e0d
 8005dec:	08005e15 	.word	0x08005e15
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	08005e33 	.word	0x08005e33
 8005df8:	08005e23 	.word	0x08005e23
 8005dfc:	08005e33 	.word	0x08005e33
 8005e00:	08005e33 	.word	0x08005e33
 8005e04:	08005e33 	.word	0x08005e33
 8005e08:	08005e2b 	.word	0x08005e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e0c:	f7fe f9ea 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 8005e10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e12:	e014      	b.n	8005e3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e14:	f7fe f9fc 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
 8005e18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e1a:	e010      	b.n	8005e3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e1c:	4b5a      	ldr	r3, [pc, #360]	@ (8005f88 <UART_SetConfig+0x594>)
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e20:	e00d      	b.n	8005e3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e22:	f7fe f971 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 8005e26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e28:	e009      	b.n	8005e3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e30:	e005      	b.n	8005e3e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8089 	beq.w	8005f58 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4a:	4a4e      	ldr	r2, [pc, #312]	@ (8005f84 <UART_SetConfig+0x590>)
 8005e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e50:	461a      	mov	r2, r3
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e58:	005a      	lsls	r2, r3, #1
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	441a      	add	r2, r3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	2b0f      	cmp	r3, #15
 8005e70:	d916      	bls.n	8005ea0 <UART_SetConfig+0x4ac>
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e78:	d212      	bcs.n	8005ea0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f023 030f 	bic.w	r3, r3, #15
 8005e82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	8bfb      	ldrh	r3, [r7, #30]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	8bfa      	ldrh	r2, [r7, #30]
 8005e9c:	60da      	str	r2, [r3, #12]
 8005e9e:	e05b      	b.n	8005f58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ea6:	e057      	b.n	8005f58 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ea8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d828      	bhi.n	8005f02 <UART_SetConfig+0x50e>
 8005eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <UART_SetConfig+0x4c4>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005edd 	.word	0x08005edd
 8005ebc:	08005ee5 	.word	0x08005ee5
 8005ec0:	08005eed 	.word	0x08005eed
 8005ec4:	08005f03 	.word	0x08005f03
 8005ec8:	08005ef3 	.word	0x08005ef3
 8005ecc:	08005f03 	.word	0x08005f03
 8005ed0:	08005f03 	.word	0x08005f03
 8005ed4:	08005f03 	.word	0x08005f03
 8005ed8:	08005efb 	.word	0x08005efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005edc:	f7fe f982 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 8005ee0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ee2:	e014      	b.n	8005f0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee4:	f7fe f994 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
 8005ee8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005eea:	e010      	b.n	8005f0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eec:	4b26      	ldr	r3, [pc, #152]	@ (8005f88 <UART_SetConfig+0x594>)
 8005eee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ef0:	e00d      	b.n	8005f0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ef2:	f7fe f909 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 8005ef6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ef8:	e009      	b.n	8005f0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005efe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f00:	e005      	b.n	8005f0e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f0c:	bf00      	nop
    }

    if (pclk != 0U)
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d021      	beq.n	8005f58 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	4a1a      	ldr	r2, [pc, #104]	@ (8005f84 <UART_SetConfig+0x590>)
 8005f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f22:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	085b      	lsrs	r3, r3, #1
 8005f2c:	441a      	add	r2, r3
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	2b0f      	cmp	r3, #15
 8005f3c:	d909      	bls.n	8005f52 <UART_SetConfig+0x55e>
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f44:	d205      	bcs.n	8005f52 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60da      	str	r2, [r3, #12]
 8005f50:	e002      	b.n	8005f58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2200      	movs	r2, #0
 8005f72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3730      	adds	r7, #48	@ 0x30
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f82:	bf00      	nop
 8005f84:	08007748 	.word	0x08007748
 8005f88:	00f42400 	.word	0x00f42400

08005f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006020:	f003 0310 	and.w	r3, r3, #16
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01a      	beq.n	80060a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800608a:	d10a      	bne.n	80060a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	605a      	str	r2, [r3, #4]
  }
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b098      	sub	sp, #96	@ 0x60
 80060d4:	af02      	add	r7, sp, #8
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060e0:	f7fb ff1e 	bl	8001f20 <HAL_GetTick>
 80060e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d12f      	bne.n	8006154 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060fc:	2200      	movs	r2, #0
 80060fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f88e 	bl	8006224 <UART_WaitOnFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d022      	beq.n	8006154 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800611c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800611e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006122:	653b      	str	r3, [r7, #80]	@ 0x50
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800612c:	647b      	str	r3, [r7, #68]	@ 0x44
 800612e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800613a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e6      	bne.n	800610e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e063      	b.n	800621c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b04      	cmp	r3, #4
 8006160:	d149      	bne.n	80061f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006162:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800616a:	2200      	movs	r2, #0
 800616c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f857 	bl	8006224 <UART_WaitOnFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d03c      	beq.n	80061f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	623b      	str	r3, [r7, #32]
   return(result);
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006190:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800619a:	633b      	str	r3, [r7, #48]	@ 0x30
 800619c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e6      	bne.n	800617c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f023 0301 	bic.w	r3, r3, #1
 80061c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3308      	adds	r3, #8
 80061cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061ce:	61fa      	str	r2, [r7, #28]
 80061d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	69b9      	ldr	r1, [r7, #24]
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	617b      	str	r3, [r7, #20]
   return(result);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e012      	b.n	800621c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3758      	adds	r7, #88	@ 0x58
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	4613      	mov	r3, r2
 8006232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006234:	e04f      	b.n	80062d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800623c:	d04b      	beq.n	80062d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623e:	f7fb fe6f 	bl	8001f20 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	429a      	cmp	r2, r3
 800624c:	d302      	bcc.n	8006254 <UART_WaitOnFlagUntilTimeout+0x30>
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e04e      	b.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	d037      	beq.n	80062d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b80      	cmp	r3, #128	@ 0x80
 800626a:	d034      	beq.n	80062d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b40      	cmp	r3, #64	@ 0x40
 8006270:	d031      	beq.n	80062d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b08      	cmp	r3, #8
 800627e:	d110      	bne.n	80062a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2208      	movs	r2, #8
 8006286:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f838 	bl	80062fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2208      	movs	r2, #8
 8006292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e029      	b.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062b0:	d111      	bne.n	80062d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f81e 	bl	80062fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e00f      	b.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69da      	ldr	r2, [r3, #28]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4013      	ands	r3, r2
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	bf0c      	ite	eq
 80062e6:	2301      	moveq	r3, #1
 80062e8:	2300      	movne	r3, #0
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d0a0      	beq.n	8006236 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062fe:	b480      	push	{r7}
 8006300:	b095      	sub	sp, #84	@ 0x54
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006316:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800631a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006324:	643b      	str	r3, [r7, #64]	@ 0x40
 8006326:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800632a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e6      	bne.n	8006306 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3308      	adds	r3, #8
 800633e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	61fb      	str	r3, [r7, #28]
   return(result);
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800635c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800635e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e3      	bne.n	8006338 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006374:	2b01      	cmp	r3, #1
 8006376:	d118      	bne.n	80063aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	60bb      	str	r3, [r7, #8]
   return(result);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f023 0310 	bic.w	r3, r3, #16
 800638c:	647b      	str	r3, [r7, #68]	@ 0x44
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006396:	61bb      	str	r3, [r7, #24]
 8006398:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	6979      	ldr	r1, [r7, #20]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	613b      	str	r3, [r7, #16]
   return(result);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e6      	bne.n	8006378 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063be:	bf00      	nop
 80063c0:	3754      	adds	r7, #84	@ 0x54
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80063dc:	2302      	movs	r3, #2
 80063de:	e027      	b.n	8006430 <HAL_UARTEx_DisableFifoMode+0x66>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2224      	movs	r2, #36	@ 0x24
 80063ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0201 	bic.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800640e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2220      	movs	r2, #32
 8006422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006450:	2302      	movs	r3, #2
 8006452:	e02d      	b.n	80064b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2224      	movs	r2, #36	@ 0x24
 8006460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0201 	bic.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f84f 	bl	8006534 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e02d      	b.n	800652c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2224      	movs	r2, #36	@ 0x24
 80064dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f811 	bl	8006534 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006540:	2b00      	cmp	r3, #0
 8006542:	d108      	bne.n	8006556 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006554:	e031      	b.n	80065ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006556:	2308      	movs	r3, #8
 8006558:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800655a:	2308      	movs	r3, #8
 800655c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	0e5b      	lsrs	r3, r3, #25
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	0f5b      	lsrs	r3, r3, #29
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800657e:	7bbb      	ldrb	r3, [r7, #14]
 8006580:	7b3a      	ldrb	r2, [r7, #12]
 8006582:	4911      	ldr	r1, [pc, #68]	@ (80065c8 <UARTEx_SetNbDataToProcess+0x94>)
 8006584:	5c8a      	ldrb	r2, [r1, r2]
 8006586:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800658a:	7b3a      	ldrb	r2, [r7, #12]
 800658c:	490f      	ldr	r1, [pc, #60]	@ (80065cc <UARTEx_SetNbDataToProcess+0x98>)
 800658e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006590:	fb93 f3f2 	sdiv	r3, r3, r2
 8006594:	b29a      	uxth	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	7b7a      	ldrb	r2, [r7, #13]
 80065a0:	4909      	ldr	r1, [pc, #36]	@ (80065c8 <UARTEx_SetNbDataToProcess+0x94>)
 80065a2:	5c8a      	ldrb	r2, [r1, r2]
 80065a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065a8:	7b7a      	ldrb	r2, [r7, #13]
 80065aa:	4908      	ldr	r1, [pc, #32]	@ (80065cc <UARTEx_SetNbDataToProcess+0x98>)
 80065ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	08007760 	.word	0x08007760
 80065cc:	08007768 	.word	0x08007768

080065d0 <cos>:
 80065d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065d2:	ec53 2b10 	vmov	r2, r3, d0
 80065d6:	4826      	ldr	r0, [pc, #152]	@ (8006670 <cos+0xa0>)
 80065d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80065dc:	4281      	cmp	r1, r0
 80065de:	d806      	bhi.n	80065ee <cos+0x1e>
 80065e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006668 <cos+0x98>
 80065e4:	b005      	add	sp, #20
 80065e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80065ea:	f000 bde5 	b.w	80071b8 <__kernel_cos>
 80065ee:	4821      	ldr	r0, [pc, #132]	@ (8006674 <cos+0xa4>)
 80065f0:	4281      	cmp	r1, r0
 80065f2:	d908      	bls.n	8006606 <cos+0x36>
 80065f4:	4610      	mov	r0, r2
 80065f6:	4619      	mov	r1, r3
 80065f8:	f7f9 ff3c 	bl	8000474 <__aeabi_dsub>
 80065fc:	ec41 0b10 	vmov	d0, r0, r1
 8006600:	b005      	add	sp, #20
 8006602:	f85d fb04 	ldr.w	pc, [sp], #4
 8006606:	4668      	mov	r0, sp
 8006608:	f000 f88a 	bl	8006720 <__ieee754_rem_pio2>
 800660c:	f000 0003 	and.w	r0, r0, #3
 8006610:	2801      	cmp	r0, #1
 8006612:	d00b      	beq.n	800662c <cos+0x5c>
 8006614:	2802      	cmp	r0, #2
 8006616:	d015      	beq.n	8006644 <cos+0x74>
 8006618:	b9d8      	cbnz	r0, 8006652 <cos+0x82>
 800661a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800661e:	ed9d 0b00 	vldr	d0, [sp]
 8006622:	f000 fdc9 	bl	80071b8 <__kernel_cos>
 8006626:	ec51 0b10 	vmov	r0, r1, d0
 800662a:	e7e7      	b.n	80065fc <cos+0x2c>
 800662c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006630:	ed9d 0b00 	vldr	d0, [sp]
 8006634:	f000 fe88 	bl	8007348 <__kernel_sin>
 8006638:	ec53 2b10 	vmov	r2, r3, d0
 800663c:	4610      	mov	r0, r2
 800663e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006642:	e7db      	b.n	80065fc <cos+0x2c>
 8006644:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006648:	ed9d 0b00 	vldr	d0, [sp]
 800664c:	f000 fdb4 	bl	80071b8 <__kernel_cos>
 8006650:	e7f2      	b.n	8006638 <cos+0x68>
 8006652:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006656:	ed9d 0b00 	vldr	d0, [sp]
 800665a:	2001      	movs	r0, #1
 800665c:	f000 fe74 	bl	8007348 <__kernel_sin>
 8006660:	e7e1      	b.n	8006626 <cos+0x56>
 8006662:	bf00      	nop
 8006664:	f3af 8000 	nop.w
	...
 8006670:	3fe921fb 	.word	0x3fe921fb
 8006674:	7fefffff 	.word	0x7fefffff

08006678 <sin>:
 8006678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800667a:	ec53 2b10 	vmov	r2, r3, d0
 800667e:	4826      	ldr	r0, [pc, #152]	@ (8006718 <sin+0xa0>)
 8006680:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006684:	4281      	cmp	r1, r0
 8006686:	d807      	bhi.n	8006698 <sin+0x20>
 8006688:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006710 <sin+0x98>
 800668c:	2000      	movs	r0, #0
 800668e:	b005      	add	sp, #20
 8006690:	f85d eb04 	ldr.w	lr, [sp], #4
 8006694:	f000 be58 	b.w	8007348 <__kernel_sin>
 8006698:	4820      	ldr	r0, [pc, #128]	@ (800671c <sin+0xa4>)
 800669a:	4281      	cmp	r1, r0
 800669c:	d908      	bls.n	80066b0 <sin+0x38>
 800669e:	4610      	mov	r0, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	f7f9 fee7 	bl	8000474 <__aeabi_dsub>
 80066a6:	ec41 0b10 	vmov	d0, r0, r1
 80066aa:	b005      	add	sp, #20
 80066ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80066b0:	4668      	mov	r0, sp
 80066b2:	f000 f835 	bl	8006720 <__ieee754_rem_pio2>
 80066b6:	f000 0003 	and.w	r0, r0, #3
 80066ba:	2801      	cmp	r0, #1
 80066bc:	d00c      	beq.n	80066d8 <sin+0x60>
 80066be:	2802      	cmp	r0, #2
 80066c0:	d011      	beq.n	80066e6 <sin+0x6e>
 80066c2:	b9e8      	cbnz	r0, 8006700 <sin+0x88>
 80066c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066c8:	ed9d 0b00 	vldr	d0, [sp]
 80066cc:	2001      	movs	r0, #1
 80066ce:	f000 fe3b 	bl	8007348 <__kernel_sin>
 80066d2:	ec51 0b10 	vmov	r0, r1, d0
 80066d6:	e7e6      	b.n	80066a6 <sin+0x2e>
 80066d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066dc:	ed9d 0b00 	vldr	d0, [sp]
 80066e0:	f000 fd6a 	bl	80071b8 <__kernel_cos>
 80066e4:	e7f5      	b.n	80066d2 <sin+0x5a>
 80066e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066ea:	ed9d 0b00 	vldr	d0, [sp]
 80066ee:	2001      	movs	r0, #1
 80066f0:	f000 fe2a 	bl	8007348 <__kernel_sin>
 80066f4:	ec53 2b10 	vmov	r2, r3, d0
 80066f8:	4610      	mov	r0, r2
 80066fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80066fe:	e7d2      	b.n	80066a6 <sin+0x2e>
 8006700:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006704:	ed9d 0b00 	vldr	d0, [sp]
 8006708:	f000 fd56 	bl	80071b8 <__kernel_cos>
 800670c:	e7f2      	b.n	80066f4 <sin+0x7c>
 800670e:	bf00      	nop
	...
 8006718:	3fe921fb 	.word	0x3fe921fb
 800671c:	7fefffff 	.word	0x7fefffff

08006720 <__ieee754_rem_pio2>:
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	ec57 6b10 	vmov	r6, r7, d0
 8006728:	4bc5      	ldr	r3, [pc, #788]	@ (8006a40 <__ieee754_rem_pio2+0x320>)
 800672a:	b08d      	sub	sp, #52	@ 0x34
 800672c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006730:	4598      	cmp	r8, r3
 8006732:	4604      	mov	r4, r0
 8006734:	9704      	str	r7, [sp, #16]
 8006736:	d807      	bhi.n	8006748 <__ieee754_rem_pio2+0x28>
 8006738:	2200      	movs	r2, #0
 800673a:	2300      	movs	r3, #0
 800673c:	ed80 0b00 	vstr	d0, [r0]
 8006740:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006744:	2500      	movs	r5, #0
 8006746:	e028      	b.n	800679a <__ieee754_rem_pio2+0x7a>
 8006748:	4bbe      	ldr	r3, [pc, #760]	@ (8006a44 <__ieee754_rem_pio2+0x324>)
 800674a:	4598      	cmp	r8, r3
 800674c:	d878      	bhi.n	8006840 <__ieee754_rem_pio2+0x120>
 800674e:	9b04      	ldr	r3, [sp, #16]
 8006750:	4dbd      	ldr	r5, [pc, #756]	@ (8006a48 <__ieee754_rem_pio2+0x328>)
 8006752:	2b00      	cmp	r3, #0
 8006754:	4630      	mov	r0, r6
 8006756:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006a08 <__ieee754_rem_pio2+0x2e8>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	4639      	mov	r1, r7
 800675e:	dd38      	ble.n	80067d2 <__ieee754_rem_pio2+0xb2>
 8006760:	f7f9 fe88 	bl	8000474 <__aeabi_dsub>
 8006764:	45a8      	cmp	r8, r5
 8006766:	4606      	mov	r6, r0
 8006768:	460f      	mov	r7, r1
 800676a:	d01a      	beq.n	80067a2 <__ieee754_rem_pio2+0x82>
 800676c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006a10 <__ieee754_rem_pio2+0x2f0>)
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f7f9 fe7f 	bl	8000474 <__aeabi_dsub>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4680      	mov	r8, r0
 800677c:	4689      	mov	r9, r1
 800677e:	4630      	mov	r0, r6
 8006780:	4639      	mov	r1, r7
 8006782:	f7f9 fe77 	bl	8000474 <__aeabi_dsub>
 8006786:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006a10 <__ieee754_rem_pio2+0x2f0>)
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f7f9 fe72 	bl	8000474 <__aeabi_dsub>
 8006790:	e9c4 8900 	strd	r8, r9, [r4]
 8006794:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006798:	2501      	movs	r5, #1
 800679a:	4628      	mov	r0, r5
 800679c:	b00d      	add	sp, #52	@ 0x34
 800679e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a2:	a39d      	add	r3, pc, #628	@ (adr r3, 8006a18 <__ieee754_rem_pio2+0x2f8>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f7f9 fe64 	bl	8000474 <__aeabi_dsub>
 80067ac:	a39c      	add	r3, pc, #624	@ (adr r3, 8006a20 <__ieee754_rem_pio2+0x300>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	4606      	mov	r6, r0
 80067b4:	460f      	mov	r7, r1
 80067b6:	f7f9 fe5d 	bl	8000474 <__aeabi_dsub>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4680      	mov	r8, r0
 80067c0:	4689      	mov	r9, r1
 80067c2:	4630      	mov	r0, r6
 80067c4:	4639      	mov	r1, r7
 80067c6:	f7f9 fe55 	bl	8000474 <__aeabi_dsub>
 80067ca:	a395      	add	r3, pc, #596	@ (adr r3, 8006a20 <__ieee754_rem_pio2+0x300>)
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	e7dc      	b.n	800678c <__ieee754_rem_pio2+0x6c>
 80067d2:	f7f9 fe51 	bl	8000478 <__adddf3>
 80067d6:	45a8      	cmp	r8, r5
 80067d8:	4606      	mov	r6, r0
 80067da:	460f      	mov	r7, r1
 80067dc:	d018      	beq.n	8006810 <__ieee754_rem_pio2+0xf0>
 80067de:	a38c      	add	r3, pc, #560	@ (adr r3, 8006a10 <__ieee754_rem_pio2+0x2f0>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f7f9 fe48 	bl	8000478 <__adddf3>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4680      	mov	r8, r0
 80067ee:	4689      	mov	r9, r1
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7f9 fe3e 	bl	8000474 <__aeabi_dsub>
 80067f8:	a385      	add	r3, pc, #532	@ (adr r3, 8006a10 <__ieee754_rem_pio2+0x2f0>)
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f7f9 fe3b 	bl	8000478 <__adddf3>
 8006802:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006806:	e9c4 8900 	strd	r8, r9, [r4]
 800680a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800680e:	e7c4      	b.n	800679a <__ieee754_rem_pio2+0x7a>
 8006810:	a381      	add	r3, pc, #516	@ (adr r3, 8006a18 <__ieee754_rem_pio2+0x2f8>)
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	f7f9 fe2f 	bl	8000478 <__adddf3>
 800681a:	a381      	add	r3, pc, #516	@ (adr r3, 8006a20 <__ieee754_rem_pio2+0x300>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	4606      	mov	r6, r0
 8006822:	460f      	mov	r7, r1
 8006824:	f7f9 fe28 	bl	8000478 <__adddf3>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4680      	mov	r8, r0
 800682e:	4689      	mov	r9, r1
 8006830:	4630      	mov	r0, r6
 8006832:	4639      	mov	r1, r7
 8006834:	f7f9 fe1e 	bl	8000474 <__aeabi_dsub>
 8006838:	a379      	add	r3, pc, #484	@ (adr r3, 8006a20 <__ieee754_rem_pio2+0x300>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	e7de      	b.n	80067fe <__ieee754_rem_pio2+0xde>
 8006840:	4b82      	ldr	r3, [pc, #520]	@ (8006a4c <__ieee754_rem_pio2+0x32c>)
 8006842:	4598      	cmp	r8, r3
 8006844:	f200 80d1 	bhi.w	80069ea <__ieee754_rem_pio2+0x2ca>
 8006848:	f000 fe38 	bl	80074bc <fabs>
 800684c:	ec57 6b10 	vmov	r6, r7, d0
 8006850:	a375      	add	r3, pc, #468	@ (adr r3, 8006a28 <__ieee754_rem_pio2+0x308>)
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	4630      	mov	r0, r6
 8006858:	4639      	mov	r1, r7
 800685a:	f7f9 fcdd 	bl	8000218 <__aeabi_dmul>
 800685e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a50 <__ieee754_rem_pio2+0x330>)
 8006860:	2200      	movs	r2, #0
 8006862:	f7f9 fe09 	bl	8000478 <__adddf3>
 8006866:	f7fa f845 	bl	80008f4 <__aeabi_d2iz>
 800686a:	4605      	mov	r5, r0
 800686c:	f7f9 ff50 	bl	8000710 <__aeabi_i2d>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006878:	a363      	add	r3, pc, #396	@ (adr r3, 8006a08 <__ieee754_rem_pio2+0x2e8>)
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	f7f9 fccb 	bl	8000218 <__aeabi_dmul>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4630      	mov	r0, r6
 8006888:	4639      	mov	r1, r7
 800688a:	f7f9 fdf3 	bl	8000474 <__aeabi_dsub>
 800688e:	a360      	add	r3, pc, #384	@ (adr r3, 8006a10 <__ieee754_rem_pio2+0x2f0>)
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	4682      	mov	sl, r0
 8006896:	468b      	mov	fp, r1
 8006898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800689c:	f7f9 fcbc 	bl	8000218 <__aeabi_dmul>
 80068a0:	2d1f      	cmp	r5, #31
 80068a2:	4606      	mov	r6, r0
 80068a4:	460f      	mov	r7, r1
 80068a6:	dc0c      	bgt.n	80068c2 <__ieee754_rem_pio2+0x1a2>
 80068a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006a54 <__ieee754_rem_pio2+0x334>)
 80068aa:	1e6a      	subs	r2, r5, #1
 80068ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b0:	4543      	cmp	r3, r8
 80068b2:	d006      	beq.n	80068c2 <__ieee754_rem_pio2+0x1a2>
 80068b4:	4632      	mov	r2, r6
 80068b6:	463b      	mov	r3, r7
 80068b8:	4650      	mov	r0, sl
 80068ba:	4659      	mov	r1, fp
 80068bc:	f7f9 fdda 	bl	8000474 <__aeabi_dsub>
 80068c0:	e00e      	b.n	80068e0 <__ieee754_rem_pio2+0x1c0>
 80068c2:	463b      	mov	r3, r7
 80068c4:	4632      	mov	r2, r6
 80068c6:	4650      	mov	r0, sl
 80068c8:	4659      	mov	r1, fp
 80068ca:	f7f9 fdd3 	bl	8000474 <__aeabi_dsub>
 80068ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 80068d2:	9305      	str	r3, [sp, #20]
 80068d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80068d8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80068dc:	2b10      	cmp	r3, #16
 80068de:	dc02      	bgt.n	80068e6 <__ieee754_rem_pio2+0x1c6>
 80068e0:	e9c4 0100 	strd	r0, r1, [r4]
 80068e4:	e039      	b.n	800695a <__ieee754_rem_pio2+0x23a>
 80068e6:	a34c      	add	r3, pc, #304	@ (adr r3, 8006a18 <__ieee754_rem_pio2+0x2f8>)
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068f0:	f7f9 fc92 	bl	8000218 <__aeabi_dmul>
 80068f4:	4606      	mov	r6, r0
 80068f6:	460f      	mov	r7, r1
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4650      	mov	r0, sl
 80068fe:	4659      	mov	r1, fp
 8006900:	f7f9 fdb8 	bl	8000474 <__aeabi_dsub>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4680      	mov	r8, r0
 800690a:	4689      	mov	r9, r1
 800690c:	4650      	mov	r0, sl
 800690e:	4659      	mov	r1, fp
 8006910:	f7f9 fdb0 	bl	8000474 <__aeabi_dsub>
 8006914:	4632      	mov	r2, r6
 8006916:	463b      	mov	r3, r7
 8006918:	f7f9 fdac 	bl	8000474 <__aeabi_dsub>
 800691c:	a340      	add	r3, pc, #256	@ (adr r3, 8006a20 <__ieee754_rem_pio2+0x300>)
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	4606      	mov	r6, r0
 8006924:	460f      	mov	r7, r1
 8006926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800692a:	f7f9 fc75 	bl	8000218 <__aeabi_dmul>
 800692e:	4632      	mov	r2, r6
 8006930:	463b      	mov	r3, r7
 8006932:	f7f9 fd9f 	bl	8000474 <__aeabi_dsub>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4606      	mov	r6, r0
 800693c:	460f      	mov	r7, r1
 800693e:	4640      	mov	r0, r8
 8006940:	4649      	mov	r1, r9
 8006942:	f7f9 fd97 	bl	8000474 <__aeabi_dsub>
 8006946:	9a05      	ldr	r2, [sp, #20]
 8006948:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b31      	cmp	r3, #49	@ 0x31
 8006950:	dc20      	bgt.n	8006994 <__ieee754_rem_pio2+0x274>
 8006952:	e9c4 0100 	strd	r0, r1, [r4]
 8006956:	46c2      	mov	sl, r8
 8006958:	46cb      	mov	fp, r9
 800695a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800695e:	4650      	mov	r0, sl
 8006960:	4642      	mov	r2, r8
 8006962:	464b      	mov	r3, r9
 8006964:	4659      	mov	r1, fp
 8006966:	f7f9 fd85 	bl	8000474 <__aeabi_dsub>
 800696a:	463b      	mov	r3, r7
 800696c:	4632      	mov	r2, r6
 800696e:	f7f9 fd81 	bl	8000474 <__aeabi_dsub>
 8006972:	9b04      	ldr	r3, [sp, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800697a:	f6bf af0e 	bge.w	800679a <__ieee754_rem_pio2+0x7a>
 800697e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006982:	6063      	str	r3, [r4, #4]
 8006984:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006988:	f8c4 8000 	str.w	r8, [r4]
 800698c:	60a0      	str	r0, [r4, #8]
 800698e:	60e3      	str	r3, [r4, #12]
 8006990:	426d      	negs	r5, r5
 8006992:	e702      	b.n	800679a <__ieee754_rem_pio2+0x7a>
 8006994:	a326      	add	r3, pc, #152	@ (adr r3, 8006a30 <__ieee754_rem_pio2+0x310>)
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800699e:	f7f9 fc3b 	bl	8000218 <__aeabi_dmul>
 80069a2:	4606      	mov	r6, r0
 80069a4:	460f      	mov	r7, r1
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4640      	mov	r0, r8
 80069ac:	4649      	mov	r1, r9
 80069ae:	f7f9 fd61 	bl	8000474 <__aeabi_dsub>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4682      	mov	sl, r0
 80069b8:	468b      	mov	fp, r1
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	f7f9 fd59 	bl	8000474 <__aeabi_dsub>
 80069c2:	4632      	mov	r2, r6
 80069c4:	463b      	mov	r3, r7
 80069c6:	f7f9 fd55 	bl	8000474 <__aeabi_dsub>
 80069ca:	a31b      	add	r3, pc, #108	@ (adr r3, 8006a38 <__ieee754_rem_pio2+0x318>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	4606      	mov	r6, r0
 80069d2:	460f      	mov	r7, r1
 80069d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d8:	f7f9 fc1e 	bl	8000218 <__aeabi_dmul>
 80069dc:	4632      	mov	r2, r6
 80069de:	463b      	mov	r3, r7
 80069e0:	f7f9 fd48 	bl	8000474 <__aeabi_dsub>
 80069e4:	4606      	mov	r6, r0
 80069e6:	460f      	mov	r7, r1
 80069e8:	e764      	b.n	80068b4 <__ieee754_rem_pio2+0x194>
 80069ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006a58 <__ieee754_rem_pio2+0x338>)
 80069ec:	4598      	cmp	r8, r3
 80069ee:	d935      	bls.n	8006a5c <__ieee754_rem_pio2+0x33c>
 80069f0:	4632      	mov	r2, r6
 80069f2:	463b      	mov	r3, r7
 80069f4:	4630      	mov	r0, r6
 80069f6:	4639      	mov	r1, r7
 80069f8:	f7f9 fd3c 	bl	8000474 <__aeabi_dsub>
 80069fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a00:	e9c4 0100 	strd	r0, r1, [r4]
 8006a04:	e69e      	b.n	8006744 <__ieee754_rem_pio2+0x24>
 8006a06:	bf00      	nop
 8006a08:	54400000 	.word	0x54400000
 8006a0c:	3ff921fb 	.word	0x3ff921fb
 8006a10:	1a626331 	.word	0x1a626331
 8006a14:	3dd0b461 	.word	0x3dd0b461
 8006a18:	1a600000 	.word	0x1a600000
 8006a1c:	3dd0b461 	.word	0x3dd0b461
 8006a20:	2e037073 	.word	0x2e037073
 8006a24:	3ba3198a 	.word	0x3ba3198a
 8006a28:	6dc9c883 	.word	0x6dc9c883
 8006a2c:	3fe45f30 	.word	0x3fe45f30
 8006a30:	2e000000 	.word	0x2e000000
 8006a34:	3ba3198a 	.word	0x3ba3198a
 8006a38:	252049c1 	.word	0x252049c1
 8006a3c:	397b839a 	.word	0x397b839a
 8006a40:	3fe921fb 	.word	0x3fe921fb
 8006a44:	4002d97b 	.word	0x4002d97b
 8006a48:	3ff921fb 	.word	0x3ff921fb
 8006a4c:	413921fb 	.word	0x413921fb
 8006a50:	3fe00000 	.word	0x3fe00000
 8006a54:	08007770 	.word	0x08007770
 8006a58:	7fefffff 	.word	0x7fefffff
 8006a5c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006a60:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006a64:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006a68:	4630      	mov	r0, r6
 8006a6a:	460f      	mov	r7, r1
 8006a6c:	f7f9 ff42 	bl	80008f4 <__aeabi_d2iz>
 8006a70:	f7f9 fe4e 	bl	8000710 <__aeabi_i2d>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a80:	f7f9 fcf8 	bl	8000474 <__aeabi_dsub>
 8006a84:	4b22      	ldr	r3, [pc, #136]	@ (8006b10 <__ieee754_rem_pio2+0x3f0>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	f7f9 fbc6 	bl	8000218 <__aeabi_dmul>
 8006a8c:	460f      	mov	r7, r1
 8006a8e:	4606      	mov	r6, r0
 8006a90:	f7f9 ff30 	bl	80008f4 <__aeabi_d2iz>
 8006a94:	f7f9 fe3c 	bl	8000710 <__aeabi_i2d>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006aa4:	f7f9 fce6 	bl	8000474 <__aeabi_dsub>
 8006aa8:	4b19      	ldr	r3, [pc, #100]	@ (8006b10 <__ieee754_rem_pio2+0x3f0>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f7f9 fbb4 	bl	8000218 <__aeabi_dmul>
 8006ab0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006ab4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006ab8:	f04f 0803 	mov.w	r8, #3
 8006abc:	2600      	movs	r6, #0
 8006abe:	2700      	movs	r7, #0
 8006ac0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	46c2      	mov	sl, r8
 8006aca:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006ace:	f7f9 fedf 	bl	8000890 <__aeabi_dcmpeq>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d1f4      	bne.n	8006ac0 <__ieee754_rem_pio2+0x3a0>
 8006ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b14 <__ieee754_rem_pio2+0x3f4>)
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	2302      	movs	r3, #2
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	462a      	mov	r2, r5
 8006ae0:	4653      	mov	r3, sl
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	a806      	add	r0, sp, #24
 8006ae6:	f000 f817 	bl	8006b18 <__kernel_rem_pio2>
 8006aea:	9b04      	ldr	r3, [sp, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	4605      	mov	r5, r0
 8006af0:	f6bf ae53 	bge.w	800679a <__ieee754_rem_pio2+0x7a>
 8006af4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006af8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006afc:	e9c4 2300 	strd	r2, r3, [r4]
 8006b00:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006b04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b08:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006b0c:	e740      	b.n	8006990 <__ieee754_rem_pio2+0x270>
 8006b0e:	bf00      	nop
 8006b10:	41700000 	.word	0x41700000
 8006b14:	080077f0 	.word	0x080077f0

08006b18 <__kernel_rem_pio2>:
 8006b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1c:	ed2d 8b02 	vpush	{d8}
 8006b20:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006b24:	f112 0f14 	cmn.w	r2, #20
 8006b28:	9306      	str	r3, [sp, #24]
 8006b2a:	9104      	str	r1, [sp, #16]
 8006b2c:	4bc2      	ldr	r3, [pc, #776]	@ (8006e38 <__kernel_rem_pio2+0x320>)
 8006b2e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006b30:	9008      	str	r0, [sp, #32]
 8006b32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	9b06      	ldr	r3, [sp, #24]
 8006b3a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006b3e:	bfa8      	it	ge
 8006b40:	1ed4      	subge	r4, r2, #3
 8006b42:	9305      	str	r3, [sp, #20]
 8006b44:	bfb2      	itee	lt
 8006b46:	2400      	movlt	r4, #0
 8006b48:	2318      	movge	r3, #24
 8006b4a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006b4e:	f06f 0317 	mvn.w	r3, #23
 8006b52:	fb04 3303 	mla	r3, r4, r3, r3
 8006b56:	eb03 0b02 	add.w	fp, r3, r2
 8006b5a:	9b00      	ldr	r3, [sp, #0]
 8006b5c:	9a05      	ldr	r2, [sp, #20]
 8006b5e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8006e28 <__kernel_rem_pio2+0x310>
 8006b62:	eb03 0802 	add.w	r8, r3, r2
 8006b66:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006b68:	1aa7      	subs	r7, r4, r2
 8006b6a:	ae20      	add	r6, sp, #128	@ 0x80
 8006b6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006b70:	2500      	movs	r5, #0
 8006b72:	4545      	cmp	r5, r8
 8006b74:	dd12      	ble.n	8006b9c <__kernel_rem_pio2+0x84>
 8006b76:	9b06      	ldr	r3, [sp, #24]
 8006b78:	aa20      	add	r2, sp, #128	@ 0x80
 8006b7a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006b7e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006b82:	2700      	movs	r7, #0
 8006b84:	9b00      	ldr	r3, [sp, #0]
 8006b86:	429f      	cmp	r7, r3
 8006b88:	dc2e      	bgt.n	8006be8 <__kernel_rem_pio2+0xd0>
 8006b8a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8006e28 <__kernel_rem_pio2+0x310>
 8006b8e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b92:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b96:	46a8      	mov	r8, r5
 8006b98:	2600      	movs	r6, #0
 8006b9a:	e01b      	b.n	8006bd4 <__kernel_rem_pio2+0xbc>
 8006b9c:	42ef      	cmn	r7, r5
 8006b9e:	d407      	bmi.n	8006bb0 <__kernel_rem_pio2+0x98>
 8006ba0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006ba4:	f7f9 fdb4 	bl	8000710 <__aeabi_i2d>
 8006ba8:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006bac:	3501      	adds	r5, #1
 8006bae:	e7e0      	b.n	8006b72 <__kernel_rem_pio2+0x5a>
 8006bb0:	ec51 0b18 	vmov	r0, r1, d8
 8006bb4:	e7f8      	b.n	8006ba8 <__kernel_rem_pio2+0x90>
 8006bb6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8006bba:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006bbe:	f7f9 fb2b 	bl	8000218 <__aeabi_dmul>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bca:	f7f9 fc55 	bl	8000478 <__adddf3>
 8006bce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bd2:	3601      	adds	r6, #1
 8006bd4:	9b05      	ldr	r3, [sp, #20]
 8006bd6:	429e      	cmp	r6, r3
 8006bd8:	dded      	ble.n	8006bb6 <__kernel_rem_pio2+0x9e>
 8006bda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bde:	3701      	adds	r7, #1
 8006be0:	ecaa 7b02 	vstmia	sl!, {d7}
 8006be4:	3508      	adds	r5, #8
 8006be6:	e7cd      	b.n	8006b84 <__kernel_rem_pio2+0x6c>
 8006be8:	9b00      	ldr	r3, [sp, #0]
 8006bea:	f8dd 8000 	ldr.w	r8, [sp]
 8006bee:	aa0c      	add	r2, sp, #48	@ 0x30
 8006bf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006bf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bf6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006bf8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bfe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006c02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c04:	ab98      	add	r3, sp, #608	@ 0x260
 8006c06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006c0a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006c0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c12:	ac0c      	add	r4, sp, #48	@ 0x30
 8006c14:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006c16:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006c1a:	46a1      	mov	r9, r4
 8006c1c:	46c2      	mov	sl, r8
 8006c1e:	f1ba 0f00 	cmp.w	sl, #0
 8006c22:	dc77      	bgt.n	8006d14 <__kernel_rem_pio2+0x1fc>
 8006c24:	4658      	mov	r0, fp
 8006c26:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006c2a:	f000 fc51 	bl	80074d0 <scalbn>
 8006c2e:	ec57 6b10 	vmov	r6, r7, d0
 8006c32:	2200      	movs	r2, #0
 8006c34:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006c38:	4630      	mov	r0, r6
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	f7f9 faec 	bl	8000218 <__aeabi_dmul>
 8006c40:	ec41 0b10 	vmov	d0, r0, r1
 8006c44:	f000 fcc0 	bl	80075c8 <floor>
 8006c48:	4b7c      	ldr	r3, [pc, #496]	@ (8006e3c <__kernel_rem_pio2+0x324>)
 8006c4a:	ec51 0b10 	vmov	r0, r1, d0
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f7f9 fae2 	bl	8000218 <__aeabi_dmul>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4630      	mov	r0, r6
 8006c5a:	4639      	mov	r1, r7
 8006c5c:	f7f9 fc0a 	bl	8000474 <__aeabi_dsub>
 8006c60:	460f      	mov	r7, r1
 8006c62:	4606      	mov	r6, r0
 8006c64:	f7f9 fe46 	bl	80008f4 <__aeabi_d2iz>
 8006c68:	9002      	str	r0, [sp, #8]
 8006c6a:	f7f9 fd51 	bl	8000710 <__aeabi_i2d>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4630      	mov	r0, r6
 8006c74:	4639      	mov	r1, r7
 8006c76:	f7f9 fbfd 	bl	8000474 <__aeabi_dsub>
 8006c7a:	f1bb 0f00 	cmp.w	fp, #0
 8006c7e:	4606      	mov	r6, r0
 8006c80:	460f      	mov	r7, r1
 8006c82:	dd6c      	ble.n	8006d5e <__kernel_rem_pio2+0x246>
 8006c84:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8006c88:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c8a:	9d02      	ldr	r5, [sp, #8]
 8006c8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c90:	f1cb 0018 	rsb	r0, fp, #24
 8006c94:	fa43 f200 	asr.w	r2, r3, r0
 8006c98:	4415      	add	r5, r2
 8006c9a:	4082      	lsls	r2, r0
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	aa0c      	add	r2, sp, #48	@ 0x30
 8006ca0:	9502      	str	r5, [sp, #8]
 8006ca2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006ca6:	f1cb 0217 	rsb	r2, fp, #23
 8006caa:	fa43 f902 	asr.w	r9, r3, r2
 8006cae:	f1b9 0f00 	cmp.w	r9, #0
 8006cb2:	dd64      	ble.n	8006d7e <__kernel_rem_pio2+0x266>
 8006cb4:	9b02      	ldr	r3, [sp, #8]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	3301      	adds	r3, #1
 8006cba:	9302      	str	r3, [sp, #8]
 8006cbc:	4615      	mov	r5, r2
 8006cbe:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006cc2:	4590      	cmp	r8, r2
 8006cc4:	f300 80a1 	bgt.w	8006e0a <__kernel_rem_pio2+0x2f2>
 8006cc8:	f1bb 0f00 	cmp.w	fp, #0
 8006ccc:	dd07      	ble.n	8006cde <__kernel_rem_pio2+0x1c6>
 8006cce:	f1bb 0f01 	cmp.w	fp, #1
 8006cd2:	f000 80c1 	beq.w	8006e58 <__kernel_rem_pio2+0x340>
 8006cd6:	f1bb 0f02 	cmp.w	fp, #2
 8006cda:	f000 80c8 	beq.w	8006e6e <__kernel_rem_pio2+0x356>
 8006cde:	f1b9 0f02 	cmp.w	r9, #2
 8006ce2:	d14c      	bne.n	8006d7e <__kernel_rem_pio2+0x266>
 8006ce4:	4632      	mov	r2, r6
 8006ce6:	463b      	mov	r3, r7
 8006ce8:	4955      	ldr	r1, [pc, #340]	@ (8006e40 <__kernel_rem_pio2+0x328>)
 8006cea:	2000      	movs	r0, #0
 8006cec:	f7f9 fbc2 	bl	8000474 <__aeabi_dsub>
 8006cf0:	4606      	mov	r6, r0
 8006cf2:	460f      	mov	r7, r1
 8006cf4:	2d00      	cmp	r5, #0
 8006cf6:	d042      	beq.n	8006d7e <__kernel_rem_pio2+0x266>
 8006cf8:	4658      	mov	r0, fp
 8006cfa:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8006e30 <__kernel_rem_pio2+0x318>
 8006cfe:	f000 fbe7 	bl	80074d0 <scalbn>
 8006d02:	4630      	mov	r0, r6
 8006d04:	4639      	mov	r1, r7
 8006d06:	ec53 2b10 	vmov	r2, r3, d0
 8006d0a:	f7f9 fbb3 	bl	8000474 <__aeabi_dsub>
 8006d0e:	4606      	mov	r6, r0
 8006d10:	460f      	mov	r7, r1
 8006d12:	e034      	b.n	8006d7e <__kernel_rem_pio2+0x266>
 8006d14:	4b4b      	ldr	r3, [pc, #300]	@ (8006e44 <__kernel_rem_pio2+0x32c>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d1c:	f7f9 fa7c 	bl	8000218 <__aeabi_dmul>
 8006d20:	f7f9 fde8 	bl	80008f4 <__aeabi_d2iz>
 8006d24:	f7f9 fcf4 	bl	8000710 <__aeabi_i2d>
 8006d28:	4b47      	ldr	r3, [pc, #284]	@ (8006e48 <__kernel_rem_pio2+0x330>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	460f      	mov	r7, r1
 8006d30:	f7f9 fa72 	bl	8000218 <__aeabi_dmul>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d3c:	f7f9 fb9a 	bl	8000474 <__aeabi_dsub>
 8006d40:	f7f9 fdd8 	bl	80008f4 <__aeabi_d2iz>
 8006d44:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006d48:	f849 0b04 	str.w	r0, [r9], #4
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f7f9 fb92 	bl	8000478 <__adddf3>
 8006d54:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5c:	e75f      	b.n	8006c1e <__kernel_rem_pio2+0x106>
 8006d5e:	d107      	bne.n	8006d70 <__kernel_rem_pio2+0x258>
 8006d60:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8006d64:	aa0c      	add	r2, sp, #48	@ 0x30
 8006d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d6a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006d6e:	e79e      	b.n	8006cae <__kernel_rem_pio2+0x196>
 8006d70:	4b36      	ldr	r3, [pc, #216]	@ (8006e4c <__kernel_rem_pio2+0x334>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	f7f9 fdaa 	bl	80008cc <__aeabi_dcmpge>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d143      	bne.n	8006e04 <__kernel_rem_pio2+0x2ec>
 8006d7c:	4681      	mov	r9, r0
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2300      	movs	r3, #0
 8006d82:	4630      	mov	r0, r6
 8006d84:	4639      	mov	r1, r7
 8006d86:	f7f9 fd83 	bl	8000890 <__aeabi_dcmpeq>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	f000 80c1 	beq.w	8006f12 <__kernel_rem_pio2+0x3fa>
 8006d90:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8006d94:	2200      	movs	r2, #0
 8006d96:	9900      	ldr	r1, [sp, #0]
 8006d98:	428b      	cmp	r3, r1
 8006d9a:	da70      	bge.n	8006e7e <__kernel_rem_pio2+0x366>
 8006d9c:	2a00      	cmp	r2, #0
 8006d9e:	f000 808b 	beq.w	8006eb8 <__kernel_rem_pio2+0x3a0>
 8006da2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006da6:	ab0c      	add	r3, sp, #48	@ 0x30
 8006da8:	f1ab 0b18 	sub.w	fp, fp, #24
 8006dac:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0f6      	beq.n	8006da2 <__kernel_rem_pio2+0x28a>
 8006db4:	4658      	mov	r0, fp
 8006db6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8006e30 <__kernel_rem_pio2+0x318>
 8006dba:	f000 fb89 	bl	80074d0 <scalbn>
 8006dbe:	f108 0301 	add.w	r3, r8, #1
 8006dc2:	00da      	lsls	r2, r3, #3
 8006dc4:	9205      	str	r2, [sp, #20]
 8006dc6:	ec55 4b10 	vmov	r4, r5, d0
 8006dca:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006dcc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8006e44 <__kernel_rem_pio2+0x32c>
 8006dd0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006dd4:	4646      	mov	r6, r8
 8006dd6:	f04f 0a00 	mov.w	sl, #0
 8006dda:	2e00      	cmp	r6, #0
 8006ddc:	f280 80d1 	bge.w	8006f82 <__kernel_rem_pio2+0x46a>
 8006de0:	4644      	mov	r4, r8
 8006de2:	2c00      	cmp	r4, #0
 8006de4:	f2c0 80ff 	blt.w	8006fe6 <__kernel_rem_pio2+0x4ce>
 8006de8:	4b19      	ldr	r3, [pc, #100]	@ (8006e50 <__kernel_rem_pio2+0x338>)
 8006dea:	461f      	mov	r7, r3
 8006dec:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006dee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006df2:	9306      	str	r3, [sp, #24]
 8006df4:	f04f 0a00 	mov.w	sl, #0
 8006df8:	f04f 0b00 	mov.w	fp, #0
 8006dfc:	2600      	movs	r6, #0
 8006dfe:	eba8 0504 	sub.w	r5, r8, r4
 8006e02:	e0e4      	b.n	8006fce <__kernel_rem_pio2+0x4b6>
 8006e04:	f04f 0902 	mov.w	r9, #2
 8006e08:	e754      	b.n	8006cb4 <__kernel_rem_pio2+0x19c>
 8006e0a:	f854 3b04 	ldr.w	r3, [r4], #4
 8006e0e:	bb0d      	cbnz	r5, 8006e54 <__kernel_rem_pio2+0x33c>
 8006e10:	b123      	cbz	r3, 8006e1c <__kernel_rem_pio2+0x304>
 8006e12:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006e16:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	3201      	adds	r2, #1
 8006e1e:	461d      	mov	r5, r3
 8006e20:	e74f      	b.n	8006cc2 <__kernel_rem_pio2+0x1aa>
 8006e22:	bf00      	nop
 8006e24:	f3af 8000 	nop.w
	...
 8006e34:	3ff00000 	.word	0x3ff00000
 8006e38:	08007938 	.word	0x08007938
 8006e3c:	40200000 	.word	0x40200000
 8006e40:	3ff00000 	.word	0x3ff00000
 8006e44:	3e700000 	.word	0x3e700000
 8006e48:	41700000 	.word	0x41700000
 8006e4c:	3fe00000 	.word	0x3fe00000
 8006e50:	080078f8 	.word	0x080078f8
 8006e54:	1acb      	subs	r3, r1, r3
 8006e56:	e7de      	b.n	8006e16 <__kernel_rem_pio2+0x2fe>
 8006e58:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8006e5c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e62:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006e66:	a90c      	add	r1, sp, #48	@ 0x30
 8006e68:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006e6c:	e737      	b.n	8006cde <__kernel_rem_pio2+0x1c6>
 8006e6e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8006e72:	ab0c      	add	r3, sp, #48	@ 0x30
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006e7c:	e7f3      	b.n	8006e66 <__kernel_rem_pio2+0x34e>
 8006e7e:	a90c      	add	r1, sp, #48	@ 0x30
 8006e80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	430a      	orrs	r2, r1
 8006e88:	e785      	b.n	8006d96 <__kernel_rem_pio2+0x27e>
 8006e8a:	3401      	adds	r4, #1
 8006e8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e90:	2a00      	cmp	r2, #0
 8006e92:	d0fa      	beq.n	8006e8a <__kernel_rem_pio2+0x372>
 8006e94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e96:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006e9a:	eb0d 0503 	add.w	r5, sp, r3
 8006e9e:	9b06      	ldr	r3, [sp, #24]
 8006ea0:	aa20      	add	r2, sp, #128	@ 0x80
 8006ea2:	4443      	add	r3, r8
 8006ea4:	f108 0701 	add.w	r7, r8, #1
 8006ea8:	3d98      	subs	r5, #152	@ 0x98
 8006eaa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006eae:	4444      	add	r4, r8
 8006eb0:	42bc      	cmp	r4, r7
 8006eb2:	da04      	bge.n	8006ebe <__kernel_rem_pio2+0x3a6>
 8006eb4:	46a0      	mov	r8, r4
 8006eb6:	e6a2      	b.n	8006bfe <__kernel_rem_pio2+0xe6>
 8006eb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eba:	2401      	movs	r4, #1
 8006ebc:	e7e6      	b.n	8006e8c <__kernel_rem_pio2+0x374>
 8006ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006ec4:	f7f9 fc24 	bl	8000710 <__aeabi_i2d>
 8006ec8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8007188 <__kernel_rem_pio2+0x670>
 8006ecc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006ed0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ed4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ed8:	46b2      	mov	sl, r6
 8006eda:	f04f 0800 	mov.w	r8, #0
 8006ede:	9b05      	ldr	r3, [sp, #20]
 8006ee0:	4598      	cmp	r8, r3
 8006ee2:	dd05      	ble.n	8006ef0 <__kernel_rem_pio2+0x3d8>
 8006ee4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ee8:	3701      	adds	r7, #1
 8006eea:	eca5 7b02 	vstmia	r5!, {d7}
 8006eee:	e7df      	b.n	8006eb0 <__kernel_rem_pio2+0x398>
 8006ef0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006ef4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006ef8:	f7f9 f98e 	bl	8000218 <__aeabi_dmul>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f04:	f7f9 fab8 	bl	8000478 <__adddf3>
 8006f08:	f108 0801 	add.w	r8, r8, #1
 8006f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f10:	e7e5      	b.n	8006ede <__kernel_rem_pio2+0x3c6>
 8006f12:	f1cb 0000 	rsb	r0, fp, #0
 8006f16:	ec47 6b10 	vmov	d0, r6, r7
 8006f1a:	f000 fad9 	bl	80074d0 <scalbn>
 8006f1e:	ec55 4b10 	vmov	r4, r5, d0
 8006f22:	4b9b      	ldr	r3, [pc, #620]	@ (8007190 <__kernel_rem_pio2+0x678>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	4620      	mov	r0, r4
 8006f28:	4629      	mov	r1, r5
 8006f2a:	f7f9 fccf 	bl	80008cc <__aeabi_dcmpge>
 8006f2e:	b300      	cbz	r0, 8006f72 <__kernel_rem_pio2+0x45a>
 8006f30:	4b98      	ldr	r3, [pc, #608]	@ (8007194 <__kernel_rem_pio2+0x67c>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	4620      	mov	r0, r4
 8006f36:	4629      	mov	r1, r5
 8006f38:	f7f9 f96e 	bl	8000218 <__aeabi_dmul>
 8006f3c:	f7f9 fcda 	bl	80008f4 <__aeabi_d2iz>
 8006f40:	4606      	mov	r6, r0
 8006f42:	f7f9 fbe5 	bl	8000710 <__aeabi_i2d>
 8006f46:	4b92      	ldr	r3, [pc, #584]	@ (8007190 <__kernel_rem_pio2+0x678>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f7f9 f965 	bl	8000218 <__aeabi_dmul>
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4602      	mov	r2, r0
 8006f52:	4629      	mov	r1, r5
 8006f54:	4620      	mov	r0, r4
 8006f56:	f7f9 fa8d 	bl	8000474 <__aeabi_dsub>
 8006f5a:	f7f9 fccb 	bl	80008f4 <__aeabi_d2iz>
 8006f5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f60:	f10b 0b18 	add.w	fp, fp, #24
 8006f64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006f68:	f108 0801 	add.w	r8, r8, #1
 8006f6c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006f70:	e720      	b.n	8006db4 <__kernel_rem_pio2+0x29c>
 8006f72:	4620      	mov	r0, r4
 8006f74:	4629      	mov	r1, r5
 8006f76:	f7f9 fcbd 	bl	80008f4 <__aeabi_d2iz>
 8006f7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006f80:	e718      	b.n	8006db4 <__kernel_rem_pio2+0x29c>
 8006f82:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006f88:	f7f9 fbc2 	bl	8000710 <__aeabi_i2d>
 8006f8c:	4622      	mov	r2, r4
 8006f8e:	462b      	mov	r3, r5
 8006f90:	f7f9 f942 	bl	8000218 <__aeabi_dmul>
 8006f94:	4652      	mov	r2, sl
 8006f96:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006f9a:	465b      	mov	r3, fp
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	f7f9 f93a 	bl	8000218 <__aeabi_dmul>
 8006fa4:	3e01      	subs	r6, #1
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	460d      	mov	r5, r1
 8006faa:	e716      	b.n	8006dda <__kernel_rem_pio2+0x2c2>
 8006fac:	9906      	ldr	r1, [sp, #24]
 8006fae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006fb2:	9106      	str	r1, [sp, #24]
 8006fb4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006fb8:	f7f9 f92e 	bl	8000218 <__aeabi_dmul>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4650      	mov	r0, sl
 8006fc2:	4659      	mov	r1, fp
 8006fc4:	f7f9 fa58 	bl	8000478 <__adddf3>
 8006fc8:	3601      	adds	r6, #1
 8006fca:	4682      	mov	sl, r0
 8006fcc:	468b      	mov	fp, r1
 8006fce:	9b00      	ldr	r3, [sp, #0]
 8006fd0:	429e      	cmp	r6, r3
 8006fd2:	dc01      	bgt.n	8006fd8 <__kernel_rem_pio2+0x4c0>
 8006fd4:	42ae      	cmp	r6, r5
 8006fd6:	dde9      	ble.n	8006fac <__kernel_rem_pio2+0x494>
 8006fd8:	ab48      	add	r3, sp, #288	@ 0x120
 8006fda:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006fde:	e9c5 ab00 	strd	sl, fp, [r5]
 8006fe2:	3c01      	subs	r4, #1
 8006fe4:	e6fd      	b.n	8006de2 <__kernel_rem_pio2+0x2ca>
 8006fe6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	dc0b      	bgt.n	8007004 <__kernel_rem_pio2+0x4ec>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	dc35      	bgt.n	800705c <__kernel_rem_pio2+0x544>
 8006ff0:	d059      	beq.n	80070a6 <__kernel_rem_pio2+0x58e>
 8006ff2:	9b02      	ldr	r3, [sp, #8]
 8006ff4:	f003 0007 	and.w	r0, r3, #7
 8006ff8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006ffc:	ecbd 8b02 	vpop	{d8}
 8007000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007004:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007006:	2b03      	cmp	r3, #3
 8007008:	d1f3      	bne.n	8006ff2 <__kernel_rem_pio2+0x4da>
 800700a:	9b05      	ldr	r3, [sp, #20]
 800700c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007010:	eb0d 0403 	add.w	r4, sp, r3
 8007014:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8007018:	4625      	mov	r5, r4
 800701a:	46c2      	mov	sl, r8
 800701c:	f1ba 0f00 	cmp.w	sl, #0
 8007020:	dc69      	bgt.n	80070f6 <__kernel_rem_pio2+0x5de>
 8007022:	4645      	mov	r5, r8
 8007024:	2d01      	cmp	r5, #1
 8007026:	f300 8087 	bgt.w	8007138 <__kernel_rem_pio2+0x620>
 800702a:	9c05      	ldr	r4, [sp, #20]
 800702c:	ab48      	add	r3, sp, #288	@ 0x120
 800702e:	441c      	add	r4, r3
 8007030:	2000      	movs	r0, #0
 8007032:	2100      	movs	r1, #0
 8007034:	f1b8 0f01 	cmp.w	r8, #1
 8007038:	f300 809c 	bgt.w	8007174 <__kernel_rem_pio2+0x65c>
 800703c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8007040:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8007044:	f1b9 0f00 	cmp.w	r9, #0
 8007048:	f040 80a6 	bne.w	8007198 <__kernel_rem_pio2+0x680>
 800704c:	9b04      	ldr	r3, [sp, #16]
 800704e:	e9c3 5600 	strd	r5, r6, [r3]
 8007052:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007056:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800705a:	e7ca      	b.n	8006ff2 <__kernel_rem_pio2+0x4da>
 800705c:	9d05      	ldr	r5, [sp, #20]
 800705e:	ab48      	add	r3, sp, #288	@ 0x120
 8007060:	441d      	add	r5, r3
 8007062:	4644      	mov	r4, r8
 8007064:	2000      	movs	r0, #0
 8007066:	2100      	movs	r1, #0
 8007068:	2c00      	cmp	r4, #0
 800706a:	da35      	bge.n	80070d8 <__kernel_rem_pio2+0x5c0>
 800706c:	f1b9 0f00 	cmp.w	r9, #0
 8007070:	d038      	beq.n	80070e4 <__kernel_rem_pio2+0x5cc>
 8007072:	4602      	mov	r2, r0
 8007074:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007078:	9c04      	ldr	r4, [sp, #16]
 800707a:	e9c4 2300 	strd	r2, r3, [r4]
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007086:	f7f9 f9f5 	bl	8000474 <__aeabi_dsub>
 800708a:	ad4a      	add	r5, sp, #296	@ 0x128
 800708c:	2401      	movs	r4, #1
 800708e:	45a0      	cmp	r8, r4
 8007090:	da2b      	bge.n	80070ea <__kernel_rem_pio2+0x5d2>
 8007092:	f1b9 0f00 	cmp.w	r9, #0
 8007096:	d002      	beq.n	800709e <__kernel_rem_pio2+0x586>
 8007098:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800709c:	4619      	mov	r1, r3
 800709e:	9b04      	ldr	r3, [sp, #16]
 80070a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80070a4:	e7a5      	b.n	8006ff2 <__kernel_rem_pio2+0x4da>
 80070a6:	9c05      	ldr	r4, [sp, #20]
 80070a8:	ab48      	add	r3, sp, #288	@ 0x120
 80070aa:	441c      	add	r4, r3
 80070ac:	2000      	movs	r0, #0
 80070ae:	2100      	movs	r1, #0
 80070b0:	f1b8 0f00 	cmp.w	r8, #0
 80070b4:	da09      	bge.n	80070ca <__kernel_rem_pio2+0x5b2>
 80070b6:	f1b9 0f00 	cmp.w	r9, #0
 80070ba:	d002      	beq.n	80070c2 <__kernel_rem_pio2+0x5aa>
 80070bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80070c0:	4619      	mov	r1, r3
 80070c2:	9b04      	ldr	r3, [sp, #16]
 80070c4:	e9c3 0100 	strd	r0, r1, [r3]
 80070c8:	e793      	b.n	8006ff2 <__kernel_rem_pio2+0x4da>
 80070ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80070ce:	f7f9 f9d3 	bl	8000478 <__adddf3>
 80070d2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80070d6:	e7eb      	b.n	80070b0 <__kernel_rem_pio2+0x598>
 80070d8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80070dc:	f7f9 f9cc 	bl	8000478 <__adddf3>
 80070e0:	3c01      	subs	r4, #1
 80070e2:	e7c1      	b.n	8007068 <__kernel_rem_pio2+0x550>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	e7c6      	b.n	8007078 <__kernel_rem_pio2+0x560>
 80070ea:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80070ee:	f7f9 f9c3 	bl	8000478 <__adddf3>
 80070f2:	3401      	adds	r4, #1
 80070f4:	e7cb      	b.n	800708e <__kernel_rem_pio2+0x576>
 80070f6:	ed35 7b02 	vldmdb	r5!, {d7}
 80070fa:	ed8d 7b00 	vstr	d7, [sp]
 80070fe:	ed95 7b02 	vldr	d7, [r5, #8]
 8007102:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007106:	ec53 2b17 	vmov	r2, r3, d7
 800710a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800710e:	f7f9 f9b3 	bl	8000478 <__adddf3>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4606      	mov	r6, r0
 8007118:	460f      	mov	r7, r1
 800711a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800711e:	f7f9 f9a9 	bl	8000474 <__aeabi_dsub>
 8007122:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007126:	f7f9 f9a7 	bl	8000478 <__adddf3>
 800712a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800712e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007132:	e9c5 6700 	strd	r6, r7, [r5]
 8007136:	e771      	b.n	800701c <__kernel_rem_pio2+0x504>
 8007138:	ed34 7b02 	vldmdb	r4!, {d7}
 800713c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007140:	ec51 0b17 	vmov	r0, r1, d7
 8007144:	4652      	mov	r2, sl
 8007146:	465b      	mov	r3, fp
 8007148:	ed8d 7b00 	vstr	d7, [sp]
 800714c:	f7f9 f994 	bl	8000478 <__adddf3>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4606      	mov	r6, r0
 8007156:	460f      	mov	r7, r1
 8007158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800715c:	f7f9 f98a 	bl	8000474 <__aeabi_dsub>
 8007160:	4652      	mov	r2, sl
 8007162:	465b      	mov	r3, fp
 8007164:	f7f9 f988 	bl	8000478 <__adddf3>
 8007168:	3d01      	subs	r5, #1
 800716a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800716e:	e9c4 6700 	strd	r6, r7, [r4]
 8007172:	e757      	b.n	8007024 <__kernel_rem_pio2+0x50c>
 8007174:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007178:	f7f9 f97e 	bl	8000478 <__adddf3>
 800717c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007180:	e758      	b.n	8007034 <__kernel_rem_pio2+0x51c>
 8007182:	bf00      	nop
 8007184:	f3af 8000 	nop.w
	...
 8007190:	41700000 	.word	0x41700000
 8007194:	3e700000 	.word	0x3e700000
 8007198:	9b04      	ldr	r3, [sp, #16]
 800719a:	9a04      	ldr	r2, [sp, #16]
 800719c:	601d      	str	r5, [r3, #0]
 800719e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80071a2:	605c      	str	r4, [r3, #4]
 80071a4:	609f      	str	r7, [r3, #8]
 80071a6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80071aa:	60d3      	str	r3, [r2, #12]
 80071ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80071b0:	6110      	str	r0, [r2, #16]
 80071b2:	6153      	str	r3, [r2, #20]
 80071b4:	e71d      	b.n	8006ff2 <__kernel_rem_pio2+0x4da>
 80071b6:	bf00      	nop

080071b8 <__kernel_cos>:
 80071b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	ec57 6b10 	vmov	r6, r7, d0
 80071c0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80071c4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80071c8:	ed8d 1b00 	vstr	d1, [sp]
 80071cc:	d206      	bcs.n	80071dc <__kernel_cos+0x24>
 80071ce:	4630      	mov	r0, r6
 80071d0:	4639      	mov	r1, r7
 80071d2:	f7f9 fb8f 	bl	80008f4 <__aeabi_d2iz>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f000 8088 	beq.w	80072ec <__kernel_cos+0x134>
 80071dc:	4632      	mov	r2, r6
 80071de:	463b      	mov	r3, r7
 80071e0:	4630      	mov	r0, r6
 80071e2:	4639      	mov	r1, r7
 80071e4:	f7f9 f818 	bl	8000218 <__aeabi_dmul>
 80071e8:	4b51      	ldr	r3, [pc, #324]	@ (8007330 <__kernel_cos+0x178>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	4604      	mov	r4, r0
 80071ee:	460d      	mov	r5, r1
 80071f0:	f7f9 f812 	bl	8000218 <__aeabi_dmul>
 80071f4:	a340      	add	r3, pc, #256	@ (adr r3, 80072f8 <__kernel_cos+0x140>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	4682      	mov	sl, r0
 80071fc:	468b      	mov	fp, r1
 80071fe:	4620      	mov	r0, r4
 8007200:	4629      	mov	r1, r5
 8007202:	f7f9 f809 	bl	8000218 <__aeabi_dmul>
 8007206:	a33e      	add	r3, pc, #248	@ (adr r3, 8007300 <__kernel_cos+0x148>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 f934 	bl	8000478 <__adddf3>
 8007210:	4622      	mov	r2, r4
 8007212:	462b      	mov	r3, r5
 8007214:	f7f9 f800 	bl	8000218 <__aeabi_dmul>
 8007218:	a33b      	add	r3, pc, #236	@ (adr r3, 8007308 <__kernel_cos+0x150>)
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	f7f9 f929 	bl	8000474 <__aeabi_dsub>
 8007222:	4622      	mov	r2, r4
 8007224:	462b      	mov	r3, r5
 8007226:	f7f8 fff7 	bl	8000218 <__aeabi_dmul>
 800722a:	a339      	add	r3, pc, #228	@ (adr r3, 8007310 <__kernel_cos+0x158>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f7f9 f922 	bl	8000478 <__adddf3>
 8007234:	4622      	mov	r2, r4
 8007236:	462b      	mov	r3, r5
 8007238:	f7f8 ffee 	bl	8000218 <__aeabi_dmul>
 800723c:	a336      	add	r3, pc, #216	@ (adr r3, 8007318 <__kernel_cos+0x160>)
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f7f9 f917 	bl	8000474 <__aeabi_dsub>
 8007246:	4622      	mov	r2, r4
 8007248:	462b      	mov	r3, r5
 800724a:	f7f8 ffe5 	bl	8000218 <__aeabi_dmul>
 800724e:	a334      	add	r3, pc, #208	@ (adr r3, 8007320 <__kernel_cos+0x168>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f7f9 f910 	bl	8000478 <__adddf3>
 8007258:	4622      	mov	r2, r4
 800725a:	462b      	mov	r3, r5
 800725c:	f7f8 ffdc 	bl	8000218 <__aeabi_dmul>
 8007260:	4622      	mov	r2, r4
 8007262:	462b      	mov	r3, r5
 8007264:	f7f8 ffd8 	bl	8000218 <__aeabi_dmul>
 8007268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800726c:	4604      	mov	r4, r0
 800726e:	460d      	mov	r5, r1
 8007270:	4630      	mov	r0, r6
 8007272:	4639      	mov	r1, r7
 8007274:	f7f8 ffd0 	bl	8000218 <__aeabi_dmul>
 8007278:	460b      	mov	r3, r1
 800727a:	4602      	mov	r2, r0
 800727c:	4629      	mov	r1, r5
 800727e:	4620      	mov	r0, r4
 8007280:	f7f9 f8f8 	bl	8000474 <__aeabi_dsub>
 8007284:	4b2b      	ldr	r3, [pc, #172]	@ (8007334 <__kernel_cos+0x17c>)
 8007286:	4598      	cmp	r8, r3
 8007288:	4606      	mov	r6, r0
 800728a:	460f      	mov	r7, r1
 800728c:	d810      	bhi.n	80072b0 <__kernel_cos+0xf8>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4650      	mov	r0, sl
 8007294:	4659      	mov	r1, fp
 8007296:	f7f9 f8ed 	bl	8000474 <__aeabi_dsub>
 800729a:	460b      	mov	r3, r1
 800729c:	4926      	ldr	r1, [pc, #152]	@ (8007338 <__kernel_cos+0x180>)
 800729e:	4602      	mov	r2, r0
 80072a0:	2000      	movs	r0, #0
 80072a2:	f7f9 f8e7 	bl	8000474 <__aeabi_dsub>
 80072a6:	ec41 0b10 	vmov	d0, r0, r1
 80072aa:	b003      	add	sp, #12
 80072ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b0:	4b22      	ldr	r3, [pc, #136]	@ (800733c <__kernel_cos+0x184>)
 80072b2:	4921      	ldr	r1, [pc, #132]	@ (8007338 <__kernel_cos+0x180>)
 80072b4:	4598      	cmp	r8, r3
 80072b6:	bf8c      	ite	hi
 80072b8:	4d21      	ldrhi	r5, [pc, #132]	@ (8007340 <__kernel_cos+0x188>)
 80072ba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80072be:	2400      	movs	r4, #0
 80072c0:	4622      	mov	r2, r4
 80072c2:	462b      	mov	r3, r5
 80072c4:	2000      	movs	r0, #0
 80072c6:	f7f9 f8d5 	bl	8000474 <__aeabi_dsub>
 80072ca:	4622      	mov	r2, r4
 80072cc:	4680      	mov	r8, r0
 80072ce:	4689      	mov	r9, r1
 80072d0:	462b      	mov	r3, r5
 80072d2:	4650      	mov	r0, sl
 80072d4:	4659      	mov	r1, fp
 80072d6:	f7f9 f8cd 	bl	8000474 <__aeabi_dsub>
 80072da:	4632      	mov	r2, r6
 80072dc:	463b      	mov	r3, r7
 80072de:	f7f9 f8c9 	bl	8000474 <__aeabi_dsub>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4640      	mov	r0, r8
 80072e8:	4649      	mov	r1, r9
 80072ea:	e7da      	b.n	80072a2 <__kernel_cos+0xea>
 80072ec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007328 <__kernel_cos+0x170>
 80072f0:	e7db      	b.n	80072aa <__kernel_cos+0xf2>
 80072f2:	bf00      	nop
 80072f4:	f3af 8000 	nop.w
 80072f8:	be8838d4 	.word	0xbe8838d4
 80072fc:	bda8fae9 	.word	0xbda8fae9
 8007300:	bdb4b1c4 	.word	0xbdb4b1c4
 8007304:	3e21ee9e 	.word	0x3e21ee9e
 8007308:	809c52ad 	.word	0x809c52ad
 800730c:	3e927e4f 	.word	0x3e927e4f
 8007310:	19cb1590 	.word	0x19cb1590
 8007314:	3efa01a0 	.word	0x3efa01a0
 8007318:	16c15177 	.word	0x16c15177
 800731c:	3f56c16c 	.word	0x3f56c16c
 8007320:	5555554c 	.word	0x5555554c
 8007324:	3fa55555 	.word	0x3fa55555
 8007328:	00000000 	.word	0x00000000
 800732c:	3ff00000 	.word	0x3ff00000
 8007330:	3fe00000 	.word	0x3fe00000
 8007334:	3fd33332 	.word	0x3fd33332
 8007338:	3ff00000 	.word	0x3ff00000
 800733c:	3fe90000 	.word	0x3fe90000
 8007340:	3fd20000 	.word	0x3fd20000
 8007344:	00000000 	.word	0x00000000

08007348 <__kernel_sin>:
 8007348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	ec55 4b10 	vmov	r4, r5, d0
 8007350:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007354:	b085      	sub	sp, #20
 8007356:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800735a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800735e:	4680      	mov	r8, r0
 8007360:	d205      	bcs.n	800736e <__kernel_sin+0x26>
 8007362:	4620      	mov	r0, r4
 8007364:	4629      	mov	r1, r5
 8007366:	f7f9 fac5 	bl	80008f4 <__aeabi_d2iz>
 800736a:	2800      	cmp	r0, #0
 800736c:	d052      	beq.n	8007414 <__kernel_sin+0xcc>
 800736e:	4622      	mov	r2, r4
 8007370:	462b      	mov	r3, r5
 8007372:	4620      	mov	r0, r4
 8007374:	4629      	mov	r1, r5
 8007376:	f7f8 ff4f 	bl	8000218 <__aeabi_dmul>
 800737a:	4682      	mov	sl, r0
 800737c:	468b      	mov	fp, r1
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4620      	mov	r0, r4
 8007384:	4629      	mov	r1, r5
 8007386:	f7f8 ff47 	bl	8000218 <__aeabi_dmul>
 800738a:	a342      	add	r3, pc, #264	@ (adr r3, 8007494 <__kernel_sin+0x14c>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	e9cd 0100 	strd	r0, r1, [sp]
 8007394:	4650      	mov	r0, sl
 8007396:	4659      	mov	r1, fp
 8007398:	f7f8 ff3e 	bl	8000218 <__aeabi_dmul>
 800739c:	a33f      	add	r3, pc, #252	@ (adr r3, 800749c <__kernel_sin+0x154>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f7f9 f867 	bl	8000474 <__aeabi_dsub>
 80073a6:	4652      	mov	r2, sl
 80073a8:	465b      	mov	r3, fp
 80073aa:	f7f8 ff35 	bl	8000218 <__aeabi_dmul>
 80073ae:	a33d      	add	r3, pc, #244	@ (adr r3, 80074a4 <__kernel_sin+0x15c>)
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	f7f9 f860 	bl	8000478 <__adddf3>
 80073b8:	4652      	mov	r2, sl
 80073ba:	465b      	mov	r3, fp
 80073bc:	f7f8 ff2c 	bl	8000218 <__aeabi_dmul>
 80073c0:	a33a      	add	r3, pc, #232	@ (adr r3, 80074ac <__kernel_sin+0x164>)
 80073c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c6:	f7f9 f855 	bl	8000474 <__aeabi_dsub>
 80073ca:	4652      	mov	r2, sl
 80073cc:	465b      	mov	r3, fp
 80073ce:	f7f8 ff23 	bl	8000218 <__aeabi_dmul>
 80073d2:	a338      	add	r3, pc, #224	@ (adr r3, 80074b4 <__kernel_sin+0x16c>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f7f9 f84e 	bl	8000478 <__adddf3>
 80073dc:	4606      	mov	r6, r0
 80073de:	460f      	mov	r7, r1
 80073e0:	f1b8 0f00 	cmp.w	r8, #0
 80073e4:	d11b      	bne.n	800741e <__kernel_sin+0xd6>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4650      	mov	r0, sl
 80073ec:	4659      	mov	r1, fp
 80073ee:	f7f8 ff13 	bl	8000218 <__aeabi_dmul>
 80073f2:	a325      	add	r3, pc, #148	@ (adr r3, 8007488 <__kernel_sin+0x140>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	f7f9 f83c 	bl	8000474 <__aeabi_dsub>
 80073fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007400:	f7f8 ff0a 	bl	8000218 <__aeabi_dmul>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4620      	mov	r0, r4
 800740a:	4629      	mov	r1, r5
 800740c:	f7f9 f834 	bl	8000478 <__adddf3>
 8007410:	4604      	mov	r4, r0
 8007412:	460d      	mov	r5, r1
 8007414:	ec45 4b10 	vmov	d0, r4, r5
 8007418:	b005      	add	sp, #20
 800741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007422:	4b1b      	ldr	r3, [pc, #108]	@ (8007490 <__kernel_sin+0x148>)
 8007424:	2200      	movs	r2, #0
 8007426:	f7f8 fef7 	bl	8000218 <__aeabi_dmul>
 800742a:	4632      	mov	r2, r6
 800742c:	4680      	mov	r8, r0
 800742e:	4689      	mov	r9, r1
 8007430:	463b      	mov	r3, r7
 8007432:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007436:	f7f8 feef 	bl	8000218 <__aeabi_dmul>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4640      	mov	r0, r8
 8007440:	4649      	mov	r1, r9
 8007442:	f7f9 f817 	bl	8000474 <__aeabi_dsub>
 8007446:	4652      	mov	r2, sl
 8007448:	465b      	mov	r3, fp
 800744a:	f7f8 fee5 	bl	8000218 <__aeabi_dmul>
 800744e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007452:	f7f9 f80f 	bl	8000474 <__aeabi_dsub>
 8007456:	a30c      	add	r3, pc, #48	@ (adr r3, 8007488 <__kernel_sin+0x140>)
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	4606      	mov	r6, r0
 800745e:	460f      	mov	r7, r1
 8007460:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007464:	f7f8 fed8 	bl	8000218 <__aeabi_dmul>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4630      	mov	r0, r6
 800746e:	4639      	mov	r1, r7
 8007470:	f7f9 f802 	bl	8000478 <__adddf3>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4620      	mov	r0, r4
 800747a:	4629      	mov	r1, r5
 800747c:	f7f8 fffa 	bl	8000474 <__aeabi_dsub>
 8007480:	e7c6      	b.n	8007410 <__kernel_sin+0xc8>
 8007482:	bf00      	nop
 8007484:	f3af 8000 	nop.w
 8007488:	55555549 	.word	0x55555549
 800748c:	3fc55555 	.word	0x3fc55555
 8007490:	3fe00000 	.word	0x3fe00000
 8007494:	5acfd57c 	.word	0x5acfd57c
 8007498:	3de5d93a 	.word	0x3de5d93a
 800749c:	8a2b9ceb 	.word	0x8a2b9ceb
 80074a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80074a4:	57b1fe7d 	.word	0x57b1fe7d
 80074a8:	3ec71de3 	.word	0x3ec71de3
 80074ac:	19c161d5 	.word	0x19c161d5
 80074b0:	3f2a01a0 	.word	0x3f2a01a0
 80074b4:	1110f8a6 	.word	0x1110f8a6
 80074b8:	3f811111 	.word	0x3f811111

080074bc <fabs>:
 80074bc:	ec51 0b10 	vmov	r0, r1, d0
 80074c0:	4602      	mov	r2, r0
 80074c2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80074c6:	ec43 2b10 	vmov	d0, r2, r3
 80074ca:	4770      	bx	lr
 80074cc:	0000      	movs	r0, r0
	...

080074d0 <scalbn>:
 80074d0:	b570      	push	{r4, r5, r6, lr}
 80074d2:	ec55 4b10 	vmov	r4, r5, d0
 80074d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80074da:	4606      	mov	r6, r0
 80074dc:	462b      	mov	r3, r5
 80074de:	b991      	cbnz	r1, 8007506 <scalbn+0x36>
 80074e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80074e4:	4323      	orrs	r3, r4
 80074e6:	d03b      	beq.n	8007560 <scalbn+0x90>
 80074e8:	4b33      	ldr	r3, [pc, #204]	@ (80075b8 <scalbn+0xe8>)
 80074ea:	4620      	mov	r0, r4
 80074ec:	4629      	mov	r1, r5
 80074ee:	2200      	movs	r2, #0
 80074f0:	f7f8 fe92 	bl	8000218 <__aeabi_dmul>
 80074f4:	4b31      	ldr	r3, [pc, #196]	@ (80075bc <scalbn+0xec>)
 80074f6:	429e      	cmp	r6, r3
 80074f8:	4604      	mov	r4, r0
 80074fa:	460d      	mov	r5, r1
 80074fc:	da0f      	bge.n	800751e <scalbn+0x4e>
 80074fe:	a326      	add	r3, pc, #152	@ (adr r3, 8007598 <scalbn+0xc8>)
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	e01e      	b.n	8007544 <scalbn+0x74>
 8007506:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800750a:	4291      	cmp	r1, r2
 800750c:	d10b      	bne.n	8007526 <scalbn+0x56>
 800750e:	4622      	mov	r2, r4
 8007510:	4620      	mov	r0, r4
 8007512:	4629      	mov	r1, r5
 8007514:	f7f8 ffb0 	bl	8000478 <__adddf3>
 8007518:	4604      	mov	r4, r0
 800751a:	460d      	mov	r5, r1
 800751c:	e020      	b.n	8007560 <scalbn+0x90>
 800751e:	460b      	mov	r3, r1
 8007520:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007524:	3936      	subs	r1, #54	@ 0x36
 8007526:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800752a:	4296      	cmp	r6, r2
 800752c:	dd0d      	ble.n	800754a <scalbn+0x7a>
 800752e:	2d00      	cmp	r5, #0
 8007530:	a11b      	add	r1, pc, #108	@ (adr r1, 80075a0 <scalbn+0xd0>)
 8007532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007536:	da02      	bge.n	800753e <scalbn+0x6e>
 8007538:	a11b      	add	r1, pc, #108	@ (adr r1, 80075a8 <scalbn+0xd8>)
 800753a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800753e:	a318      	add	r3, pc, #96	@ (adr r3, 80075a0 <scalbn+0xd0>)
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	f7f8 fe68 	bl	8000218 <__aeabi_dmul>
 8007548:	e7e6      	b.n	8007518 <scalbn+0x48>
 800754a:	1872      	adds	r2, r6, r1
 800754c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007550:	428a      	cmp	r2, r1
 8007552:	dcec      	bgt.n	800752e <scalbn+0x5e>
 8007554:	2a00      	cmp	r2, #0
 8007556:	dd06      	ble.n	8007566 <scalbn+0x96>
 8007558:	f36f 531e 	bfc	r3, #20, #11
 800755c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007560:	ec45 4b10 	vmov	d0, r4, r5
 8007564:	bd70      	pop	{r4, r5, r6, pc}
 8007566:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800756a:	da08      	bge.n	800757e <scalbn+0xae>
 800756c:	2d00      	cmp	r5, #0
 800756e:	a10a      	add	r1, pc, #40	@ (adr r1, 8007598 <scalbn+0xc8>)
 8007570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007574:	dac3      	bge.n	80074fe <scalbn+0x2e>
 8007576:	a10e      	add	r1, pc, #56	@ (adr r1, 80075b0 <scalbn+0xe0>)
 8007578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800757c:	e7bf      	b.n	80074fe <scalbn+0x2e>
 800757e:	3236      	adds	r2, #54	@ 0x36
 8007580:	f36f 531e 	bfc	r3, #20, #11
 8007584:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007588:	4620      	mov	r0, r4
 800758a:	4b0d      	ldr	r3, [pc, #52]	@ (80075c0 <scalbn+0xf0>)
 800758c:	4629      	mov	r1, r5
 800758e:	2200      	movs	r2, #0
 8007590:	e7d8      	b.n	8007544 <scalbn+0x74>
 8007592:	bf00      	nop
 8007594:	f3af 8000 	nop.w
 8007598:	c2f8f359 	.word	0xc2f8f359
 800759c:	01a56e1f 	.word	0x01a56e1f
 80075a0:	8800759c 	.word	0x8800759c
 80075a4:	7e37e43c 	.word	0x7e37e43c
 80075a8:	8800759c 	.word	0x8800759c
 80075ac:	fe37e43c 	.word	0xfe37e43c
 80075b0:	c2f8f359 	.word	0xc2f8f359
 80075b4:	81a56e1f 	.word	0x81a56e1f
 80075b8:	43500000 	.word	0x43500000
 80075bc:	ffff3cb0 	.word	0xffff3cb0
 80075c0:	3c900000 	.word	0x3c900000
 80075c4:	00000000 	.word	0x00000000

080075c8 <floor>:
 80075c8:	ec51 0b10 	vmov	r0, r1, d0
 80075cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80075d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80075d8:	2e13      	cmp	r6, #19
 80075da:	460c      	mov	r4, r1
 80075dc:	4605      	mov	r5, r0
 80075de:	4680      	mov	r8, r0
 80075e0:	dc34      	bgt.n	800764c <floor+0x84>
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	da17      	bge.n	8007616 <floor+0x4e>
 80075e6:	a332      	add	r3, pc, #200	@ (adr r3, 80076b0 <floor+0xe8>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f7f8 ff44 	bl	8000478 <__adddf3>
 80075f0:	2200      	movs	r2, #0
 80075f2:	2300      	movs	r3, #0
 80075f4:	f7f9 f974 	bl	80008e0 <__aeabi_dcmpgt>
 80075f8:	b150      	cbz	r0, 8007610 <floor+0x48>
 80075fa:	2c00      	cmp	r4, #0
 80075fc:	da55      	bge.n	80076aa <floor+0xe2>
 80075fe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007602:	432c      	orrs	r4, r5
 8007604:	2500      	movs	r5, #0
 8007606:	42ac      	cmp	r4, r5
 8007608:	4c2b      	ldr	r4, [pc, #172]	@ (80076b8 <floor+0xf0>)
 800760a:	bf08      	it	eq
 800760c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007610:	4621      	mov	r1, r4
 8007612:	4628      	mov	r0, r5
 8007614:	e023      	b.n	800765e <floor+0x96>
 8007616:	4f29      	ldr	r7, [pc, #164]	@ (80076bc <floor+0xf4>)
 8007618:	4137      	asrs	r7, r6
 800761a:	ea01 0307 	and.w	r3, r1, r7
 800761e:	4303      	orrs	r3, r0
 8007620:	d01d      	beq.n	800765e <floor+0x96>
 8007622:	a323      	add	r3, pc, #140	@ (adr r3, 80076b0 <floor+0xe8>)
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	f7f8 ff26 	bl	8000478 <__adddf3>
 800762c:	2200      	movs	r2, #0
 800762e:	2300      	movs	r3, #0
 8007630:	f7f9 f956 	bl	80008e0 <__aeabi_dcmpgt>
 8007634:	2800      	cmp	r0, #0
 8007636:	d0eb      	beq.n	8007610 <floor+0x48>
 8007638:	2c00      	cmp	r4, #0
 800763a:	bfbe      	ittt	lt
 800763c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007640:	4133      	asrlt	r3, r6
 8007642:	18e4      	addlt	r4, r4, r3
 8007644:	ea24 0407 	bic.w	r4, r4, r7
 8007648:	2500      	movs	r5, #0
 800764a:	e7e1      	b.n	8007610 <floor+0x48>
 800764c:	2e33      	cmp	r6, #51	@ 0x33
 800764e:	dd0a      	ble.n	8007666 <floor+0x9e>
 8007650:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007654:	d103      	bne.n	800765e <floor+0x96>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	f7f8 ff0d 	bl	8000478 <__adddf3>
 800765e:	ec41 0b10 	vmov	d0, r0, r1
 8007662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007666:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800766a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800766e:	40df      	lsrs	r7, r3
 8007670:	4207      	tst	r7, r0
 8007672:	d0f4      	beq.n	800765e <floor+0x96>
 8007674:	a30e      	add	r3, pc, #56	@ (adr r3, 80076b0 <floor+0xe8>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 fefd 	bl	8000478 <__adddf3>
 800767e:	2200      	movs	r2, #0
 8007680:	2300      	movs	r3, #0
 8007682:	f7f9 f92d 	bl	80008e0 <__aeabi_dcmpgt>
 8007686:	2800      	cmp	r0, #0
 8007688:	d0c2      	beq.n	8007610 <floor+0x48>
 800768a:	2c00      	cmp	r4, #0
 800768c:	da0a      	bge.n	80076a4 <floor+0xdc>
 800768e:	2e14      	cmp	r6, #20
 8007690:	d101      	bne.n	8007696 <floor+0xce>
 8007692:	3401      	adds	r4, #1
 8007694:	e006      	b.n	80076a4 <floor+0xdc>
 8007696:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800769a:	2301      	movs	r3, #1
 800769c:	40b3      	lsls	r3, r6
 800769e:	441d      	add	r5, r3
 80076a0:	4545      	cmp	r5, r8
 80076a2:	d3f6      	bcc.n	8007692 <floor+0xca>
 80076a4:	ea25 0507 	bic.w	r5, r5, r7
 80076a8:	e7b2      	b.n	8007610 <floor+0x48>
 80076aa:	2500      	movs	r5, #0
 80076ac:	462c      	mov	r4, r5
 80076ae:	e7af      	b.n	8007610 <floor+0x48>
 80076b0:	8800759c 	.word	0x8800759c
 80076b4:	7e37e43c 	.word	0x7e37e43c
 80076b8:	bff00000 	.word	0xbff00000
 80076bc:	000fffff 	.word	0x000fffff

080076c0 <memset>:
 80076c0:	4402      	add	r2, r0
 80076c2:	4603      	mov	r3, r0
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d100      	bne.n	80076ca <memset+0xa>
 80076c8:	4770      	bx	lr
 80076ca:	f803 1b01 	strb.w	r1, [r3], #1
 80076ce:	e7f9      	b.n	80076c4 <memset+0x4>

080076d0 <__libc_init_array>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007708 <__libc_init_array+0x38>)
 80076d4:	4c0d      	ldr	r4, [pc, #52]	@ (800770c <__libc_init_array+0x3c>)
 80076d6:	1b64      	subs	r4, r4, r5
 80076d8:	10a4      	asrs	r4, r4, #2
 80076da:	2600      	movs	r6, #0
 80076dc:	42a6      	cmp	r6, r4
 80076de:	d109      	bne.n	80076f4 <__libc_init_array+0x24>
 80076e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007710 <__libc_init_array+0x40>)
 80076e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007714 <__libc_init_array+0x44>)
 80076e4:	f000 f818 	bl	8007718 <_init>
 80076e8:	1b64      	subs	r4, r4, r5
 80076ea:	10a4      	asrs	r4, r4, #2
 80076ec:	2600      	movs	r6, #0
 80076ee:	42a6      	cmp	r6, r4
 80076f0:	d105      	bne.n	80076fe <__libc_init_array+0x2e>
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f8:	4798      	blx	r3
 80076fa:	3601      	adds	r6, #1
 80076fc:	e7ee      	b.n	80076dc <__libc_init_array+0xc>
 80076fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007702:	4798      	blx	r3
 8007704:	3601      	adds	r6, #1
 8007706:	e7f2      	b.n	80076ee <__libc_init_array+0x1e>
 8007708:	08007950 	.word	0x08007950
 800770c:	08007950 	.word	0x08007950
 8007710:	08007950 	.word	0x08007950
 8007714:	08007954 	.word	0x08007954

08007718 <_init>:
 8007718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771a:	bf00      	nop
 800771c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771e:	bc08      	pop	{r3}
 8007720:	469e      	mov	lr, r3
 8007722:	4770      	bx	lr

08007724 <_fini>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	bf00      	nop
 8007728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772a:	bc08      	pop	{r3}
 800772c:	469e      	mov	lr, r3
 800772e:	4770      	bx	lr
