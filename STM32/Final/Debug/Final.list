
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a6c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003c44  08003c44  00004c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c54  08003c54  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003c54  08003c54  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003c54  08003c54  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c54  08003c54  00004c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c58  08003c58  00004c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08003c68  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003c68  0000519c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015db7  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002870  00000000  00000000  0001adf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0001d668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d8  00000000  00000000  0001ec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234b3  00000000  00000000  0001fce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017acf  00000000  00000000  00043193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deb3c  00000000  00000000  0005ac62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013979e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e2c  00000000  00000000  001397e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0013f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003c2c 	.word	0x08003c2c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003c2c 	.word	0x08003c2c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fc4f 	bl	8000abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80c 	bl	800023c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f9e8 	bl	80005f8 <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 8000228:	f000 f926 	bl	8000478 <_ZL12MX_SPI2_Initv>
  MX_ADC1_Init();
 800022c:	f000 f850 	bl	80002d0 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8000230:	f000 f8d4 	bl	80003dc <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8000234:	f000 f962 	bl	80004fc <_ZL12MX_TIM1_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	bf00      	nop
 800023a:	e7fd      	b.n	8000238 <main+0x20>

0800023c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b094      	sub	sp, #80	@ 0x50
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2238      	movs	r2, #56	@ 0x38
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f003 fcc2 	bl	8003bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000262:	f002 f861 	bl	8002328 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800026e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000270:	2340      	movs	r3, #64	@ 0x40
 8000272:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000274:	2300      	movs	r3, #0
 8000276:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f002 f907 	bl	8002490 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	bf14      	ite	ne
 8000288:	2301      	movne	r3, #1
 800028a:	2300      	moveq	r3, #0
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8000292:	f000 fa13 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029a:	2301      	movs	r3, #1
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fc00 	bl	8002ab4 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	bf14      	ite	ne
 80002ba:	2301      	movne	r3, #1
 80002bc:	2300      	moveq	r3, #0
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80002c4:	f000 f9fa 	bl	80006bc <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3750      	adds	r7, #80	@ 0x50
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b08c      	sub	sp, #48	@ 0x30
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2220      	movs	r2, #32
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f003 fc73 	bl	8003bd4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ee:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 80002f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80002f6:	4b37      	ldr	r3, [pc, #220]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 80002f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80002fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002fe:	4b35      	ldr	r3, [pc, #212]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000304:	4b33      	ldr	r3, [pc, #204]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800030a:	4b32      	ldr	r3, [pc, #200]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000310:	4b30      	ldr	r3, [pc, #192]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 8000312:	2200      	movs	r2, #0
 8000314:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000316:	4b2f      	ldr	r3, [pc, #188]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 8000318:	2204      	movs	r2, #4
 800031a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800031c:	4b2d      	ldr	r3, [pc, #180]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 800031e:	2200      	movs	r2, #0
 8000320:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000322:	4b2c      	ldr	r3, [pc, #176]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 8000324:	2200      	movs	r2, #0
 8000326:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000328:	4b2a      	ldr	r3, [pc, #168]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 800032a:	2201      	movs	r2, #1
 800032c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032e:	4b29      	ldr	r3, [pc, #164]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 8000330:	2200      	movs	r2, #0
 8000332:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000336:	4b27      	ldr	r3, [pc, #156]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 8000338:	2200      	movs	r2, #0
 800033a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800033c:	4b25      	ldr	r3, [pc, #148]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 800033e:	2200      	movs	r2, #0
 8000340:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000342:	4b24      	ldr	r3, [pc, #144]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 8000344:	2200      	movs	r2, #0
 8000346:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800034a:	4b22      	ldr	r3, [pc, #136]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 800034c:	2200      	movs	r2, #0
 800034e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000350:	4b20      	ldr	r3, [pc, #128]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 8000352:	2200      	movs	r2, #0
 8000354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000358:	481e      	ldr	r0, [pc, #120]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 800035a:	f000 fdf7 	bl	8000f4c <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	bf14      	ite	ne
 8000364:	2301      	movne	r3, #1
 8000366:	2300      	moveq	r3, #0
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800036e:	f000 f9a5 	bl	80006bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000372:	2300      	movs	r3, #0
 8000374:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800037a:	4619      	mov	r1, r3
 800037c:	4815      	ldr	r0, [pc, #84]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 800037e:	f001 fb7f 	bl	8001a80 <HAL_ADCEx_MultiModeConfigChannel>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	bf14      	ite	ne
 8000388:	2301      	movne	r3, #1
 800038a:	2300      	moveq	r3, #0
 800038c:	b2db      	uxtb	r3, r3
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 8000392:	f000 f993 	bl	80006bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000396:	4b10      	ldr	r3, [pc, #64]	@ (80003d8 <_ZL12MX_ADC1_Initv+0x108>)
 8000398:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039a:	2306      	movs	r3, #6
 800039c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003a2:	237f      	movs	r3, #127	@ 0x7f
 80003a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a6:	2304      	movs	r3, #4
 80003a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	4808      	ldr	r0, [pc, #32]	@ (80003d4 <_ZL12MX_ADC1_Initv+0x104>)
 80003b4:	f000 ff4e 	bl	8001254 <HAL_ADC_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	bf14      	ite	ne
 80003be:	2301      	movne	r3, #1
 80003c0:	2300      	moveq	r3, #0
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 80003c8:	f000 f978 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	3730      	adds	r7, #48	@ 0x30
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000028 	.word	0x20000028
 80003d8:	08600004 	.word	0x08600004

080003dc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e0:	4b22      	ldr	r3, [pc, #136]	@ (800046c <_ZL12MX_I2C1_Initv+0x90>)
 80003e2:	4a23      	ldr	r2, [pc, #140]	@ (8000470 <_ZL12MX_I2C1_Initv+0x94>)
 80003e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80003e6:	4b21      	ldr	r3, [pc, #132]	@ (800046c <_ZL12MX_I2C1_Initv+0x90>)
 80003e8:	4a22      	ldr	r2, [pc, #136]	@ (8000474 <_ZL12MX_I2C1_Initv+0x98>)
 80003ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003ec:	4b1f      	ldr	r3, [pc, #124]	@ (800046c <_ZL12MX_I2C1_Initv+0x90>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f2:	4b1e      	ldr	r3, [pc, #120]	@ (800046c <_ZL12MX_I2C1_Initv+0x90>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f8:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <_ZL12MX_I2C1_Initv+0x90>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003fe:	4b1b      	ldr	r3, [pc, #108]	@ (800046c <_ZL12MX_I2C1_Initv+0x90>)
 8000400:	2200      	movs	r2, #0
 8000402:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000404:	4b19      	ldr	r3, [pc, #100]	@ (800046c <_ZL12MX_I2C1_Initv+0x90>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040a:	4b18      	ldr	r3, [pc, #96]	@ (800046c <_ZL12MX_I2C1_Initv+0x90>)
 800040c:	2200      	movs	r2, #0
 800040e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000410:	4b16      	ldr	r3, [pc, #88]	@ (800046c <_ZL12MX_I2C1_Initv+0x90>)
 8000412:	2200      	movs	r2, #0
 8000414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000416:	4815      	ldr	r0, [pc, #84]	@ (800046c <_ZL12MX_I2C1_Initv+0x90>)
 8000418:	f001 fe54 	bl	80020c4 <HAL_I2C_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	bf14      	ite	ne
 8000422:	2301      	movne	r3, #1
 8000424:	2300      	moveq	r3, #0
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800042c:	f000 f946 	bl	80006bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000430:	2100      	movs	r1, #0
 8000432:	480e      	ldr	r0, [pc, #56]	@ (800046c <_ZL12MX_I2C1_Initv+0x90>)
 8000434:	f001 fee1 	bl	80021fa <HAL_I2CEx_ConfigAnalogFilter>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	bf14      	ite	ne
 800043e:	2301      	movne	r3, #1
 8000440:	2300      	moveq	r3, #0
 8000442:	b2db      	uxtb	r3, r3
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000448:	f000 f938 	bl	80006bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800044c:	2100      	movs	r1, #0
 800044e:	4807      	ldr	r0, [pc, #28]	@ (800046c <_ZL12MX_I2C1_Initv+0x90>)
 8000450:	f001 ff1e 	bl	8002290 <HAL_I2CEx_ConfigDigitalFilter>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	bf14      	ite	ne
 800045a:	2301      	movne	r3, #1
 800045c:	2300      	moveq	r3, #0
 800045e:	b2db      	uxtb	r3, r3
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000464:	f000 f92a 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000094 	.word	0x20000094
 8000470:	40005400 	.word	0x40005400
 8000474:	00503d58 	.word	0x00503d58

08000478 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800047c:	4b1d      	ldr	r3, [pc, #116]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 800047e:	4a1e      	ldr	r2, [pc, #120]	@ (80004f8 <_ZL12MX_SPI2_Initv+0x80>)
 8000480:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000482:	4b1c      	ldr	r3, [pc, #112]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 8000484:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000488:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800048a:	4b1a      	ldr	r3, [pc, #104]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000490:	4b18      	ldr	r3, [pc, #96]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 8000492:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000496:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000498:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800049e:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80004a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80004ac:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80004ae:	2228      	movs	r2, #40	@ 0x28
 80004b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004b2:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b8:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004be:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004c4:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80004c6:	2207      	movs	r2, #7
 80004c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ca:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004d0:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004d6:	4807      	ldr	r0, [pc, #28]	@ (80004f4 <_ZL12MX_SPI2_Initv+0x7c>)
 80004d8:	f002 fec0 	bl	800325c <HAL_SPI_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	bf14      	ite	ne
 80004e2:	2301      	movne	r3, #1
 80004e4:	2300      	moveq	r3, #0
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 80004ec:	f000 f8e6 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200000e8 	.word	0x200000e8
 80004f8:	40003800 	.word	0x40003800

080004fc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08c      	sub	sp, #48	@ 0x30
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000520:	463b      	mov	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800052a:	4b31      	ldr	r3, [pc, #196]	@ (80005f0 <_ZL12MX_TIM1_Initv+0xf4>)
 800052c:	4a31      	ldr	r2, [pc, #196]	@ (80005f4 <_ZL12MX_TIM1_Initv+0xf8>)
 800052e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000530:	4b2f      	ldr	r3, [pc, #188]	@ (80005f0 <_ZL12MX_TIM1_Initv+0xf4>)
 8000532:	2200      	movs	r2, #0
 8000534:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000536:	4b2e      	ldr	r3, [pc, #184]	@ (80005f0 <_ZL12MX_TIM1_Initv+0xf4>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800053c:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <_ZL12MX_TIM1_Initv+0xf4>)
 800053e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000542:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000544:	4b2a      	ldr	r3, [pc, #168]	@ (80005f0 <_ZL12MX_TIM1_Initv+0xf4>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800054a:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <_ZL12MX_TIM1_Initv+0xf4>)
 800054c:	2200      	movs	r2, #0
 800054e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000550:	4b27      	ldr	r3, [pc, #156]	@ (80005f0 <_ZL12MX_TIM1_Initv+0xf4>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000556:	4826      	ldr	r0, [pc, #152]	@ (80005f0 <_ZL12MX_TIM1_Initv+0xf4>)
 8000558:	f002 ff2b 	bl	80033b2 <HAL_TIM_Base_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	bf14      	ite	ne
 8000562:	2301      	movne	r3, #1
 8000564:	2300      	moveq	r3, #0
 8000566:	b2db      	uxtb	r3, r3
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 800056c:	f000 f8a6 	bl	80006bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000574:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	4619      	mov	r1, r3
 800057c:	481c      	ldr	r0, [pc, #112]	@ (80005f0 <_ZL12MX_TIM1_Initv+0xf4>)
 800057e:	f002 ff6f 	bl	8003460 <HAL_TIM_ConfigClockSource>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	bf14      	ite	ne
 8000588:	2301      	movne	r3, #1
 800058a:	2300      	moveq	r3, #0
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <_ZL12MX_TIM1_Initv+0x9a>
  {
    Error_Handler();
 8000592:	f000 f893 	bl	80006bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000596:	2306      	movs	r3, #6
 8000598:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	4619      	mov	r1, r3
 80005a4:	4812      	ldr	r0, [pc, #72]	@ (80005f0 <_ZL12MX_TIM1_Initv+0xf4>)
 80005a6:	f003 f855 	bl	8003654 <HAL_TIM_SlaveConfigSynchro>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	bf14      	ite	ne
 80005b0:	2301      	movne	r3, #1
 80005b2:	2300      	moveq	r3, #0
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <_ZL12MX_TIM1_Initv+0xc2>
  {
    Error_Handler();
 80005ba:	f000 f87f 	bl	80006bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	4619      	mov	r1, r3
 80005ce:	4808      	ldr	r0, [pc, #32]	@ (80005f0 <_ZL12MX_TIM1_Initv+0xf4>)
 80005d0:	f003 fa7e 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	bf14      	ite	ne
 80005da:	2301      	movne	r3, #1
 80005dc:	2300      	moveq	r3, #0
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 80005e4:	f000 f86a 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	3730      	adds	r7, #48	@ 0x30
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000014c 	.word	0x2000014c
 80005f4:	40012c00 	.word	0x40012c00

080005f8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	@ 0x28
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060e:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <_ZL12MX_GPIO_Initv+0xbc>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	4a28      	ldr	r2, [pc, #160]	@ (80006b4 <_ZL12MX_GPIO_Initv+0xbc>)
 8000614:	f043 0320 	orr.w	r3, r3, #32
 8000618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061a:	4b26      	ldr	r3, [pc, #152]	@ (80006b4 <_ZL12MX_GPIO_Initv+0xbc>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	f003 0320 	and.w	r3, r3, #32
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <_ZL12MX_GPIO_Initv+0xbc>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	4a22      	ldr	r2, [pc, #136]	@ (80006b4 <_ZL12MX_GPIO_Initv+0xbc>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000632:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <_ZL12MX_GPIO_Initv+0xbc>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <_ZL12MX_GPIO_Initv+0xbc>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a1c      	ldr	r2, [pc, #112]	@ (80006b4 <_ZL12MX_GPIO_Initv+0xbc>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <_ZL12MX_GPIO_Initv+0xbc>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <_ZL12MX_GPIO_Initv+0xbc>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a16      	ldr	r2, [pc, #88]	@ (80006b4 <_ZL12MX_GPIO_Initv+0xbc>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <_ZL12MX_GPIO_Initv+0xbc>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRVOFF_Pin|SCS_N_Pin|SLEEP_N_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2107      	movs	r1, #7
 8000672:	4811      	ldr	r0, [pc, #68]	@ (80006b8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000674:	f001 fd0e 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRVOFF_Pin SCS_N_Pin SLEEP_N_Pin */
  GPIO_InitStruct.Pin = DRVOFF_Pin|SCS_N_Pin|SLEEP_N_Pin;
 8000678:	2307      	movs	r3, #7
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	480a      	ldr	r0, [pc, #40]	@ (80006b8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000690:	f001 fb7e 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_N_Pin */
  GPIO_InitStruct.Pin = FAULT_N_Pin;
 8000694:	2308      	movs	r3, #8
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_N_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <_ZL12MX_GPIO_Initv+0xc0>)
 80006a8:	f001 fb72 	bl	8001d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	@ 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48000800 	.word	0x48000800

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <Error_Handler+0x8>

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <HAL_MspInit+0x44>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006d2:	4a0e      	ldr	r2, [pc, #56]	@ (800070c <HAL_MspInit+0x44>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <HAL_MspInit+0x44>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <HAL_MspInit+0x44>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ea:	4a08      	ldr	r2, [pc, #32]	@ (800070c <HAL_MspInit+0x44>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <HAL_MspInit+0x44>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006fe:	f001 feb7 	bl	8002470 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000

08000710 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09a      	sub	sp, #104	@ 0x68
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	2244      	movs	r2, #68	@ 0x44
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f003 fa4f 	bl	8003bd4 <memset>
  if(hadc->Instance==ADC1)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800073e:	d134      	bne.n	80007aa <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000740:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000744:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000746:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800074a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fb93 	bl	8002e7c <HAL_RCCEx_PeriphCLKConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800075c:	f7ff ffae 	bl	80006bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <HAL_ADC_MspInit+0xa4>)
 8000762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000764:	4a13      	ldr	r2, [pc, #76]	@ (80007b4 <HAL_ADC_MspInit+0xa4>)
 8000766:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800076a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <HAL_ADC_MspInit+0xa4>)
 800076e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <HAL_ADC_MspInit+0xa4>)
 800077a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077c:	4a0d      	ldr	r2, [pc, #52]	@ (80007b4 <HAL_ADC_MspInit+0xa4>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000784:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <HAL_ADC_MspInit+0xa4>)
 8000786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000790:	2302      	movs	r3, #2
 8000792:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007a0:	4619      	mov	r1, r3
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a6:	f001 faf3 	bl	8001d90 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007aa:	bf00      	nop
 80007ac:	3768      	adds	r7, #104	@ 0x68
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09c      	sub	sp, #112	@ 0x70
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d0:	f107 0318 	add.w	r3, r7, #24
 80007d4:	2244      	movs	r2, #68	@ 0x44
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 f9fb 	bl	8003bd4 <memset>
  if(hi2c->Instance==I2C1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000898 <HAL_I2C_MspInit+0xe0>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d153      	bne.n	8000890 <HAL_I2C_MspInit+0xd8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007e8:	2340      	movs	r3, #64	@ 0x40
 80007ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f0:	f107 0318 	add.w	r3, r7, #24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fb41 	bl	8002e7c <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000800:	f7ff ff5c 	bl	80006bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b25      	ldr	r3, [pc, #148]	@ (800089c <HAL_I2C_MspInit+0xe4>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000808:	4a24      	ldr	r2, [pc, #144]	@ (800089c <HAL_I2C_MspInit+0xe4>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000810:	4b22      	ldr	r3, [pc, #136]	@ (800089c <HAL_I2C_MspInit+0xe4>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <HAL_I2C_MspInit+0xe4>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000820:	4a1e      	ldr	r2, [pc, #120]	@ (800089c <HAL_I2C_MspInit+0xe4>)
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000828:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <HAL_I2C_MspInit+0xe4>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000838:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083a:	2312      	movs	r3, #18
 800083c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000846:	2304      	movs	r3, #4
 8000848:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000854:	f001 fa9c 	bl	8001d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000858:	2380      	movs	r3, #128	@ 0x80
 800085a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085c:	2312      	movs	r3, #18
 800085e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000868:	2304      	movs	r3, #4
 800086a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000870:	4619      	mov	r1, r3
 8000872:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <HAL_I2C_MspInit+0xe8>)
 8000874:	f001 fa8c 	bl	8001d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000878:	4b08      	ldr	r3, [pc, #32]	@ (800089c <HAL_I2C_MspInit+0xe4>)
 800087a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087c:	4a07      	ldr	r2, [pc, #28]	@ (800089c <HAL_I2C_MspInit+0xe4>)
 800087e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000882:	6593      	str	r3, [r2, #88]	@ 0x58
 8000884:	4b05      	ldr	r3, [pc, #20]	@ (800089c <HAL_I2C_MspInit+0xe4>)
 8000886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000890:	bf00      	nop
 8000892:	3770      	adds	r7, #112	@ 0x70
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40005400 	.word	0x40005400
 800089c:	40021000 	.word	0x40021000
 80008a0:	48000400 	.word	0x48000400

080008a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	@ 0x30
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a35      	ldr	r2, [pc, #212]	@ (8000998 <HAL_SPI_MspInit+0xf4>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d163      	bne.n	800098e <HAL_SPI_MspInit+0xea>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008c6:	4b35      	ldr	r3, [pc, #212]	@ (800099c <HAL_SPI_MspInit+0xf8>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ca:	4a34      	ldr	r2, [pc, #208]	@ (800099c <HAL_SPI_MspInit+0xf8>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d2:	4b32      	ldr	r3, [pc, #200]	@ (800099c <HAL_SPI_MspInit+0xf8>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008de:	4b2f      	ldr	r3, [pc, #188]	@ (800099c <HAL_SPI_MspInit+0xf8>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a2e      	ldr	r2, [pc, #184]	@ (800099c <HAL_SPI_MspInit+0xf8>)
 80008e4:	f043 0320 	orr.w	r3, r3, #32
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <HAL_SPI_MspInit+0xf8>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0320 	and.w	r3, r3, #32
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b29      	ldr	r3, [pc, #164]	@ (800099c <HAL_SPI_MspInit+0xf8>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a28      	ldr	r2, [pc, #160]	@ (800099c <HAL_SPI_MspInit+0xf8>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b26      	ldr	r3, [pc, #152]	@ (800099c <HAL_SPI_MspInit+0xf8>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b23      	ldr	r3, [pc, #140]	@ (800099c <HAL_SPI_MspInit+0xf8>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	4a22      	ldr	r2, [pc, #136]	@ (800099c <HAL_SPI_MspInit+0xf8>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <HAL_SPI_MspInit+0xf8>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PF9     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000926:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000930:	2302      	movs	r3, #2
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000934:	2302      	movs	r3, #2
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000938:	2305      	movs	r3, #5
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4817      	ldr	r0, [pc, #92]	@ (80009a0 <HAL_SPI_MspInit+0xfc>)
 8000944:	f001 fa24 	bl	8001d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000948:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000952:	2301      	movs	r3, #1
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000956:	2302      	movs	r3, #2
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095a:	2305      	movs	r3, #5
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	480f      	ldr	r0, [pc, #60]	@ (80009a4 <HAL_SPI_MspInit+0x100>)
 8000966:	f001 fa13 	bl	8001d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800096a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800096e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000974:	2302      	movs	r3, #2
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000978:	2302      	movs	r3, #2
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097c:	2305      	movs	r3, #5
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098a:	f001 fa01 	bl	8001d90 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	@ 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40003800 	.word	0x40003800
 800099c:	40021000 	.word	0x40021000
 80009a0:	48001400 	.word	0x48001400
 80009a4:	48000400 	.word	0x48000400

080009a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <HAL_TIM_Base_MspInit+0x38>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d10b      	bne.n	80009d2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ba:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <HAL_TIM_Base_MspInit+0x3c>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009be:	4a09      	ldr	r2, [pc, #36]	@ (80009e4 <HAL_TIM_Base_MspInit+0x3c>)
 80009c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009c6:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <HAL_TIM_Base_MspInit+0x3c>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40012c00 	.word	0x40012c00
 80009e4:	40021000 	.word	0x40021000

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <NMI_Handler+0x4>

080009f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <MemManage_Handler+0x4>

08000a00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3e:	f000 f891 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	@ (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a6c:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a70:	f7ff ffea 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	@ (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f003 f8a3 	bl	8003be4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9e:	f7ff fbbb 	bl	8000218 <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   r0, =_estack
 8000aa4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab0:	08003c5c 	.word	0x08003c5c
  ldr r2, =_sbss
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab8:	2000019c 	.word	0x2000019c

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>

08000abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f001 f92f 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f000 f80e 	bl	8000af0 <HAL_InitTick>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	e001      	b.n	8000ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae0:	f7ff fdf2 	bl	80006c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <HAL_InitTick+0x68>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d022      	beq.n	8000b4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_InitTick+0x6c>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <HAL_InitTick+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 f92c 	bl	8001d76 <HAL_SYSTICK_Config>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10f      	bne.n	8000b44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b0f      	cmp	r3, #15
 8000b28:	d809      	bhi.n	8000b3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b32:	f001 f906 	bl	8001d42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_InitTick+0x70>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e007      	b.n	8000b4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e004      	b.n	8000b4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e001      	b.n	8000b4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <HAL_IncTick+0x1c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <HAL_IncTick+0x20>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a03      	ldr	r2, [pc, #12]	@ (8000b80 <HAL_IncTick+0x1c>)
 8000b74:	6013      	str	r3, [r2, #0]
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20000198 	.word	0x20000198
 8000b84:	20000008 	.word	0x20000008

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000198 	.word	0x20000198

08000ba0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	609a      	str	r2, [r3, #8]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	3360      	adds	r3, #96	@ 0x60
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <LL_ADC_SetOffset+0x44>)
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	430a      	orrs	r2, r1
 8000c36:	4313      	orrs	r3, r2
 8000c38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c40:	bf00      	nop
 8000c42:	371c      	adds	r7, #28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	03fff000 	.word	0x03fff000

08000c50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3360      	adds	r3, #96	@ 0x60
 8000c5e:	461a      	mov	r2, r3
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3360      	adds	r3, #96	@ 0x60
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ca6:	bf00      	nop
 8000ca8:	371c      	adds	r7, #28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b087      	sub	sp, #28
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	3360      	adds	r3, #96	@ 0x60
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000cdc:	bf00      	nop
 8000cde:	371c      	adds	r7, #28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b087      	sub	sp, #28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3360      	adds	r3, #96	@ 0x60
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000d12:	bf00      	nop
 8000d14:	371c      	adds	r7, #28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	615a      	str	r2, [r3, #20]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3330      	adds	r3, #48	@ 0x30
 8000d54:	461a      	mov	r2, r3
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	f003 030c 	and.w	r3, r3, #12
 8000d60:	4413      	add	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	f003 031f 	and.w	r3, r3, #31
 8000d6e:	211f      	movs	r1, #31
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	401a      	ands	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	0e9b      	lsrs	r3, r3, #26
 8000d7c:	f003 011f 	and.w	r1, r3, #31
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	f003 031f 	and.w	r3, r3, #31
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d90:	bf00      	nop
 8000d92:	371c      	adds	r7, #28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3314      	adds	r3, #20
 8000dac:	461a      	mov	r2, r3
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	0e5b      	lsrs	r3, r3, #25
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	4413      	add	r3, r2
 8000dba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	0d1b      	lsrs	r3, r3, #20
 8000dc4:	f003 031f 	and.w	r3, r3, #31
 8000dc8:	2107      	movs	r1, #7
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	0d1b      	lsrs	r3, r3, #20
 8000dd6:	f003 031f 	and.w	r3, r3, #31
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	431a      	orrs	r2, r3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	401a      	ands	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0318 	and.w	r3, r3, #24
 8000e16:	4908      	ldr	r1, [pc, #32]	@ (8000e38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e18:	40d9      	lsrs	r1, r3
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e22:	431a      	orrs	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	0007ffff 	.word	0x0007ffff

08000e3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000e4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6093      	str	r3, [r2, #8]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e74:	d101      	bne.n	8000e7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000e98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000ec4:	d101      	bne.n	8000eca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <LL_ADC_IsEnabled+0x18>
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <LL_ADC_IsEnabled+0x1a>
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d101      	bne.n	8000f16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d101      	bne.n	8000f3c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b089      	sub	sp, #36	@ 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e167      	b.n	8001236 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d109      	bne.n	8000f88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fbcb 	bl	8000710 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff67 	bl	8000e60 <LL_ADC_IsDeepPowerDownEnabled>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d004      	beq.n	8000fa2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff4d 	bl	8000e3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff82 	bl	8000eb0 <LL_ADC_IsInternalRegulatorEnabled>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d115      	bne.n	8000fde <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff66 	bl	8000e88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fbc:	4ba0      	ldr	r3, [pc, #640]	@ (8001240 <HAL_ADC_Init+0x2f4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	099b      	lsrs	r3, r3, #6
 8000fc2:	4aa0      	ldr	r2, [pc, #640]	@ (8001244 <HAL_ADC_Init+0x2f8>)
 8000fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc8:	099b      	lsrs	r3, r3, #6
 8000fca:	3301      	adds	r3, #1
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fd0:	e002      	b.n	8000fd8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f9      	bne.n	8000fd2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff64 	bl	8000eb0 <LL_ADC_IsInternalRegulatorEnabled>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10d      	bne.n	800100a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff2:	f043 0210 	orr.w	r2, r3, #16
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffe:	f043 0201 	orr.w	r2, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff75 	bl	8000efe <LL_ADC_REG_IsConversionOngoing>
 8001014:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 8100 	bne.w	8001224 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 80fc 	bne.w	8001224 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001030:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001034:	f043 0202 	orr.w	r2, r3, #2
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff49 	bl	8000ed8 <LL_ADC_IsEnabled>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d111      	bne.n	8001070 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800104c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001050:	f7ff ff42 	bl	8000ed8 <LL_ADC_IsEnabled>
 8001054:	4604      	mov	r4, r0
 8001056:	487c      	ldr	r0, [pc, #496]	@ (8001248 <HAL_ADC_Init+0x2fc>)
 8001058:	f7ff ff3e 	bl	8000ed8 <LL_ADC_IsEnabled>
 800105c:	4603      	mov	r3, r0
 800105e:	4323      	orrs	r3, r4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d105      	bne.n	8001070 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4619      	mov	r1, r3
 800106a:	4878      	ldr	r0, [pc, #480]	@ (800124c <HAL_ADC_Init+0x300>)
 800106c:	f7ff fd98 	bl	8000ba0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7f5b      	ldrb	r3, [r3, #29]
 8001074:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800107a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001080:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001086:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800108e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800109a:	2b01      	cmp	r3, #1
 800109c:	d106      	bne.n	80010ac <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a2:	3b01      	subs	r3, #1
 80010a4:	045b      	lsls	r3, r3, #17
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d009      	beq.n	80010c8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	4b60      	ldr	r3, [pc, #384]	@ (8001250 <HAL_ADC_Init+0x304>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	69b9      	ldr	r1, [r7, #24]
 80010d8:	430b      	orrs	r3, r1
 80010da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff14 	bl	8000f24 <LL_ADC_INJ_IsConversionOngoing>
 80010fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d16d      	bne.n	80011e0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d16a      	bne.n	80011e0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800110e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001116:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001126:	f023 0302 	bic.w	r3, r3, #2
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	69b9      	ldr	r1, [r7, #24]
 8001130:	430b      	orrs	r3, r1
 8001132:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d017      	beq.n	800116c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800114a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001154:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001158:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6911      	ldr	r1, [r2, #16]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	430b      	orrs	r3, r1
 8001166:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800116a:	e013      	b.n	8001194 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	691a      	ldr	r2, [r3, #16]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800117a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800118c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001190:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800119a:	2b01      	cmp	r3, #1
 800119c:	d118      	bne.n	80011d0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80011a8:	f023 0304 	bic.w	r3, r3, #4
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80011b4:	4311      	orrs	r1, r2
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80011ba:	4311      	orrs	r1, r2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80011c0:	430a      	orrs	r2, r1
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0201 	orr.w	r2, r2, #1
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	e007      	b.n	80011e0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	691a      	ldr	r2, [r3, #16]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d10c      	bne.n	8001202 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f023 010f 	bic.w	r1, r3, #15
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	1e5a      	subs	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001200:	e007      	b.n	8001212 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 020f 	bic.w	r2, r2, #15
 8001210:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001216:	f023 0303 	bic.w	r3, r3, #3
 800121a:	f043 0201 	orr.w	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001222:	e007      	b.n	8001234 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001228:	f043 0210 	orr.w	r2, r3, #16
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001234:	7ffb      	ldrb	r3, [r7, #31]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd90      	pop	{r4, r7, pc}
 800123e:	bf00      	nop
 8001240:	20000000 	.word	0x20000000
 8001244:	053e2d63 	.word	0x053e2d63
 8001248:	50000100 	.word	0x50000100
 800124c:	50000300 	.word	0x50000300
 8001250:	fff04007 	.word	0xfff04007

08001254 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0b6      	sub	sp, #216	@ 0xd8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <HAL_ADC_ConfigChannel+0x22>
 8001272:	2302      	movs	r3, #2
 8001274:	e3c8      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x7b4>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fe3b 	bl	8000efe <LL_ADC_REG_IsConversionOngoing>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 83ad 	bne.w	80019ea <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	f7ff fd51 	bl	8000d44 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fe29 	bl	8000efe <LL_ADC_REG_IsConversionOngoing>
 80012ac:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe35 	bl	8000f24 <LL_ADC_INJ_IsConversionOngoing>
 80012ba:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f040 81d9 	bne.w	800167a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f040 81d4 	bne.w	800167a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80012da:	d10f      	bne.n	80012fc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fd58 	bl	8000d9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fd12 	bl	8000d1e <LL_ADC_SetSamplingTimeCommonConfig>
 80012fa:	e00e      	b.n	800131a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	6819      	ldr	r1, [r3, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	461a      	mov	r2, r3
 800130a:	f7ff fd47 	bl	8000d9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd02 	bl	8000d1e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	2b04      	cmp	r3, #4
 800133a:	d022      	beq.n	8001382 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	6919      	ldr	r1, [r3, #16]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800134c:	f7ff fc5c 	bl	8000c08 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	6919      	ldr	r1, [r3, #16]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	461a      	mov	r2, r3
 800135e:	f7ff fca8 	bl	8000cb2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800136e:	2b01      	cmp	r3, #1
 8001370:	d102      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x124>
 8001372:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001376:	e000      	b.n	800137a <HAL_ADC_ConfigChannel+0x126>
 8001378:	2300      	movs	r3, #0
 800137a:	461a      	mov	r2, r3
 800137c:	f7ff fcb4 	bl	8000ce8 <LL_ADC_SetOffsetSaturation>
 8001380:	e17b      	b.n	800167a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fc61 	bl	8000c50 <LL_ADC_GetOffsetChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10a      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x15a>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fc56 	bl	8000c50 <LL_ADC_GetOffsetChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	0e9b      	lsrs	r3, r3, #26
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	e01e      	b.n	80013ec <HAL_ADC_ConfigChannel+0x198>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fc4b 	bl	8000c50 <LL_ADC_GetOffsetChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80013d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80013d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80013dc:	2320      	movs	r3, #32
 80013de:	e004      	b.n	80013ea <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80013e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80013e4:	fab3 f383 	clz	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1b0>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0e9b      	lsrs	r3, r3, #26
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	e018      	b.n	8001436 <HAL_ADC_ConfigChannel+0x1e2>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800141c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001420:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001428:	2320      	movs	r3, #32
 800142a:	e004      	b.n	8001436 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800142c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001436:	429a      	cmp	r2, r3
 8001438:	d106      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc1a 	bl	8000c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fbfe 	bl	8000c50 <LL_ADC_GetOffsetChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10a      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x220>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2101      	movs	r1, #1
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fbf3 	bl	8000c50 <LL_ADC_GetOffsetChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	0e9b      	lsrs	r3, r3, #26
 800146e:	f003 021f 	and.w	r2, r3, #31
 8001472:	e01e      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x25e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fbe8 	bl	8000c50 <LL_ADC_GetOffsetChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001496:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800149a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80014a2:	2320      	movs	r3, #32
 80014a4:	e004      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80014a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014aa:	fab3 f383 	clz	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d105      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x276>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0e9b      	lsrs	r3, r3, #26
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	e018      	b.n	80014fc <HAL_ADC_ConfigChannel+0x2a8>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014d6:	fa93 f3a3 	rbit	r3, r3
 80014da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80014de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80014e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80014e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80014ee:	2320      	movs	r3, #32
 80014f0:	e004      	b.n	80014fc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80014f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d106      	bne.n	800150e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2200      	movs	r2, #0
 8001506:	2101      	movs	r1, #1
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fbb7 	bl	8000c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2102      	movs	r1, #2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fb9b 	bl	8000c50 <LL_ADC_GetOffsetChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10a      	bne.n	800153a <HAL_ADC_ConfigChannel+0x2e6>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2102      	movs	r1, #2
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fb90 	bl	8000c50 <LL_ADC_GetOffsetChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	0e9b      	lsrs	r3, r3, #26
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	e01e      	b.n	8001578 <HAL_ADC_ConfigChannel+0x324>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2102      	movs	r1, #2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fb85 	bl	8000c50 <LL_ADC_GetOffsetChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001558:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800155c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001560:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001568:	2320      	movs	r3, #32
 800156a:	e004      	b.n	8001576 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800156c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001580:	2b00      	cmp	r3, #0
 8001582:	d105      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x33c>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0e9b      	lsrs	r3, r3, #26
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	e016      	b.n	80015be <HAL_ADC_ConfigChannel+0x36a>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80015a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80015a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80015a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80015b0:	2320      	movs	r3, #32
 80015b2:	e004      	b.n	80015be <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80015b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015be:	429a      	cmp	r2, r3
 80015c0:	d106      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2200      	movs	r2, #0
 80015c8:	2102      	movs	r1, #2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fb56 	bl	8000c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2103      	movs	r1, #3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fb3a 	bl	8000c50 <LL_ADC_GetOffsetChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10a      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x3a8>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2103      	movs	r1, #3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fb2f 	bl	8000c50 <LL_ADC_GetOffsetChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	0e9b      	lsrs	r3, r3, #26
 80015f6:	f003 021f 	and.w	r2, r3, #31
 80015fa:	e017      	b.n	800162c <HAL_ADC_ConfigChannel+0x3d8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2103      	movs	r1, #3
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fb24 	bl	8000c50 <LL_ADC_GetOffsetChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001614:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001616:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001618:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800161e:	2320      	movs	r3, #32
 8001620:	e003      	b.n	800162a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001622:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x3f0>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0e9b      	lsrs	r3, r3, #26
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	e011      	b.n	8001668 <HAL_ADC_ConfigChannel+0x414>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001652:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001654:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800165c:	2320      	movs	r3, #32
 800165e:	e003      	b.n	8001668 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001668:	429a      	cmp	r2, r3
 800166a:	d106      	bne.n	800167a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2200      	movs	r2, #0
 8001672:	2103      	movs	r1, #3
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fb01 	bl	8000c7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fc2a 	bl	8000ed8 <LL_ADC_IsEnabled>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 8140 	bne.w	800190c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6819      	ldr	r1, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	461a      	mov	r2, r3
 800169a:	f7ff fbab 	bl	8000df4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	4a8f      	ldr	r2, [pc, #572]	@ (80018e0 <HAL_ADC_ConfigChannel+0x68c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	f040 8131 	bne.w	800190c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10b      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x47e>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0e9b      	lsrs	r3, r3, #26
 80016c0:	3301      	adds	r3, #1
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	2b09      	cmp	r3, #9
 80016c8:	bf94      	ite	ls
 80016ca:	2301      	movls	r3, #1
 80016cc:	2300      	movhi	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	e019      	b.n	8001706 <HAL_ADC_ConfigChannel+0x4b2>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80016e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016e2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80016e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80016ea:	2320      	movs	r3, #32
 80016ec:	e003      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80016ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	bf94      	ite	ls
 8001700:	2301      	movls	r3, #1
 8001702:	2300      	movhi	r3, #0
 8001704:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001706:	2b00      	cmp	r3, #0
 8001708:	d079      	beq.n	80017fe <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001712:	2b00      	cmp	r3, #0
 8001714:	d107      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x4d2>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	0e9b      	lsrs	r3, r3, #26
 800171c:	3301      	adds	r3, #1
 800171e:	069b      	lsls	r3, r3, #26
 8001720:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001724:	e015      	b.n	8001752 <HAL_ADC_ConfigChannel+0x4fe>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800172e:	fa93 f3a3 	rbit	r3, r3
 8001732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001736:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800173e:	2320      	movs	r3, #32
 8001740:	e003      	b.n	800174a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001744:	fab3 f383 	clz	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	3301      	adds	r3, #1
 800174c:	069b      	lsls	r3, r3, #26
 800174e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x51e>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0e9b      	lsrs	r3, r3, #26
 8001764:	3301      	adds	r3, #1
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	2101      	movs	r1, #1
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	e017      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x54e>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001782:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800178a:	2320      	movs	r3, #32
 800178c:	e003      	b.n	8001796 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800178e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3301      	adds	r3, #1
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	2101      	movs	r1, #1
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	ea42 0103 	orr.w	r1, r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10a      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x574>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	0e9b      	lsrs	r3, r3, #26
 80017b8:	3301      	adds	r3, #1
 80017ba:	f003 021f 	and.w	r2, r3, #31
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	051b      	lsls	r3, r3, #20
 80017c6:	e018      	b.n	80017fa <HAL_ADC_ConfigChannel+0x5a6>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80017d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80017da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80017e0:	2320      	movs	r3, #32
 80017e2:	e003      	b.n	80017ec <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80017e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3301      	adds	r3, #1
 80017ee:	f003 021f 	and.w	r2, r3, #31
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017fa:	430b      	orrs	r3, r1
 80017fc:	e081      	b.n	8001902 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001806:	2b00      	cmp	r3, #0
 8001808:	d107      	bne.n	800181a <HAL_ADC_ConfigChannel+0x5c6>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0e9b      	lsrs	r3, r3, #26
 8001810:	3301      	adds	r3, #1
 8001812:	069b      	lsls	r3, r3, #26
 8001814:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001818:	e015      	b.n	8001846 <HAL_ADC_ConfigChannel+0x5f2>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800182c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001832:	2320      	movs	r3, #32
 8001834:	e003      	b.n	800183e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	3301      	adds	r3, #1
 8001840:	069b      	lsls	r3, r3, #26
 8001842:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x612>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0e9b      	lsrs	r3, r3, #26
 8001858:	3301      	adds	r3, #1
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	e017      	b.n	8001896 <HAL_ADC_ConfigChannel+0x642>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	61fb      	str	r3, [r7, #28]
  return result;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800187e:	2320      	movs	r3, #32
 8001880:	e003      	b.n	800188a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	3301      	adds	r3, #1
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	ea42 0103 	orr.w	r1, r2, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10d      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x66e>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	0e9b      	lsrs	r3, r3, #26
 80018ac:	3301      	adds	r3, #1
 80018ae:	f003 021f 	and.w	r2, r3, #31
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	3b1e      	subs	r3, #30
 80018ba:	051b      	lsls	r3, r3, #20
 80018bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018c0:	e01e      	b.n	8001900 <HAL_ADC_ConfigChannel+0x6ac>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	613b      	str	r3, [r7, #16]
  return result;
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d104      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80018da:	2320      	movs	r3, #32
 80018dc:	e006      	b.n	80018ec <HAL_ADC_ConfigChannel+0x698>
 80018de:	bf00      	nop
 80018e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	f003 021f 	and.w	r2, r3, #31
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	3b1e      	subs	r3, #30
 80018fa:	051b      	lsls	r3, r3, #20
 80018fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001900:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff fa48 	bl	8000d9c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b3f      	ldr	r3, [pc, #252]	@ (8001a10 <HAL_ADC_ConfigChannel+0x7bc>)
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d071      	beq.n	80019fc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001918:	483e      	ldr	r0, [pc, #248]	@ (8001a14 <HAL_ADC_ConfigChannel+0x7c0>)
 800191a:	f7ff f967 	bl	8000bec <LL_ADC_GetCommonPathInternalCh>
 800191e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a3c      	ldr	r2, [pc, #240]	@ (8001a18 <HAL_ADC_ConfigChannel+0x7c4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d004      	beq.n	8001936 <HAL_ADC_ConfigChannel+0x6e2>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a3a      	ldr	r2, [pc, #232]	@ (8001a1c <HAL_ADC_ConfigChannel+0x7c8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d127      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001936:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800193a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d121      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800194a:	d157      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800194c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001950:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001954:	4619      	mov	r1, r3
 8001956:	482f      	ldr	r0, [pc, #188]	@ (8001a14 <HAL_ADC_ConfigChannel+0x7c0>)
 8001958:	f7ff f935 	bl	8000bc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800195c:	4b30      	ldr	r3, [pc, #192]	@ (8001a20 <HAL_ADC_ConfigChannel+0x7cc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	4a30      	ldr	r2, [pc, #192]	@ (8001a24 <HAL_ADC_ConfigChannel+0x7d0>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001976:	e002      	b.n	800197e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3b01      	subs	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f9      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001984:	e03a      	b.n	80019fc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a27      	ldr	r2, [pc, #156]	@ (8001a28 <HAL_ADC_ConfigChannel+0x7d4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d113      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001990:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10d      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a22      	ldr	r2, [pc, #136]	@ (8001a2c <HAL_ADC_ConfigChannel+0x7d8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d02a      	beq.n	80019fc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ae:	4619      	mov	r1, r3
 80019b0:	4818      	ldr	r0, [pc, #96]	@ (8001a14 <HAL_ADC_ConfigChannel+0x7c0>)
 80019b2:	f7ff f908 	bl	8000bc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019b6:	e021      	b.n	80019fc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a30 <HAL_ADC_ConfigChannel+0x7dc>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d11c      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d116      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a16      	ldr	r2, [pc, #88]	@ (8001a2c <HAL_ADC_ConfigChannel+0x7d8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d011      	beq.n	80019fc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019e0:	4619      	mov	r1, r3
 80019e2:	480c      	ldr	r0, [pc, #48]	@ (8001a14 <HAL_ADC_ConfigChannel+0x7c0>)
 80019e4:	f7ff f8ef 	bl	8000bc6 <LL_ADC_SetCommonPathInternalCh>
 80019e8:	e008      	b.n	80019fc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ee:	f043 0220 	orr.w	r2, r3, #32
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001a04:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	37d8      	adds	r7, #216	@ 0xd8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	80080000 	.word	0x80080000
 8001a14:	50000300 	.word	0x50000300
 8001a18:	c3210000 	.word	0xc3210000
 8001a1c:	90c00010 	.word	0x90c00010
 8001a20:	20000000 	.word	0x20000000
 8001a24:	053e2d63 	.word	0x053e2d63
 8001a28:	c7520000 	.word	0xc7520000
 8001a2c:	50000100 	.word	0x50000100
 8001a30:	cb840000 	.word	0xcb840000

08001a34 <LL_ADC_IsEnabled>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <LL_ADC_IsEnabled+0x18>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_ADC_IsEnabled+0x1a>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_ADC_REG_IsConversionOngoing>:
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d101      	bne.n	8001a72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b0a1      	sub	sp, #132	@ 0x84
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e08b      	b.n	8001bb6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ab6:	d102      	bne.n	8001abe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ab8:	4b41      	ldr	r3, [pc, #260]	@ (8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	e001      	b.n	8001ac2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001acc:	f043 0220 	orr.w	r2, r3, #32
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e06a      	b.n	8001bb6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ffb9 	bl	8001a5a <LL_ADC_REG_IsConversionOngoing>
 8001ae8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ffb3 	bl	8001a5a <LL_ADC_REG_IsConversionOngoing>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d14c      	bne.n	8001b94 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001afa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d149      	bne.n	8001b94 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001b00:	4b30      	ldr	r3, [pc, #192]	@ (8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001b02:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d028      	beq.n	8001b5e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001b0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b1e:	035b      	lsls	r3, r3, #13
 8001b20:	430b      	orrs	r3, r1
 8001b22:	431a      	orrs	r2, r3
 8001b24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b28:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001b2c:	f7ff ff82 	bl	8001a34 <LL_ADC_IsEnabled>
 8001b30:	4604      	mov	r4, r0
 8001b32:	4823      	ldr	r0, [pc, #140]	@ (8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001b34:	f7ff ff7e 	bl	8001a34 <LL_ADC_IsEnabled>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4323      	orrs	r3, r4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d133      	bne.n	8001ba8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001b40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001b48:	f023 030f 	bic.w	r3, r3, #15
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	6811      	ldr	r1, [r2, #0]
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	6892      	ldr	r2, [r2, #8]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	431a      	orrs	r2, r3
 8001b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b5a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b5c:	e024      	b.n	8001ba8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b68:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b6a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001b6e:	f7ff ff61 	bl	8001a34 <LL_ADC_IsEnabled>
 8001b72:	4604      	mov	r4, r0
 8001b74:	4812      	ldr	r0, [pc, #72]	@ (8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001b76:	f7ff ff5d 	bl	8001a34 <LL_ADC_IsEnabled>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4323      	orrs	r3, r4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d112      	bne.n	8001ba8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001b82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001b8a:	f023 030f 	bic.w	r3, r3, #15
 8001b8e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001b90:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b92:	e009      	b.n	8001ba8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b98:	f043 0220 	orr.w	r2, r3, #32
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001ba6:	e000      	b.n	8001baa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ba8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001bb2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3784      	adds	r7, #132	@ 0x84
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd90      	pop	{r4, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	50000100 	.word	0x50000100
 8001bc4:	50000300 	.word	0x50000300

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	@ (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	@ (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	@ (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	@ 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	@ 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d0c:	f7ff ff8e 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff47 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff5e 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff90 	bl	8001c80 <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5f 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffb2 	bl	8001ce8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d9e:	e15a      	b.n	8002056 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 814c 	beq.w	8002050 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d005      	beq.n	8001dd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d130      	bne.n	8001e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e06:	2201      	movs	r2, #1
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 0201 	and.w	r2, r3, #1
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d017      	beq.n	8001e6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	2203      	movs	r2, #3
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d123      	bne.n	8001ec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	6939      	ldr	r1, [r7, #16]
 8001ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0203 	and.w	r2, r3, #3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80a6 	beq.w	8002050 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f04:	4b5b      	ldr	r3, [pc, #364]	@ (8002074 <HAL_GPIO_Init+0x2e4>)
 8001f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f08:	4a5a      	ldr	r2, [pc, #360]	@ (8002074 <HAL_GPIO_Init+0x2e4>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f10:	4b58      	ldr	r3, [pc, #352]	@ (8002074 <HAL_GPIO_Init+0x2e4>)
 8001f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1c:	4a56      	ldr	r2, [pc, #344]	@ (8002078 <HAL_GPIO_Init+0x2e8>)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	220f      	movs	r2, #15
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f46:	d01f      	beq.n	8001f88 <HAL_GPIO_Init+0x1f8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800207c <HAL_GPIO_Init+0x2ec>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d019      	beq.n	8001f84 <HAL_GPIO_Init+0x1f4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a4b      	ldr	r2, [pc, #300]	@ (8002080 <HAL_GPIO_Init+0x2f0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d013      	beq.n	8001f80 <HAL_GPIO_Init+0x1f0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a4a      	ldr	r2, [pc, #296]	@ (8002084 <HAL_GPIO_Init+0x2f4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00d      	beq.n	8001f7c <HAL_GPIO_Init+0x1ec>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a49      	ldr	r2, [pc, #292]	@ (8002088 <HAL_GPIO_Init+0x2f8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d007      	beq.n	8001f78 <HAL_GPIO_Init+0x1e8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a48      	ldr	r2, [pc, #288]	@ (800208c <HAL_GPIO_Init+0x2fc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <HAL_GPIO_Init+0x1e4>
 8001f70:	2305      	movs	r3, #5
 8001f72:	e00a      	b.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f74:	2306      	movs	r3, #6
 8001f76:	e008      	b.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e006      	b.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e004      	b.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e002      	b.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	f002 0203 	and.w	r2, r2, #3
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	4093      	lsls	r3, r2
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f9a:	4937      	ldr	r1, [pc, #220]	@ (8002078 <HAL_GPIO_Init+0x2e8>)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa8:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <HAL_GPIO_Init+0x300>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fcc:	4a30      	ldr	r2, [pc, #192]	@ (8002090 <HAL_GPIO_Init+0x300>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002090 <HAL_GPIO_Init+0x300>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ff6:	4a26      	ldr	r2, [pc, #152]	@ (8002090 <HAL_GPIO_Init+0x300>)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ffc:	4b24      	ldr	r3, [pc, #144]	@ (8002090 <HAL_GPIO_Init+0x300>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002020:	4a1b      	ldr	r2, [pc, #108]	@ (8002090 <HAL_GPIO_Init+0x300>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002026:	4b1a      	ldr	r3, [pc, #104]	@ (8002090 <HAL_GPIO_Init+0x300>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800204a:	4a11      	ldr	r2, [pc, #68]	@ (8002090 <HAL_GPIO_Init+0x300>)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3301      	adds	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	f47f ae9d 	bne.w	8001da0 <HAL_GPIO_Init+0x10>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40021000 	.word	0x40021000
 8002078:	40010000 	.word	0x40010000
 800207c:	48000400 	.word	0x48000400
 8002080:	48000800 	.word	0x48000800
 8002084:	48000c00 	.word	0x48000c00
 8002088:	48001000 	.word	0x48001000
 800208c:	48001400 	.word	0x48001400
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e08d      	b.n	80021f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fb64 	bl	80007b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2224      	movs	r2, #36	@ 0x24
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002114:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002124:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	e006      	b.n	800214c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800214a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d108      	bne.n	8002166 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	e007      	b.n	8002176 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002174:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002188:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002198:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69d9      	ldr	r1, [r3, #28]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1a      	ldr	r2, [r3, #32]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b20      	cmp	r3, #32
 800220e:	d138      	bne.n	8002282 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800221a:	2302      	movs	r3, #2
 800221c:	e032      	b.n	8002284 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2224      	movs	r2, #36	@ 0x24
 800222a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800224c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002282:	2302      	movs	r3, #2
  }
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	d139      	bne.n	800231a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e033      	b.n	800231c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2224      	movs	r2, #36	@ 0x24
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800231a:	2302      	movs	r3, #2
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d141      	bne.n	80023ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002336:	4b4b      	ldr	r3, [pc, #300]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800233e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002342:	d131      	bne.n	80023a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002344:	4b47      	ldr	r3, [pc, #284]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800234a:	4a46      	ldr	r2, [pc, #280]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002350:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002354:	4b43      	ldr	r3, [pc, #268]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800235c:	4a41      	ldr	r2, [pc, #260]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002362:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002364:	4b40      	ldr	r3, [pc, #256]	@ (8002468 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2232      	movs	r2, #50	@ 0x32
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	4a3f      	ldr	r2, [pc, #252]	@ (800246c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	0c9b      	lsrs	r3, r3, #18
 8002376:	3301      	adds	r3, #1
 8002378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800237a:	e002      	b.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3b01      	subs	r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002382:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800238e:	d102      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f2      	bne.n	800237c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002396:	4b33      	ldr	r3, [pc, #204]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023a2:	d158      	bne.n	8002456 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e057      	b.n	8002458 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80023b8:	e04d      	b.n	8002456 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023c0:	d141      	bne.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023c2:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ce:	d131      	bne.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023d0:	4b24      	ldr	r3, [pc, #144]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023d6:	4a23      	ldr	r2, [pc, #140]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023e0:	4b20      	ldr	r3, [pc, #128]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2232      	movs	r2, #50	@ 0x32
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	4a1c      	ldr	r2, [pc, #112]	@ (800246c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	0c9b      	lsrs	r3, r3, #18
 8002402:	3301      	adds	r3, #1
 8002404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002406:	e002      	b.n	800240e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3b01      	subs	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800240e:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800241a:	d102      	bne.n	8002422 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f2      	bne.n	8002408 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002422:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800242e:	d112      	bne.n	8002456 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e011      	b.n	8002458 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800243a:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002444:	e007      	b.n	8002456 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002446:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800244e:	4a05      	ldr	r2, [pc, #20]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002450:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002454:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40007000 	.word	0x40007000
 8002468:	20000000 	.word	0x20000000
 800246c:	431bde83 	.word	0x431bde83

08002470 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002474:	4b05      	ldr	r3, [pc, #20]	@ (800248c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a04      	ldr	r2, [pc, #16]	@ (800248c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800247a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800247e:	6093      	str	r3, [r2, #8]
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40007000 	.word	0x40007000

08002490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e2fe      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d075      	beq.n	800259a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ae:	4b97      	ldr	r3, [pc, #604]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b8:	4b94      	ldr	r3, [pc, #592]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b0c      	cmp	r3, #12
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_OscConfig+0x3e>
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_OscConfig+0x44>
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d10b      	bne.n	80024ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	4b8d      	ldr	r3, [pc, #564]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d05b      	beq.n	8002598 <HAL_RCC_OscConfig+0x108>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d157      	bne.n	8002598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e2d9      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024f4:	d106      	bne.n	8002504 <HAL_RCC_OscConfig+0x74>
 80024f6:	4b85      	ldr	r3, [pc, #532]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a84      	ldr	r2, [pc, #528]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e01d      	b.n	8002540 <HAL_RCC_OscConfig+0xb0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x98>
 800250e:	4b7f      	ldr	r3, [pc, #508]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a7e      	ldr	r2, [pc, #504]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b7c      	ldr	r3, [pc, #496]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a7b      	ldr	r2, [pc, #492]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0xb0>
 8002528:	4b78      	ldr	r3, [pc, #480]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a77      	ldr	r2, [pc, #476]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 800252e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b75      	ldr	r3, [pc, #468]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a74      	ldr	r2, [pc, #464]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 800253a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800253e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fb1e 	bl	8000b88 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002550:	f7fe fb1a 	bl	8000b88 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	@ 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e29e      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002562:	4b6a      	ldr	r3, [pc, #424]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0xc0>
 800256e:	e014      	b.n	800259a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fb0a 	bl	8000b88 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002578:	f7fe fb06 	bl	8000b88 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	@ 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e28a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800258a:	4b60      	ldr	r3, [pc, #384]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0xe8>
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d075      	beq.n	8002692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a6:	4b59      	ldr	r3, [pc, #356]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025b0:	4b56      	ldr	r3, [pc, #344]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	2b0c      	cmp	r3, #12
 80025be:	d102      	bne.n	80025c6 <HAL_RCC_OscConfig+0x136>
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d002      	beq.n	80025cc <HAL_RCC_OscConfig+0x13c>
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d11f      	bne.n	800260c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025cc:	4b4f      	ldr	r3, [pc, #316]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_OscConfig+0x154>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e25d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b49      	ldr	r3, [pc, #292]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	4946      	ldr	r1, [pc, #280]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025f8:	4b45      	ldr	r3, [pc, #276]	@ (8002710 <HAL_RCC_OscConfig+0x280>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fa77 	bl	8000af0 <HAL_InitTick>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d043      	beq.n	8002690 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e249      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d023      	beq.n	800265c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002614:	4b3d      	ldr	r3, [pc, #244]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a3c      	ldr	r2, [pc, #240]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fab2 	bl	8000b88 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002628:	f7fe faae 	bl	8000b88 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e232      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800263a:	4b34      	ldr	r3, [pc, #208]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b31      	ldr	r3, [pc, #196]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	061b      	lsls	r3, r3, #24
 8002654:	492d      	ldr	r1, [pc, #180]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
 800265a:	e01a      	b.n	8002692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265c:	4b2b      	ldr	r3, [pc, #172]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a2a      	ldr	r2, [pc, #168]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 8002662:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fa8e 	bl	8000b88 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002670:	f7fe fa8a 	bl	8000b88 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e20e      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002682:	4b22      	ldr	r3, [pc, #136]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1e0>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d041      	beq.n	8002722 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01c      	beq.n	80026e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a6:	4b19      	ldr	r3, [pc, #100]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80026a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ac:	4a17      	ldr	r2, [pc, #92]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7fe fa67 	bl	8000b88 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026be:	f7fe fa63 	bl	8000b88 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e1e7      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026d0:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80026d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0ef      	beq.n	80026be <HAL_RCC_OscConfig+0x22e>
 80026de:	e020      	b.n	8002722 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e0:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80026e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e6:	4a09      	ldr	r2, [pc, #36]	@ (800270c <HAL_RCC_OscConfig+0x27c>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f0:	f7fe fa4a 	bl	8000b88 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f6:	e00d      	b.n	8002714 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f8:	f7fe fa46 	bl	8000b88 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d906      	bls.n	8002714 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e1ca      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002714:	4b8c      	ldr	r3, [pc, #560]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 8002716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1ea      	bne.n	80026f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80a6 	beq.w	800287c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002730:	2300      	movs	r3, #0
 8002732:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002734:	4b84      	ldr	r3, [pc, #528]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_OscConfig+0x2b4>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x2b6>
 8002744:	2300      	movs	r3, #0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00d      	beq.n	8002766 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	4b7f      	ldr	r3, [pc, #508]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274e:	4a7e      	ldr	r2, [pc, #504]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002754:	6593      	str	r3, [r2, #88]	@ 0x58
 8002756:	4b7c      	ldr	r3, [pc, #496]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002766:	4b79      	ldr	r3, [pc, #484]	@ (800294c <HAL_RCC_OscConfig+0x4bc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d118      	bne.n	80027a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002772:	4b76      	ldr	r3, [pc, #472]	@ (800294c <HAL_RCC_OscConfig+0x4bc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a75      	ldr	r2, [pc, #468]	@ (800294c <HAL_RCC_OscConfig+0x4bc>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277e:	f7fe fa03 	bl	8000b88 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002786:	f7fe f9ff 	bl	8000b88 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e183      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002798:	4b6c      	ldr	r3, [pc, #432]	@ (800294c <HAL_RCC_OscConfig+0x4bc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d108      	bne.n	80027be <HAL_RCC_OscConfig+0x32e>
 80027ac:	4b66      	ldr	r3, [pc, #408]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	4a65      	ldr	r2, [pc, #404]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027bc:	e024      	b.n	8002808 <HAL_RCC_OscConfig+0x378>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d110      	bne.n	80027e8 <HAL_RCC_OscConfig+0x358>
 80027c6:	4b60      	ldr	r3, [pc, #384]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027cc:	4a5e      	ldr	r2, [pc, #376]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027e6:	e00f      	b.n	8002808 <HAL_RCC_OscConfig+0x378>
 80027e8:	4b57      	ldr	r3, [pc, #348]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ee:	4a56      	ldr	r2, [pc, #344]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f8:	4b53      	ldr	r3, [pc, #332]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fe:	4a52      	ldr	r2, [pc, #328]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d016      	beq.n	800283e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7fe f9ba 	bl	8000b88 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002816:	e00a      	b.n	800282e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002818:	f7fe f9b6 	bl	8000b88 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e138      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800282e:	4b46      	ldr	r3, [pc, #280]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ed      	beq.n	8002818 <HAL_RCC_OscConfig+0x388>
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283e:	f7fe f9a3 	bl	8000b88 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe f99f 	bl	8000b88 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e121      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800285c:	4b3a      	ldr	r3, [pc, #232]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1ed      	bne.n	8002846 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800286a:	7ffb      	ldrb	r3, [r7, #31]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002870:	4b35      	ldr	r3, [pc, #212]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002874:	4a34      	ldr	r2, [pc, #208]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 8002876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800287a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d03c      	beq.n	8002902 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01c      	beq.n	80028ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002890:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 8002892:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002896:	4a2c      	ldr	r2, [pc, #176]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7fe f972 	bl	8000b88 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028a8:	f7fe f96e 	bl	8000b88 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e0f2      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ba:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80028bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ef      	beq.n	80028a8 <HAL_RCC_OscConfig+0x418>
 80028c8:	e01b      	b.n	8002902 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80028cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe f955 	bl	8000b88 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e2:	f7fe f951 	bl	8000b88 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0d5      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028f4:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 80028f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1ef      	bne.n	80028e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80c9 	beq.w	8002a9e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800290c:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b0c      	cmp	r3, #12
 8002916:	f000 8083 	beq.w	8002a20 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d15e      	bne.n	80029e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a08      	ldr	r2, [pc, #32]	@ (8002948 <HAL_RCC_OscConfig+0x4b8>)
 8002928:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800292c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe f92b 	bl	8000b88 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002934:	e00c      	b.n	8002950 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002936:	f7fe f927 	bl	8000b88 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d905      	bls.n	8002950 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e0ab      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
 8002948:	40021000 	.word	0x40021000
 800294c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002950:	4b55      	ldr	r3, [pc, #340]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ec      	bne.n	8002936 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295c:	4b52      	ldr	r3, [pc, #328]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	4b52      	ldr	r3, [pc, #328]	@ (8002aac <HAL_RCC_OscConfig+0x61c>)
 8002962:	4013      	ands	r3, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6a11      	ldr	r1, [r2, #32]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800296c:	3a01      	subs	r2, #1
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	4311      	orrs	r1, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002976:	0212      	lsls	r2, r2, #8
 8002978:	4311      	orrs	r1, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800297e:	0852      	lsrs	r2, r2, #1
 8002980:	3a01      	subs	r2, #1
 8002982:	0552      	lsls	r2, r2, #21
 8002984:	4311      	orrs	r1, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800298a:	0852      	lsrs	r2, r2, #1
 800298c:	3a01      	subs	r2, #1
 800298e:	0652      	lsls	r2, r2, #25
 8002990:	4311      	orrs	r1, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002996:	06d2      	lsls	r2, r2, #27
 8002998:	430a      	orrs	r2, r1
 800299a:	4943      	ldr	r1, [pc, #268]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 800299c:	4313      	orrs	r3, r2
 800299e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a0:	4b41      	ldr	r3, [pc, #260]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a40      	ldr	r2, [pc, #256]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 80029a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029ac:	4b3e      	ldr	r3, [pc, #248]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a3d      	ldr	r2, [pc, #244]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe f8e6 	bl	8000b88 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe f8e2 	bl	8000b88 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e066      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d2:	4b35      	ldr	r3, [pc, #212]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x530>
 80029de:	e05e      	b.n	8002a9e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e0:	4b31      	ldr	r3, [pc, #196]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a30      	ldr	r2, [pc, #192]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 80029e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe f8cc 	bl	8000b88 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe f8c8 	bl	8000b88 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e04c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a06:	4b28      	ldr	r3, [pc, #160]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a12:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	4924      	ldr	r1, [pc, #144]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 8002a18:	4b25      	ldr	r3, [pc, #148]	@ (8002ab0 <HAL_RCC_OscConfig+0x620>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	60cb      	str	r3, [r1, #12]
 8002a1e:	e03e      	b.n	8002a9e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e039      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <HAL_RCC_OscConfig+0x618>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0203 	and.w	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d12c      	bne.n	8002a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d123      	bne.n	8002a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d11b      	bne.n	8002a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d113      	bne.n	8002a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	3b01      	subs	r3, #1
 8002a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	019f800c 	.word	0x019f800c
 8002ab0:	feeefffc 	.word	0xfeeefffc

08002ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e11e      	b.n	8002d0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002acc:	4b91      	ldr	r3, [pc, #580]	@ (8002d14 <HAL_RCC_ClockConfig+0x260>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d910      	bls.n	8002afc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b8e      	ldr	r3, [pc, #568]	@ (8002d14 <HAL_RCC_ClockConfig+0x260>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 020f 	bic.w	r2, r3, #15
 8002ae2:	498c      	ldr	r1, [pc, #560]	@ (8002d14 <HAL_RCC_ClockConfig+0x260>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b8a      	ldr	r3, [pc, #552]	@ (8002d14 <HAL_RCC_ClockConfig+0x260>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e106      	b.n	8002d0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d073      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d129      	bne.n	8002b64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b10:	4b81      	ldr	r3, [pc, #516]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0f4      	b.n	8002d0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b20:	f000 f966 	bl	8002df0 <RCC_GetSysClockFreqFromPLLSource>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4a7c      	ldr	r2, [pc, #496]	@ (8002d1c <HAL_RCC_ClockConfig+0x268>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d93f      	bls.n	8002bae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b2e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d033      	beq.n	8002bae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d12f      	bne.n	8002bae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b4e:	4b72      	ldr	r3, [pc, #456]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b56:	4a70      	ldr	r2, [pc, #448]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b5e:	2380      	movs	r3, #128	@ 0x80
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e024      	b.n	8002bae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d107      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0c6      	b.n	8002d0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b7c:	4b66      	ldr	r3, [pc, #408]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0be      	b.n	8002d0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b8c:	f000 f8ce 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4a61      	ldr	r2, [pc, #388]	@ (8002d1c <HAL_RCC_ClockConfig+0x268>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d909      	bls.n	8002bae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ba2:	4a5d      	ldr	r2, [pc, #372]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ba8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bae:	4b5a      	ldr	r3, [pc, #360]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4957      	ldr	r1, [pc, #348]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc0:	f7fd ffe2 	bl	8000b88 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7fd ffde 	bl	8000b88 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e095      	b.n	8002d0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	4b4e      	ldr	r3, [pc, #312]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 020c 	and.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1eb      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d023      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c08:	4b43      	ldr	r3, [pc, #268]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a42      	ldr	r2, [pc, #264]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002c0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002c20:	4b3d      	ldr	r3, [pc, #244]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002c28:	4a3b      	ldr	r2, [pc, #236]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002c2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c30:	4b39      	ldr	r3, [pc, #228]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4936      	ldr	r1, [pc, #216]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b80      	cmp	r3, #128	@ 0x80
 8002c48:	d105      	bne.n	8002c56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c4a:	4b33      	ldr	r3, [pc, #204]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	4a32      	ldr	r2, [pc, #200]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002c50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c56:	4b2f      	ldr	r3, [pc, #188]	@ (8002d14 <HAL_RCC_ClockConfig+0x260>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d21d      	bcs.n	8002ca0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c64:	4b2b      	ldr	r3, [pc, #172]	@ (8002d14 <HAL_RCC_ClockConfig+0x260>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f023 020f 	bic.w	r2, r3, #15
 8002c6c:	4929      	ldr	r1, [pc, #164]	@ (8002d14 <HAL_RCC_ClockConfig+0x260>)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c74:	f7fd ff88 	bl	8000b88 <HAL_GetTick>
 8002c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7c:	f7fd ff84 	bl	8000b88 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e03b      	b.n	8002d0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b20      	ldr	r3, [pc, #128]	@ (8002d14 <HAL_RCC_ClockConfig+0x260>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d1ed      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cac:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4917      	ldr	r1, [pc, #92]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cca:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	490f      	ldr	r1, [pc, #60]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cde:	f000 f825 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <HAL_RCC_ClockConfig+0x264>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	490c      	ldr	r1, [pc, #48]	@ (8002d20 <HAL_RCC_ClockConfig+0x26c>)
 8002cf0:	5ccb      	ldrb	r3, [r1, r3]
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002d24 <HAL_RCC_ClockConfig+0x270>)
 8002cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <HAL_RCC_ClockConfig+0x274>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd fef4 	bl	8000af0 <HAL_InitTick>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40022000 	.word	0x40022000
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	04c4b400 	.word	0x04c4b400
 8002d20:	08003c44 	.word	0x08003c44
 8002d24:	20000000 	.word	0x20000000
 8002d28:	20000004 	.word	0x20000004

08002d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d32:	4b2c      	ldr	r3, [pc, #176]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d102      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	e047      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d44:	4b27      	ldr	r3, [pc, #156]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d102      	bne.n	8002d56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d50:	4b26      	ldr	r3, [pc, #152]	@ (8002dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	e03e      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d56:	4b23      	ldr	r3, [pc, #140]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d136      	bne.n	8002dd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d62:	4b20      	ldr	r3, [pc, #128]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3301      	adds	r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d80:	4a1a      	ldr	r2, [pc, #104]	@ (8002dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	4a16      	ldr	r2, [pc, #88]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d8a:	68d2      	ldr	r2, [r2, #12]
 8002d8c:	0a12      	lsrs	r2, r2, #8
 8002d8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	617b      	str	r3, [r7, #20]
      break;
 8002d98:	e00c      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d9a:	4a13      	ldr	r2, [pc, #76]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	4a10      	ldr	r2, [pc, #64]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da4:	68d2      	ldr	r2, [r2, #12]
 8002da6:	0a12      	lsrs	r2, r2, #8
 8002da8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	617b      	str	r3, [r7, #20]
      break;
 8002db2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002db4:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	0e5b      	lsrs	r3, r3, #25
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	e001      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002dd4:	693b      	ldr	r3, [r7, #16]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	00f42400 	.word	0x00f42400
 8002dec:	007a1200 	.word	0x007a1200

08002df0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002df6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e00:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d10c      	bne.n	8002e2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e14:	4a17      	ldr	r2, [pc, #92]	@ (8002e74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	4a14      	ldr	r2, [pc, #80]	@ (8002e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e1e:	68d2      	ldr	r2, [r2, #12]
 8002e20:	0a12      	lsrs	r2, r2, #8
 8002e22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	617b      	str	r3, [r7, #20]
    break;
 8002e2c:	e00c      	b.n	8002e48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e2e:	4a12      	ldr	r2, [pc, #72]	@ (8002e78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	4a0e      	ldr	r2, [pc, #56]	@ (8002e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e38:	68d2      	ldr	r2, [r2, #12]
 8002e3a:	0a12      	lsrs	r2, r2, #8
 8002e3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]
    break;
 8002e46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e48:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	0e5b      	lsrs	r3, r3, #25
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	3301      	adds	r3, #1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e62:	687b      	ldr	r3, [r7, #4]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40021000 	.word	0x40021000
 8002e74:	007a1200 	.word	0x007a1200
 8002e78:	00f42400 	.word	0x00f42400

08002e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e84:	2300      	movs	r3, #0
 8002e86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e88:	2300      	movs	r3, #0
 8002e8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8098 	beq.w	8002fca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9e:	4b43      	ldr	r3, [pc, #268]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10d      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eaa:	4b40      	ldr	r3, [pc, #256]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eae:	4a3f      	ldr	r2, [pc, #252]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a39      	ldr	r2, [pc, #228]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ed2:	f7fd fe59 	bl	8000b88 <HAL_GetTick>
 8002ed6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ed8:	e009      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eda:	f7fd fe55 	bl	8000b88 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d902      	bls.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	74fb      	strb	r3, [r7, #19]
        break;
 8002eec:	e005      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eee:	4b30      	ldr	r3, [pc, #192]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0ef      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d159      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f00:	4b2a      	ldr	r3, [pc, #168]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01e      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d019      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f1c:	4b23      	ldr	r3, [pc, #140]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f28:	4b20      	ldr	r3, [pc, #128]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f38:	4b1c      	ldr	r3, [pc, #112]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f48:	4a18      	ldr	r2, [pc, #96]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d016      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7fd fe15 	bl	8000b88 <HAL_GetTick>
 8002f5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f60:	e00b      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fd fe11 	bl	8000b88 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d902      	bls.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	74fb      	strb	r3, [r7, #19]
            break;
 8002f78:	e006      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ec      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f8e:	4b07      	ldr	r3, [pc, #28]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	4903      	ldr	r1, [pc, #12]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	74bb      	strb	r3, [r7, #18]
 8002faa:	e005      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	7cfb      	ldrb	r3, [r7, #19]
 8002fb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fb8:	7c7b      	ldrb	r3, [r7, #17]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d105      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbe:	4ba6      	ldr	r3, [pc, #664]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc2:	4aa5      	ldr	r2, [pc, #660]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fc8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fd6:	4ba0      	ldr	r3, [pc, #640]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fdc:	f023 0203 	bic.w	r2, r3, #3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	499c      	ldr	r1, [pc, #624]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ff8:	4b97      	ldr	r3, [pc, #604]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffe:	f023 020c 	bic.w	r2, r3, #12
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	4994      	ldr	r1, [pc, #592]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800301a:	4b8f      	ldr	r3, [pc, #572]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003020:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	498b      	ldr	r1, [pc, #556]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800303c:	4b86      	ldr	r3, [pc, #536]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003042:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	4983      	ldr	r1, [pc, #524]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800305e:	4b7e      	ldr	r3, [pc, #504]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003064:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	497a      	ldr	r1, [pc, #488]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003080:	4b75      	ldr	r3, [pc, #468]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003086:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	4972      	ldr	r1, [pc, #456]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	4969      	ldr	r1, [pc, #420]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030c4:	4b64      	ldr	r3, [pc, #400]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4961      	ldr	r1, [pc, #388]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	4958      	ldr	r1, [pc, #352]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d015      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003108:	4b53      	ldr	r3, [pc, #332]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003116:	4950      	ldr	r1, [pc, #320]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003126:	d105      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003128:	4b4b      	ldr	r3, [pc, #300]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a4a      	ldr	r2, [pc, #296]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800312e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003132:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800313c:	2b00      	cmp	r3, #0
 800313e:	d015      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003140:	4b45      	ldr	r3, [pc, #276]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003146:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	4942      	ldr	r1, [pc, #264]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800315e:	d105      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003160:	4b3d      	ldr	r3, [pc, #244]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a3c      	ldr	r2, [pc, #240]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800316a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d015      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003178:	4b37      	ldr	r3, [pc, #220]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	4934      	ldr	r1, [pc, #208]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003196:	d105      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003198:	4b2f      	ldr	r3, [pc, #188]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a2e      	ldr	r2, [pc, #184]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d015      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031b0:	4b29      	ldr	r3, [pc, #164]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031be:	4926      	ldr	r1, [pc, #152]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031ce:	d105      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031d0:	4b21      	ldr	r3, [pc, #132]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4a20      	ldr	r2, [pc, #128]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d015      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f6:	4918      	ldr	r1, [pc, #96]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003206:	d105      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003208:	4b13      	ldr	r3, [pc, #76]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4a12      	ldr	r2, [pc, #72]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003212:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d015      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003220:	4b0d      	ldr	r3, [pc, #52]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003226:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322e:	490a      	ldr	r1, [pc, #40]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800323e:	d105      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003240:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4a04      	ldr	r2, [pc, #16]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800324c:	7cbb      	ldrb	r3, [r7, #18]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000

0800325c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e09d      	b.n	80033aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	2b00      	cmp	r3, #0
 8003274:	d108      	bne.n	8003288 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800327e:	d009      	beq.n	8003294 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	61da      	str	r2, [r3, #28]
 8003286:	e005      	b.n	8003294 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd faf8 	bl	80008a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032d4:	d902      	bls.n	80032dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	e002      	b.n	80032e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80032ea:	d007      	beq.n	80032fc <HAL_SPI_Init+0xa0>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032f4:	d002      	beq.n	80032fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333e:	ea42 0103 	orr.w	r1, r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003346:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	f003 0204 	and.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003378:	ea42 0103 	orr.w	r1, r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003398:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e049      	b.n	8003458 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d106      	bne.n	80033de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7fd fae5 	bl	80009a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3304      	adds	r3, #4
 80033ee:	4619      	mov	r1, r3
 80033f0:	4610      	mov	r0, r2
 80033f2:	f000 f971 	bl	80036d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIM_ConfigClockSource+0x1c>
 8003478:	2302      	movs	r3, #2
 800347a:	e0de      	b.n	800363a <HAL_TIM_ConfigClockSource+0x1da>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800349a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800349e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a63      	ldr	r2, [pc, #396]	@ (8003644 <HAL_TIM_ConfigClockSource+0x1e4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	f000 80a9 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x1ae>
 80034bc:	4a61      	ldr	r2, [pc, #388]	@ (8003644 <HAL_TIM_ConfigClockSource+0x1e4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	f200 80ae 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 80034c4:	4a60      	ldr	r2, [pc, #384]	@ (8003648 <HAL_TIM_ConfigClockSource+0x1e8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	f000 80a1 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x1ae>
 80034cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003648 <HAL_TIM_ConfigClockSource+0x1e8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	f200 80a6 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 80034d4:	4a5d      	ldr	r2, [pc, #372]	@ (800364c <HAL_TIM_ConfigClockSource+0x1ec>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	f000 8099 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x1ae>
 80034dc:	4a5b      	ldr	r2, [pc, #364]	@ (800364c <HAL_TIM_ConfigClockSource+0x1ec>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	f200 809e 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 80034e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003650 <HAL_TIM_ConfigClockSource+0x1f0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	f000 8091 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x1ae>
 80034ec:	4a58      	ldr	r2, [pc, #352]	@ (8003650 <HAL_TIM_ConfigClockSource+0x1f0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	f200 8096 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 80034f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80034f8:	f000 8089 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x1ae>
 80034fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003500:	f200 808e 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 8003504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003508:	d03e      	beq.n	8003588 <HAL_TIM_ConfigClockSource+0x128>
 800350a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800350e:	f200 8087 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003516:	f000 8086 	beq.w	8003626 <HAL_TIM_ConfigClockSource+0x1c6>
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800351e:	d87f      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 8003520:	2b70      	cmp	r3, #112	@ 0x70
 8003522:	d01a      	beq.n	800355a <HAL_TIM_ConfigClockSource+0xfa>
 8003524:	2b70      	cmp	r3, #112	@ 0x70
 8003526:	d87b      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 8003528:	2b60      	cmp	r3, #96	@ 0x60
 800352a:	d050      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0x16e>
 800352c:	2b60      	cmp	r3, #96	@ 0x60
 800352e:	d877      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 8003530:	2b50      	cmp	r3, #80	@ 0x50
 8003532:	d03c      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0x14e>
 8003534:	2b50      	cmp	r3, #80	@ 0x50
 8003536:	d873      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 8003538:	2b40      	cmp	r3, #64	@ 0x40
 800353a:	d058      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x18e>
 800353c:	2b40      	cmp	r3, #64	@ 0x40
 800353e:	d86f      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 8003540:	2b30      	cmp	r3, #48	@ 0x30
 8003542:	d064      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x1ae>
 8003544:	2b30      	cmp	r3, #48	@ 0x30
 8003546:	d86b      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 8003548:	2b20      	cmp	r3, #32
 800354a:	d060      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x1ae>
 800354c:	2b20      	cmp	r3, #32
 800354e:	d867      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05c      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x1ae>
 8003554:	2b10      	cmp	r3, #16
 8003556:	d05a      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x1ae>
 8003558:	e062      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800356a:	f000 fa91 	bl	8003a90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800357c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	609a      	str	r2, [r3, #8]
      break;
 8003586:	e04f      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003598:	f000 fa7a 	bl	8003a90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035aa:	609a      	str	r2, [r3, #8]
      break;
 80035ac:	e03c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ba:	461a      	mov	r2, r3
 80035bc:	f000 f9ec 	bl	8003998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2150      	movs	r1, #80	@ 0x50
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fa45 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 80035cc:	e02c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035da:	461a      	mov	r2, r3
 80035dc:	f000 fa0b 	bl	80039f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2160      	movs	r1, #96	@ 0x60
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fa35 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 80035ec:	e01c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fa:	461a      	mov	r2, r3
 80035fc:	f000 f9cc 	bl	8003998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2140      	movs	r1, #64	@ 0x40
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fa25 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 800360c:	e00c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4619      	mov	r1, r3
 8003618:	4610      	mov	r0, r2
 800361a:	f000 fa1c 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 800361e:	e003      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      break;
 8003624:	e000      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003638:	7bfb      	ldrb	r3, [r7, #15]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	00100070 	.word	0x00100070
 8003648:	00100040 	.word	0x00100040
 800364c:	00100030 	.word	0x00100030
 8003650:	00100020 	.word	0x00100020

08003654 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003668:	2302      	movs	r3, #2
 800366a:	e031      	b.n	80036d0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8c6 	bl	8003810 <TIM_SlaveTimer_SetConfig>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e018      	b.n	80036d0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036bc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a42      	ldr	r2, [pc, #264]	@ (80037f4 <TIM_Base_SetConfig+0x11c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00f      	beq.n	8003710 <TIM_Base_SetConfig+0x38>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f6:	d00b      	beq.n	8003710 <TIM_Base_SetConfig+0x38>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a3f      	ldr	r2, [pc, #252]	@ (80037f8 <TIM_Base_SetConfig+0x120>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d007      	beq.n	8003710 <TIM_Base_SetConfig+0x38>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a3e      	ldr	r2, [pc, #248]	@ (80037fc <TIM_Base_SetConfig+0x124>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <TIM_Base_SetConfig+0x38>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3d      	ldr	r2, [pc, #244]	@ (8003800 <TIM_Base_SetConfig+0x128>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d108      	bne.n	8003722 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a33      	ldr	r2, [pc, #204]	@ (80037f4 <TIM_Base_SetConfig+0x11c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d01b      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003730:	d017      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a30      	ldr	r2, [pc, #192]	@ (80037f8 <TIM_Base_SetConfig+0x120>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a2f      	ldr	r2, [pc, #188]	@ (80037fc <TIM_Base_SetConfig+0x124>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00f      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a2e      	ldr	r2, [pc, #184]	@ (8003800 <TIM_Base_SetConfig+0x128>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00b      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2d      	ldr	r2, [pc, #180]	@ (8003804 <TIM_Base_SetConfig+0x12c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2c      	ldr	r2, [pc, #176]	@ (8003808 <TIM_Base_SetConfig+0x130>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d003      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2b      	ldr	r2, [pc, #172]	@ (800380c <TIM_Base_SetConfig+0x134>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d108      	bne.n	8003774 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a16      	ldr	r2, [pc, #88]	@ (80037f4 <TIM_Base_SetConfig+0x11c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00f      	beq.n	80037c0 <TIM_Base_SetConfig+0xe8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a17      	ldr	r2, [pc, #92]	@ (8003800 <TIM_Base_SetConfig+0x128>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00b      	beq.n	80037c0 <TIM_Base_SetConfig+0xe8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a16      	ldr	r2, [pc, #88]	@ (8003804 <TIM_Base_SetConfig+0x12c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <TIM_Base_SetConfig+0xe8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a15      	ldr	r2, [pc, #84]	@ (8003808 <TIM_Base_SetConfig+0x130>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_Base_SetConfig+0xe8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a14      	ldr	r2, [pc, #80]	@ (800380c <TIM_Base_SetConfig+0x134>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d103      	bne.n	80037c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d105      	bne.n	80037e6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f023 0201 	bic.w	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	611a      	str	r2, [r3, #16]
  }
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800
 8003800:	40013400 	.word	0x40013400
 8003804:	40014000 	.word	0x40014000
 8003808:	40014400 	.word	0x40014400
 800380c:	40014800 	.word	0x40014800

08003810 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800382c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003830:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003842:	f023 0307 	bic.w	r3, r3, #7
 8003846:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4a4a      	ldr	r2, [pc, #296]	@ (8003988 <TIM_SlaveTimer_SetConfig+0x178>)
 8003860:	4293      	cmp	r3, r2
 8003862:	f000 808a 	beq.w	800397a <TIM_SlaveTimer_SetConfig+0x16a>
 8003866:	4a48      	ldr	r2, [pc, #288]	@ (8003988 <TIM_SlaveTimer_SetConfig+0x178>)
 8003868:	4293      	cmp	r3, r2
 800386a:	f200 8083 	bhi.w	8003974 <TIM_SlaveTimer_SetConfig+0x164>
 800386e:	4a47      	ldr	r2, [pc, #284]	@ (800398c <TIM_SlaveTimer_SetConfig+0x17c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	f000 8082 	beq.w	800397a <TIM_SlaveTimer_SetConfig+0x16a>
 8003876:	4a45      	ldr	r2, [pc, #276]	@ (800398c <TIM_SlaveTimer_SetConfig+0x17c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d87b      	bhi.n	8003974 <TIM_SlaveTimer_SetConfig+0x164>
 800387c:	4a44      	ldr	r2, [pc, #272]	@ (8003990 <TIM_SlaveTimer_SetConfig+0x180>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d07b      	beq.n	800397a <TIM_SlaveTimer_SetConfig+0x16a>
 8003882:	4a43      	ldr	r2, [pc, #268]	@ (8003990 <TIM_SlaveTimer_SetConfig+0x180>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d875      	bhi.n	8003974 <TIM_SlaveTimer_SetConfig+0x164>
 8003888:	4a42      	ldr	r2, [pc, #264]	@ (8003994 <TIM_SlaveTimer_SetConfig+0x184>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d075      	beq.n	800397a <TIM_SlaveTimer_SetConfig+0x16a>
 800388e:	4a41      	ldr	r2, [pc, #260]	@ (8003994 <TIM_SlaveTimer_SetConfig+0x184>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d86f      	bhi.n	8003974 <TIM_SlaveTimer_SetConfig+0x164>
 8003894:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003898:	d06f      	beq.n	800397a <TIM_SlaveTimer_SetConfig+0x16a>
 800389a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800389e:	d869      	bhi.n	8003974 <TIM_SlaveTimer_SetConfig+0x164>
 80038a0:	2b70      	cmp	r3, #112	@ 0x70
 80038a2:	d01a      	beq.n	80038da <TIM_SlaveTimer_SetConfig+0xca>
 80038a4:	2b70      	cmp	r3, #112	@ 0x70
 80038a6:	d865      	bhi.n	8003974 <TIM_SlaveTimer_SetConfig+0x164>
 80038a8:	2b60      	cmp	r3, #96	@ 0x60
 80038aa:	d059      	beq.n	8003960 <TIM_SlaveTimer_SetConfig+0x150>
 80038ac:	2b60      	cmp	r3, #96	@ 0x60
 80038ae:	d861      	bhi.n	8003974 <TIM_SlaveTimer_SetConfig+0x164>
 80038b0:	2b50      	cmp	r3, #80	@ 0x50
 80038b2:	d04b      	beq.n	800394c <TIM_SlaveTimer_SetConfig+0x13c>
 80038b4:	2b50      	cmp	r3, #80	@ 0x50
 80038b6:	d85d      	bhi.n	8003974 <TIM_SlaveTimer_SetConfig+0x164>
 80038b8:	2b40      	cmp	r3, #64	@ 0x40
 80038ba:	d019      	beq.n	80038f0 <TIM_SlaveTimer_SetConfig+0xe0>
 80038bc:	2b40      	cmp	r3, #64	@ 0x40
 80038be:	d859      	bhi.n	8003974 <TIM_SlaveTimer_SetConfig+0x164>
 80038c0:	2b30      	cmp	r3, #48	@ 0x30
 80038c2:	d05a      	beq.n	800397a <TIM_SlaveTimer_SetConfig+0x16a>
 80038c4:	2b30      	cmp	r3, #48	@ 0x30
 80038c6:	d855      	bhi.n	8003974 <TIM_SlaveTimer_SetConfig+0x164>
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d056      	beq.n	800397a <TIM_SlaveTimer_SetConfig+0x16a>
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d851      	bhi.n	8003974 <TIM_SlaveTimer_SetConfig+0x164>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d052      	beq.n	800397a <TIM_SlaveTimer_SetConfig+0x16a>
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	d050      	beq.n	800397a <TIM_SlaveTimer_SetConfig+0x16a>
 80038d8:	e04c      	b.n	8003974 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80038ea:	f000 f8d1 	bl	8003a90 <TIM_ETR_SetConfig>
      break;
 80038ee:	e045      	b.n	800397c <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	d004      	beq.n	8003902 <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80038fc:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8003900:	d101      	bne.n	8003906 <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e03b      	b.n	800397e <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a1a      	ldr	r2, [r3, #32]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800392c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	4313      	orrs	r3, r2
 8003938:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	621a      	str	r2, [r3, #32]
      break;
 800394a:	e017      	b.n	800397c <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003958:	461a      	mov	r2, r3
 800395a:	f000 f81d 	bl	8003998 <TIM_TI1_ConfigInputStage>
      break;
 800395e:	e00d      	b.n	800397c <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800396c:	461a      	mov	r2, r3
 800396e:	f000 f842 	bl	80039f6 <TIM_TI2_ConfigInputStage>
      break;
 8003972:	e003      	b.n	800397c <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	75fb      	strb	r3, [r7, #23]
      break;
 8003978:	e000      	b.n	800397c <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 800397a:	bf00      	nop
  }

  return status;
 800397c:	7dfb      	ldrb	r3, [r7, #23]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	00100070 	.word	0x00100070
 800398c:	00100040 	.word	0x00100040
 8003990:	00100030 	.word	0x00100030
 8003994:	00100020 	.word	0x00100020

08003998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f023 0201 	bic.w	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f023 030a 	bic.w	r3, r3, #10
 80039d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b087      	sub	sp, #28
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f023 0210 	bic.w	r2, r3, #16
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	031b      	lsls	r3, r3, #12
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	621a      	str	r2, [r3, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f043 0307 	orr.w	r3, r3, #7
 8003a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	021a      	lsls	r2, r3, #8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	609a      	str	r2, [r3, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e065      	b.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d004      	beq.n	8003b1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d108      	bne.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d018      	beq.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5e:	d013      	beq.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a18      	ldr	r2, [pc, #96]	@ (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00e      	beq.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a17      	ldr	r2, [pc, #92]	@ (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d009      	beq.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a12      	ldr	r2, [pc, #72]	@ (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a13      	ldr	r2, [pc, #76]	@ (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10c      	bne.n	8003ba2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40013400 	.word	0x40013400
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40014000 	.word	0x40014000

08003bd4 <memset>:
 8003bd4:	4402      	add	r2, r0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d100      	bne.n	8003bde <memset+0xa>
 8003bdc:	4770      	bx	lr
 8003bde:	f803 1b01 	strb.w	r1, [r3], #1
 8003be2:	e7f9      	b.n	8003bd8 <memset+0x4>

08003be4 <__libc_init_array>:
 8003be4:	b570      	push	{r4, r5, r6, lr}
 8003be6:	4d0d      	ldr	r5, [pc, #52]	@ (8003c1c <__libc_init_array+0x38>)
 8003be8:	4c0d      	ldr	r4, [pc, #52]	@ (8003c20 <__libc_init_array+0x3c>)
 8003bea:	1b64      	subs	r4, r4, r5
 8003bec:	10a4      	asrs	r4, r4, #2
 8003bee:	2600      	movs	r6, #0
 8003bf0:	42a6      	cmp	r6, r4
 8003bf2:	d109      	bne.n	8003c08 <__libc_init_array+0x24>
 8003bf4:	4d0b      	ldr	r5, [pc, #44]	@ (8003c24 <__libc_init_array+0x40>)
 8003bf6:	4c0c      	ldr	r4, [pc, #48]	@ (8003c28 <__libc_init_array+0x44>)
 8003bf8:	f000 f818 	bl	8003c2c <_init>
 8003bfc:	1b64      	subs	r4, r4, r5
 8003bfe:	10a4      	asrs	r4, r4, #2
 8003c00:	2600      	movs	r6, #0
 8003c02:	42a6      	cmp	r6, r4
 8003c04:	d105      	bne.n	8003c12 <__libc_init_array+0x2e>
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0c:	4798      	blx	r3
 8003c0e:	3601      	adds	r6, #1
 8003c10:	e7ee      	b.n	8003bf0 <__libc_init_array+0xc>
 8003c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c16:	4798      	blx	r3
 8003c18:	3601      	adds	r6, #1
 8003c1a:	e7f2      	b.n	8003c02 <__libc_init_array+0x1e>
 8003c1c:	08003c54 	.word	0x08003c54
 8003c20:	08003c54 	.word	0x08003c54
 8003c24:	08003c54 	.word	0x08003c54
 8003c28:	08003c58 	.word	0x08003c58

08003c2c <_init>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	bf00      	nop
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr

08003c38 <_fini>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	bf00      	nop
 8003c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3e:	bc08      	pop	{r3}
 8003c40:	469e      	mov	lr, r3
 8003c42:	4770      	bx	lr
