
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a94  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08007c6c  08007c6c  00008c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800807c  0800807c  0000a00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800807c  0800807c  0000907c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008084  08008084  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008084  08008084  00009084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800808c  0800808c  0000908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008090  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000000c  0800809c  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800809c  0000a318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8b8  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b2  00000000  00000000  000278f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  0002aca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001402  00000000  00000000  0002c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f01  00000000  00000000  0002da22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d076  00000000  00000000  00051923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e389a  00000000  00000000  0006e999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152233  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071d8  00000000  00000000  00152278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00159450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007c54 	.word	0x08007c54

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007c54 	.word	0x08007c54

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000894:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000898:	f000 b988 	b.w	8000bac <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	468e      	mov	lr, r1
 80008bc:	4604      	mov	r4, r0
 80008be:	4688      	mov	r8, r1
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d14a      	bne.n	800095a <__udivmoddi4+0xa6>
 80008c4:	428a      	cmp	r2, r1
 80008c6:	4617      	mov	r7, r2
 80008c8:	d962      	bls.n	8000990 <__udivmoddi4+0xdc>
 80008ca:	fab2 f682 	clz	r6, r2
 80008ce:	b14e      	cbz	r6, 80008e4 <__udivmoddi4+0x30>
 80008d0:	f1c6 0320 	rsb	r3, r6, #32
 80008d4:	fa01 f806 	lsl.w	r8, r1, r6
 80008d8:	fa20 f303 	lsr.w	r3, r0, r3
 80008dc:	40b7      	lsls	r7, r6
 80008de:	ea43 0808 	orr.w	r8, r3, r8
 80008e2:	40b4      	lsls	r4, r6
 80008e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008e8:	fa1f fc87 	uxth.w	ip, r7
 80008ec:	fbb8 f1fe 	udiv	r1, r8, lr
 80008f0:	0c23      	lsrs	r3, r4, #16
 80008f2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008fa:	fb01 f20c 	mul.w	r2, r1, ip
 80008fe:	429a      	cmp	r2, r3
 8000900:	d909      	bls.n	8000916 <__udivmoddi4+0x62>
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000908:	f080 80ea 	bcs.w	8000ae0 <__udivmoddi4+0x22c>
 800090c:	429a      	cmp	r2, r3
 800090e:	f240 80e7 	bls.w	8000ae0 <__udivmoddi4+0x22c>
 8000912:	3902      	subs	r1, #2
 8000914:	443b      	add	r3, r7
 8000916:	1a9a      	subs	r2, r3, r2
 8000918:	b2a3      	uxth	r3, r4
 800091a:	fbb2 f0fe 	udiv	r0, r2, lr
 800091e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000926:	fb00 fc0c 	mul.w	ip, r0, ip
 800092a:	459c      	cmp	ip, r3
 800092c:	d909      	bls.n	8000942 <__udivmoddi4+0x8e>
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000934:	f080 80d6 	bcs.w	8000ae4 <__udivmoddi4+0x230>
 8000938:	459c      	cmp	ip, r3
 800093a:	f240 80d3 	bls.w	8000ae4 <__udivmoddi4+0x230>
 800093e:	443b      	add	r3, r7
 8000940:	3802      	subs	r0, #2
 8000942:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000946:	eba3 030c 	sub.w	r3, r3, ip
 800094a:	2100      	movs	r1, #0
 800094c:	b11d      	cbz	r5, 8000956 <__udivmoddi4+0xa2>
 800094e:	40f3      	lsrs	r3, r6
 8000950:	2200      	movs	r2, #0
 8000952:	e9c5 3200 	strd	r3, r2, [r5]
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	428b      	cmp	r3, r1
 800095c:	d905      	bls.n	800096a <__udivmoddi4+0xb6>
 800095e:	b10d      	cbz	r5, 8000964 <__udivmoddi4+0xb0>
 8000960:	e9c5 0100 	strd	r0, r1, [r5]
 8000964:	2100      	movs	r1, #0
 8000966:	4608      	mov	r0, r1
 8000968:	e7f5      	b.n	8000956 <__udivmoddi4+0xa2>
 800096a:	fab3 f183 	clz	r1, r3
 800096e:	2900      	cmp	r1, #0
 8000970:	d146      	bne.n	8000a00 <__udivmoddi4+0x14c>
 8000972:	4573      	cmp	r3, lr
 8000974:	d302      	bcc.n	800097c <__udivmoddi4+0xc8>
 8000976:	4282      	cmp	r2, r0
 8000978:	f200 8105 	bhi.w	8000b86 <__udivmoddi4+0x2d2>
 800097c:	1a84      	subs	r4, r0, r2
 800097e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000982:	2001      	movs	r0, #1
 8000984:	4690      	mov	r8, r2
 8000986:	2d00      	cmp	r5, #0
 8000988:	d0e5      	beq.n	8000956 <__udivmoddi4+0xa2>
 800098a:	e9c5 4800 	strd	r4, r8, [r5]
 800098e:	e7e2      	b.n	8000956 <__udivmoddi4+0xa2>
 8000990:	2a00      	cmp	r2, #0
 8000992:	f000 8090 	beq.w	8000ab6 <__udivmoddi4+0x202>
 8000996:	fab2 f682 	clz	r6, r2
 800099a:	2e00      	cmp	r6, #0
 800099c:	f040 80a4 	bne.w	8000ae8 <__udivmoddi4+0x234>
 80009a0:	1a8a      	subs	r2, r1, r2
 80009a2:	0c03      	lsrs	r3, r0, #16
 80009a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009a8:	b280      	uxth	r0, r0
 80009aa:	b2bc      	uxth	r4, r7
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb2 fcfe 	udiv	ip, r2, lr
 80009b2:	fb0e 221c 	mls	r2, lr, ip, r2
 80009b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009ba:	fb04 f20c 	mul.w	r2, r4, ip
 80009be:	429a      	cmp	r2, r3
 80009c0:	d907      	bls.n	80009d2 <__udivmoddi4+0x11e>
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80009c8:	d202      	bcs.n	80009d0 <__udivmoddi4+0x11c>
 80009ca:	429a      	cmp	r2, r3
 80009cc:	f200 80e0 	bhi.w	8000b90 <__udivmoddi4+0x2dc>
 80009d0:	46c4      	mov	ip, r8
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	fbb3 f2fe 	udiv	r2, r3, lr
 80009d8:	fb0e 3312 	mls	r3, lr, r2, r3
 80009dc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009e0:	fb02 f404 	mul.w	r4, r2, r4
 80009e4:	429c      	cmp	r4, r3
 80009e6:	d907      	bls.n	80009f8 <__udivmoddi4+0x144>
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x142>
 80009f0:	429c      	cmp	r4, r3
 80009f2:	f200 80ca 	bhi.w	8000b8a <__udivmoddi4+0x2d6>
 80009f6:	4602      	mov	r2, r0
 80009f8:	1b1b      	subs	r3, r3, r4
 80009fa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009fe:	e7a5      	b.n	800094c <__udivmoddi4+0x98>
 8000a00:	f1c1 0620 	rsb	r6, r1, #32
 8000a04:	408b      	lsls	r3, r1
 8000a06:	fa22 f706 	lsr.w	r7, r2, r6
 8000a0a:	431f      	orrs	r7, r3
 8000a0c:	fa0e f401 	lsl.w	r4, lr, r1
 8000a10:	fa20 f306 	lsr.w	r3, r0, r6
 8000a14:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a18:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a1c:	4323      	orrs	r3, r4
 8000a1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a22:	fa1f fc87 	uxth.w	ip, r7
 8000a26:	fbbe f0f9 	udiv	r0, lr, r9
 8000a2a:	0c1c      	lsrs	r4, r3, #16
 8000a2c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a30:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a34:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a38:	45a6      	cmp	lr, r4
 8000a3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3e:	d909      	bls.n	8000a54 <__udivmoddi4+0x1a0>
 8000a40:	193c      	adds	r4, r7, r4
 8000a42:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000a46:	f080 809c 	bcs.w	8000b82 <__udivmoddi4+0x2ce>
 8000a4a:	45a6      	cmp	lr, r4
 8000a4c:	f240 8099 	bls.w	8000b82 <__udivmoddi4+0x2ce>
 8000a50:	3802      	subs	r0, #2
 8000a52:	443c      	add	r4, r7
 8000a54:	eba4 040e 	sub.w	r4, r4, lr
 8000a58:	fa1f fe83 	uxth.w	lr, r3
 8000a5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a60:	fb09 4413 	mls	r4, r9, r3, r4
 8000a64:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a68:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6c:	45a4      	cmp	ip, r4
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x1ce>
 8000a70:	193c      	adds	r4, r7, r4
 8000a72:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000a76:	f080 8082 	bcs.w	8000b7e <__udivmoddi4+0x2ca>
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d97f      	bls.n	8000b7e <__udivmoddi4+0x2ca>
 8000a7e:	3b02      	subs	r3, #2
 8000a80:	443c      	add	r4, r7
 8000a82:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a8e:	4564      	cmp	r4, ip
 8000a90:	4673      	mov	r3, lr
 8000a92:	46e1      	mov	r9, ip
 8000a94:	d362      	bcc.n	8000b5c <__udivmoddi4+0x2a8>
 8000a96:	d05f      	beq.n	8000b58 <__udivmoddi4+0x2a4>
 8000a98:	b15d      	cbz	r5, 8000ab2 <__udivmoddi4+0x1fe>
 8000a9a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a9e:	eb64 0409 	sbc.w	r4, r4, r9
 8000aa2:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa6:	fa22 f301 	lsr.w	r3, r2, r1
 8000aaa:	431e      	orrs	r6, r3
 8000aac:	40cc      	lsrs	r4, r1
 8000aae:	e9c5 6400 	strd	r6, r4, [r5]
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	e74f      	b.n	8000956 <__udivmoddi4+0xa2>
 8000ab6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000aba:	0c01      	lsrs	r1, r0, #16
 8000abc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ac0:	b280      	uxth	r0, r0
 8000ac2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4638      	mov	r0, r7
 8000aca:	463c      	mov	r4, r7
 8000acc:	46b8      	mov	r8, r7
 8000ace:	46be      	mov	lr, r7
 8000ad0:	2620      	movs	r6, #32
 8000ad2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ad6:	eba2 0208 	sub.w	r2, r2, r8
 8000ada:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ade:	e766      	b.n	80009ae <__udivmoddi4+0xfa>
 8000ae0:	4601      	mov	r1, r0
 8000ae2:	e718      	b.n	8000916 <__udivmoddi4+0x62>
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	e72c      	b.n	8000942 <__udivmoddi4+0x8e>
 8000ae8:	f1c6 0220 	rsb	r2, r6, #32
 8000aec:	fa2e f302 	lsr.w	r3, lr, r2
 8000af0:	40b7      	lsls	r7, r6
 8000af2:	40b1      	lsls	r1, r6
 8000af4:	fa20 f202 	lsr.w	r2, r0, r2
 8000af8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000afc:	430a      	orrs	r2, r1
 8000afe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b02:	b2bc      	uxth	r4, r7
 8000b04:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b08:	0c11      	lsrs	r1, r2, #16
 8000b0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b0e:	fb08 f904 	mul.w	r9, r8, r4
 8000b12:	40b0      	lsls	r0, r6
 8000b14:	4589      	cmp	r9, r1
 8000b16:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b1a:	b280      	uxth	r0, r0
 8000b1c:	d93e      	bls.n	8000b9c <__udivmoddi4+0x2e8>
 8000b1e:	1879      	adds	r1, r7, r1
 8000b20:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000b24:	d201      	bcs.n	8000b2a <__udivmoddi4+0x276>
 8000b26:	4589      	cmp	r9, r1
 8000b28:	d81f      	bhi.n	8000b6a <__udivmoddi4+0x2b6>
 8000b2a:	eba1 0109 	sub.w	r1, r1, r9
 8000b2e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b32:	fb09 f804 	mul.w	r8, r9, r4
 8000b36:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b3a:	b292      	uxth	r2, r2
 8000b3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b40:	4542      	cmp	r2, r8
 8000b42:	d229      	bcs.n	8000b98 <__udivmoddi4+0x2e4>
 8000b44:	18ba      	adds	r2, r7, r2
 8000b46:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000b4a:	d2c4      	bcs.n	8000ad6 <__udivmoddi4+0x222>
 8000b4c:	4542      	cmp	r2, r8
 8000b4e:	d2c2      	bcs.n	8000ad6 <__udivmoddi4+0x222>
 8000b50:	f1a9 0102 	sub.w	r1, r9, #2
 8000b54:	443a      	add	r2, r7
 8000b56:	e7be      	b.n	8000ad6 <__udivmoddi4+0x222>
 8000b58:	45f0      	cmp	r8, lr
 8000b5a:	d29d      	bcs.n	8000a98 <__udivmoddi4+0x1e4>
 8000b5c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b60:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b64:	3801      	subs	r0, #1
 8000b66:	46e1      	mov	r9, ip
 8000b68:	e796      	b.n	8000a98 <__udivmoddi4+0x1e4>
 8000b6a:	eba7 0909 	sub.w	r9, r7, r9
 8000b6e:	4449      	add	r1, r9
 8000b70:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b74:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b78:	fb09 f804 	mul.w	r8, r9, r4
 8000b7c:	e7db      	b.n	8000b36 <__udivmoddi4+0x282>
 8000b7e:	4673      	mov	r3, lr
 8000b80:	e77f      	b.n	8000a82 <__udivmoddi4+0x1ce>
 8000b82:	4650      	mov	r0, sl
 8000b84:	e766      	b.n	8000a54 <__udivmoddi4+0x1a0>
 8000b86:	4608      	mov	r0, r1
 8000b88:	e6fd      	b.n	8000986 <__udivmoddi4+0xd2>
 8000b8a:	443b      	add	r3, r7
 8000b8c:	3a02      	subs	r2, #2
 8000b8e:	e733      	b.n	80009f8 <__udivmoddi4+0x144>
 8000b90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b94:	443b      	add	r3, r7
 8000b96:	e71c      	b.n	80009d2 <__udivmoddi4+0x11e>
 8000b98:	4649      	mov	r1, r9
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x222>
 8000b9c:	eba1 0109 	sub.w	r1, r1, r9
 8000ba0:	46c4      	mov	ip, r8
 8000ba2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ba6:	fb09 f804 	mul.w	r8, r9, r4
 8000baa:	e7c4      	b.n	8000b36 <__udivmoddi4+0x282>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <_ZN6DriverC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
 *      Author: ethancao
 */
#include "stm32g4xx_hal.h"
#include "drv8316.h"

Driver::Driver(SPI_HandleTypeDef* _spi, GPIO_TypeDef *_sleepPort,
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	807b      	strh	r3, [r7, #2]
	uint16_t _sleepPin, GPIO_TypeDef *_scsPort, uint16_t _scsPin) {
	spi = _spi;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	609a      	str	r2, [r3, #8]
	sleepPort = _sleepPort;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	60da      	str	r2, [r3, #12]
	sleepPin = _sleepPin;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	887a      	ldrh	r2, [r7, #2]
 8000bce:	821a      	strh	r2, [r3, #16]
	scsPort = _scsPort;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	615a      	str	r2, [r3, #20]
	scsPin = _scsPin;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	8bba      	ldrh	r2, [r7, #28]
 8000bda:	831a      	strh	r2, [r3, #24]
	return;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_ZN6Driver4initEv>:

void Driver::init() {
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
	reset();
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f804 	bl	8000c00 <_ZN6Driver5resetEv>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_ZN6Driver5resetEv>:

void Driver::reset() {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sleepPort, sleepPin, GPIO_PIN_RESET);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68d8      	ldr	r0, [r3, #12]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	8a1b      	ldrh	r3, [r3, #16]
 8000c10:	2200      	movs	r2, #0
 8000c12:	4619      	mov	r1, r3
 8000c14:	f002 fd18 	bl	8003648 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f001 fa79 	bl	8002110 <HAL_Delay>
	HAL_GPIO_WritePin(scsPort, scsPin, GPIO_PIN_SET);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6958      	ldr	r0, [r3, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	8b1b      	ldrh	r3, [r3, #24]
 8000c26:	2201      	movs	r2, #1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f002 fd0d 	bl	8003648 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sleepPort, sleepPin, GPIO_PIN_SET);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68d8      	ldr	r0, [r3, #12]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	8a1b      	ldrh	r3, [r3, #16]
 8000c36:	2201      	movs	r2, #1
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f002 fd05 	bl	8003648 <HAL_GPIO_WritePin>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_ZN7EncoderC1EP19__I2C_HandleTypeDef>:
 */
#include "stm32g4xx_hal.h"
#include "magsensor.h"


Encoder::Encoder(I2C_HandleTypeDef* _i2c) {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af02      	add	r7, sp, #8
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	711a      	strb	r2, [r3, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
	i2c = _i2c;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	601a      	str	r2, [r3, #0]
	buf[0] = 0x30;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2230      	movs	r2, #48	@ 0x30
 8000c68:	735a      	strb	r2, [r3, #13]
	ret = HAL_I2C_Master_Transmit(i2c, MT6701_ADDR, buf, 1, HAL_MAX_DELAY);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f103 020d 	add.w	r2, r3, #13
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	210c      	movs	r1, #12
 8000c7e:	f002 fd97 	bl	80037b0 <HAL_I2C_Master_Transmit>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	731a      	strb	r2, [r3, #12]
	if ( ret != HAL_OK )
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7b1b      	ldrb	r3, [r3, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <_ZN7EncoderC1EP19__I2C_HandleTypeDef+0x54>
	  error = 1;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	711a      	strb	r2, [r3, #4]
 8000c98:	e00f      	b.n	8000cba <_ZN7EncoderC1EP19__I2C_HandleTypeDef+0x74>
	else
	  ret = HAL_I2C_Master_Receive(i2c, MT6701_ADDR, buf, 1, HAL_MAX_DELAY);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f103 020d 	add.w	r2, r3, #13
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	210c      	movs	r1, #12
 8000cae:	f002 fe97 	bl	80039e0 <HAL_I2C_Master_Receive>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	731a      	strb	r2, [r3, #12]

}
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_ZN7Encoder8getAngleEv>:

float Encoder::getAngle() {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
	buf[0] = 0x03;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	735a      	strb	r2, [r3, #13]
  	ret = HAL_I2C_Master_Transmit(i2c, MT6701_ADDR, buf, 1, HAL_MAX_DELAY);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f103 020d 	add.w	r2, r3, #13
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	210c      	movs	r1, #12
 8000ce6:	f002 fd63 	bl	80037b0 <HAL_I2C_Master_Transmit>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	731a      	strb	r2, [r3, #12]
  	if ( ret != HAL_OK ) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7b1b      	ldrb	r3, [r3, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <_ZN7Encoder8getAngleEv+0x3e>
  	  error = 1;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	711a      	strb	r2, [r3, #4]
 8000d00:	e051      	b.n	8000da6 <_ZN7Encoder8getAngleEv+0xe2>
  	} else {
  	   // Read 2 bytes from the temperature register
  	   ret = HAL_I2C_Master_Receive(i2c, MT6701_ADDR, buf, 2, HAL_MAX_DELAY);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f103 020d 	add.w	r2, r3, #13
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2302      	movs	r3, #2
 8000d14:	210c      	movs	r1, #12
 8000d16:	f002 fe63 	bl	80039e0 <HAL_I2C_Master_Receive>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	731a      	strb	r2, [r3, #12]
  	   if ( ret != HAL_OK ) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7b1b      	ldrb	r3, [r3, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <_ZN7Encoder8getAngleEv+0x6e>
  	      error = 2;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	711a      	strb	r2, [r3, #4]
 8000d30:	e039      	b.n	8000da6 <_ZN7Encoder8getAngleEv+0xe2>
  	   } else {
  	      //Combine the bytes
  	      val = ((int16_t)buf[0] << 6) | ((int16_t)buf[1] >> 2);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7b5b      	ldrb	r3, [r3, #13]
 8000d36:	019b      	lsls	r3, r3, #6
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	7b92      	ldrb	r2, [r2, #14]
 8000d3c:	b212      	sxth	r2, r2
 8000d3e:	1092      	asrs	r2, r2, #2
 8000d40:	b212      	sxth	r2, r2
 8000d42:	4313      	orrs	r3, r2
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	edc3 7a02 	vstr	s15, [r3, #8]
  	      val *= 0.02197265625; //360/16384
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d58:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000db8 <_ZN7Encoder8getAngleEv+0xf4>
 8000d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edc3 7a02 	vstr	s15, [r3, #8]
  	      val -= angleOffset;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	edc3 7a02 	vstr	s15, [r3, #8]
  	      if(val < 0)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8a:	d509      	bpl.n	8000da0 <_ZN7Encoder8getAngleEv+0xdc>
  	    	  val += 360;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d92:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000dbc <_ZN7Encoder8getAngleEv+0xf8>
 8000d96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	edc3 7a02 	vstr	s15, [r3, #8]
  	      return val;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	e000      	b.n	8000da8 <_ZN7Encoder8getAngleEv+0xe4>
  	   }
  	}
  	return -1;
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <_ZN7Encoder8getAngleEv+0xfc>)
  }
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eeb0 0a67 	vmov.f32	s0, s15
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	3cb40000 	.word	0x3cb40000
 8000dbc:	43b40000 	.word	0x43b40000
 8000dc0:	bf800000 	.word	0xbf800000

08000dc4 <_ZN7Encoder4zeroEv>:

void Encoder::zero() {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	angleOffset = getAngle();
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff79 	bl	8000cc4 <_ZN7Encoder8getAngleEv>
 8000dd2:	eef0 7a40 	vmov.f32	s15, s0
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dee:	edd7 7a01 	vldr	s15, [r7, #4]
 8000df2:	eef0 7ae7 	vabs.f32	s15, s15
 8000df6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e12:	f006 f97f 	bl	8007114 <cosf>
 8000e16:	eef0 7a40 	vmov.f32	s15, s0
 8000e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e32:	f006 f9b3 	bl	800719c <sinf>
 8000e36:	eef0 7a40 	vmov.f32	s15, s0
 8000e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b098      	sub	sp, #96	@ 0x60
 8000e48:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4a:	f001 f8f0 	bl	800202e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4e:	f000 f9d3 	bl	80011f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e52:	f000 fd0b 	bl	800186c <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 8000e56:	f000 fb5d 	bl	8001514 <_ZL12MX_SPI2_Initv>
  MX_ADC1_Init();
 8000e5a:	f000 fa17 	bl	800128c <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8000e5e:	f000 fb0b 	bl	8001478 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8000e62:	f000 fbdb 	bl	800161c <_ZL12MX_TIM1_Initv>
  MX_ADC2_Init();
 8000e66:	f000 fa97 	bl	8001398 <_ZL12MX_ADC2_Initv>
  MX_SPI3_Init();
 8000e6a:	f000 fb95 	bl	8001598 <_ZL12MX_SPI3_Initv>
  MX_USART2_UART_Init();
 8000e6e:	f000 fc9d 	bl	80017ac <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  uint8_t temp[12][3];
  Driver drv(&hspi2, GPIOC, SLEEP_N_Pin, GPIOC, SCS_N_Pin);
 8000e72:	4638      	mov	r0, r7
 8000e74:	2302      	movs	r3, #2
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	4b36      	ldr	r3, [pc, #216]	@ (8000f54 <main+0x110>)
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	4a35      	ldr	r2, [pc, #212]	@ (8000f54 <main+0x110>)
 8000e80:	4935      	ldr	r1, [pc, #212]	@ (8000f58 <main+0x114>)
 8000e82:	f7ff fe95 	bl	8000bb0 <_ZN6DriverC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
  drv.init();
 8000e86:	463b      	mov	r3, r7
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff feae 	bl	8000bea <_ZN6Driver4initEv>

  HAL_TIM_PWM_Start_IT (&htim1, TIM_CHANNEL_1);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4832      	ldr	r0, [pc, #200]	@ (8000f5c <main+0x118>)
 8000e92:	f004 faad 	bl	80053f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT (&htim1, TIM_CHANNEL_2);
 8000e96:	2104      	movs	r1, #4
 8000e98:	4830      	ldr	r0, [pc, #192]	@ (8000f5c <main+0x118>)
 8000e9a:	f004 faa9 	bl	80053f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT (&htim1, TIM_CHANNEL_3);
 8000e9e:	2108      	movs	r1, #8
 8000ea0:	482e      	ldr	r0, [pc, #184]	@ (8000f5c <main+0x118>)
 8000ea2:	f004 faa5 	bl	80053f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	482c      	ldr	r0, [pc, #176]	@ (8000f5c <main+0x118>)
 8000eaa:	f005 f8b9 	bl	8006020 <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 8000eae:	2104      	movs	r1, #4
 8000eb0:	482a      	ldr	r0, [pc, #168]	@ (8000f5c <main+0x118>)
 8000eb2:	f005 f8b5 	bl	8006020 <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	4828      	ldr	r0, [pc, #160]	@ (8000f5c <main+0x118>)
 8000eba:	f005 f8b1 	bl	8006020 <HAL_TIMEx_PWMN_Start_IT>

  initMotor();
 8000ebe:	f000 f857 	bl	8000f70 <_Z9initMotorv>
  /* USER CODE END 2 */
  float kp = -0.3;
 8000ec2:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <main+0x11c>)
 8000ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  float target = 0;
 8000ec6:	f04f 0300 	mov.w	r3, #0
 8000eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float deadband = 1;
 8000ecc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000ed0:	647b      	str	r3, [r7, #68]	@ 0x44
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float ang = enc.getAngle();
 8000ed2:	4824      	ldr	r0, [pc, #144]	@ (8000f64 <main+0x120>)
 8000ed4:	f7ff fef6 	bl	8000cc4 <_ZN7Encoder8getAngleEv>
 8000ed8:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
	  if(ang > 180)
 8000edc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000ee0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000f68 <main+0x124>
 8000ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eec:	dd07      	ble.n	8000efe <main+0xba>
		  ang -= 360;
 8000eee:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000ef2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000f6c <main+0x128>
 8000ef6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000efa:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	  float error = (ang-target);
 8000efe:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000f02:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f0a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	  if(abs(error) < deadband)
 8000f0e:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8000f12:	f7ff ff67 	bl	8000de4 <_ZSt3absf>
 8000f16:	eef0 7a40 	vmov.f32	s15, s0
 8000f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f26:	bf4c      	ite	mi
 8000f28:	2301      	movmi	r3, #1
 8000f2a:	2300      	movpl	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <main+0xf4>
		  error = 0;
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	653b      	str	r3, [r7, #80]	@ 0x50
	  float output = error*kp;
 8000f38:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000f3c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f44:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	  outputTorque(output);
 8000f48:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8000f4c:	f000 f824 	bl	8000f98 <_Z12outputTorquef>
  }
 8000f50:	e7bf      	b.n	8000ed2 <main+0x8e>
 8000f52:	bf00      	nop
 8000f54:	48000800 	.word	0x48000800
 8000f58:	20000154 	.word	0x20000154
 8000f5c:	2000021c 	.word	0x2000021c
 8000f60:	be99999a 	.word	0xbe99999a
 8000f64:	200002fc 	.word	0x200002fc
 8000f68:	43340000 	.word	0x43340000
 8000f6c:	43b40000 	.word	0x43b40000

08000f70 <_Z9initMotorv>:
  /* USER CODE END 3 */
}
void initMotor() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	vectorAngle(0, 20);
 8000f74:	2014      	movs	r0, #20
 8000f76:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000f90 <_Z9initMotorv+0x20>
 8000f7a:	f000 f87f 	bl	800107c <_Z11vectorAngleft>
	HAL_Delay(1000);
 8000f7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f82:	f001 f8c5 	bl	8002110 <HAL_Delay>
	enc.zero();
 8000f86:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <_Z9initMotorv+0x24>)
 8000f88:	f7ff ff1c 	bl	8000dc4 <_ZN7Encoder4zeroEv>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	00000000 	.word	0x00000000
 8000f94:	200002fc 	.word	0x200002fc

08000f98 <_Z12outputTorquef>:

//must be run every loop
void outputTorque(float torque) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0a01 	vstr	s0, [r7, #4]
	torque *= invert;
 8000fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa6:	eef1 7a67 	vneg.f32	s15, s15
 8000faa:	edc7 7a01 	vstr	s15, [r7, #4]
	if(torque == 0)
 8000fae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fba:	d105      	bne.n	8000fc8 <_Z12outputTorquef+0x30>
		vectorAngle(0,0);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001068 <_Z12outputTorquef+0xd0>
 8000fc2:	f000 f85b 	bl	800107c <_Z11vectorAngleft>
 8000fc6:	e016      	b.n	8000ff6 <_Z12outputTorquef+0x5e>
	else if(torque > maxTorque) {
 8000fc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fcc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	dd02      	ble.n	8000fe0 <_Z12outputTorquef+0x48>
		torque = maxTorque;
 8000fda:	4b24      	ldr	r3, [pc, #144]	@ (800106c <_Z12outputTorquef+0xd4>)
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	e00a      	b.n	8000ff6 <_Z12outputTorquef+0x5e>
	} else if(torque < -1*maxTorque) {
 8000fe0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe4:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 8000fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff0:	d501      	bpl.n	8000ff6 <_Z12outputTorquef+0x5e>
		torque = -1*maxTorque;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <_Z12outputTorquef+0xd8>)
 8000ff4:	607b      	str	r3, [r7, #4]
	}
	if(torque > 0)
 8000ff6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	dd15      	ble.n	8001030 <_Z12outputTorquef+0x98>
		vectorAngle(enc.getAngle() + 90, torque);
 8001004:	481b      	ldr	r0, [pc, #108]	@ (8001074 <_Z12outputTorquef+0xdc>)
 8001006:	f7ff fe5d 	bl	8000cc4 <_ZN7Encoder8getAngleEv>
 800100a:	eef0 7a40 	vmov.f32	s15, s0
 800100e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001078 <_Z12outputTorquef+0xe0>
 8001012:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001016:	edd7 7a01 	vldr	s15, [r7, #4]
 800101a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800101e:	ee17 3a90 	vmov	r3, s15
 8001022:	b29b      	uxth	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	eeb0 0a47 	vmov.f32	s0, s14
 800102a:	f000 f827 	bl	800107c <_Z11vectorAngleft>
	else
		vectorAngle(enc.getAngle() - 90, torque * -1);
}
 800102e:	e016      	b.n	800105e <_Z12outputTorquef+0xc6>
		vectorAngle(enc.getAngle() - 90, torque * -1);
 8001030:	4810      	ldr	r0, [pc, #64]	@ (8001074 <_Z12outputTorquef+0xdc>)
 8001032:	f7ff fe47 	bl	8000cc4 <_ZN7Encoder8getAngleEv>
 8001036:	eef0 7a40 	vmov.f32	s15, s0
 800103a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001078 <_Z12outputTorquef+0xe0>
 800103e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001042:	edd7 7a01 	vldr	s15, [r7, #4]
 8001046:	eef1 7a67 	vneg.f32	s15, s15
 800104a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800104e:	ee17 3a90 	vmov	r3, s15
 8001052:	b29b      	uxth	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	eeb0 0a47 	vmov.f32	s0, s14
 800105a:	f000 f80f 	bl	800107c <_Z11vectorAngleft>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	00000000 	.word	0x00000000
 800106c:	41c80000 	.word	0x41c80000
 8001070:	c1c80000 	.word	0xc1c80000
 8001074:	200002fc 	.word	0x200002fc
 8001078:	42b40000 	.word	0x42b40000

0800107c <_Z11vectorAngleft>:

void vectorAngle(float angle, uint16_t power) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	ed87 0a01 	vstr	s0, [r7, #4]
 8001086:	4603      	mov	r3, r0
 8001088:	807b      	strh	r3, [r7, #2]
	outputElecAngle(angle/8, power);
 800108a:	edd7 7a01 	vldr	s15, [r7, #4]
 800108e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001092:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	4618      	mov	r0, r3
 800109a:	eeb0 0a47 	vmov.f32	s0, s14
 800109e:	f000 f807 	bl	80010b0 <_Z15outputElecAngleft>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	0000      	movs	r0, r0
 80010ac:	0000      	movs	r0, r0
	...

080010b0 <_Z15outputElecAngleft>:

void outputElecAngle(float angle, uint16_t power) {
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ba:	4603      	mov	r3, r0
 80010bc:	807b      	strh	r3, [r7, #2]
	//polar to xy
	float alpha = cos(angle) * power;
 80010be:	ed97 0a01 	vldr	s0, [r7, #4]
 80010c2:	f7ff fe9f 	bl	8000e04 <_ZSt3cosf>
 80010c6:	eeb0 7a40 	vmov.f32	s14, s0
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d8:	edc7 7a07 	vstr	s15, [r7, #28]
	float beta = sin(angle) * power;
 80010dc:	ed97 0a01 	vldr	s0, [r7, #4]
 80010e0:	f7ff fea0 	bl	8000e24 <_ZSt3sinf>
 80010e4:	eeb0 7a40 	vmov.f32	s14, s0
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	edc7 7a06 	vstr	s15, [r7, #24]
	//Clarke transform
	float a = alpha;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	617b      	str	r3, [r7, #20]
	float b = -0.5*alpha + 0.8660254*beta; //sqrt(3)/2 is weird const
 80010fe:	69f8      	ldr	r0, [r7, #28]
 8001100:	f7ff fb18 	bl	8000734 <__aeabi_f2d>
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b39      	ldr	r3, [pc, #228]	@ (80011f0 <_Z15outputElecAngleft+0x140>)
 800110a:	f7ff f885 	bl	8000218 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4614      	mov	r4, r2
 8001114:	461d      	mov	r5, r3
 8001116:	69b8      	ldr	r0, [r7, #24]
 8001118:	f7ff fb0c 	bl	8000734 <__aeabi_f2d>
 800111c:	a332      	add	r3, pc, #200	@ (adr r3, 80011e8 <_Z15outputElecAngleft+0x138>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff f879 	bl	8000218 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f7ff f9a3 	bl	8000478 <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fb53 	bl	80007e4 <__aeabi_d2f>
 800113e:	4603      	mov	r3, r0
 8001140:	613b      	str	r3, [r7, #16]
	float c = -0.5*alpha - 0.8660254*beta;
 8001142:	69f8      	ldr	r0, [r7, #28]
 8001144:	f7ff faf6 	bl	8000734 <__aeabi_f2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <_Z15outputElecAngleft+0x140>)
 800114e:	f7ff f863 	bl	8000218 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4614      	mov	r4, r2
 8001158:	461d      	mov	r5, r3
 800115a:	69b8      	ldr	r0, [r7, #24]
 800115c:	f7ff faea 	bl	8000734 <__aeabi_f2d>
 8001160:	a321      	add	r3, pc, #132	@ (adr r3, 80011e8 <_Z15outputElecAngleft+0x138>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff f857 	bl	8000218 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
 8001172:	f7ff f97f 	bl	8000474 <__aeabi_dsub>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fb31 	bl	80007e4 <__aeabi_d2f>
 8001182:	4603      	mov	r3, r0
 8001184:	60fb      	str	r3, [r7, #12]
	uint8_t pwma = ((int16_t)a) + 150; //scale to center of pwm range
 8001186:	edd7 7a05 	vldr	s15, [r7, #20]
 800118a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118e:	ee17 3a90 	vmov	r3, s15
 8001192:	b21b      	sxth	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	3b6a      	subs	r3, #106	@ 0x6a
 8001198:	72fb      	strb	r3, [r7, #11]
	uint8_t pwmb = ((int16_t)b) + 150;
 800119a:	edd7 7a04 	vldr	s15, [r7, #16]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	3b6a      	subs	r3, #106	@ 0x6a
 80011ac:	72bb      	strb	r3, [r7, #10]
	uint8_t pwmc = ((int16_t)c) + 150;
 80011ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b6:	ee17 3a90 	vmov	r3, s15
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	3b6a      	subs	r3, #106	@ 0x6a
 80011c0:	727b      	strb	r3, [r7, #9]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwma);
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <_Z15outputElecAngleft+0x144>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	7afa      	ldrb	r2, [r7, #11]
 80011c8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmb);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <_Z15outputElecAngleft+0x144>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7aba      	ldrb	r2, [r7, #10]
 80011d0:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwmc);
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_Z15outputElecAngleft+0x144>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	7a7a      	ldrb	r2, [r7, #9]
 80011d8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bdb0      	pop	{r4, r5, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	e6502b91 	.word	0xe6502b91
 80011ec:	3febb67a 	.word	0x3febb67a
 80011f0:	bfe00000 	.word	0xbfe00000
 80011f4:	2000021c 	.word	0x2000021c

080011f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	@ 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0318 	add.w	r3, r7, #24
 8001202:	2238      	movs	r2, #56	@ 0x38
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f006 fcf8 	bl	8007bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800121e:	f003 f813 	bl	8004248 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001226:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122c:	2340      	movs	r3, #64	@ 0x40
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001230:	2300      	movs	r3, #0
 8001232:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	4618      	mov	r0, r3
 800123a:	f003 f8b9 	bl	80043b0 <HAL_RCC_OscConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf14      	ite	ne
 8001244:	2301      	movne	r3, #1
 8001246:	2300      	moveq	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800124e:	f000 fb71 	bl	8001934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001256:	2301      	movs	r3, #1
 8001258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fbb2 	bl	80049d4 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	bf14      	ite	ne
 8001276:	2301      	movne	r3, #1
 8001278:	2300      	moveq	r3, #0
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8001280:	f000 fb58 	bl	8001934 <Error_Handler>
  }
}
 8001284:	bf00      	nop
 8001286:	3750      	adds	r7, #80	@ 0x50
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	@ 0x30
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2220      	movs	r2, #32
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f006 fca9 	bl	8007bfc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012aa:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012b2:	4b37      	ldr	r3, [pc, #220]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ba:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c0:	4b33      	ldr	r3, [pc, #204]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012c6:	4b32      	ldr	r3, [pc, #200]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012cc:	4b30      	ldr	r3, [pc, #192]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012d4:	2204      	movs	r2, #4
 80012d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012da:	2200      	movs	r2, #0
 80012dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012de:	4b2c      	ldr	r3, [pc, #176]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f2:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012f8:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012fe:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001306:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 8001308:	2200      	movs	r2, #0
 800130a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800130c:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001314:	481e      	ldr	r0, [pc, #120]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 8001316:	f001 f8f3 	bl	8002500 <HAL_ADC_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf14      	ite	ne
 8001320:	2301      	movne	r3, #1
 8001322:	2300      	moveq	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800132a:	f000 fb03 	bl	8001934 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001336:	4619      	mov	r1, r3
 8001338:	4815      	ldr	r0, [pc, #84]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 800133a:	f001 fe7b 	bl	8003034 <HAL_ADCEx_MultiModeConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf14      	ite	ne
 8001344:	2301      	movne	r3, #1
 8001346:	2300      	moveq	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 800134e:	f000 faf1 	bl	8001934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <_ZL12MX_ADC1_Initv+0x108>)
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001356:	2306      	movs	r3, #6
 8001358:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135e:	237f      	movs	r3, #127	@ 0x7f
 8001360:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001362:	2304      	movs	r3, #4
 8001364:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4808      	ldr	r0, [pc, #32]	@ (8001390 <_ZL12MX_ADC1_Initv+0x104>)
 8001370:	f001 fa4a 	bl	8002808 <HAL_ADC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8001384:	f000 fad6 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	3730      	adds	r7, #48	@ 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000028 	.word	0x20000028
 8001394:	08600004 	.word	0x08600004

08001398 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139e:	463b      	mov	r3, r7
 80013a0:	2220      	movs	r2, #32
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f006 fc29 	bl	8007bfc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80013aa:	4b30      	ldr	r3, [pc, #192]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013ac:	4a30      	ldr	r2, [pc, #192]	@ (8001470 <_ZL12MX_ADC2_Initv+0xd8>)
 80013ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013b0:	4b2e      	ldr	r3, [pc, #184]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013b6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013b8:	4b2c      	ldr	r3, [pc, #176]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013be:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80013c4:	4b29      	ldr	r3, [pc, #164]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ca:	4b28      	ldr	r3, [pc, #160]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d0:	4b26      	ldr	r3, [pc, #152]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013d2:	2204      	movs	r2, #4
 80013d4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013d6:	4b25      	ldr	r3, [pc, #148]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013dc:	4b23      	ldr	r3, [pc, #140]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80013e2:	4b22      	ldr	r3, [pc, #136]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013e8:	4b20      	ldr	r3, [pc, #128]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 8001406:	2200      	movs	r2, #0
 8001408:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001412:	4816      	ldr	r0, [pc, #88]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 8001414:	f001 f874 	bl	8002500 <HAL_ADC_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	bf14      	ite	ne
 800141e:	2301      	movne	r3, #1
 8001420:	2300      	moveq	r3, #0
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 8001428:	f000 fa84 	bl	8001934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <_ZL12MX_ADC2_Initv+0xdc>)
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001430:	2306      	movs	r3, #6
 8001432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001438:	237f      	movs	r3, #127	@ 0x7f
 800143a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800143c:	2304      	movs	r3, #4
 800143e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001444:	463b      	mov	r3, r7
 8001446:	4619      	mov	r1, r3
 8001448:	4808      	ldr	r0, [pc, #32]	@ (800146c <_ZL12MX_ADC2_Initv+0xd4>)
 800144a:	f001 f9dd 	bl	8002808 <HAL_ADC_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf14      	ite	ne
 8001454:	2301      	movne	r3, #1
 8001456:	2300      	moveq	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 800145e:	f000 fa69 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000094 	.word	0x20000094
 8001470:	50000100 	.word	0x50000100
 8001474:	0c900008 	.word	0x0c900008

08001478 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <_ZL12MX_I2C1_Initv+0x90>)
 800147e:	4a23      	ldr	r2, [pc, #140]	@ (800150c <_ZL12MX_I2C1_Initv+0x94>)
 8001480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <_ZL12MX_I2C1_Initv+0x90>)
 8001484:	4a22      	ldr	r2, [pc, #136]	@ (8001510 <_ZL12MX_I2C1_Initv+0x98>)
 8001486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <_ZL12MX_I2C1_Initv+0x90>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148e:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <_ZL12MX_I2C1_Initv+0x90>)
 8001490:	2201      	movs	r2, #1
 8001492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001494:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <_ZL12MX_I2C1_Initv+0x90>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <_ZL12MX_I2C1_Initv+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <_ZL12MX_I2C1_Initv+0x90>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a6:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <_ZL12MX_I2C1_Initv+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ac:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <_ZL12MX_I2C1_Initv+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b2:	4815      	ldr	r0, [pc, #84]	@ (8001508 <_ZL12MX_I2C1_Initv+0x90>)
 80014b4:	f002 f8e0 	bl	8003678 <HAL_I2C_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bf14      	ite	ne
 80014be:	2301      	movne	r3, #1
 80014c0:	2300      	moveq	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80014c8:	f000 fa34 	bl	8001934 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014cc:	2100      	movs	r1, #0
 80014ce:	480e      	ldr	r0, [pc, #56]	@ (8001508 <_ZL12MX_I2C1_Initv+0x90>)
 80014d0:	f002 fe22 	bl	8004118 <HAL_I2CEx_ConfigAnalogFilter>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf14      	ite	ne
 80014da:	2301      	movne	r3, #1
 80014dc:	2300      	moveq	r3, #0
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80014e4:	f000 fa26 	bl	8001934 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014e8:	2100      	movs	r1, #0
 80014ea:	4807      	ldr	r0, [pc, #28]	@ (8001508 <_ZL12MX_I2C1_Initv+0x90>)
 80014ec:	f002 fe5f 	bl	80041ae <HAL_I2CEx_ConfigDigitalFilter>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	bf14      	ite	ne
 80014f6:	2301      	movne	r3, #1
 80014f8:	2300      	moveq	r3, #0
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001500:	f000 fa18 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000100 	.word	0x20000100
 800150c:	40005400 	.word	0x40005400
 8001510:	00503d58 	.word	0x00503d58

08001514 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001518:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 800151a:	4a1e      	ldr	r2, [pc, #120]	@ (8001594 <_ZL12MX_SPI2_Initv+0x80>)
 800151c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800151e:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 8001520:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001524:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001526:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 800152e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001532:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001534:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 8001542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001546:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 800154a:	2228      	movs	r2, #40	@ 0x28
 800154c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001554:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 800155c:	2200      	movs	r2, #0
 800155e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 8001562:	2207      	movs	r2, #7
 8001564:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 8001568:	2200      	movs	r2, #0
 800156a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 800156e:	2200      	movs	r2, #0
 8001570:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001572:	4807      	ldr	r0, [pc, #28]	@ (8001590 <_ZL12MX_SPI2_Initv+0x7c>)
 8001574:	f003 fe3a 	bl	80051ec <HAL_SPI_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	bf14      	ite	ne
 800157e:	2301      	movne	r3, #1
 8001580:	2300      	moveq	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8001588:	f000 f9d4 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000154 	.word	0x20000154
 8001594:	40003800 	.word	0x40003800

08001598 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800159c:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 800159e:	4a1e      	ldr	r2, [pc, #120]	@ (8001618 <_ZL12MX_SPI3_Initv+0x80>)
 80015a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80015b0:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015b2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b8:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015de:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015e6:	2207      	movs	r2, #7
 80015e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015f2:	2208      	movs	r2, #8
 80015f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80015f6:	4807      	ldr	r0, [pc, #28]	@ (8001614 <_ZL12MX_SPI3_Initv+0x7c>)
 80015f8:	f003 fdf8 	bl	80051ec <HAL_SPI_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf14      	ite	ne
 8001602:	2301      	movne	r3, #1
 8001604:	2300      	moveq	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 800160c:	f000 f992 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200001b8 	.word	0x200001b8
 8001618:	40003c00 	.word	0x40003c00

0800161c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b098      	sub	sp, #96	@ 0x60
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001622:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2234      	movs	r2, #52	@ 0x34
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f006 fad7 	bl	8007bfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800164e:	4b55      	ldr	r3, [pc, #340]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 8001650:	4a55      	ldr	r2, [pc, #340]	@ (80017a8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001652:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001654:	4b53      	ldr	r3, [pc, #332]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800165a:	4b52      	ldr	r3, [pc, #328]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 800165c:	2260      	movs	r2, #96	@ 0x60
 800165e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 300;
 8001660:	4b50      	ldr	r3, [pc, #320]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 8001662:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001666:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001668:	4b4e      	ldr	r3, [pc, #312]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800166e:	4b4d      	ldr	r3, [pc, #308]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 8001670:	2201      	movs	r2, #1
 8001672:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001674:	4b4b      	ldr	r3, [pc, #300]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800167a:	484a      	ldr	r0, [pc, #296]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 800167c:	f003 fe61 	bl	8005342 <HAL_TIM_PWM_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	bf14      	ite	ne
 8001686:	2301      	movne	r3, #1
 8001688:	2300      	moveq	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8001690:	f000 f950 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016a4:	4619      	mov	r1, r3
 80016a6:	483f      	ldr	r0, [pc, #252]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 80016a8:	f004 fdc2 	bl	8006230 <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf14      	ite	ne
 80016b2:	2301      	movne	r3, #1
 80016b4:	2300      	moveq	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 80016bc:	f000 f93a 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c0:	2360      	movs	r3, #96	@ 0x60
 80016c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c8:	2300      	movs	r3, #0
 80016ca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016cc:	2300      	movs	r3, #0
 80016ce:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80016d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	482f      	ldr	r0, [pc, #188]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 80016e8:	f003 ffce 	bl	8005688 <HAL_TIM_PWM_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 80016fc:	f000 f91a 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001700:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001704:	2204      	movs	r2, #4
 8001706:	4619      	mov	r1, r3
 8001708:	4826      	ldr	r0, [pc, #152]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 800170a:	f003 ffbd 	bl	8005688 <HAL_TIM_PWM_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf14      	ite	ne
 8001714:	2301      	movne	r3, #1
 8001716:	2300      	moveq	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 800171e:	f000 f909 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001722:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001726:	2208      	movs	r2, #8
 8001728:	4619      	mov	r1, r3
 800172a:	481e      	ldr	r0, [pc, #120]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 800172c:	f003 ffac 	bl	8005688 <HAL_TIM_PWM_ConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8001740:	f000 f8f8 	bl	8001934 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]

  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001754:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001758:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001766:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	4619      	mov	r1, r3
 800177c:	4809      	ldr	r0, [pc, #36]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 800177e:	f004 fdd9 	bl	8006334 <HAL_TIMEx_ConfigBreakDeadTime>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf14      	ite	ne
 8001788:	2301      	movne	r3, #1
 800178a:	2300      	moveq	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <_ZL12MX_TIM1_Initv+0x17a>
  {
    Error_Handler();
 8001792:	f000 f8cf 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001796:	4803      	ldr	r0, [pc, #12]	@ (80017a4 <_ZL12MX_TIM1_Initv+0x188>)
 8001798:	f000 fb10 	bl	8001dbc <HAL_TIM_MspPostInit>

}
 800179c:	bf00      	nop
 800179e:	3760      	adds	r7, #96	@ 0x60
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000021c 	.word	0x2000021c
 80017a8:	40012c00 	.word	0x40012c00

080017ac <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001868 <_ZL19MX_USART2_UART_Initv+0xbc>)
 80017b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017be:	4b29      	ldr	r3, [pc, #164]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c4:	4b27      	ldr	r3, [pc, #156]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ca:	4b26      	ldr	r3, [pc, #152]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d0:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017d2:	220c      	movs	r2, #12
 80017d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d6:	4b23      	ldr	r3, [pc, #140]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017dc:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e2:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f4:	481b      	ldr	r0, [pc, #108]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017f6:	f004 fe4e 	bl	8006496 <HAL_UART_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf14      	ite	ne
 8001800:	2301      	movne	r3, #1
 8001802:	2300      	moveq	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800180a:	f000 f893 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180e:	2100      	movs	r1, #0
 8001810:	4814      	ldr	r0, [pc, #80]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001812:	f005 fbb5 	bl	8006f80 <HAL_UARTEx_SetTxFifoThreshold>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf14      	ite	ne
 800181c:	2301      	movne	r3, #1
 800181e:	2300      	moveq	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001826:	f000 f885 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800182a:	2100      	movs	r1, #0
 800182c:	480d      	ldr	r0, [pc, #52]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800182e:	f005 fbe5 	bl	8006ffc <HAL_UARTEx_SetRxFifoThreshold>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf14      	ite	ne
 8001838:	2301      	movne	r3, #1
 800183a:	2300      	moveq	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001842:	f000 f877 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001846:	4807      	ldr	r0, [pc, #28]	@ (8001864 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001848:	f005 fb61 	bl	8006f0e <HAL_UARTEx_DisableFifoMode>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf14      	ite	ne
 8001852:	2301      	movne	r3, #1
 8001854:	2300      	moveq	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 800185c:	f000 f86a 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000268 	.word	0x20000268
 8001868:	40004400 	.word	0x40004400

0800186c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	4b2a      	ldr	r3, [pc, #168]	@ (800192c <_ZL12MX_GPIO_Initv+0xc0>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001886:	4a29      	ldr	r2, [pc, #164]	@ (800192c <_ZL12MX_GPIO_Initv+0xc0>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800188e:	4b27      	ldr	r3, [pc, #156]	@ (800192c <_ZL12MX_GPIO_Initv+0xc0>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <_ZL12MX_GPIO_Initv+0xc0>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	4a23      	ldr	r2, [pc, #140]	@ (800192c <_ZL12MX_GPIO_Initv+0xc0>)
 80018a0:	f043 0320 	orr.w	r3, r3, #32
 80018a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a6:	4b21      	ldr	r3, [pc, #132]	@ (800192c <_ZL12MX_GPIO_Initv+0xc0>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <_ZL12MX_GPIO_Initv+0xc0>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	4a1d      	ldr	r2, [pc, #116]	@ (800192c <_ZL12MX_GPIO_Initv+0xc0>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018be:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <_ZL12MX_GPIO_Initv+0xc0>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <_ZL12MX_GPIO_Initv+0xc0>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	4a17      	ldr	r2, [pc, #92]	@ (800192c <_ZL12MX_GPIO_Initv+0xc0>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <_ZL12MX_GPIO_Initv+0xc0>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CSN_Pin|DRVOFF_Pin|SCS_N_Pin|SLEEP_N_Pin
 80018e2:	2200      	movs	r2, #0
 80018e4:	f244 2107 	movw	r1, #16903	@ 0x4207
 80018e8:	4811      	ldr	r0, [pc, #68]	@ (8001930 <_ZL12MX_GPIO_Initv+0xc4>)
 80018ea:	f001 fead 	bl	8003648 <HAL_GPIO_WritePin>
                          |NRF_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NRF_CSN_Pin DRVOFF_Pin SCS_N_Pin SLEEP_N_Pin
                           NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|DRVOFF_Pin|SCS_N_Pin|SLEEP_N_Pin
 80018ee:	f244 2307 	movw	r3, #16903	@ 0x4207
 80018f2:	617b      	str	r3, [r7, #20]
                          |NRF_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	480a      	ldr	r0, [pc, #40]	@ (8001930 <_ZL12MX_GPIO_Initv+0xc4>)
 8001908:	f001 fd1c 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_N_Pin */
  GPIO_InitStruct.Pin = FAULT_N_Pin;
 800190c:	2308      	movs	r3, #8
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_N_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4804      	ldr	r0, [pc, #16]	@ (8001930 <_ZL12MX_GPIO_Initv+0xc4>)
 8001920:	f001 fd10 	bl	8003344 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	@ 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000
 8001930:	48000800 	.word	0x48000800

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <Error_Handler+0x8>

08001940 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
Encoder enc(&hi2c1);
 8001944:	4902      	ldr	r1, [pc, #8]	@ (8001950 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8001946:	4803      	ldr	r0, [pc, #12]	@ (8001954 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8001948:	f7ff f97d 	bl	8000c46 <_ZN7EncoderC1EP19__I2C_HandleTypeDef>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000100 	.word	0x20000100
 8001954:	200002fc 	.word	0x200002fc

08001958 <_GLOBAL__sub_I_hadc1>:
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
 800195c:	f7ff fff0 	bl	8001940 <_Z41__static_initialization_and_destruction_0v>
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <HAL_MspInit+0x44>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196e:	4a0e      	ldr	r2, [pc, #56]	@ (80019a8 <HAL_MspInit+0x44>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6613      	str	r3, [r2, #96]	@ 0x60
 8001976:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <HAL_MspInit+0x44>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_MspInit+0x44>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001986:	4a08      	ldr	r2, [pc, #32]	@ (80019a8 <HAL_MspInit+0x44>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198c:	6593      	str	r3, [r2, #88]	@ 0x58
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_MspInit+0x44>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800199a:	f002 fcf9 	bl	8004390 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b09e      	sub	sp, #120	@ 0x78
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c4:	f107 0320 	add.w	r3, r7, #32
 80019c8:	2244      	movs	r2, #68	@ 0x44
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f006 f915 	bl	8007bfc <memset>
  if(hadc->Instance==ADC1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019da:	d156      	bne.n	8001a8a <HAL_ADC_MspInit+0xde>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80019dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80019e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80019e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 fa0d 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80019f8:	f7ff ff9c 	bl	8001934 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019fc:	4b46      	ldr	r3, [pc, #280]	@ (8001b18 <HAL_ADC_MspInit+0x16c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a45      	ldr	r2, [pc, #276]	@ (8001b18 <HAL_ADC_MspInit+0x16c>)
 8001a04:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a06:	4b44      	ldr	r3, [pc, #272]	@ (8001b18 <HAL_ADC_MspInit+0x16c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d10b      	bne.n	8001a26 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a0e:	4b43      	ldr	r3, [pc, #268]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a12:	4a42      	ldr	r2, [pc, #264]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001a14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a1a:	4b40      	ldr	r3, [pc, #256]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b3d      	ldr	r3, [pc, #244]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a32:	4b3a      	ldr	r3, [pc, #232]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	4b37      	ldr	r3, [pc, #220]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	4a36      	ldr	r2, [pc, #216]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4a:	4b34      	ldr	r3, [pc, #208]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697b      	ldr	r3, [r7, #20]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001a56:	2306      	movs	r3, #6
 8001a58:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a66:	4619      	mov	r1, r3
 8001a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a6c:	f001 fc6a 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a70:	2303      	movs	r3, #3
 8001a72:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a74:	2303      	movs	r3, #3
 8001a76:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a80:	4619      	mov	r1, r3
 8001a82:	4827      	ldr	r0, [pc, #156]	@ (8001b20 <HAL_ADC_MspInit+0x174>)
 8001a84:	f001 fc5e 	bl	8003344 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a88:	e042      	b.n	8001b10 <HAL_ADC_MspInit+0x164>
  else if(hadc->Instance==ADC2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a25      	ldr	r2, [pc, #148]	@ (8001b24 <HAL_ADC_MspInit+0x178>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d13d      	bne.n	8001b10 <HAL_ADC_MspInit+0x164>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a98:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a9a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 f9b1 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_ADC_MspInit+0x108>
      Error_Handler();
 8001ab0:	f7ff ff40 	bl	8001934 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ab4:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <HAL_ADC_MspInit+0x16c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <HAL_ADC_MspInit+0x16c>)
 8001abc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001abe:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <HAL_ADC_MspInit+0x16c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d10b      	bne.n	8001ade <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001acc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_ADC_MspInit+0x170>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001af6:	23c0      	movs	r3, #192	@ 0xc0
 8001af8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afa:	2303      	movs	r3, #3
 8001afc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b06:	4619      	mov	r1, r3
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b0c:	f001 fc1a 	bl	8003344 <HAL_GPIO_Init>
}
 8001b10:	bf00      	nop
 8001b12:	3778      	adds	r7, #120	@ 0x78
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000310 	.word	0x20000310
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	48000400 	.word	0x48000400
 8001b24:	50000100 	.word	0x50000100

08001b28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b09c      	sub	sp, #112	@ 0x70
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	2244      	movs	r2, #68	@ 0x44
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f006 f857 	bl	8007bfc <memset>
  if(hi2c->Instance==I2C1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2d      	ldr	r2, [pc, #180]	@ (8001c08 <HAL_I2C_MspInit+0xe0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d153      	bne.n	8001c00 <HAL_I2C_MspInit+0xd8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b58:	2340      	movs	r3, #64	@ 0x40
 8001b5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b60:	f107 0318 	add.w	r3, r7, #24
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 f951 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b70:	f7ff fee0 	bl	8001934 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <HAL_I2C_MspInit+0xe4>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b78:	4a24      	ldr	r2, [pc, #144]	@ (8001c0c <HAL_I2C_MspInit+0xe4>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b80:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <HAL_I2C_MspInit+0xe4>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c0c <HAL_I2C_MspInit+0xe4>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b90:	4a1e      	ldr	r2, [pc, #120]	@ (8001c0c <HAL_I2C_MspInit+0xe4>)
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b98:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <HAL_I2C_MspInit+0xe4>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ba4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001baa:	2312      	movs	r3, #18
 8001bac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc4:	f001 fbbe 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001be0:	4619      	mov	r1, r3
 8001be2:	480b      	ldr	r0, [pc, #44]	@ (8001c10 <HAL_I2C_MspInit+0xe8>)
 8001be4:	f001 fbae 	bl	8003344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be8:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <HAL_I2C_MspInit+0xe4>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	4a07      	ldr	r2, [pc, #28]	@ (8001c0c <HAL_I2C_MspInit+0xe4>)
 8001bee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <HAL_I2C_MspInit+0xe4>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c00:	bf00      	nop
 8001c02:	3770      	adds	r7, #112	@ 0x70
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	48000400 	.word	0x48000400

08001c14 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08e      	sub	sp, #56	@ 0x38
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a4c      	ldr	r2, [pc, #304]	@ (8001d64 <HAL_SPI_MspInit+0x150>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d164      	bne.n	8001d00 <HAL_SPI_MspInit+0xec>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c36:	4b4c      	ldr	r3, [pc, #304]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c42:	4b49      	ldr	r3, [pc, #292]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4a:	623b      	str	r3, [r7, #32]
 8001c4c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c4e:	4b46      	ldr	r3, [pc, #280]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	4a45      	ldr	r2, [pc, #276]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c54:	f043 0320 	orr.w	r3, r3, #32
 8001c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5a:	4b43      	ldr	r3, [pc, #268]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b40      	ldr	r3, [pc, #256]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c72:	4b3d      	ldr	r3, [pc, #244]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	4a39      	ldr	r2, [pc, #228]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8a:	4b37      	ldr	r3, [pc, #220]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PF9     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ca8:	2305      	movs	r3, #5
 8001caa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	482e      	ldr	r0, [pc, #184]	@ (8001d6c <HAL_SPI_MspInit+0x158>)
 8001cb4:	f001 fb46 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001cb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cca:	2305      	movs	r3, #5
 8001ccc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4826      	ldr	r0, [pc, #152]	@ (8001d70 <HAL_SPI_MspInit+0x15c>)
 8001cd6:	f001 fb35 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cec:	2305      	movs	r3, #5
 8001cee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cfa:	f001 fb23 	bl	8003344 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001cfe:	e02d      	b.n	8001d5c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI3)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1b      	ldr	r2, [pc, #108]	@ (8001d74 <HAL_SPI_MspInit+0x160>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d128      	bne.n	8001d5c <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d0a:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0e:	4a16      	ldr	r2, [pc, #88]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d16:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d26:	4a10      	ldr	r2, [pc, #64]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <HAL_SPI_MspInit+0x154>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d3a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d54:	4619      	mov	r1, r3
 8001d56:	4808      	ldr	r0, [pc, #32]	@ (8001d78 <HAL_SPI_MspInit+0x164>)
 8001d58:	f001 faf4 	bl	8003344 <HAL_GPIO_Init>
}
 8001d5c:	bf00      	nop
 8001d5e:	3738      	adds	r7, #56	@ 0x38
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40003800 	.word	0x40003800
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	48001400 	.word	0x48001400
 8001d70:	48000400 	.word	0x48000400
 8001d74:	40003c00 	.word	0x40003c00
 8001d78:	48000800 	.word	0x48000800

08001d7c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <HAL_TIM_PWM_MspInit+0x38>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d10b      	bne.n	8001da6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d92:	4a09      	ldr	r2, [pc, #36]	@ (8001db8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d9a:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40012c00 	.word	0x40012c00
 8001db8:	40021000 	.word	0x40021000

08001dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e98 <HAL_TIM_MspPostInit+0xdc>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d157      	bne.n	8001e8e <HAL_TIM_MspPostInit+0xd2>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dde:	4b2f      	ldr	r3, [pc, #188]	@ (8001e9c <HAL_TIM_MspPostInit+0xe0>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de2:	4a2e      	ldr	r2, [pc, #184]	@ (8001e9c <HAL_TIM_MspPostInit+0xe0>)
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dea:	4b2c      	ldr	r3, [pc, #176]	@ (8001e9c <HAL_TIM_MspPostInit+0xe0>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	4b29      	ldr	r3, [pc, #164]	@ (8001e9c <HAL_TIM_MspPostInit+0xe0>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfa:	4a28      	ldr	r2, [pc, #160]	@ (8001e9c <HAL_TIM_MspPostInit+0xe0>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e02:	4b26      	ldr	r3, [pc, #152]	@ (8001e9c <HAL_TIM_MspPostInit+0xe0>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <HAL_TIM_MspPostInit+0xe0>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e12:	4a22      	ldr	r2, [pc, #136]	@ (8001e9c <HAL_TIM_MspPostInit+0xe0>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e1a:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <HAL_TIM_MspPostInit+0xe0>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001e38:	2304      	movs	r3, #4
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	4817      	ldr	r0, [pc, #92]	@ (8001ea0 <HAL_TIM_MspPostInit+0xe4>)
 8001e44:	f001 fa7e 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	480f      	ldr	r0, [pc, #60]	@ (8001ea4 <HAL_TIM_MspPostInit+0xe8>)
 8001e66:	f001 fa6d 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001e6a:	f44f 53b8 	mov.w	r3, #5888	@ 0x1700
 8001e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e7c:	2306      	movs	r3, #6
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e8a:	f001 fa5b 	bl	8003344 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e8e:	bf00      	nop
 8001e90:	3728      	adds	r7, #40	@ 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40012c00 	.word	0x40012c00
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	48000800 	.word	0x48000800
 8001ea4:	48000400 	.word	0x48000400

08001ea8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b09a      	sub	sp, #104	@ 0x68
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	2244      	movs	r2, #68	@ 0x44
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f005 fe97 	bl	8007bfc <memset>
  if(huart->Instance==USART2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f4c <HAL_UART_MspInit+0xa4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d135      	bne.n	8001f44 <HAL_UART_MspInit+0x9c>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 ff91 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef0:	f7ff fd20 	bl	8001934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ef4:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <HAL_UART_MspInit+0xa8>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	4a15      	ldr	r2, [pc, #84]	@ (8001f50 <HAL_UART_MspInit+0xa8>)
 8001efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f00:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <HAL_UART_MspInit+0xa8>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0c:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <HAL_UART_MspInit+0xa8>)
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f10:	4a0f      	ldr	r2, [pc, #60]	@ (8001f50 <HAL_UART_MspInit+0xa8>)
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f18:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <HAL_UART_MspInit+0xa8>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001f24:	2318      	movs	r3, #24
 8001f26:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f34:	2307      	movs	r3, #7
 8001f36:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4805      	ldr	r0, [pc, #20]	@ (8001f54 <HAL_UART_MspInit+0xac>)
 8001f40:	f001 fa00 	bl	8003344 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f44:	bf00      	nop
 8001f46:	3768      	adds	r7, #104	@ 0x68
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40004400 	.word	0x40004400
 8001f50:	40021000 	.word	0x40021000
 8001f54:	48000400 	.word	0x48000400

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <NMI_Handler+0x4>

08001f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <HardFault_Handler+0x4>

08001f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <MemManage_Handler+0x4>

08001f70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fae:	f000 f891 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <SystemInit+0x20>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc2:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <SystemInit+0x20>)
 8001fc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fdc:	480d      	ldr	r0, [pc, #52]	@ (8002014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fde:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fe0:	f7ff ffea 	bl	8001fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe4:	480c      	ldr	r0, [pc, #48]	@ (8002018 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fe6:	490d      	ldr	r1, [pc, #52]	@ (800201c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8002020 <LoopForever+0xe>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fec:	e002      	b.n	8001ff4 <LoopCopyDataInit>

08001fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff2:	3304      	adds	r3, #4

08001ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff8:	d3f9      	bcc.n	8001fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8002028 <LoopForever+0x16>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002000:	e001      	b.n	8002006 <LoopFillZerobss>

08002002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002004:	3204      	adds	r2, #4

08002006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002008:	d3fb      	bcc.n	8002002 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800200a:	f005 fdff 	bl	8007c0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800200e:	f7fe ff19 	bl	8000e44 <main>

08002012 <LoopForever>:

LoopForever:
    b LoopForever
 8002012:	e7fe      	b.n	8002012 <LoopForever>
  ldr   r0, =_estack
 8002014:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002020:	08008090 	.word	0x08008090
  ldr r2, =_sbss
 8002024:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002028:	20000318 	.word	0x20000318

0800202c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_2_IRQHandler>

0800202e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002038:	2003      	movs	r0, #3
 800203a:	f001 f951 	bl	80032e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203e:	200f      	movs	r0, #15
 8002040:	f000 f80e 	bl	8002060 <HAL_InitTick>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	71fb      	strb	r3, [r7, #7]
 800204e:	e001      	b.n	8002054 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002050:	f7ff fc88 	bl	8001964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002054:	79fb      	ldrb	r3, [r7, #7]

}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800206c:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <HAL_InitTick+0x68>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d022      	beq.n	80020ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002074:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <HAL_InitTick+0x6c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <HAL_InitTick+0x68>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002080:	fbb1 f3f3 	udiv	r3, r1, r3
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	4618      	mov	r0, r3
 800208a:	f001 f94e 	bl	800332a <HAL_SYSTICK_Config>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10f      	bne.n	80020b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b0f      	cmp	r3, #15
 8002098:	d809      	bhi.n	80020ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209a:	2200      	movs	r2, #0
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020a2:	f001 f928 	bl	80032f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <HAL_InitTick+0x70>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	e007      	b.n	80020be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	e004      	b.n	80020be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e001      	b.n	80020be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000008 	.word	0x20000008
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000004 	.word	0x20000004

080020d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_IncTick+0x1c>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <HAL_IncTick+0x20>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a03      	ldr	r2, [pc, #12]	@ (80020f0 <HAL_IncTick+0x1c>)
 80020e4:	6013      	str	r3, [r2, #0]
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	20000314 	.word	0x20000314
 80020f4:	20000008 	.word	0x20000008

080020f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b03      	ldr	r3, [pc, #12]	@ (800210c <HAL_GetTick+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000314 	.word	0x20000314

08002110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff ffee 	bl	80020f8 <HAL_GetTick>
 800211c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002128:	d004      	beq.n	8002134 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_Delay+0x40>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4413      	add	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002134:	bf00      	nop
 8002136:	f7ff ffdf 	bl	80020f8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	429a      	cmp	r2, r3
 8002144:	d8f7      	bhi.n	8002136 <HAL_Delay+0x26>
  {
  }
}
 8002146:	bf00      	nop
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000008 	.word	0x20000008

08002154 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	609a      	str	r2, [r3, #8]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3360      	adds	r3, #96	@ 0x60
 80021ce:	461a      	mov	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <LL_ADC_SetOffset+0x44>)
 80021de:	4013      	ands	r3, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021f4:	bf00      	nop
 80021f6:	371c      	adds	r7, #28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	03fff000 	.word	0x03fff000

08002204 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3360      	adds	r3, #96	@ 0x60
 8002212:	461a      	mov	r2, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3360      	adds	r3, #96	@ 0x60
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	431a      	orrs	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800225a:	bf00      	nop
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002266:	b480      	push	{r7}
 8002268:	b087      	sub	sp, #28
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3360      	adds	r3, #96	@ 0x60
 8002276:	461a      	mov	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	431a      	orrs	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3360      	adds	r3, #96	@ 0x60
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	615a      	str	r2, [r3, #20]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3330      	adds	r3, #48	@ 0x30
 8002308:	461a      	mov	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	f003 030c 	and.w	r3, r3, #12
 8002314:	4413      	add	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	211f      	movs	r1, #31
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	401a      	ands	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	0e9b      	lsrs	r3, r3, #26
 8002330:	f003 011f 	and.w	r1, r3, #31
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	431a      	orrs	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002344:	bf00      	nop
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3314      	adds	r3, #20
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	0e5b      	lsrs	r3, r3, #25
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	4413      	add	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	0d1b      	lsrs	r3, r3, #20
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2107      	movs	r1, #7
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	401a      	ands	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	0d1b      	lsrs	r3, r3, #20
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	431a      	orrs	r2, r3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c0:	43db      	mvns	r3, r3
 80023c2:	401a      	ands	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f003 0318 	and.w	r3, r3, #24
 80023ca:	4908      	ldr	r1, [pc, #32]	@ (80023ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80023cc:	40d9      	lsrs	r1, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	400b      	ands	r3, r1
 80023d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d6:	431a      	orrs	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	0007ffff 	.word	0x0007ffff

080023f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002400:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6093      	str	r3, [r2, #8]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002428:	d101      	bne.n	800242e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800244c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002450:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002474:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002478:	d101      	bne.n	800247e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <LL_ADC_IsEnabled+0x18>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <LL_ADC_IsEnabled+0x1a>
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d101      	bne.n	80024ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d101      	bne.n	80024f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b089      	sub	sp, #36	@ 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e167      	b.n	80027ea <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff fa3f 	bl	80019ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff67 	bl	8002414 <LL_ADC_IsDeepPowerDownEnabled>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d004      	beq.n	8002556 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff4d 	bl	80023f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff82 	bl	8002464 <LL_ADC_IsInternalRegulatorEnabled>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d115      	bne.n	8002592 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ff66 	bl	800243c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002570:	4ba0      	ldr	r3, [pc, #640]	@ (80027f4 <HAL_ADC_Init+0x2f4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	4aa0      	ldr	r2, [pc, #640]	@ (80027f8 <HAL_ADC_Init+0x2f8>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002584:	e002      	b.n	800258c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3b01      	subs	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f9      	bne.n	8002586 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff64 	bl	8002464 <LL_ADC_IsInternalRegulatorEnabled>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10d      	bne.n	80025be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a6:	f043 0210 	orr.w	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff ff75 	bl	80024b2 <LL_ADC_REG_IsConversionOngoing>
 80025c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 8100 	bne.w	80027d8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 80fc 	bne.w	80027d8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025e8:	f043 0202 	orr.w	r2, r3, #2
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff49 	bl	800248c <LL_ADC_IsEnabled>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d111      	bne.n	8002624 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002600:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002604:	f7ff ff42 	bl	800248c <LL_ADC_IsEnabled>
 8002608:	4604      	mov	r4, r0
 800260a:	487c      	ldr	r0, [pc, #496]	@ (80027fc <HAL_ADC_Init+0x2fc>)
 800260c:	f7ff ff3e 	bl	800248c <LL_ADC_IsEnabled>
 8002610:	4603      	mov	r3, r0
 8002612:	4323      	orrs	r3, r4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4619      	mov	r1, r3
 800261e:	4878      	ldr	r0, [pc, #480]	@ (8002800 <HAL_ADC_Init+0x300>)
 8002620:	f7ff fd98 	bl	8002154 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7f5b      	ldrb	r3, [r3, #29]
 8002628:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800262e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002634:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800263a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002642:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800264e:	2b01      	cmp	r3, #1
 8002650:	d106      	bne.n	8002660 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002656:	3b01      	subs	r3, #1
 8002658:	045b      	lsls	r3, r3, #17
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	4b60      	ldr	r3, [pc, #384]	@ (8002804 <HAL_ADC_Init+0x304>)
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	430b      	orrs	r3, r1
 800268e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff14 	bl	80024d8 <LL_ADC_INJ_IsConversionOngoing>
 80026b0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d16d      	bne.n	8002794 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d16a      	bne.n	8002794 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026c2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026ca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026da:	f023 0302 	bic.w	r3, r3, #2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	69b9      	ldr	r1, [r7, #24]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d017      	beq.n	8002720 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80026fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002708:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800270c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6911      	ldr	r1, [r2, #16]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	430b      	orrs	r3, r1
 800271a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800271e:	e013      	b.n	8002748 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800272e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002740:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002744:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800274e:	2b01      	cmp	r3, #1
 8002750:	d118      	bne.n	8002784 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002768:	4311      	orrs	r1, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800276e:	4311      	orrs	r1, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002774:	430a      	orrs	r2, r1
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0201 	orr.w	r2, r2, #1
 8002780:	611a      	str	r2, [r3, #16]
 8002782:	e007      	b.n	8002794 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10c      	bne.n	80027b6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f023 010f 	bic.w	r1, r3, #15
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	1e5a      	subs	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027b4:	e007      	b.n	80027c6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 020f 	bic.w	r2, r2, #15
 80027c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	f043 0201 	orr.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027d6:	e007      	b.n	80027e8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027dc:	f043 0210 	orr.w	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	@ 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd90      	pop	{r4, r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000000 	.word	0x20000000
 80027f8:	053e2d63 	.word	0x053e2d63
 80027fc:	50000100 	.word	0x50000100
 8002800:	50000300 	.word	0x50000300
 8002804:	fff04007 	.word	0xfff04007

08002808 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b0b6      	sub	sp, #216	@ 0xd8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_ADC_ConfigChannel+0x22>
 8002826:	2302      	movs	r3, #2
 8002828:	e3c8      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x7b4>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fe3b 	bl	80024b2 <LL_ADC_REG_IsConversionOngoing>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 83ad 	bne.w	8002f9e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	f7ff fd51 	bl	80022f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fe29 	bl	80024b2 <LL_ADC_REG_IsConversionOngoing>
 8002860:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fe35 	bl	80024d8 <LL_ADC_INJ_IsConversionOngoing>
 800286e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002872:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 81d9 	bne.w	8002c2e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800287c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002880:	2b00      	cmp	r3, #0
 8002882:	f040 81d4 	bne.w	8002c2e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800288e:	d10f      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2200      	movs	r2, #0
 800289a:	4619      	mov	r1, r3
 800289c:	f7ff fd58 	bl	8002350 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fd12 	bl	80022d2 <LL_ADC_SetSamplingTimeCommonConfig>
 80028ae:	e00e      	b.n	80028ce <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6819      	ldr	r1, [r3, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	461a      	mov	r2, r3
 80028be:	f7ff fd47 	bl	8002350 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fd02 	bl	80022d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	08db      	lsrs	r3, r3, #3
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d022      	beq.n	8002936 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6919      	ldr	r1, [r3, #16]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002900:	f7ff fc5c 	bl	80021bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6919      	ldr	r1, [r3, #16]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	461a      	mov	r2, r3
 8002912:	f7ff fca8 	bl	8002266 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002922:	2b01      	cmp	r3, #1
 8002924:	d102      	bne.n	800292c <HAL_ADC_ConfigChannel+0x124>
 8002926:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800292a:	e000      	b.n	800292e <HAL_ADC_ConfigChannel+0x126>
 800292c:	2300      	movs	r3, #0
 800292e:	461a      	mov	r2, r3
 8002930:	f7ff fcb4 	bl	800229c <LL_ADC_SetOffsetSaturation>
 8002934:	e17b      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fc61 	bl	8002204 <LL_ADC_GetOffsetChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x15a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fc56 	bl	8002204 <LL_ADC_GetOffsetChannel>
 8002958:	4603      	mov	r3, r0
 800295a:	0e9b      	lsrs	r3, r3, #26
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	e01e      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x198>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fc4b 	bl	8002204 <LL_ADC_GetOffsetChannel>
 800296e:	4603      	mov	r3, r0
 8002970:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002984:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002988:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e004      	b.n	800299e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002994:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1b0>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	e018      	b.n	80029ea <HAL_ADC_ConfigChannel+0x1e2>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80029cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80029d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80029dc:	2320      	movs	r3, #32
 80029de:	e004      	b.n	80029ea <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80029e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d106      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fc1a 	bl	8002230 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2101      	movs	r1, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fbfe 	bl	8002204 <LL_ADC_GetOffsetChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x220>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2101      	movs	r1, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fbf3 	bl	8002204 <LL_ADC_GetOffsetChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	0e9b      	lsrs	r3, r3, #26
 8002a22:	f003 021f 	and.w	r2, r3, #31
 8002a26:	e01e      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x25e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fbe8 	bl	8002204 <LL_ADC_GetOffsetChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002a4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e004      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002a5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x276>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0e9b      	lsrs	r3, r3, #26
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	e018      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x2a8>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	e004      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002aa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d106      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2101      	movs	r1, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fbb7 	bl	8002230 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fb9b 	bl	8002204 <LL_ADC_GetOffsetChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x2e6>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2102      	movs	r1, #2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fb90 	bl	8002204 <LL_ADC_GetOffsetChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	0e9b      	lsrs	r3, r3, #26
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	e01e      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x324>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2102      	movs	r1, #2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fb85 	bl	8002204 <LL_ADC_GetOffsetChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	e004      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x33c>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0e9b      	lsrs	r3, r3, #26
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	e016      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x36a>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002b56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002b64:	2320      	movs	r3, #32
 8002b66:	e004      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d106      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fb56 	bl	8002230 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2103      	movs	r1, #3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fb3a 	bl	8002204 <LL_ADC_GetOffsetChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x3a8>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2103      	movs	r1, #3
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fb2f 	bl	8002204 <LL_ADC_GetOffsetChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	0e9b      	lsrs	r3, r3, #26
 8002baa:	f003 021f 	and.w	r2, r3, #31
 8002bae:	e017      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x3d8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2103      	movs	r1, #3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fb24 	bl	8002204 <LL_ADC_GetOffsetChannel>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002bc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bca:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002bcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	e003      	b.n	8002bde <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002bd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x3f0>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0e9b      	lsrs	r3, r3, #26
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	e011      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x414>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002c06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c08:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002c10:	2320      	movs	r3, #32
 8002c12:	e003      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d106      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2200      	movs	r2, #0
 8002c26:	2103      	movs	r1, #3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fb01 	bl	8002230 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fc2a 	bl	800248c <LL_ADC_IsEnabled>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 8140 	bne.w	8002ec0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6819      	ldr	r1, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f7ff fbab 	bl	80023a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4a8f      	ldr	r2, [pc, #572]	@ (8002e94 <HAL_ADC_ConfigChannel+0x68c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	f040 8131 	bne.w	8002ec0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10b      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x47e>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	3301      	adds	r3, #1
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	2b09      	cmp	r3, #9
 8002c7c:	bf94      	ite	ls
 8002c7e:	2301      	movls	r3, #1
 8002c80:	2300      	movhi	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	e019      	b.n	8002cba <HAL_ADC_ConfigChannel+0x4b2>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c96:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	e003      	b.n	8002caa <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002ca2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	3301      	adds	r3, #1
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	2b09      	cmp	r3, #9
 8002cb2:	bf94      	ite	ls
 8002cb4:	2301      	movls	r3, #1
 8002cb6:	2300      	movhi	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d079      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d107      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x4d2>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	069b      	lsls	r3, r3, #26
 8002cd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cd8:	e015      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x4fe>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e003      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	069b      	lsls	r3, r3, #26
 8002d02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x51e>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0e9b      	lsrs	r3, r3, #26
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	e017      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x54e>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d36:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002d3e:	2320      	movs	r3, #32
 8002d40:	e003      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	ea42 0103 	orr.w	r1, r2, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x574>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0e9b      	lsrs	r3, r3, #26
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 021f 	and.w	r2, r3, #31
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	051b      	lsls	r3, r3, #20
 8002d7a:	e018      	b.n	8002dae <HAL_ADC_ConfigChannel+0x5a6>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e003      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	f003 021f 	and.w	r2, r3, #31
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dae:	430b      	orrs	r3, r1
 8002db0:	e081      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d107      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x5c6>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	0e9b      	lsrs	r3, r3, #26
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	069b      	lsls	r3, r3, #26
 8002dc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dcc:	e015      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x5f2>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dde:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002de6:	2320      	movs	r3, #32
 8002de8:	e003      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	069b      	lsls	r3, r3, #26
 8002df6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x612>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	0e9b      	lsrs	r3, r3, #26
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	2101      	movs	r1, #1
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	e017      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x642>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	61fb      	str	r3, [r7, #28]
  return result;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002e32:	2320      	movs	r3, #32
 8002e34:	e003      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2101      	movs	r1, #1
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	ea42 0103 	orr.w	r1, r2, r3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x66e>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	0e9b      	lsrs	r3, r3, #26
 8002e60:	3301      	adds	r3, #1
 8002e62:	f003 021f 	and.w	r2, r3, #31
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3b1e      	subs	r3, #30
 8002e6e:	051b      	lsls	r3, r3, #20
 8002e70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e74:	e01e      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x6ac>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	613b      	str	r3, [r7, #16]
  return result;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d104      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	e006      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x698>
 8002e92:	bf00      	nop
 8002e94:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f003 021f 	and.w	r2, r3, #31
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b1e      	subs	r3, #30
 8002eae:	051b      	lsls	r3, r3, #20
 8002eb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eb4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f7ff fa48 	bl	8002350 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d071      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ecc:	483e      	ldr	r0, [pc, #248]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ece:	f7ff f967 	bl	80021a0 <LL_ADC_GetCommonPathInternalCh>
 8002ed2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a3c      	ldr	r2, [pc, #240]	@ (8002fcc <HAL_ADC_ConfigChannel+0x7c4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_ADC_ConfigChannel+0x6e2>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a3a      	ldr	r2, [pc, #232]	@ (8002fd0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d127      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d121      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002efe:	d157      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f08:	4619      	mov	r1, r3
 8002f0a:	482f      	ldr	r0, [pc, #188]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f0c:	f7ff f935 	bl	800217a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f10:	4b30      	ldr	r3, [pc, #192]	@ (8002fd4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	4a30      	ldr	r2, [pc, #192]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	099b      	lsrs	r3, r3, #6
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f2a:	e002      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f9      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f38:	e03a      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a27      	ldr	r2, [pc, #156]	@ (8002fdc <HAL_ADC_ConfigChannel+0x7d4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d113      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10d      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a22      	ldr	r2, [pc, #136]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d02a      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f62:	4619      	mov	r1, r3
 8002f64:	4818      	ldr	r0, [pc, #96]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f66:	f7ff f908 	bl	800217a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f6a:	e021      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d11c      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d116      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a16      	ldr	r2, [pc, #88]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d011      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f94:	4619      	mov	r1, r3
 8002f96:	480c      	ldr	r0, [pc, #48]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f98:	f7ff f8ef 	bl	800217a <LL_ADC_SetCommonPathInternalCh>
 8002f9c:	e008      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fb8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	37d8      	adds	r7, #216	@ 0xd8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	80080000 	.word	0x80080000
 8002fc8:	50000300 	.word	0x50000300
 8002fcc:	c3210000 	.word	0xc3210000
 8002fd0:	90c00010 	.word	0x90c00010
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	053e2d63 	.word	0x053e2d63
 8002fdc:	c7520000 	.word	0xc7520000
 8002fe0:	50000100 	.word	0x50000100
 8002fe4:	cb840000 	.word	0xcb840000

08002fe8 <LL_ADC_IsEnabled>:
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <LL_ADC_IsEnabled+0x18>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <LL_ADC_IsEnabled+0x1a>
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_ADC_REG_IsConversionOngoing>:
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b04      	cmp	r3, #4
 8003020:	d101      	bne.n	8003026 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b0a1      	sub	sp, #132	@ 0x84
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800304e:	2302      	movs	r3, #2
 8003050:	e08b      	b.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800305a:	2300      	movs	r3, #0
 800305c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800305e:	2300      	movs	r3, #0
 8003060:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800306a:	d102      	bne.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800306c:	4b41      	ldr	r3, [pc, #260]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	e001      	b.n	8003076 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10b      	bne.n	8003094 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003080:	f043 0220 	orr.w	r2, r3, #32
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e06a      	b.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ffb9 	bl	800300e <LL_ADC_REG_IsConversionOngoing>
 800309c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff ffb3 	bl	800300e <LL_ADC_REG_IsConversionOngoing>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d14c      	bne.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80030ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d149      	bne.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030b4:	4b30      	ldr	r3, [pc, #192]	@ (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80030b6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d028      	beq.n	8003112 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030d2:	035b      	lsls	r3, r3, #13
 80030d4:	430b      	orrs	r3, r1
 80030d6:	431a      	orrs	r2, r3
 80030d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80030e0:	f7ff ff82 	bl	8002fe8 <LL_ADC_IsEnabled>
 80030e4:	4604      	mov	r4, r0
 80030e6:	4823      	ldr	r0, [pc, #140]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030e8:	f7ff ff7e 	bl	8002fe8 <LL_ADC_IsEnabled>
 80030ec:	4603      	mov	r3, r0
 80030ee:	4323      	orrs	r3, r4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d133      	bne.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030fc:	f023 030f 	bic.w	r3, r3, #15
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	6811      	ldr	r1, [r2, #0]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	6892      	ldr	r2, [r2, #8]
 8003108:	430a      	orrs	r2, r1
 800310a:	431a      	orrs	r2, r3
 800310c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800310e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003110:	e024      	b.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003112:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800311a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800311c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800311e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003122:	f7ff ff61 	bl	8002fe8 <LL_ADC_IsEnabled>
 8003126:	4604      	mov	r4, r0
 8003128:	4812      	ldr	r0, [pc, #72]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800312a:	f7ff ff5d 	bl	8002fe8 <LL_ADC_IsEnabled>
 800312e:	4603      	mov	r3, r0
 8003130:	4323      	orrs	r3, r4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d112      	bne.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800313e:	f023 030f 	bic.w	r3, r3, #15
 8003142:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003144:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003146:	e009      	b.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800315a:	e000      	b.n	800315e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800315c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003166:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800316a:	4618      	mov	r0, r3
 800316c:	3784      	adds	r7, #132	@ 0x84
 800316e:	46bd      	mov	sp, r7
 8003170:	bd90      	pop	{r4, r7, pc}
 8003172:	bf00      	nop
 8003174:	50000100 	.word	0x50000100
 8003178:	50000300 	.word	0x50000300

0800317c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800318c:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <__NVIC_SetPriorityGrouping+0x44>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003198:	4013      	ands	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ae:	4a04      	ldr	r2, [pc, #16]	@ (80031c0 <__NVIC_SetPriorityGrouping+0x44>)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	60d3      	str	r3, [r2, #12]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c8:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <__NVIC_GetPriorityGrouping+0x18>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	f003 0307 	and.w	r3, r3, #7
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	6039      	str	r1, [r7, #0]
 80031ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	db0a      	blt.n	800320a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	490c      	ldr	r1, [pc, #48]	@ (800322c <__NVIC_SetPriority+0x4c>)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	0112      	lsls	r2, r2, #4
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	440b      	add	r3, r1
 8003204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003208:	e00a      	b.n	8003220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	b2da      	uxtb	r2, r3
 800320e:	4908      	ldr	r1, [pc, #32]	@ (8003230 <__NVIC_SetPriority+0x50>)
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	3b04      	subs	r3, #4
 8003218:	0112      	lsls	r2, r2, #4
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	440b      	add	r3, r1
 800321e:	761a      	strb	r2, [r3, #24]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000e100 	.word	0xe000e100
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	@ 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f1c3 0307 	rsb	r3, r3, #7
 800324e:	2b04      	cmp	r3, #4
 8003250:	bf28      	it	cs
 8003252:	2304      	movcs	r3, #4
 8003254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3304      	adds	r3, #4
 800325a:	2b06      	cmp	r3, #6
 800325c:	d902      	bls.n	8003264 <NVIC_EncodePriority+0x30>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3b03      	subs	r3, #3
 8003262:	e000      	b.n	8003266 <NVIC_EncodePriority+0x32>
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43da      	mvns	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	401a      	ands	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800327c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	43d9      	mvns	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	4313      	orrs	r3, r2
         );
}
 800328e:	4618      	mov	r0, r3
 8003290:	3724      	adds	r7, #36	@ 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032ac:	d301      	bcc.n	80032b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ae:	2301      	movs	r3, #1
 80032b0:	e00f      	b.n	80032d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b2:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <SysTick_Config+0x40>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ba:	210f      	movs	r1, #15
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032c0:	f7ff ff8e 	bl	80031e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c4:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <SysTick_Config+0x40>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ca:	4b04      	ldr	r3, [pc, #16]	@ (80032dc <SysTick_Config+0x40>)
 80032cc:	2207      	movs	r2, #7
 80032ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	e000e010 	.word	0xe000e010

080032e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ff47 	bl	800317c <__NVIC_SetPriorityGrouping>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003304:	f7ff ff5e 	bl	80031c4 <__NVIC_GetPriorityGrouping>
 8003308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	f7ff ff90 	bl	8003234 <NVIC_EncodePriority>
 8003314:	4602      	mov	r2, r0
 8003316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff5f 	bl	80031e0 <__NVIC_SetPriority>
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ffb2 	bl	800329c <SysTick_Config>
 8003338:	4603      	mov	r3, r0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003352:	e15a      	b.n	800360a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2101      	movs	r1, #1
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	4013      	ands	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 814c 	beq.w	8003604 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d005      	beq.n	8003384 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003380:	2b02      	cmp	r3, #2
 8003382:	d130      	bne.n	80033e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ba:	2201      	movs	r2, #1
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 0201 	and.w	r2, r3, #1
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d017      	beq.n	8003422 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	2203      	movs	r2, #3
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d123      	bne.n	8003476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	08da      	lsrs	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	220f      	movs	r2, #15
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	08da      	lsrs	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3208      	adds	r2, #8
 8003470:	6939      	ldr	r1, [r7, #16]
 8003472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	2203      	movs	r2, #3
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0203 	and.w	r2, r3, #3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80a6 	beq.w	8003604 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b8:	4b5b      	ldr	r3, [pc, #364]	@ (8003628 <HAL_GPIO_Init+0x2e4>)
 80034ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003628 <HAL_GPIO_Init+0x2e4>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80034c4:	4b58      	ldr	r3, [pc, #352]	@ (8003628 <HAL_GPIO_Init+0x2e4>)
 80034c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034d0:	4a56      	ldr	r2, [pc, #344]	@ (800362c <HAL_GPIO_Init+0x2e8>)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	3302      	adds	r3, #2
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	220f      	movs	r2, #15
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034fa:	d01f      	beq.n	800353c <HAL_GPIO_Init+0x1f8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003630 <HAL_GPIO_Init+0x2ec>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d019      	beq.n	8003538 <HAL_GPIO_Init+0x1f4>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a4b      	ldr	r2, [pc, #300]	@ (8003634 <HAL_GPIO_Init+0x2f0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <HAL_GPIO_Init+0x1f0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a4a      	ldr	r2, [pc, #296]	@ (8003638 <HAL_GPIO_Init+0x2f4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00d      	beq.n	8003530 <HAL_GPIO_Init+0x1ec>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a49      	ldr	r2, [pc, #292]	@ (800363c <HAL_GPIO_Init+0x2f8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <HAL_GPIO_Init+0x1e8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a48      	ldr	r2, [pc, #288]	@ (8003640 <HAL_GPIO_Init+0x2fc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d101      	bne.n	8003528 <HAL_GPIO_Init+0x1e4>
 8003524:	2305      	movs	r3, #5
 8003526:	e00a      	b.n	800353e <HAL_GPIO_Init+0x1fa>
 8003528:	2306      	movs	r3, #6
 800352a:	e008      	b.n	800353e <HAL_GPIO_Init+0x1fa>
 800352c:	2304      	movs	r3, #4
 800352e:	e006      	b.n	800353e <HAL_GPIO_Init+0x1fa>
 8003530:	2303      	movs	r3, #3
 8003532:	e004      	b.n	800353e <HAL_GPIO_Init+0x1fa>
 8003534:	2302      	movs	r3, #2
 8003536:	e002      	b.n	800353e <HAL_GPIO_Init+0x1fa>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_GPIO_Init+0x1fa>
 800353c:	2300      	movs	r3, #0
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	f002 0203 	and.w	r2, r2, #3
 8003544:	0092      	lsls	r2, r2, #2
 8003546:	4093      	lsls	r3, r2
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800354e:	4937      	ldr	r1, [pc, #220]	@ (800362c <HAL_GPIO_Init+0x2e8>)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	089b      	lsrs	r3, r3, #2
 8003554:	3302      	adds	r3, #2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800355c:	4b39      	ldr	r3, [pc, #228]	@ (8003644 <HAL_GPIO_Init+0x300>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	43db      	mvns	r3, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003580:	4a30      	ldr	r2, [pc, #192]	@ (8003644 <HAL_GPIO_Init+0x300>)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003586:	4b2f      	ldr	r3, [pc, #188]	@ (8003644 <HAL_GPIO_Init+0x300>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	43db      	mvns	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035aa:	4a26      	ldr	r2, [pc, #152]	@ (8003644 <HAL_GPIO_Init+0x300>)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80035b0:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <HAL_GPIO_Init+0x300>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003644 <HAL_GPIO_Init+0x300>)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035da:	4b1a      	ldr	r3, [pc, #104]	@ (8003644 <HAL_GPIO_Init+0x300>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035fe:	4a11      	ldr	r2, [pc, #68]	@ (8003644 <HAL_GPIO_Init+0x300>)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3301      	adds	r3, #1
 8003608:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	f47f ae9d 	bne.w	8003354 <HAL_GPIO_Init+0x10>
  }
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	40021000 	.word	0x40021000
 800362c:	40010000 	.word	0x40010000
 8003630:	48000400 	.word	0x48000400
 8003634:	48000800 	.word	0x48000800
 8003638:	48000c00 	.word	0x48000c00
 800363c:	48001000 	.word	0x48001000
 8003640:	48001400 	.word	0x48001400
 8003644:	40010400 	.word	0x40010400

08003648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
 8003654:	4613      	mov	r3, r2
 8003656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003658:	787b      	ldrb	r3, [r7, #1]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800365e:	887a      	ldrh	r2, [r7, #2]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003664:	e002      	b.n	800366c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003666:	887a      	ldrh	r2, [r7, #2]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e08d      	b.n	80037a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fe fa42 	bl	8001b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2224      	movs	r2, #36	@ 0x24
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d107      	bne.n	80036f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	e006      	b.n	8003700 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d108      	bne.n	800371a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003716:	605a      	str	r2, [r3, #4]
 8003718:	e007      	b.n	800372a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003728:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003738:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800373c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800374c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69d9      	ldr	r1, [r3, #28]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1a      	ldr	r2, [r3, #32]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	461a      	mov	r2, r3
 80037bc:	460b      	mov	r3, r1
 80037be:	817b      	strh	r3, [r7, #10]
 80037c0:	4613      	mov	r3, r2
 80037c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	f040 80fd 	bne.w	80039cc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_I2C_Master_Transmit+0x30>
 80037dc:	2302      	movs	r3, #2
 80037de:	e0f6      	b.n	80039ce <HAL_I2C_Master_Transmit+0x21e>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037e8:	f7fe fc86 	bl	80020f8 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	2319      	movs	r3, #25
 80037f4:	2201      	movs	r2, #1
 80037f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa0a 	bl	8003c14 <I2C_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e0e1      	b.n	80039ce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2221      	movs	r2, #33	@ 0x21
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2210      	movs	r2, #16
 8003816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	893a      	ldrh	r2, [r7, #8]
 800382a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	2bff      	cmp	r3, #255	@ 0xff
 800383a:	d906      	bls.n	800384a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	22ff      	movs	r2, #255	@ 0xff
 8003840:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003842:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e007      	b.n	800385a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003854:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003858:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385e:	2b00      	cmp	r3, #0
 8003860:	d024      	beq.n	80038ac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	b2db      	uxtb	r3, r3
 8003898:	3301      	adds	r3, #1
 800389a:	b2da      	uxtb	r2, r3
 800389c:	8979      	ldrh	r1, [r7, #10]
 800389e:	4b4e      	ldr	r3, [pc, #312]	@ (80039d8 <HAL_I2C_Master_Transmit+0x228>)
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fc05 	bl	80040b4 <I2C_TransferConfig>
 80038aa:	e066      	b.n	800397a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	8979      	ldrh	r1, [r7, #10]
 80038b4:	4b48      	ldr	r3, [pc, #288]	@ (80039d8 <HAL_I2C_Master_Transmit+0x228>)
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fbfa 	bl	80040b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80038c0:	e05b      	b.n	800397a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	6a39      	ldr	r1, [r7, #32]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f9fd 	bl	8003cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e07b      	b.n	80039ce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d034      	beq.n	800397a <HAL_I2C_Master_Transmit+0x1ca>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	d130      	bne.n	800397a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	2200      	movs	r2, #0
 8003920:	2180      	movs	r1, #128	@ 0x80
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f976 	bl	8003c14 <I2C_WaitOnFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e04d      	b.n	80039ce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	2bff      	cmp	r3, #255	@ 0xff
 800393a:	d90e      	bls.n	800395a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	22ff      	movs	r2, #255	@ 0xff
 8003940:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003946:	b2da      	uxtb	r2, r3
 8003948:	8979      	ldrh	r1, [r7, #10]
 800394a:	2300      	movs	r3, #0
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fbae 	bl	80040b4 <I2C_TransferConfig>
 8003958:	e00f      	b.n	800397a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003968:	b2da      	uxtb	r2, r3
 800396a:	8979      	ldrh	r1, [r7, #10]
 800396c:	2300      	movs	r3, #0
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fb9d 	bl	80040b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d19e      	bne.n	80038c2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	6a39      	ldr	r1, [r7, #32]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f9e3 	bl	8003d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e01a      	b.n	80039ce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2220      	movs	r2, #32
 800399e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6859      	ldr	r1, [r3, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b0c      	ldr	r3, [pc, #48]	@ (80039dc <HAL_I2C_Master_Transmit+0x22c>)
 80039ac:	400b      	ands	r3, r1
 80039ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	80002000 	.word	0x80002000
 80039dc:	fe00e800 	.word	0xfe00e800

080039e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	461a      	mov	r2, r3
 80039ec:	460b      	mov	r3, r1
 80039ee:	817b      	strh	r3, [r7, #10]
 80039f0:	4613      	mov	r3, r2
 80039f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	f040 80db 	bne.w	8003bb8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_I2C_Master_Receive+0x30>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e0d4      	b.n	8003bba <HAL_I2C_Master_Receive+0x1da>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a18:	f7fe fb6e 	bl	80020f8 <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2319      	movs	r3, #25
 8003a24:	2201      	movs	r2, #1
 8003a26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f8f2 	bl	8003c14 <I2C_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e0bf      	b.n	8003bba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2222      	movs	r2, #34	@ 0x22
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2210      	movs	r2, #16
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	893a      	ldrh	r2, [r7, #8]
 8003a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2bff      	cmp	r3, #255	@ 0xff
 8003a6a:	d90e      	bls.n	8003a8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	22ff      	movs	r2, #255	@ 0xff
 8003a70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	8979      	ldrh	r1, [r7, #10]
 8003a7a:	4b52      	ldr	r3, [pc, #328]	@ (8003bc4 <HAL_I2C_Master_Receive+0x1e4>)
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fb16 	bl	80040b4 <I2C_TransferConfig>
 8003a88:	e06d      	b.n	8003b66 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	8979      	ldrh	r1, [r7, #10]
 8003a9c:	4b49      	ldr	r3, [pc, #292]	@ (8003bc4 <HAL_I2C_Master_Receive+0x1e4>)
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fb05 	bl	80040b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003aaa:	e05c      	b.n	8003b66 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	6a39      	ldr	r1, [r7, #32]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f993 	bl	8003ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e07c      	b.n	8003bba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d034      	beq.n	8003b66 <HAL_I2C_Master_Receive+0x186>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d130      	bne.n	8003b66 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2180      	movs	r1, #128	@ 0x80
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f880 	bl	8003c14 <I2C_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e04d      	b.n	8003bba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2bff      	cmp	r3, #255	@ 0xff
 8003b26:	d90e      	bls.n	8003b46 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	22ff      	movs	r2, #255	@ 0xff
 8003b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	8979      	ldrh	r1, [r7, #10]
 8003b36:	2300      	movs	r3, #0
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fab8 	bl	80040b4 <I2C_TransferConfig>
 8003b44:	e00f      	b.n	8003b66 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	8979      	ldrh	r1, [r7, #10]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 faa7 	bl	80040b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d19d      	bne.n	8003aac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	6a39      	ldr	r1, [r7, #32]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f8ed 	bl	8003d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e01a      	b.n	8003bba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6859      	ldr	r1, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <HAL_I2C_Master_Receive+0x1e8>)
 8003b98:	400b      	ands	r3, r1
 8003b9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e000      	b.n	8003bba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
  }
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	80002400 	.word	0x80002400
 8003bc8:	fe00e800 	.word	0xfe00e800

08003bcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d103      	bne.n	8003bea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2200      	movs	r2, #0
 8003be8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d007      	beq.n	8003c08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	619a      	str	r2, [r3, #24]
  }
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c24:	e03b      	b.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	6839      	ldr	r1, [r7, #0]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f962 	bl	8003ef4 <I2C_IsErrorOccurred>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e041      	b.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c40:	d02d      	beq.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7fe fa59 	bl	80020f8 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d122      	bne.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4013      	ands	r3, r2
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d113      	bne.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	f043 0220 	orr.w	r2, r3, #32
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e00f      	b.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	bf0c      	ite	eq
 8003cae:	2301      	moveq	r3, #1
 8003cb0:	2300      	movne	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d0b4      	beq.n	8003c26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cd2:	e033      	b.n	8003d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f90b 	bl	8003ef4 <I2C_IsErrorOccurred>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e031      	b.n	8003d4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cee:	d025      	beq.n	8003d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf0:	f7fe fa02 	bl	80020f8 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d302      	bcc.n	8003d06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11a      	bne.n	8003d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d013      	beq.n	8003d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d18:	f043 0220 	orr.w	r2, r3, #32
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e007      	b.n	8003d4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d1c4      	bne.n	8003cd4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d60:	e02f      	b.n	8003dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f8c4 	bl	8003ef4 <I2C_IsErrorOccurred>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e02d      	b.n	8003dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7fe f9bf 	bl	80020f8 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d11a      	bne.n	8003dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d013      	beq.n	8003dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e007      	b.n	8003dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d1c8      	bne.n	8003d62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003dec:	e071      	b.n	8003ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f87e 	bl	8003ef4 <I2C_IsErrorOccurred>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d13b      	bne.n	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d138      	bne.n	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d105      	bne.n	8003e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b10      	cmp	r3, #16
 8003e3c:	d121      	bne.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2210      	movs	r2, #16
 8003e44:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2220      	movs	r2, #32
 8003e52:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6859      	ldr	r1, [r3, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b24      	ldr	r3, [pc, #144]	@ (8003ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003e60:	400b      	ands	r3, r1
 8003e62:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	75fb      	strb	r3, [r7, #23]
 8003e80:	e002      	b.n	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003e88:	f7fe f936 	bl	80020f8 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d302      	bcc.n	8003e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d119      	bne.n	8003ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d116      	bne.n	8003ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d00f      	beq.n	8003ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb6:	f043 0220 	orr.w	r2, r3, #32
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d002      	beq.n	8003ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d083      	beq.n	8003dee <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	fe00e800 	.word	0xfe00e800

08003ef4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	@ 0x28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d068      	beq.n	8003ff2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2210      	movs	r2, #16
 8003f26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f28:	e049      	b.n	8003fbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f30:	d045      	beq.n	8003fbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7fe f8e1 	bl	80020f8 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <I2C_IsErrorOccurred+0x54>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d13a      	bne.n	8003fbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f6a:	d121      	bne.n	8003fb0 <I2C_IsErrorOccurred+0xbc>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f72:	d01d      	beq.n	8003fb0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f74:	7cfb      	ldrb	r3, [r7, #19]
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d01a      	beq.n	8003fb0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f8a:	f7fe f8b5 	bl	80020f8 <HAL_GetTick>
 8003f8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f90:	e00e      	b.n	8003fb0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f92:	f7fe f8b1 	bl	80020f8 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b19      	cmp	r3, #25
 8003f9e:	d907      	bls.n	8003fb0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	f043 0320 	orr.w	r3, r3, #32
 8003fa6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003fae:	e006      	b.n	8003fbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	d1e9      	bne.n	8003f92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d003      	beq.n	8003fd4 <I2C_IsErrorOccurred+0xe0>
 8003fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0aa      	beq.n	8003f2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d103      	bne.n	8003fe4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f043 0304 	orr.w	r3, r3, #4
 8003fea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00b      	beq.n	800401c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004014:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f043 0308 	orr.w	r3, r3, #8
 800402c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004036:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00b      	beq.n	8004060 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	f043 0302 	orr.w	r3, r3, #2
 800404e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004058:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004060:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01c      	beq.n	80040a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff fdaf 	bl	8003bcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6859      	ldr	r1, [r3, #4]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b0d      	ldr	r3, [pc, #52]	@ (80040b0 <I2C_IsErrorOccurred+0x1bc>)
 800407a:	400b      	ands	r3, r1
 800407c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	431a      	orrs	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80040a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3728      	adds	r7, #40	@ 0x28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	fe00e800 	.word	0xfe00e800

080040b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	460b      	mov	r3, r1
 80040c0:	817b      	strh	r3, [r7, #10]
 80040c2:	4613      	mov	r3, r2
 80040c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040c6:	897b      	ldrh	r3, [r7, #10]
 80040c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040cc:	7a7b      	ldrb	r3, [r7, #9]
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	4313      	orrs	r3, r2
 80040de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	0d5b      	lsrs	r3, r3, #21
 80040ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80040f2:	4b08      	ldr	r3, [pc, #32]	@ (8004114 <I2C_TransferConfig+0x60>)
 80040f4:	430b      	orrs	r3, r1
 80040f6:	43db      	mvns	r3, r3
 80040f8:	ea02 0103 	and.w	r1, r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	03ff63ff 	.word	0x03ff63ff

08004118 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b20      	cmp	r3, #32
 800412c:	d138      	bne.n	80041a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004138:	2302      	movs	r3, #2
 800413a:	e032      	b.n	80041a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	@ 0x24
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800416a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6819      	ldr	r1, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	e000      	b.n	80041a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
  }
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d139      	bne.n	8004238 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e033      	b.n	800423a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2224      	movs	r2, #36	@ 0x24
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004200:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	e000      	b.n	800423a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004238:	2302      	movs	r3, #2
  }
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d141      	bne.n	80042da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004256:	4b4b      	ldr	r3, [pc, #300]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800425e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004262:	d131      	bne.n	80042c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004264:	4b47      	ldr	r3, [pc, #284]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800426a:	4a46      	ldr	r2, [pc, #280]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004270:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004274:	4b43      	ldr	r3, [pc, #268]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800427c:	4a41      	ldr	r2, [pc, #260]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004282:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004284:	4b40      	ldr	r3, [pc, #256]	@ (8004388 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2232      	movs	r2, #50	@ 0x32
 800428a:	fb02 f303 	mul.w	r3, r2, r3
 800428e:	4a3f      	ldr	r2, [pc, #252]	@ (800438c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	0c9b      	lsrs	r3, r3, #18
 8004296:	3301      	adds	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800429a:	e002      	b.n	80042a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3b01      	subs	r3, #1
 80042a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042a2:	4b38      	ldr	r3, [pc, #224]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ae:	d102      	bne.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f2      	bne.n	800429c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042b6:	4b33      	ldr	r3, [pc, #204]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c2:	d158      	bne.n	8004376 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e057      	b.n	8004378 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042d8:	e04d      	b.n	8004376 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042e0:	d141      	bne.n	8004366 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042e2:	4b28      	ldr	r3, [pc, #160]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ee:	d131      	bne.n	8004354 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042f0:	4b24      	ldr	r3, [pc, #144]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042f6:	4a23      	ldr	r2, [pc, #140]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004300:	4b20      	ldr	r3, [pc, #128]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004308:	4a1e      	ldr	r2, [pc, #120]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800430e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004310:	4b1d      	ldr	r3, [pc, #116]	@ (8004388 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2232      	movs	r2, #50	@ 0x32
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	4a1c      	ldr	r2, [pc, #112]	@ (800438c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	0c9b      	lsrs	r3, r3, #18
 8004322:	3301      	adds	r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004326:	e002      	b.n	800432e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3b01      	subs	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800432e:	4b15      	ldr	r3, [pc, #84]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433a:	d102      	bne.n	8004342 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f2      	bne.n	8004328 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004342:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800434e:	d112      	bne.n	8004376 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e011      	b.n	8004378 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004354:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800435a:	4a0a      	ldr	r2, [pc, #40]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004360:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004364:	e007      	b.n	8004376 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004366:	4b07      	ldr	r3, [pc, #28]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800436e:	4a05      	ldr	r2, [pc, #20]	@ (8004384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004370:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004374:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	40007000 	.word	0x40007000
 8004388:	20000000 	.word	0x20000000
 800438c:	431bde83 	.word	0x431bde83

08004390 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004394:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a04      	ldr	r2, [pc, #16]	@ (80043ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800439a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800439e:	6093      	str	r3, [r2, #8]
}
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40007000 	.word	0x40007000

080043b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e2fe      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d075      	beq.n	80044ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ce:	4b97      	ldr	r3, [pc, #604]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043d8:	4b94      	ldr	r3, [pc, #592]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	d102      	bne.n	80043ee <HAL_RCC_OscConfig+0x3e>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d002      	beq.n	80043f4 <HAL_RCC_OscConfig+0x44>
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d10b      	bne.n	800440c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f4:	4b8d      	ldr	r3, [pc, #564]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d05b      	beq.n	80044b8 <HAL_RCC_OscConfig+0x108>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d157      	bne.n	80044b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e2d9      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004414:	d106      	bne.n	8004424 <HAL_RCC_OscConfig+0x74>
 8004416:	4b85      	ldr	r3, [pc, #532]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a84      	ldr	r2, [pc, #528]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	e01d      	b.n	8004460 <HAL_RCC_OscConfig+0xb0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x98>
 800442e:	4b7f      	ldr	r3, [pc, #508]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7e      	ldr	r2, [pc, #504]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b7c      	ldr	r3, [pc, #496]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a7b      	ldr	r2, [pc, #492]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0xb0>
 8004448:	4b78      	ldr	r3, [pc, #480]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a77      	ldr	r2, [pc, #476]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 800444e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b75      	ldr	r3, [pc, #468]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a74      	ldr	r2, [pc, #464]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 800445a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800445e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d013      	beq.n	8004490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fd fe46 	bl	80020f8 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004470:	f7fd fe42 	bl	80020f8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	@ 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e29e      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004482:	4b6a      	ldr	r3, [pc, #424]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0xc0>
 800448e:	e014      	b.n	80044ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fd fe32 	bl	80020f8 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004498:	f7fd fe2e 	bl	80020f8 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b64      	cmp	r3, #100	@ 0x64
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e28a      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044aa:	4b60      	ldr	r3, [pc, #384]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0xe8>
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d075      	beq.n	80045b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044c6:	4b59      	ldr	r3, [pc, #356]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044d0:	4b56      	ldr	r3, [pc, #344]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b0c      	cmp	r3, #12
 80044de:	d102      	bne.n	80044e6 <HAL_RCC_OscConfig+0x136>
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d002      	beq.n	80044ec <HAL_RCC_OscConfig+0x13c>
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d11f      	bne.n	800452c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ec:	4b4f      	ldr	r3, [pc, #316]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_RCC_OscConfig+0x154>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e25d      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004504:	4b49      	ldr	r3, [pc, #292]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	061b      	lsls	r3, r3, #24
 8004512:	4946      	ldr	r1, [pc, #280]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004518:	4b45      	ldr	r3, [pc, #276]	@ (8004630 <HAL_RCC_OscConfig+0x280>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f7fd fd9f 	bl	8002060 <HAL_InitTick>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d043      	beq.n	80045b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e249      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d023      	beq.n	800457c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004534:	4b3d      	ldr	r3, [pc, #244]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a3c      	ldr	r2, [pc, #240]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 800453a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fd fdda 	bl	80020f8 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004548:	f7fd fdd6 	bl	80020f8 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e232      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800455a:	4b34      	ldr	r3, [pc, #208]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004566:	4b31      	ldr	r3, [pc, #196]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	061b      	lsls	r3, r3, #24
 8004574:	492d      	ldr	r1, [pc, #180]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004576:	4313      	orrs	r3, r2
 8004578:	604b      	str	r3, [r1, #4]
 800457a:	e01a      	b.n	80045b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800457c:	4b2b      	ldr	r3, [pc, #172]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a2a      	ldr	r2, [pc, #168]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004582:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd fdb6 	bl	80020f8 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004590:	f7fd fdb2 	bl	80020f8 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e20e      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045a2:	4b22      	ldr	r3, [pc, #136]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x1e0>
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d041      	beq.n	8004642 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01c      	beq.n	8004600 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045c6:	4b19      	ldr	r3, [pc, #100]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 80045c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045cc:	4a17      	ldr	r2, [pc, #92]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d6:	f7fd fd8f 	bl	80020f8 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045de:	f7fd fd8b 	bl	80020f8 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e1e7      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045f0:	4b0e      	ldr	r3, [pc, #56]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 80045f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0ef      	beq.n	80045de <HAL_RCC_OscConfig+0x22e>
 80045fe:	e020      	b.n	8004642 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004600:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004606:	4a09      	ldr	r2, [pc, #36]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fd fd72 	bl	80020f8 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004616:	e00d      	b.n	8004634 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004618:	f7fd fd6e 	bl	80020f8 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d906      	bls.n	8004634 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e1ca      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
 8004630:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004634:	4b8c      	ldr	r3, [pc, #560]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 8004636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ea      	bne.n	8004618 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 80a6 	beq.w	800479c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004650:	2300      	movs	r3, #0
 8004652:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004654:	4b84      	ldr	r3, [pc, #528]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 8004656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCC_OscConfig+0x2b4>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x2b6>
 8004664:	2300      	movs	r3, #0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	4b7f      	ldr	r3, [pc, #508]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 800466c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466e:	4a7e      	ldr	r2, [pc, #504]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004674:	6593      	str	r3, [r2, #88]	@ 0x58
 8004676:	4b7c      	ldr	r3, [pc, #496]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004682:	2301      	movs	r3, #1
 8004684:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004686:	4b79      	ldr	r3, [pc, #484]	@ (800486c <HAL_RCC_OscConfig+0x4bc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d118      	bne.n	80046c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004692:	4b76      	ldr	r3, [pc, #472]	@ (800486c <HAL_RCC_OscConfig+0x4bc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a75      	ldr	r2, [pc, #468]	@ (800486c <HAL_RCC_OscConfig+0x4bc>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800469c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469e:	f7fd fd2b 	bl	80020f8 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a6:	f7fd fd27 	bl	80020f8 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e183      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b8:	4b6c      	ldr	r3, [pc, #432]	@ (800486c <HAL_RCC_OscConfig+0x4bc>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d108      	bne.n	80046de <HAL_RCC_OscConfig+0x32e>
 80046cc:	4b66      	ldr	r3, [pc, #408]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d2:	4a65      	ldr	r2, [pc, #404]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046dc:	e024      	b.n	8004728 <HAL_RCC_OscConfig+0x378>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d110      	bne.n	8004708 <HAL_RCC_OscConfig+0x358>
 80046e6:	4b60      	ldr	r3, [pc, #384]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 80046ee:	f043 0304 	orr.w	r3, r3, #4
 80046f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004706:	e00f      	b.n	8004728 <HAL_RCC_OscConfig+0x378>
 8004708:	4b57      	ldr	r3, [pc, #348]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470e:	4a56      	ldr	r2, [pc, #344]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004718:	4b53      	ldr	r3, [pc, #332]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471e:	4a52      	ldr	r2, [pc, #328]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 8004720:	f023 0304 	bic.w	r3, r3, #4
 8004724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d016      	beq.n	800475e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004730:	f7fd fce2 	bl	80020f8 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004736:	e00a      	b.n	800474e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004738:	f7fd fcde 	bl	80020f8 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004746:	4293      	cmp	r3, r2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e138      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474e:	4b46      	ldr	r3, [pc, #280]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ed      	beq.n	8004738 <HAL_RCC_OscConfig+0x388>
 800475c:	e015      	b.n	800478a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475e:	f7fd fccb 	bl	80020f8 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004764:	e00a      	b.n	800477c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fd fcc7 	bl	80020f8 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e121      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800477c:	4b3a      	ldr	r3, [pc, #232]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1ed      	bne.n	8004766 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800478a:	7ffb      	ldrb	r3, [r7, #31]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d105      	bne.n	800479c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004790:	4b35      	ldr	r3, [pc, #212]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004794:	4a34      	ldr	r2, [pc, #208]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 8004796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800479a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d03c      	beq.n	8004822 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01c      	beq.n	80047ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 80047b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c0:	f7fd fc9a 	bl	80020f8 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047c8:	f7fd fc96 	bl	80020f8 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e0f2      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047da:	4b23      	ldr	r3, [pc, #140]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 80047dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ef      	beq.n	80047c8 <HAL_RCC_OscConfig+0x418>
 80047e8:	e01b      	b.n	8004822 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 80047ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fa:	f7fd fc7d 	bl	80020f8 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004802:	f7fd fc79 	bl	80020f8 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e0d5      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004814:	4b14      	ldr	r3, [pc, #80]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 8004816:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ef      	bne.n	8004802 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80c9 	beq.w	80049be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800482c:	4b0e      	ldr	r3, [pc, #56]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 030c 	and.w	r3, r3, #12
 8004834:	2b0c      	cmp	r3, #12
 8004836:	f000 8083 	beq.w	8004940 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d15e      	bne.n	8004900 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b09      	ldr	r3, [pc, #36]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a08      	ldr	r2, [pc, #32]	@ (8004868 <HAL_RCC_OscConfig+0x4b8>)
 8004848:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800484c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484e:	f7fd fc53 	bl	80020f8 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004854:	e00c      	b.n	8004870 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004856:	f7fd fc4f 	bl	80020f8 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d905      	bls.n	8004870 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e0ab      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
 8004868:	40021000 	.word	0x40021000
 800486c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004870:	4b55      	ldr	r3, [pc, #340]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ec      	bne.n	8004856 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800487c:	4b52      	ldr	r3, [pc, #328]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	4b52      	ldr	r3, [pc, #328]	@ (80049cc <HAL_RCC_OscConfig+0x61c>)
 8004882:	4013      	ands	r3, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6a11      	ldr	r1, [r2, #32]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800488c:	3a01      	subs	r2, #1
 800488e:	0112      	lsls	r2, r2, #4
 8004890:	4311      	orrs	r1, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004896:	0212      	lsls	r2, r2, #8
 8004898:	4311      	orrs	r1, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800489e:	0852      	lsrs	r2, r2, #1
 80048a0:	3a01      	subs	r2, #1
 80048a2:	0552      	lsls	r2, r2, #21
 80048a4:	4311      	orrs	r1, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048aa:	0852      	lsrs	r2, r2, #1
 80048ac:	3a01      	subs	r2, #1
 80048ae:	0652      	lsls	r2, r2, #25
 80048b0:	4311      	orrs	r1, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80048b6:	06d2      	lsls	r2, r2, #27
 80048b8:	430a      	orrs	r2, r1
 80048ba:	4943      	ldr	r1, [pc, #268]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c0:	4b41      	ldr	r3, [pc, #260]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a40      	ldr	r2, [pc, #256]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 80048c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048cc:	4b3e      	ldr	r3, [pc, #248]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a3d      	ldr	r2, [pc, #244]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 80048d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d8:	f7fd fc0e 	bl	80020f8 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fd fc0a 	bl	80020f8 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e066      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f2:	4b35      	ldr	r3, [pc, #212]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCC_OscConfig+0x530>
 80048fe:	e05e      	b.n	80049be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004900:	4b31      	ldr	r3, [pc, #196]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a30      	ldr	r2, [pc, #192]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 8004906:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800490a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fd fbf4 	bl	80020f8 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004914:	f7fd fbf0 	bl	80020f8 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e04c      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004926:	4b28      	ldr	r3, [pc, #160]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004932:	4b25      	ldr	r3, [pc, #148]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	4924      	ldr	r1, [pc, #144]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 8004938:	4b25      	ldr	r3, [pc, #148]	@ (80049d0 <HAL_RCC_OscConfig+0x620>)
 800493a:	4013      	ands	r3, r2
 800493c:	60cb      	str	r3, [r1, #12]
 800493e:	e03e      	b.n	80049be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e039      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800494c:	4b1e      	ldr	r3, [pc, #120]	@ (80049c8 <HAL_RCC_OscConfig+0x618>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f003 0203 	and.w	r2, r3, #3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	429a      	cmp	r2, r3
 800495e:	d12c      	bne.n	80049ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496a:	3b01      	subs	r3, #1
 800496c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d123      	bne.n	80049ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d11b      	bne.n	80049ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800498e:	429a      	cmp	r2, r3
 8004990:	d113      	bne.n	80049ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	3b01      	subs	r3, #1
 80049a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d109      	bne.n	80049ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b0:	085b      	lsrs	r3, r3, #1
 80049b2:	3b01      	subs	r3, #1
 80049b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d001      	beq.n	80049be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3720      	adds	r7, #32
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40021000 	.word	0x40021000
 80049cc:	019f800c 	.word	0x019f800c
 80049d0:	feeefffc 	.word	0xfeeefffc

080049d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e11e      	b.n	8004c2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049ec:	4b91      	ldr	r3, [pc, #580]	@ (8004c34 <HAL_RCC_ClockConfig+0x260>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d910      	bls.n	8004a1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fa:	4b8e      	ldr	r3, [pc, #568]	@ (8004c34 <HAL_RCC_ClockConfig+0x260>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 020f 	bic.w	r2, r3, #15
 8004a02:	498c      	ldr	r1, [pc, #560]	@ (8004c34 <HAL_RCC_ClockConfig+0x260>)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	4b8a      	ldr	r3, [pc, #552]	@ (8004c34 <HAL_RCC_ClockConfig+0x260>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e106      	b.n	8004c2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d073      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d129      	bne.n	8004a84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a30:	4b81      	ldr	r3, [pc, #516]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0f4      	b.n	8004c2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a40:	f000 f99e 	bl	8004d80 <RCC_GetSysClockFreqFromPLLSource>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	4a7c      	ldr	r2, [pc, #496]	@ (8004c3c <HAL_RCC_ClockConfig+0x268>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d93f      	bls.n	8004ace <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d033      	beq.n	8004ace <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d12f      	bne.n	8004ace <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a6e:	4b72      	ldr	r3, [pc, #456]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a76:	4a70      	ldr	r2, [pc, #448]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a7e:	2380      	movs	r3, #128	@ 0x80
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	e024      	b.n	8004ace <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d107      	bne.n	8004a9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0c6      	b.n	8004c2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a9c:	4b66      	ldr	r3, [pc, #408]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0be      	b.n	8004c2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004aac:	f000 f8ce 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4a61      	ldr	r2, [pc, #388]	@ (8004c3c <HAL_RCC_ClockConfig+0x268>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d909      	bls.n	8004ace <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004aba:	4b5f      	ldr	r3, [pc, #380]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ac2:	4a5d      	ldr	r2, [pc, #372]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004aca:	2380      	movs	r3, #128	@ 0x80
 8004acc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ace:	4b5a      	ldr	r3, [pc, #360]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f023 0203 	bic.w	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4957      	ldr	r1, [pc, #348]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae0:	f7fd fb0a 	bl	80020f8 <HAL_GetTick>
 8004ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae8:	f7fd fb06 	bl	80020f8 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e095      	b.n	8004c2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	4b4e      	ldr	r3, [pc, #312]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 020c 	and.w	r2, r3, #12
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d1eb      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d023      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b28:	4b43      	ldr	r3, [pc, #268]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4a42      	ldr	r2, [pc, #264]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004b2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b40:	4b3d      	ldr	r3, [pc, #244]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b48:	4a3b      	ldr	r2, [pc, #236]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004b4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b50:	4b39      	ldr	r3, [pc, #228]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4936      	ldr	r1, [pc, #216]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	608b      	str	r3, [r1, #8]
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b80      	cmp	r3, #128	@ 0x80
 8004b68:	d105      	bne.n	8004b76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b6a:	4b33      	ldr	r3, [pc, #204]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	4a32      	ldr	r2, [pc, #200]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004b70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b76:	4b2f      	ldr	r3, [pc, #188]	@ (8004c34 <HAL_RCC_ClockConfig+0x260>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d21d      	bcs.n	8004bc0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b84:	4b2b      	ldr	r3, [pc, #172]	@ (8004c34 <HAL_RCC_ClockConfig+0x260>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 020f 	bic.w	r2, r3, #15
 8004b8c:	4929      	ldr	r1, [pc, #164]	@ (8004c34 <HAL_RCC_ClockConfig+0x260>)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b94:	f7fd fab0 	bl	80020f8 <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9c:	f7fd faac 	bl	80020f8 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e03b      	b.n	8004c2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	4b20      	ldr	r3, [pc, #128]	@ (8004c34 <HAL_RCC_ClockConfig+0x260>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d1ed      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d008      	beq.n	8004bde <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4917      	ldr	r1, [pc, #92]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bea:	4b13      	ldr	r3, [pc, #76]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	490f      	ldr	r1, [pc, #60]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bfe:	f000 f825 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8004c02:	4602      	mov	r2, r0
 8004c04:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <HAL_RCC_ClockConfig+0x264>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	490c      	ldr	r1, [pc, #48]	@ (8004c40 <HAL_RCC_ClockConfig+0x26c>)
 8004c10:	5ccb      	ldrb	r3, [r1, r3]
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c44 <HAL_RCC_ClockConfig+0x270>)
 8004c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c48 <HAL_RCC_ClockConfig+0x274>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fd fa1c 	bl	8002060 <HAL_InitTick>
 8004c28:	4603      	mov	r3, r0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40022000 	.word	0x40022000
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	04c4b400 	.word	0x04c4b400
 8004c40:	08007c6c 	.word	0x08007c6c
 8004c44:	20000000 	.word	0x20000000
 8004c48:	20000004 	.word	0x20000004

08004c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c52:	4b2c      	ldr	r3, [pc, #176]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d102      	bne.n	8004c64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	e047      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c64:	4b27      	ldr	r3, [pc, #156]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d102      	bne.n	8004c76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c70:	4b26      	ldr	r3, [pc, #152]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	e03e      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c76:	4b23      	ldr	r3, [pc, #140]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d136      	bne.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c82:	4b20      	ldr	r3, [pc, #128]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	3301      	adds	r3, #1
 8004c98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d10c      	bne.n	8004cba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca8:	4a16      	ldr	r2, [pc, #88]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004caa:	68d2      	ldr	r2, [r2, #12]
 8004cac:	0a12      	lsrs	r2, r2, #8
 8004cae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	617b      	str	r3, [r7, #20]
      break;
 8004cb8:	e00c      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cba:	4a13      	ldr	r2, [pc, #76]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	4a10      	ldr	r2, [pc, #64]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc4:	68d2      	ldr	r2, [r2, #12]
 8004cc6:	0a12      	lsrs	r2, r2, #8
 8004cc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
      break;
 8004cd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	0e5b      	lsrs	r3, r3, #25
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	3301      	adds	r3, #1
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	e001      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004cf4:	693b      	ldr	r3, [r7, #16]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40021000 	.word	0x40021000
 8004d08:	00f42400 	.word	0x00f42400
 8004d0c:	007a1200 	.word	0x007a1200

08004d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d14:	4b03      	ldr	r3, [pc, #12]	@ (8004d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d16:	681b      	ldr	r3, [r3, #0]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	20000000 	.word	0x20000000

08004d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d2c:	f7ff fff0 	bl	8004d10 <HAL_RCC_GetHCLKFreq>
 8004d30:	4602      	mov	r2, r0
 8004d32:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	4904      	ldr	r1, [pc, #16]	@ (8004d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d3e:	5ccb      	ldrb	r3, [r1, r3]
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	08007c7c 	.word	0x08007c7c

08004d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d58:	f7ff ffda 	bl	8004d10 <HAL_RCC_GetHCLKFreq>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	0adb      	lsrs	r3, r3, #11
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	4904      	ldr	r1, [pc, #16]	@ (8004d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d6a:	5ccb      	ldrb	r3, [r1, r3]
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	08007c7c 	.word	0x08007c7c

08004d80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d86:	4b1e      	ldr	r3, [pc, #120]	@ (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d90:	4b1b      	ldr	r3, [pc, #108]	@ (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d10c      	bne.n	8004dbe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004da4:	4a17      	ldr	r2, [pc, #92]	@ (8004e04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	4a14      	ldr	r2, [pc, #80]	@ (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dae:	68d2      	ldr	r2, [r2, #12]
 8004db0:	0a12      	lsrs	r2, r2, #8
 8004db2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	617b      	str	r3, [r7, #20]
    break;
 8004dbc:	e00c      	b.n	8004dd8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dbe:	4a12      	ldr	r2, [pc, #72]	@ (8004e08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dc8:	68d2      	ldr	r2, [r2, #12]
 8004dca:	0a12      	lsrs	r2, r2, #8
 8004dcc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dd0:	fb02 f303 	mul.w	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]
    break;
 8004dd6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dd8:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	0e5b      	lsrs	r3, r3, #25
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	3301      	adds	r3, #1
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004df2:	687b      	ldr	r3, [r7, #4]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	40021000 	.word	0x40021000
 8004e04:	007a1200 	.word	0x007a1200
 8004e08:	00f42400 	.word	0x00f42400

08004e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e14:	2300      	movs	r3, #0
 8004e16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e18:	2300      	movs	r3, #0
 8004e1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8098 	beq.w	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b43      	ldr	r3, [pc, #268]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10d      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	4b40      	ldr	r3, [pc, #256]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e46:	4b3d      	ldr	r3, [pc, #244]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e52:	2301      	movs	r3, #1
 8004e54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e56:	4b3a      	ldr	r3, [pc, #232]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a39      	ldr	r2, [pc, #228]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e62:	f7fd f949 	bl	80020f8 <HAL_GetTick>
 8004e66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e68:	e009      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6a:	f7fd f945 	bl	80020f8 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d902      	bls.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	74fb      	strb	r3, [r7, #19]
        break;
 8004e7c:	e005      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e7e:	4b30      	ldr	r3, [pc, #192]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0ef      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e8a:	7cfb      	ldrb	r3, [r7, #19]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d159      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e90:	4b2a      	ldr	r3, [pc, #168]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01e      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d019      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eac:	4b23      	ldr	r3, [pc, #140]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eb8:	4b20      	ldr	r3, [pc, #128]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ece:	4a1b      	ldr	r2, [pc, #108]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ed8:	4a18      	ldr	r2, [pc, #96]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eea:	f7fd f905 	bl	80020f8 <HAL_GetTick>
 8004eee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef0:	e00b      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef2:	f7fd f901 	bl	80020f8 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d902      	bls.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	74fb      	strb	r3, [r7, #19]
            break;
 8004f08:	e006      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0ec      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f1e:	4b07      	ldr	r3, [pc, #28]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	4903      	ldr	r1, [pc, #12]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f34:	e008      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	74bb      	strb	r3, [r7, #18]
 8004f3a:	e005      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f48:	7c7b      	ldrb	r3, [r7, #17]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d105      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4e:	4ba6      	ldr	r3, [pc, #664]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f52:	4aa5      	ldr	r2, [pc, #660]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f58:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f66:	4ba0      	ldr	r3, [pc, #640]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6c:	f023 0203 	bic.w	r2, r3, #3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	499c      	ldr	r1, [pc, #624]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f88:	4b97      	ldr	r3, [pc, #604]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8e:	f023 020c 	bic.w	r2, r3, #12
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	4994      	ldr	r1, [pc, #592]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004faa:	4b8f      	ldr	r3, [pc, #572]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	498b      	ldr	r1, [pc, #556]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fcc:	4b86      	ldr	r3, [pc, #536]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	4983      	ldr	r1, [pc, #524]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fee:	4b7e      	ldr	r3, [pc, #504]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	497a      	ldr	r1, [pc, #488]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005010:	4b75      	ldr	r3, [pc, #468]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005016:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	4972      	ldr	r1, [pc, #456]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005032:	4b6d      	ldr	r3, [pc, #436]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005038:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	4969      	ldr	r1, [pc, #420]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005054:	4b64      	ldr	r3, [pc, #400]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	4961      	ldr	r1, [pc, #388]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005076:	4b5c      	ldr	r3, [pc, #368]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	4958      	ldr	r1, [pc, #352]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005094:	2b00      	cmp	r3, #0
 8005096:	d015      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005098:	4b53      	ldr	r3, [pc, #332]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	4950      	ldr	r1, [pc, #320]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050b6:	d105      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b8:	4b4b      	ldr	r3, [pc, #300]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4a4a      	ldr	r2, [pc, #296]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050c2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d015      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050d0:	4b45      	ldr	r3, [pc, #276]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050de:	4942      	ldr	r1, [pc, #264]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ee:	d105      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050f0:	4b3d      	ldr	r3, [pc, #244]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4a3c      	ldr	r2, [pc, #240]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050fa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d015      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005108:	4b37      	ldr	r3, [pc, #220]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005116:	4934      	ldr	r1, [pc, #208]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005126:	d105      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005128:	4b2f      	ldr	r3, [pc, #188]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4a2e      	ldr	r2, [pc, #184]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800512e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005132:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d015      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005140:	4b29      	ldr	r3, [pc, #164]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005146:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514e:	4926      	ldr	r1, [pc, #152]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800515a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800515e:	d105      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005160:	4b21      	ldr	r3, [pc, #132]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4a20      	ldr	r2, [pc, #128]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800516a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d015      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005178:	4b1b      	ldr	r3, [pc, #108]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005186:	4918      	ldr	r1, [pc, #96]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005196:	d105      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005198:	4b13      	ldr	r3, [pc, #76]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4a12      	ldr	r2, [pc, #72]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d015      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051b0:	4b0d      	ldr	r3, [pc, #52]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051be:	490a      	ldr	r1, [pc, #40]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051ce:	d105      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051d0:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a04      	ldr	r2, [pc, #16]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80051dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40021000 	.word	0x40021000

080051ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e09d      	b.n	800533a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d108      	bne.n	8005218 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800520e:	d009      	beq.n	8005224 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	61da      	str	r2, [r3, #28]
 8005216:	e005      	b.n	8005224 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fc fce8 	bl	8001c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800525a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005264:	d902      	bls.n	800526c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	e002      	b.n	8005272 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800526c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005270:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800527a:	d007      	beq.n	800528c <HAL_SPI_Init+0xa0>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005284:	d002      	beq.n	800528c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ce:	ea42 0103 	orr.w	r1, r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	0c1b      	lsrs	r3, r3, #16
 80052e8:	f003 0204 	and.w	r2, r3, #4
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005308:	ea42 0103 	orr.w	r1, r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005328:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e049      	b.n	80053e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fc fd07 	bl	8001d7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f000 fa95 	bl	80058b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d109      	bne.n	8005418 <HAL_TIM_PWM_Start_IT+0x28>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b01      	cmp	r3, #1
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	e03c      	b.n	8005492 <HAL_TIM_PWM_Start_IT+0xa2>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b04      	cmp	r3, #4
 800541c:	d109      	bne.n	8005432 <HAL_TIM_PWM_Start_IT+0x42>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	bf14      	ite	ne
 800542a:	2301      	movne	r3, #1
 800542c:	2300      	moveq	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	e02f      	b.n	8005492 <HAL_TIM_PWM_Start_IT+0xa2>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b08      	cmp	r3, #8
 8005436:	d109      	bne.n	800544c <HAL_TIM_PWM_Start_IT+0x5c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	bf14      	ite	ne
 8005444:	2301      	movne	r3, #1
 8005446:	2300      	moveq	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	e022      	b.n	8005492 <HAL_TIM_PWM_Start_IT+0xa2>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b0c      	cmp	r3, #12
 8005450:	d109      	bne.n	8005466 <HAL_TIM_PWM_Start_IT+0x76>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b01      	cmp	r3, #1
 800545c:	bf14      	ite	ne
 800545e:	2301      	movne	r3, #1
 8005460:	2300      	moveq	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	e015      	b.n	8005492 <HAL_TIM_PWM_Start_IT+0xa2>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b10      	cmp	r3, #16
 800546a:	d109      	bne.n	8005480 <HAL_TIM_PWM_Start_IT+0x90>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	bf14      	ite	ne
 8005478:	2301      	movne	r3, #1
 800547a:	2300      	moveq	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	e008      	b.n	8005492 <HAL_TIM_PWM_Start_IT+0xa2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	bf14      	ite	ne
 800548c:	2301      	movne	r3, #1
 800548e:	2300      	moveq	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e0e2      	b.n	8005660 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d104      	bne.n	80054aa <HAL_TIM_PWM_Start_IT+0xba>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054a8:	e023      	b.n	80054f2 <HAL_TIM_PWM_Start_IT+0x102>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_PWM_Start_IT+0xca>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054b8:	e01b      	b.n	80054f2 <HAL_TIM_PWM_Start_IT+0x102>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d104      	bne.n	80054ca <HAL_TIM_PWM_Start_IT+0xda>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054c8:	e013      	b.n	80054f2 <HAL_TIM_PWM_Start_IT+0x102>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b0c      	cmp	r3, #12
 80054ce:	d104      	bne.n	80054da <HAL_TIM_PWM_Start_IT+0xea>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054d8:	e00b      	b.n	80054f2 <HAL_TIM_PWM_Start_IT+0x102>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d104      	bne.n	80054ea <HAL_TIM_PWM_Start_IT+0xfa>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054e8:	e003      	b.n	80054f2 <HAL_TIM_PWM_Start_IT+0x102>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	d841      	bhi.n	800557c <HAL_TIM_PWM_Start_IT+0x18c>
 80054f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005500 <HAL_TIM_PWM_Start_IT+0x110>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005535 	.word	0x08005535
 8005504:	0800557d 	.word	0x0800557d
 8005508:	0800557d 	.word	0x0800557d
 800550c:	0800557d 	.word	0x0800557d
 8005510:	08005547 	.word	0x08005547
 8005514:	0800557d 	.word	0x0800557d
 8005518:	0800557d 	.word	0x0800557d
 800551c:	0800557d 	.word	0x0800557d
 8005520:	08005559 	.word	0x08005559
 8005524:	0800557d 	.word	0x0800557d
 8005528:	0800557d 	.word	0x0800557d
 800552c:	0800557d 	.word	0x0800557d
 8005530:	0800556b 	.word	0x0800556b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0202 	orr.w	r2, r2, #2
 8005542:	60da      	str	r2, [r3, #12]
      break;
 8005544:	e01d      	b.n	8005582 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0204 	orr.w	r2, r2, #4
 8005554:	60da      	str	r2, [r3, #12]
      break;
 8005556:	e014      	b.n	8005582 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0208 	orr.w	r2, r2, #8
 8005566:	60da      	str	r2, [r3, #12]
      break;
 8005568:	e00b      	b.n	8005582 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0210 	orr.w	r2, r2, #16
 8005578:	60da      	str	r2, [r3, #12]
      break;
 800557a:	e002      	b.n	8005582 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
      break;
 8005580:	bf00      	nop
  }

  if (status == HAL_OK)
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d16a      	bne.n	800565e <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2201      	movs	r2, #1
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fd1f 	bl	8005fd4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a33      	ldr	r2, [pc, #204]	@ (8005668 <HAL_TIM_PWM_Start_IT+0x278>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d013      	beq.n	80055c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a31      	ldr	r2, [pc, #196]	@ (800566c <HAL_TIM_PWM_Start_IT+0x27c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00e      	beq.n	80055c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a30      	ldr	r2, [pc, #192]	@ (8005670 <HAL_TIM_PWM_Start_IT+0x280>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d009      	beq.n	80055c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005674 <HAL_TIM_PWM_Start_IT+0x284>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005678 <HAL_TIM_PWM_Start_IT+0x288>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d101      	bne.n	80055cc <HAL_TIM_PWM_Start_IT+0x1dc>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_TIM_PWM_Start_IT+0x1de>
 80055cc:	2300      	movs	r3, #0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a20      	ldr	r2, [pc, #128]	@ (8005668 <HAL_TIM_PWM_Start_IT+0x278>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d018      	beq.n	800561e <HAL_TIM_PWM_Start_IT+0x22e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f4:	d013      	beq.n	800561e <HAL_TIM_PWM_Start_IT+0x22e>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a20      	ldr	r2, [pc, #128]	@ (800567c <HAL_TIM_PWM_Start_IT+0x28c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00e      	beq.n	800561e <HAL_TIM_PWM_Start_IT+0x22e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1e      	ldr	r2, [pc, #120]	@ (8005680 <HAL_TIM_PWM_Start_IT+0x290>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d009      	beq.n	800561e <HAL_TIM_PWM_Start_IT+0x22e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a17      	ldr	r2, [pc, #92]	@ (800566c <HAL_TIM_PWM_Start_IT+0x27c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d004      	beq.n	800561e <HAL_TIM_PWM_Start_IT+0x22e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a15      	ldr	r2, [pc, #84]	@ (8005670 <HAL_TIM_PWM_Start_IT+0x280>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d115      	bne.n	800564a <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	4b17      	ldr	r3, [pc, #92]	@ (8005684 <HAL_TIM_PWM_Start_IT+0x294>)
 8005626:	4013      	ands	r3, r2
 8005628:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b06      	cmp	r3, #6
 800562e:	d015      	beq.n	800565c <HAL_TIM_PWM_Start_IT+0x26c>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005636:	d011      	beq.n	800565c <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005648:	e008      	b.n	800565c <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	e000      	b.n	800565e <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800565e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40012c00 	.word	0x40012c00
 800566c:	40013400 	.word	0x40013400
 8005670:	40014000 	.word	0x40014000
 8005674:	40014400 	.word	0x40014400
 8005678:	40014800 	.word	0x40014800
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800
 8005684:	00010007 	.word	0x00010007

08005688 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e0ff      	b.n	80058a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b14      	cmp	r3, #20
 80056b2:	f200 80f0 	bhi.w	8005896 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056b6:	a201      	add	r2, pc, #4	@ (adr r2, 80056bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	08005711 	.word	0x08005711
 80056c0:	08005897 	.word	0x08005897
 80056c4:	08005897 	.word	0x08005897
 80056c8:	08005897 	.word	0x08005897
 80056cc:	08005751 	.word	0x08005751
 80056d0:	08005897 	.word	0x08005897
 80056d4:	08005897 	.word	0x08005897
 80056d8:	08005897 	.word	0x08005897
 80056dc:	08005793 	.word	0x08005793
 80056e0:	08005897 	.word	0x08005897
 80056e4:	08005897 	.word	0x08005897
 80056e8:	08005897 	.word	0x08005897
 80056ec:	080057d3 	.word	0x080057d3
 80056f0:	08005897 	.word	0x08005897
 80056f4:	08005897 	.word	0x08005897
 80056f8:	08005897 	.word	0x08005897
 80056fc:	08005815 	.word	0x08005815
 8005700:	08005897 	.word	0x08005897
 8005704:	08005897 	.word	0x08005897
 8005708:	08005897 	.word	0x08005897
 800570c:	08005855 	.word	0x08005855
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f966 	bl	80059e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0208 	orr.w	r2, r2, #8
 800572a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0204 	bic.w	r2, r2, #4
 800573a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6999      	ldr	r1, [r3, #24]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	619a      	str	r2, [r3, #24]
      break;
 800574e:	e0a5      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f9d6 	bl	8005b08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800576a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800577a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6999      	ldr	r1, [r3, #24]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	021a      	lsls	r2, r3, #8
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	619a      	str	r2, [r3, #24]
      break;
 8005790:	e084      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fa3f 	bl	8005c1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0208 	orr.w	r2, r2, #8
 80057ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0204 	bic.w	r2, r2, #4
 80057bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69d9      	ldr	r1, [r3, #28]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	61da      	str	r2, [r3, #28]
      break;
 80057d0:	e064      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 faa7 	bl	8005d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69d9      	ldr	r1, [r3, #28]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	021a      	lsls	r2, r3, #8
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	61da      	str	r2, [r3, #28]
      break;
 8005812:	e043      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fb10 	bl	8005e40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0208 	orr.w	r2, r2, #8
 800582e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0204 	bic.w	r2, r2, #4
 800583e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005852:	e023      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fb54 	bl	8005f08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800586e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800587e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	021a      	lsls	r2, r3, #8
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005894:	e002      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
      break;
 800589a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop

080058b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a42      	ldr	r2, [pc, #264]	@ (80059cc <TIM_Base_SetConfig+0x11c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00f      	beq.n	80058e8 <TIM_Base_SetConfig+0x38>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ce:	d00b      	beq.n	80058e8 <TIM_Base_SetConfig+0x38>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a3f      	ldr	r2, [pc, #252]	@ (80059d0 <TIM_Base_SetConfig+0x120>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_Base_SetConfig+0x38>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a3e      	ldr	r2, [pc, #248]	@ (80059d4 <TIM_Base_SetConfig+0x124>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_Base_SetConfig+0x38>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a3d      	ldr	r2, [pc, #244]	@ (80059d8 <TIM_Base_SetConfig+0x128>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d108      	bne.n	80058fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a33      	ldr	r2, [pc, #204]	@ (80059cc <TIM_Base_SetConfig+0x11c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01b      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005908:	d017      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a30      	ldr	r2, [pc, #192]	@ (80059d0 <TIM_Base_SetConfig+0x120>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a2f      	ldr	r2, [pc, #188]	@ (80059d4 <TIM_Base_SetConfig+0x124>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00f      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a2e      	ldr	r2, [pc, #184]	@ (80059d8 <TIM_Base_SetConfig+0x128>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00b      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2d      	ldr	r2, [pc, #180]	@ (80059dc <TIM_Base_SetConfig+0x12c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d007      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2c      	ldr	r2, [pc, #176]	@ (80059e0 <TIM_Base_SetConfig+0x130>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2b      	ldr	r2, [pc, #172]	@ (80059e4 <TIM_Base_SetConfig+0x134>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d108      	bne.n	800594c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <TIM_Base_SetConfig+0x11c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00f      	beq.n	8005998 <TIM_Base_SetConfig+0xe8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a17      	ldr	r2, [pc, #92]	@ (80059d8 <TIM_Base_SetConfig+0x128>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_Base_SetConfig+0xe8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a16      	ldr	r2, [pc, #88]	@ (80059dc <TIM_Base_SetConfig+0x12c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_Base_SetConfig+0xe8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a15      	ldr	r2, [pc, #84]	@ (80059e0 <TIM_Base_SetConfig+0x130>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0xe8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a14      	ldr	r2, [pc, #80]	@ (80059e4 <TIM_Base_SetConfig+0x134>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d103      	bne.n	80059a0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d105      	bne.n	80059be <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f023 0201 	bic.w	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	611a      	str	r2, [r3, #16]
  }
}
 80059be:	bf00      	nop
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40012c00 	.word	0x40012c00
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800
 80059d8:	40013400 	.word	0x40013400
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800

080059e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f023 0201 	bic.w	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0303 	bic.w	r3, r3, #3
 8005a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f023 0302 	bic.w	r3, r3, #2
 8005a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a2c      	ldr	r2, [pc, #176]	@ (8005af4 <TIM_OC1_SetConfig+0x10c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00f      	beq.n	8005a68 <TIM_OC1_SetConfig+0x80>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005af8 <TIM_OC1_SetConfig+0x110>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00b      	beq.n	8005a68 <TIM_OC1_SetConfig+0x80>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a2a      	ldr	r2, [pc, #168]	@ (8005afc <TIM_OC1_SetConfig+0x114>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d007      	beq.n	8005a68 <TIM_OC1_SetConfig+0x80>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a29      	ldr	r2, [pc, #164]	@ (8005b00 <TIM_OC1_SetConfig+0x118>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_OC1_SetConfig+0x80>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a28      	ldr	r2, [pc, #160]	@ (8005b04 <TIM_OC1_SetConfig+0x11c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d10c      	bne.n	8005a82 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 0308 	bic.w	r3, r3, #8
 8005a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 0304 	bic.w	r3, r3, #4
 8005a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1b      	ldr	r2, [pc, #108]	@ (8005af4 <TIM_OC1_SetConfig+0x10c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00f      	beq.n	8005aaa <TIM_OC1_SetConfig+0xc2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8005af8 <TIM_OC1_SetConfig+0x110>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00b      	beq.n	8005aaa <TIM_OC1_SetConfig+0xc2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a19      	ldr	r2, [pc, #100]	@ (8005afc <TIM_OC1_SetConfig+0x114>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <TIM_OC1_SetConfig+0xc2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a18      	ldr	r2, [pc, #96]	@ (8005b00 <TIM_OC1_SetConfig+0x118>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_OC1_SetConfig+0xc2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a17      	ldr	r2, [pc, #92]	@ (8005b04 <TIM_OC1_SetConfig+0x11c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d111      	bne.n	8005ace <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	621a      	str	r2, [r3, #32]
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	40013400 	.word	0x40013400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800

08005b08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	f023 0210 	bic.w	r2, r3, #16
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f023 0320 	bic.w	r3, r3, #32
 8005b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a28      	ldr	r2, [pc, #160]	@ (8005c08 <TIM_OC2_SetConfig+0x100>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_OC2_SetConfig+0x6c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a27      	ldr	r2, [pc, #156]	@ (8005c0c <TIM_OC2_SetConfig+0x104>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d10d      	bne.n	8005b90 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a1d      	ldr	r2, [pc, #116]	@ (8005c08 <TIM_OC2_SetConfig+0x100>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00f      	beq.n	8005bb8 <TIM_OC2_SetConfig+0xb0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8005c0c <TIM_OC2_SetConfig+0x104>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00b      	beq.n	8005bb8 <TIM_OC2_SetConfig+0xb0>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <TIM_OC2_SetConfig+0x108>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <TIM_OC2_SetConfig+0xb0>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a1a      	ldr	r2, [pc, #104]	@ (8005c14 <TIM_OC2_SetConfig+0x10c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_OC2_SetConfig+0xb0>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a19      	ldr	r2, [pc, #100]	@ (8005c18 <TIM_OC2_SetConfig+0x110>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d113      	bne.n	8005be0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	621a      	str	r2, [r3, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40012c00 	.word	0x40012c00
 8005c0c:	40013400 	.word	0x40013400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800

08005c1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a27      	ldr	r2, [pc, #156]	@ (8005d18 <TIM_OC3_SetConfig+0xfc>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d003      	beq.n	8005c86 <TIM_OC3_SetConfig+0x6a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a26      	ldr	r2, [pc, #152]	@ (8005d1c <TIM_OC3_SetConfig+0x100>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d10d      	bne.n	8005ca2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d18 <TIM_OC3_SetConfig+0xfc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00f      	beq.n	8005cca <TIM_OC3_SetConfig+0xae>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a1b      	ldr	r2, [pc, #108]	@ (8005d1c <TIM_OC3_SetConfig+0x100>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00b      	beq.n	8005cca <TIM_OC3_SetConfig+0xae>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8005d20 <TIM_OC3_SetConfig+0x104>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d007      	beq.n	8005cca <TIM_OC3_SetConfig+0xae>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a19      	ldr	r2, [pc, #100]	@ (8005d24 <TIM_OC3_SetConfig+0x108>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_OC3_SetConfig+0xae>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a18      	ldr	r2, [pc, #96]	@ (8005d28 <TIM_OC3_SetConfig+0x10c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d113      	bne.n	8005cf2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	621a      	str	r2, [r3, #32]
}
 8005d0c:	bf00      	nop
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40013400 	.word	0x40013400
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40014400 	.word	0x40014400
 8005d28:	40014800 	.word	0x40014800

08005d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	031b      	lsls	r3, r3, #12
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a28      	ldr	r2, [pc, #160]	@ (8005e2c <TIM_OC4_SetConfig+0x100>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_OC4_SetConfig+0x6c>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a27      	ldr	r2, [pc, #156]	@ (8005e30 <TIM_OC4_SetConfig+0x104>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d10d      	bne.n	8005db4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	031b      	lsls	r3, r3, #12
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005db2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a1d      	ldr	r2, [pc, #116]	@ (8005e2c <TIM_OC4_SetConfig+0x100>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00f      	beq.n	8005ddc <TIM_OC4_SetConfig+0xb0>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8005e30 <TIM_OC4_SetConfig+0x104>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00b      	beq.n	8005ddc <TIM_OC4_SetConfig+0xb0>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e34 <TIM_OC4_SetConfig+0x108>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d007      	beq.n	8005ddc <TIM_OC4_SetConfig+0xb0>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a1a      	ldr	r2, [pc, #104]	@ (8005e38 <TIM_OC4_SetConfig+0x10c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC4_SetConfig+0xb0>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a19      	ldr	r2, [pc, #100]	@ (8005e3c <TIM_OC4_SetConfig+0x110>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d113      	bne.n	8005e04 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005de2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005dea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	019b      	lsls	r3, r3, #6
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	019b      	lsls	r3, r3, #6
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	621a      	str	r2, [r3, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40013400 	.word	0x40013400
 8005e34:	40014000 	.word	0x40014000
 8005e38:	40014400 	.word	0x40014400
 8005e3c:	40014800 	.word	0x40014800

08005e40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	041b      	lsls	r3, r3, #16
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a17      	ldr	r2, [pc, #92]	@ (8005ef4 <TIM_OC5_SetConfig+0xb4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00f      	beq.n	8005eba <TIM_OC5_SetConfig+0x7a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a16      	ldr	r2, [pc, #88]	@ (8005ef8 <TIM_OC5_SetConfig+0xb8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <TIM_OC5_SetConfig+0x7a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a15      	ldr	r2, [pc, #84]	@ (8005efc <TIM_OC5_SetConfig+0xbc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d007      	beq.n	8005eba <TIM_OC5_SetConfig+0x7a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a14      	ldr	r2, [pc, #80]	@ (8005f00 <TIM_OC5_SetConfig+0xc0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_OC5_SetConfig+0x7a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a13      	ldr	r2, [pc, #76]	@ (8005f04 <TIM_OC5_SetConfig+0xc4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d109      	bne.n	8005ece <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	621a      	str	r2, [r3, #32]
}
 8005ee8:	bf00      	nop
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40013400 	.word	0x40013400
 8005efc:	40014000 	.word	0x40014000
 8005f00:	40014400 	.word	0x40014400
 8005f04:	40014800 	.word	0x40014800

08005f08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	051b      	lsls	r3, r3, #20
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a18      	ldr	r2, [pc, #96]	@ (8005fc0 <TIM_OC6_SetConfig+0xb8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00f      	beq.n	8005f84 <TIM_OC6_SetConfig+0x7c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a17      	ldr	r2, [pc, #92]	@ (8005fc4 <TIM_OC6_SetConfig+0xbc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00b      	beq.n	8005f84 <TIM_OC6_SetConfig+0x7c>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a16      	ldr	r2, [pc, #88]	@ (8005fc8 <TIM_OC6_SetConfig+0xc0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d007      	beq.n	8005f84 <TIM_OC6_SetConfig+0x7c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a15      	ldr	r2, [pc, #84]	@ (8005fcc <TIM_OC6_SetConfig+0xc4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <TIM_OC6_SetConfig+0x7c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a14      	ldr	r2, [pc, #80]	@ (8005fd0 <TIM_OC6_SetConfig+0xc8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d109      	bne.n	8005f98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	029b      	lsls	r3, r3, #10
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40013400 	.word	0x40013400
 8005fc8:	40014000 	.word	0x40014000
 8005fcc:	40014400 	.word	0x40014400
 8005fd0:	40014800 	.word	0x40014800

08005fd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f003 031f 	and.w	r3, r3, #31
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1a      	ldr	r2, [r3, #32]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a1a      	ldr	r2, [r3, #32]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	fa01 f303 	lsl.w	r3, r1, r3
 800600c:	431a      	orrs	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d109      	bne.n	8006048 <HAL_TIMEx_PWMN_Start_IT+0x28>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	bf14      	ite	ne
 8006040:	2301      	movne	r3, #1
 8006042:	2300      	moveq	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	e022      	b.n	800608e <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b04      	cmp	r3, #4
 800604c:	d109      	bne.n	8006062 <HAL_TIMEx_PWMN_Start_IT+0x42>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b01      	cmp	r3, #1
 8006058:	bf14      	ite	ne
 800605a:	2301      	movne	r3, #1
 800605c:	2300      	moveq	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	e015      	b.n	800608e <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b08      	cmp	r3, #8
 8006066:	d109      	bne.n	800607c <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	bf14      	ite	ne
 8006074:	2301      	movne	r3, #1
 8006076:	2300      	moveq	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	e008      	b.n	800608e <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	bf14      	ite	ne
 8006088:	2301      	movne	r3, #1
 800608a:	2300      	moveq	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e0bc      	b.n	8006210 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d104      	bne.n	80060a6 <HAL_TIMEx_PWMN_Start_IT+0x86>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060a4:	e013      	b.n	80060ce <HAL_TIMEx_PWMN_Start_IT+0xae>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d104      	bne.n	80060b6 <HAL_TIMEx_PWMN_Start_IT+0x96>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060b4:	e00b      	b.n	80060ce <HAL_TIMEx_PWMN_Start_IT+0xae>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d104      	bne.n	80060c6 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060c4:	e003      	b.n	80060ce <HAL_TIMEx_PWMN_Start_IT+0xae>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b0c      	cmp	r3, #12
 80060d2:	d841      	bhi.n	8006158 <HAL_TIMEx_PWMN_Start_IT+0x138>
 80060d4:	a201      	add	r2, pc, #4	@ (adr r2, 80060dc <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 80060d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060da:	bf00      	nop
 80060dc:	08006111 	.word	0x08006111
 80060e0:	08006159 	.word	0x08006159
 80060e4:	08006159 	.word	0x08006159
 80060e8:	08006159 	.word	0x08006159
 80060ec:	08006123 	.word	0x08006123
 80060f0:	08006159 	.word	0x08006159
 80060f4:	08006159 	.word	0x08006159
 80060f8:	08006159 	.word	0x08006159
 80060fc:	08006135 	.word	0x08006135
 8006100:	08006159 	.word	0x08006159
 8006104:	08006159 	.word	0x08006159
 8006108:	08006159 	.word	0x08006159
 800610c:	08006147 	.word	0x08006147
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0202 	orr.w	r2, r2, #2
 800611e:	60da      	str	r2, [r3, #12]
      break;
 8006120:	e01d      	b.n	800615e <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0204 	orr.w	r2, r2, #4
 8006130:	60da      	str	r2, [r3, #12]
      break;
 8006132:	e014      	b.n	800615e <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0208 	orr.w	r2, r2, #8
 8006142:	60da      	str	r2, [r3, #12]
      break;
 8006144:	e00b      	b.n	800615e <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0210 	orr.w	r2, r2, #16
 8006154:	60da      	str	r2, [r3, #12]
      break;
 8006156:	e002      	b.n	800615e <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	73fb      	strb	r3, [r7, #15]
      break;
 800615c:	bf00      	nop
  }

  if (status == HAL_OK)
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d154      	bne.n	800620e <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006172:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2204      	movs	r2, #4
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f000 f965 	bl	800644c <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006190:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a20      	ldr	r2, [pc, #128]	@ (8006218 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d018      	beq.n	80061ce <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a4:	d013      	beq.n	80061ce <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1c      	ldr	r2, [pc, #112]	@ (800621c <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00e      	beq.n	80061ce <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006220 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d009      	beq.n	80061ce <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a19      	ldr	r2, [pc, #100]	@ (8006224 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d004      	beq.n	80061ce <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a17      	ldr	r2, [pc, #92]	@ (8006228 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d115      	bne.n	80061fa <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	4b15      	ldr	r3, [pc, #84]	@ (800622c <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b06      	cmp	r3, #6
 80061de:	d015      	beq.n	800620c <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e6:	d011      	beq.n	800620c <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f8:	e008      	b.n	800620c <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	e000      	b.n	800620e <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40012c00 	.word	0x40012c00
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40013400 	.word	0x40013400
 8006228:	40014000 	.word	0x40014000
 800622c:	00010007 	.word	0x00010007

08006230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006244:	2302      	movs	r3, #2
 8006246:	e065      	b.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a2c      	ldr	r2, [pc, #176]	@ (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d004      	beq.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2b      	ldr	r2, [pc, #172]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d108      	bne.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006282:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006298:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d018      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062be:	d013      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a18      	ldr	r2, [pc, #96]	@ (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d00e      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a17      	ldr	r2, [pc, #92]	@ (800632c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d009      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a12      	ldr	r2, [pc, #72]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d004      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a13      	ldr	r2, [pc, #76]	@ (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d10c      	bne.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	40012c00 	.word	0x40012c00
 8006324:	40013400 	.word	0x40013400
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40014000 	.word	0x40014000

08006334 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800634c:	2302      	movs	r3, #2
 800634e:	e073      	b.n	8006438 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	4313      	orrs	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	041b      	lsls	r3, r3, #16
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a19      	ldr	r2, [pc, #100]	@ (8006444 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d004      	beq.n	80063ec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a18      	ldr	r2, [pc, #96]	@ (8006448 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d11c      	bne.n	8006426 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	051b      	lsls	r3, r3, #20
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	40012c00 	.word	0x40012c00
 8006448:	40013400 	.word	0x40013400

0800644c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	2204      	movs	r2, #4
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a1a      	ldr	r2, [r3, #32]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	43db      	mvns	r3, r3
 800646e:	401a      	ands	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1a      	ldr	r2, [r3, #32]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	fa01 f303 	lsl.w	r3, r1, r3
 8006484:	431a      	orrs	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e042      	b.n	800652e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fb fcf4 	bl	8001ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2224      	movs	r2, #36	@ 0x24
 80064c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0201 	bic.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 faf5 	bl	8006ad0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f826 	bl	8006538 <UART_SetConfig>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e01b      	b.n	800652e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006504:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006514:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0201 	orr.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fb74 	bl	8006c14 <UART_CheckIdleState>
 800652c:	4603      	mov	r3, r0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800653c:	b08c      	sub	sp, #48	@ 0x30
 800653e:	af00      	add	r7, sp, #0
 8006540:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	431a      	orrs	r2, r3
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	431a      	orrs	r2, r3
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	4313      	orrs	r3, r2
 800655e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4bab      	ldr	r3, [pc, #684]	@ (8006814 <UART_SetConfig+0x2dc>)
 8006568:	4013      	ands	r3, r2
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006570:	430b      	orrs	r3, r1
 8006572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4aa0      	ldr	r2, [pc, #640]	@ (8006818 <UART_SetConfig+0x2e0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d004      	beq.n	80065a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065a0:	4313      	orrs	r3, r2
 80065a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80065ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	6812      	ldr	r2, [r2, #0]
 80065b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065b8:	430b      	orrs	r3, r1
 80065ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c2:	f023 010f 	bic.w	r1, r3, #15
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a91      	ldr	r2, [pc, #580]	@ (800681c <UART_SetConfig+0x2e4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d125      	bne.n	8006628 <UART_SetConfig+0xf0>
 80065dc:	4b90      	ldr	r3, [pc, #576]	@ (8006820 <UART_SetConfig+0x2e8>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d81a      	bhi.n	8006620 <UART_SetConfig+0xe8>
 80065ea:	a201      	add	r2, pc, #4	@ (adr r2, 80065f0 <UART_SetConfig+0xb8>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006601 	.word	0x08006601
 80065f4:	08006611 	.word	0x08006611
 80065f8:	08006609 	.word	0x08006609
 80065fc:	08006619 	.word	0x08006619
 8006600:	2301      	movs	r3, #1
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006606:	e0d6      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006608:	2302      	movs	r3, #2
 800660a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800660e:	e0d2      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006610:	2304      	movs	r3, #4
 8006612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006616:	e0ce      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006618:	2308      	movs	r3, #8
 800661a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800661e:	e0ca      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006620:	2310      	movs	r3, #16
 8006622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006626:	e0c6      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a7d      	ldr	r2, [pc, #500]	@ (8006824 <UART_SetConfig+0x2ec>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d138      	bne.n	80066a4 <UART_SetConfig+0x16c>
 8006632:	4b7b      	ldr	r3, [pc, #492]	@ (8006820 <UART_SetConfig+0x2e8>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006638:	f003 030c 	and.w	r3, r3, #12
 800663c:	2b0c      	cmp	r3, #12
 800663e:	d82d      	bhi.n	800669c <UART_SetConfig+0x164>
 8006640:	a201      	add	r2, pc, #4	@ (adr r2, 8006648 <UART_SetConfig+0x110>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	0800667d 	.word	0x0800667d
 800664c:	0800669d 	.word	0x0800669d
 8006650:	0800669d 	.word	0x0800669d
 8006654:	0800669d 	.word	0x0800669d
 8006658:	0800668d 	.word	0x0800668d
 800665c:	0800669d 	.word	0x0800669d
 8006660:	0800669d 	.word	0x0800669d
 8006664:	0800669d 	.word	0x0800669d
 8006668:	08006685 	.word	0x08006685
 800666c:	0800669d 	.word	0x0800669d
 8006670:	0800669d 	.word	0x0800669d
 8006674:	0800669d 	.word	0x0800669d
 8006678:	08006695 	.word	0x08006695
 800667c:	2300      	movs	r3, #0
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006682:	e098      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006684:	2302      	movs	r3, #2
 8006686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800668a:	e094      	b.n	80067b6 <UART_SetConfig+0x27e>
 800668c:	2304      	movs	r3, #4
 800668e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006692:	e090      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006694:	2308      	movs	r3, #8
 8006696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800669a:	e08c      	b.n	80067b6 <UART_SetConfig+0x27e>
 800669c:	2310      	movs	r3, #16
 800669e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a2:	e088      	b.n	80067b6 <UART_SetConfig+0x27e>
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a5f      	ldr	r2, [pc, #380]	@ (8006828 <UART_SetConfig+0x2f0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d125      	bne.n	80066fa <UART_SetConfig+0x1c2>
 80066ae:	4b5c      	ldr	r3, [pc, #368]	@ (8006820 <UART_SetConfig+0x2e8>)
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066b8:	2b30      	cmp	r3, #48	@ 0x30
 80066ba:	d016      	beq.n	80066ea <UART_SetConfig+0x1b2>
 80066bc:	2b30      	cmp	r3, #48	@ 0x30
 80066be:	d818      	bhi.n	80066f2 <UART_SetConfig+0x1ba>
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d00a      	beq.n	80066da <UART_SetConfig+0x1a2>
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	d814      	bhi.n	80066f2 <UART_SetConfig+0x1ba>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <UART_SetConfig+0x19a>
 80066cc:	2b10      	cmp	r3, #16
 80066ce:	d008      	beq.n	80066e2 <UART_SetConfig+0x1aa>
 80066d0:	e00f      	b.n	80066f2 <UART_SetConfig+0x1ba>
 80066d2:	2300      	movs	r3, #0
 80066d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d8:	e06d      	b.n	80067b6 <UART_SetConfig+0x27e>
 80066da:	2302      	movs	r3, #2
 80066dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066e0:	e069      	b.n	80067b6 <UART_SetConfig+0x27e>
 80066e2:	2304      	movs	r3, #4
 80066e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066e8:	e065      	b.n	80067b6 <UART_SetConfig+0x27e>
 80066ea:	2308      	movs	r3, #8
 80066ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066f0:	e061      	b.n	80067b6 <UART_SetConfig+0x27e>
 80066f2:	2310      	movs	r3, #16
 80066f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066f8:	e05d      	b.n	80067b6 <UART_SetConfig+0x27e>
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a4b      	ldr	r2, [pc, #300]	@ (800682c <UART_SetConfig+0x2f4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d125      	bne.n	8006750 <UART_SetConfig+0x218>
 8006704:	4b46      	ldr	r3, [pc, #280]	@ (8006820 <UART_SetConfig+0x2e8>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800670e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006710:	d016      	beq.n	8006740 <UART_SetConfig+0x208>
 8006712:	2bc0      	cmp	r3, #192	@ 0xc0
 8006714:	d818      	bhi.n	8006748 <UART_SetConfig+0x210>
 8006716:	2b80      	cmp	r3, #128	@ 0x80
 8006718:	d00a      	beq.n	8006730 <UART_SetConfig+0x1f8>
 800671a:	2b80      	cmp	r3, #128	@ 0x80
 800671c:	d814      	bhi.n	8006748 <UART_SetConfig+0x210>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <UART_SetConfig+0x1f0>
 8006722:	2b40      	cmp	r3, #64	@ 0x40
 8006724:	d008      	beq.n	8006738 <UART_SetConfig+0x200>
 8006726:	e00f      	b.n	8006748 <UART_SetConfig+0x210>
 8006728:	2300      	movs	r3, #0
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800672e:	e042      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006730:	2302      	movs	r3, #2
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006736:	e03e      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800673e:	e03a      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006746:	e036      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800674e:	e032      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a30      	ldr	r2, [pc, #192]	@ (8006818 <UART_SetConfig+0x2e0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d12a      	bne.n	80067b0 <UART_SetConfig+0x278>
 800675a:	4b31      	ldr	r3, [pc, #196]	@ (8006820 <UART_SetConfig+0x2e8>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006760:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006764:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006768:	d01a      	beq.n	80067a0 <UART_SetConfig+0x268>
 800676a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800676e:	d81b      	bhi.n	80067a8 <UART_SetConfig+0x270>
 8006770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006774:	d00c      	beq.n	8006790 <UART_SetConfig+0x258>
 8006776:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800677a:	d815      	bhi.n	80067a8 <UART_SetConfig+0x270>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <UART_SetConfig+0x250>
 8006780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006784:	d008      	beq.n	8006798 <UART_SetConfig+0x260>
 8006786:	e00f      	b.n	80067a8 <UART_SetConfig+0x270>
 8006788:	2300      	movs	r3, #0
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800678e:	e012      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006790:	2302      	movs	r3, #2
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006796:	e00e      	b.n	80067b6 <UART_SetConfig+0x27e>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800679e:	e00a      	b.n	80067b6 <UART_SetConfig+0x27e>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067a6:	e006      	b.n	80067b6 <UART_SetConfig+0x27e>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ae:	e002      	b.n	80067b6 <UART_SetConfig+0x27e>
 80067b0:	2310      	movs	r3, #16
 80067b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a17      	ldr	r2, [pc, #92]	@ (8006818 <UART_SetConfig+0x2e0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	f040 80a8 	bne.w	8006912 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d834      	bhi.n	8006834 <UART_SetConfig+0x2fc>
 80067ca:	a201      	add	r2, pc, #4	@ (adr r2, 80067d0 <UART_SetConfig+0x298>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	080067f5 	.word	0x080067f5
 80067d4:	08006835 	.word	0x08006835
 80067d8:	080067fd 	.word	0x080067fd
 80067dc:	08006835 	.word	0x08006835
 80067e0:	08006803 	.word	0x08006803
 80067e4:	08006835 	.word	0x08006835
 80067e8:	08006835 	.word	0x08006835
 80067ec:	08006835 	.word	0x08006835
 80067f0:	0800680b 	.word	0x0800680b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f4:	f7fe fa98 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 80067f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067fa:	e021      	b.n	8006840 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006830 <UART_SetConfig+0x2f8>)
 80067fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006800:	e01e      	b.n	8006840 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006802:	f7fe fa23 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006806:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006808:	e01a      	b.n	8006840 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800680a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800680e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006810:	e016      	b.n	8006840 <UART_SetConfig+0x308>
 8006812:	bf00      	nop
 8006814:	cfff69f3 	.word	0xcfff69f3
 8006818:	40008000 	.word	0x40008000
 800681c:	40013800 	.word	0x40013800
 8006820:	40021000 	.word	0x40021000
 8006824:	40004400 	.word	0x40004400
 8006828:	40004800 	.word	0x40004800
 800682c:	40004c00 	.word	0x40004c00
 8006830:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800683e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 812a 	beq.w	8006a9c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684c:	4a9e      	ldr	r2, [pc, #632]	@ (8006ac8 <UART_SetConfig+0x590>)
 800684e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006852:	461a      	mov	r2, r3
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	fbb3 f3f2 	udiv	r3, r3, r2
 800685a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	4613      	mov	r3, r2
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	4413      	add	r3, r2
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	429a      	cmp	r2, r3
 800686a:	d305      	bcc.n	8006878 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	429a      	cmp	r2, r3
 8006876:	d903      	bls.n	8006880 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800687e:	e10d      	b.n	8006a9c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	2200      	movs	r2, #0
 8006884:	60bb      	str	r3, [r7, #8]
 8006886:	60fa      	str	r2, [r7, #12]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688c:	4a8e      	ldr	r2, [pc, #568]	@ (8006ac8 <UART_SetConfig+0x590>)
 800688e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006892:	b29b      	uxth	r3, r3
 8006894:	2200      	movs	r2, #0
 8006896:	603b      	str	r3, [r7, #0]
 8006898:	607a      	str	r2, [r7, #4]
 800689a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800689e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068a2:	f7f9 ffef 	bl	8000884 <__aeabi_uldivmod>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4610      	mov	r0, r2
 80068ac:	4619      	mov	r1, r3
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	020b      	lsls	r3, r1, #8
 80068b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068bc:	0202      	lsls	r2, r0, #8
 80068be:	6979      	ldr	r1, [r7, #20]
 80068c0:	6849      	ldr	r1, [r1, #4]
 80068c2:	0849      	lsrs	r1, r1, #1
 80068c4:	2000      	movs	r0, #0
 80068c6:	460c      	mov	r4, r1
 80068c8:	4605      	mov	r5, r0
 80068ca:	eb12 0804 	adds.w	r8, r2, r4
 80068ce:	eb43 0905 	adc.w	r9, r3, r5
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	469a      	mov	sl, r3
 80068da:	4693      	mov	fp, r2
 80068dc:	4652      	mov	r2, sl
 80068de:	465b      	mov	r3, fp
 80068e0:	4640      	mov	r0, r8
 80068e2:	4649      	mov	r1, r9
 80068e4:	f7f9 ffce 	bl	8000884 <__aeabi_uldivmod>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4613      	mov	r3, r2
 80068ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068f6:	d308      	bcc.n	800690a <UART_SetConfig+0x3d2>
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068fe:	d204      	bcs.n	800690a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6a3a      	ldr	r2, [r7, #32]
 8006906:	60da      	str	r2, [r3, #12]
 8006908:	e0c8      	b.n	8006a9c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006910:	e0c4      	b.n	8006a9c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800691a:	d167      	bne.n	80069ec <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800691c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006920:	2b08      	cmp	r3, #8
 8006922:	d828      	bhi.n	8006976 <UART_SetConfig+0x43e>
 8006924:	a201      	add	r2, pc, #4	@ (adr r2, 800692c <UART_SetConfig+0x3f4>)
 8006926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692a:	bf00      	nop
 800692c:	08006951 	.word	0x08006951
 8006930:	08006959 	.word	0x08006959
 8006934:	08006961 	.word	0x08006961
 8006938:	08006977 	.word	0x08006977
 800693c:	08006967 	.word	0x08006967
 8006940:	08006977 	.word	0x08006977
 8006944:	08006977 	.word	0x08006977
 8006948:	08006977 	.word	0x08006977
 800694c:	0800696f 	.word	0x0800696f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006950:	f7fe f9ea 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8006954:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006956:	e014      	b.n	8006982 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006958:	f7fe f9fc 	bl	8004d54 <HAL_RCC_GetPCLK2Freq>
 800695c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800695e:	e010      	b.n	8006982 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006960:	4b5a      	ldr	r3, [pc, #360]	@ (8006acc <UART_SetConfig+0x594>)
 8006962:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006964:	e00d      	b.n	8006982 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006966:	f7fe f971 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 800696a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800696c:	e009      	b.n	8006982 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006974:	e005      	b.n	8006982 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8089 	beq.w	8006a9c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	4a4e      	ldr	r2, [pc, #312]	@ (8006ac8 <UART_SetConfig+0x590>)
 8006990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006994:	461a      	mov	r2, r3
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	fbb3 f3f2 	udiv	r3, r3, r2
 800699c:	005a      	lsls	r2, r3, #1
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	441a      	add	r2, r3
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	2b0f      	cmp	r3, #15
 80069b4:	d916      	bls.n	80069e4 <UART_SetConfig+0x4ac>
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069bc:	d212      	bcs.n	80069e4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f023 030f 	bic.w	r3, r3, #15
 80069c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	085b      	lsrs	r3, r3, #1
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	8bfb      	ldrh	r3, [r7, #30]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	8bfa      	ldrh	r2, [r7, #30]
 80069e0:	60da      	str	r2, [r3, #12]
 80069e2:	e05b      	b.n	8006a9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80069ea:	e057      	b.n	8006a9c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d828      	bhi.n	8006a46 <UART_SetConfig+0x50e>
 80069f4:	a201      	add	r2, pc, #4	@ (adr r2, 80069fc <UART_SetConfig+0x4c4>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006a21 	.word	0x08006a21
 8006a00:	08006a29 	.word	0x08006a29
 8006a04:	08006a31 	.word	0x08006a31
 8006a08:	08006a47 	.word	0x08006a47
 8006a0c:	08006a37 	.word	0x08006a37
 8006a10:	08006a47 	.word	0x08006a47
 8006a14:	08006a47 	.word	0x08006a47
 8006a18:	08006a47 	.word	0x08006a47
 8006a1c:	08006a3f 	.word	0x08006a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a20:	f7fe f982 	bl	8004d28 <HAL_RCC_GetPCLK1Freq>
 8006a24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a26:	e014      	b.n	8006a52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a28:	f7fe f994 	bl	8004d54 <HAL_RCC_GetPCLK2Freq>
 8006a2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a2e:	e010      	b.n	8006a52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a30:	4b26      	ldr	r3, [pc, #152]	@ (8006acc <UART_SetConfig+0x594>)
 8006a32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a34:	e00d      	b.n	8006a52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a36:	f7fe f909 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006a3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a3c:	e009      	b.n	8006a52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a44:	e005      	b.n	8006a52 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a50:	bf00      	nop
    }

    if (pclk != 0U)
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d021      	beq.n	8006a9c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ac8 <UART_SetConfig+0x590>)
 8006a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a62:	461a      	mov	r2, r3
 8006a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a66:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	441a      	add	r2, r3
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	2b0f      	cmp	r3, #15
 8006a80:	d909      	bls.n	8006a96 <UART_SetConfig+0x55e>
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a88:	d205      	bcs.n	8006a96 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60da      	str	r2, [r3, #12]
 8006a94:	e002      	b.n	8006a9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ab8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3730      	adds	r7, #48	@ 0x30
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ac6:	bf00      	nop
 8006ac8:	08007c84 	.word	0x08007c84
 8006acc:	00f42400 	.word	0x00f42400

08006ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00a      	beq.n	8006afa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b42:	f003 0304 	and.w	r3, r3, #4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01a      	beq.n	8006be6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bce:	d10a      	bne.n	8006be6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	605a      	str	r2, [r3, #4]
  }
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b098      	sub	sp, #96	@ 0x60
 8006c18:	af02      	add	r7, sp, #8
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c24:	f7fb fa68 	bl	80020f8 <HAL_GetTick>
 8006c28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d12f      	bne.n	8006c98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c40:	2200      	movs	r2, #0
 8006c42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f88e 	bl	8006d68 <UART_WaitOnFlagUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d022      	beq.n	8006c98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e6      	bne.n	8006c52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e063      	b.n	8006d60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d149      	bne.n	8006d3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ca6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f857 	bl	8006d68 <UART_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d03c      	beq.n	8006d3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cde:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ce0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e6      	bne.n	8006cc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3308      	adds	r3, #8
 8006cf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f023 0301 	bic.w	r3, r3, #1
 8006d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3308      	adds	r3, #8
 8006d10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d12:	61fa      	str	r2, [r7, #28]
 8006d14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	69b9      	ldr	r1, [r7, #24]
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	617b      	str	r3, [r7, #20]
   return(result);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e5      	bne.n	8006cf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e012      	b.n	8006d60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3758      	adds	r7, #88	@ 0x58
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	4613      	mov	r3, r2
 8006d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d78:	e04f      	b.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d80:	d04b      	beq.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d82:	f7fb f9b9 	bl	80020f8 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d302      	bcc.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e04e      	b.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d037      	beq.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b80      	cmp	r3, #128	@ 0x80
 8006dae:	d034      	beq.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b40      	cmp	r3, #64	@ 0x40
 8006db4:	d031      	beq.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d110      	bne.n	8006de6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2208      	movs	r2, #8
 8006dca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 f838 	bl	8006e42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e029      	b.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df4:	d111      	bne.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 f81e 	bl	8006e42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e00f      	b.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69da      	ldr	r2, [r3, #28]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	4013      	ands	r3, r2
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	bf0c      	ite	eq
 8006e2a:	2301      	moveq	r3, #1
 8006e2c:	2300      	movne	r3, #0
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	461a      	mov	r2, r3
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d0a0      	beq.n	8006d7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b095      	sub	sp, #84	@ 0x54
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e68:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e6      	bne.n	8006e4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3308      	adds	r3, #8
 8006e82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e92:	f023 0301 	bic.w	r3, r3, #1
 8006e96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3308      	adds	r3, #8
 8006e9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ea0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ea8:	e841 2300 	strex	r3, r2, [r1]
 8006eac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e3      	bne.n	8006e7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d118      	bne.n	8006eee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f023 0310 	bic.w	r3, r3, #16
 8006ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eda:	61bb      	str	r3, [r7, #24]
 8006edc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	6979      	ldr	r1, [r7, #20]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e6      	bne.n	8006ebc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f02:	bf00      	nop
 8006f04:	3754      	adds	r7, #84	@ 0x54
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b085      	sub	sp, #20
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d101      	bne.n	8006f24 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f20:	2302      	movs	r3, #2
 8006f22:	e027      	b.n	8006f74 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2224      	movs	r2, #36	@ 0x24
 8006f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0201 	bic.w	r2, r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e02d      	b.n	8006ff4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2224      	movs	r2, #36	@ 0x24
 8006fa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0201 	bic.w	r2, r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f84f 	bl	8007078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007010:	2302      	movs	r3, #2
 8007012:	e02d      	b.n	8007070 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2224      	movs	r2, #36	@ 0x24
 8007020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0201 	bic.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f811 	bl	8007078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007084:	2b00      	cmp	r3, #0
 8007086:	d108      	bne.n	800709a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007098:	e031      	b.n	80070fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800709a:	2308      	movs	r3, #8
 800709c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800709e:	2308      	movs	r3, #8
 80070a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	0e5b      	lsrs	r3, r3, #25
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	0f5b      	lsrs	r3, r3, #29
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	7b3a      	ldrb	r2, [r7, #12]
 80070c6:	4911      	ldr	r1, [pc, #68]	@ (800710c <UARTEx_SetNbDataToProcess+0x94>)
 80070c8:	5c8a      	ldrb	r2, [r1, r2]
 80070ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070ce:	7b3a      	ldrb	r2, [r7, #12]
 80070d0:	490f      	ldr	r1, [pc, #60]	@ (8007110 <UARTEx_SetNbDataToProcess+0x98>)
 80070d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80070d8:	b29a      	uxth	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	7b7a      	ldrb	r2, [r7, #13]
 80070e4:	4909      	ldr	r1, [pc, #36]	@ (800710c <UARTEx_SetNbDataToProcess+0x94>)
 80070e6:	5c8a      	ldrb	r2, [r1, r2]
 80070e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070ec:	7b7a      	ldrb	r2, [r7, #13]
 80070ee:	4908      	ldr	r1, [pc, #32]	@ (8007110 <UARTEx_SetNbDataToProcess+0x98>)
 80070f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	08007c9c 	.word	0x08007c9c
 8007110:	08007ca4 	.word	0x08007ca4

08007114 <cosf>:
 8007114:	ee10 3a10 	vmov	r3, s0
 8007118:	b507      	push	{r0, r1, r2, lr}
 800711a:	4a1e      	ldr	r2, [pc, #120]	@ (8007194 <cosf+0x80>)
 800711c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007120:	4293      	cmp	r3, r2
 8007122:	d806      	bhi.n	8007132 <cosf+0x1e>
 8007124:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8007198 <cosf+0x84>
 8007128:	b003      	add	sp, #12
 800712a:	f85d eb04 	ldr.w	lr, [sp], #4
 800712e:	f000 b87b 	b.w	8007228 <__kernel_cosf>
 8007132:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007136:	d304      	bcc.n	8007142 <cosf+0x2e>
 8007138:	ee30 0a40 	vsub.f32	s0, s0, s0
 800713c:	b003      	add	sp, #12
 800713e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007142:	4668      	mov	r0, sp
 8007144:	f000 f910 	bl	8007368 <__ieee754_rem_pio2f>
 8007148:	f000 0003 	and.w	r0, r0, #3
 800714c:	2801      	cmp	r0, #1
 800714e:	d009      	beq.n	8007164 <cosf+0x50>
 8007150:	2802      	cmp	r0, #2
 8007152:	d010      	beq.n	8007176 <cosf+0x62>
 8007154:	b9b0      	cbnz	r0, 8007184 <cosf+0x70>
 8007156:	eddd 0a01 	vldr	s1, [sp, #4]
 800715a:	ed9d 0a00 	vldr	s0, [sp]
 800715e:	f000 f863 	bl	8007228 <__kernel_cosf>
 8007162:	e7eb      	b.n	800713c <cosf+0x28>
 8007164:	eddd 0a01 	vldr	s1, [sp, #4]
 8007168:	ed9d 0a00 	vldr	s0, [sp]
 800716c:	f000 f8b4 	bl	80072d8 <__kernel_sinf>
 8007170:	eeb1 0a40 	vneg.f32	s0, s0
 8007174:	e7e2      	b.n	800713c <cosf+0x28>
 8007176:	eddd 0a01 	vldr	s1, [sp, #4]
 800717a:	ed9d 0a00 	vldr	s0, [sp]
 800717e:	f000 f853 	bl	8007228 <__kernel_cosf>
 8007182:	e7f5      	b.n	8007170 <cosf+0x5c>
 8007184:	eddd 0a01 	vldr	s1, [sp, #4]
 8007188:	ed9d 0a00 	vldr	s0, [sp]
 800718c:	2001      	movs	r0, #1
 800718e:	f000 f8a3 	bl	80072d8 <__kernel_sinf>
 8007192:	e7d3      	b.n	800713c <cosf+0x28>
 8007194:	3f490fd8 	.word	0x3f490fd8
 8007198:	00000000 	.word	0x00000000

0800719c <sinf>:
 800719c:	ee10 3a10 	vmov	r3, s0
 80071a0:	b507      	push	{r0, r1, r2, lr}
 80071a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007220 <sinf+0x84>)
 80071a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d807      	bhi.n	80071bc <sinf+0x20>
 80071ac:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8007224 <sinf+0x88>
 80071b0:	2000      	movs	r0, #0
 80071b2:	b003      	add	sp, #12
 80071b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071b8:	f000 b88e 	b.w	80072d8 <__kernel_sinf>
 80071bc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80071c0:	d304      	bcc.n	80071cc <sinf+0x30>
 80071c2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80071c6:	b003      	add	sp, #12
 80071c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80071cc:	4668      	mov	r0, sp
 80071ce:	f000 f8cb 	bl	8007368 <__ieee754_rem_pio2f>
 80071d2:	f000 0003 	and.w	r0, r0, #3
 80071d6:	2801      	cmp	r0, #1
 80071d8:	d00a      	beq.n	80071f0 <sinf+0x54>
 80071da:	2802      	cmp	r0, #2
 80071dc:	d00f      	beq.n	80071fe <sinf+0x62>
 80071de:	b9c0      	cbnz	r0, 8007212 <sinf+0x76>
 80071e0:	eddd 0a01 	vldr	s1, [sp, #4]
 80071e4:	ed9d 0a00 	vldr	s0, [sp]
 80071e8:	2001      	movs	r0, #1
 80071ea:	f000 f875 	bl	80072d8 <__kernel_sinf>
 80071ee:	e7ea      	b.n	80071c6 <sinf+0x2a>
 80071f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80071f4:	ed9d 0a00 	vldr	s0, [sp]
 80071f8:	f000 f816 	bl	8007228 <__kernel_cosf>
 80071fc:	e7e3      	b.n	80071c6 <sinf+0x2a>
 80071fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8007202:	ed9d 0a00 	vldr	s0, [sp]
 8007206:	2001      	movs	r0, #1
 8007208:	f000 f866 	bl	80072d8 <__kernel_sinf>
 800720c:	eeb1 0a40 	vneg.f32	s0, s0
 8007210:	e7d9      	b.n	80071c6 <sinf+0x2a>
 8007212:	eddd 0a01 	vldr	s1, [sp, #4]
 8007216:	ed9d 0a00 	vldr	s0, [sp]
 800721a:	f000 f805 	bl	8007228 <__kernel_cosf>
 800721e:	e7f5      	b.n	800720c <sinf+0x70>
 8007220:	3f490fd8 	.word	0x3f490fd8
 8007224:	00000000 	.word	0x00000000

08007228 <__kernel_cosf>:
 8007228:	ee10 3a10 	vmov	r3, s0
 800722c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007230:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007234:	eef0 6a40 	vmov.f32	s13, s0
 8007238:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800723c:	d204      	bcs.n	8007248 <__kernel_cosf+0x20>
 800723e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8007242:	ee17 2a90 	vmov	r2, s15
 8007246:	b342      	cbz	r2, 800729a <__kernel_cosf+0x72>
 8007248:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800724c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80072b8 <__kernel_cosf+0x90>
 8007250:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80072bc <__kernel_cosf+0x94>
 8007254:	4a1a      	ldr	r2, [pc, #104]	@ (80072c0 <__kernel_cosf+0x98>)
 8007256:	eea7 6a27 	vfma.f32	s12, s14, s15
 800725a:	4293      	cmp	r3, r2
 800725c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80072c4 <__kernel_cosf+0x9c>
 8007260:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007264:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80072c8 <__kernel_cosf+0xa0>
 8007268:	eea7 6a87 	vfma.f32	s12, s15, s14
 800726c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80072cc <__kernel_cosf+0xa4>
 8007270:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007274:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80072d0 <__kernel_cosf+0xa8>
 8007278:	eea7 6a87 	vfma.f32	s12, s15, s14
 800727c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8007280:	ee26 6a07 	vmul.f32	s12, s12, s14
 8007284:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007288:	eee7 0a06 	vfma.f32	s1, s14, s12
 800728c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007290:	d804      	bhi.n	800729c <__kernel_cosf+0x74>
 8007292:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007296:	ee30 0a67 	vsub.f32	s0, s0, s15
 800729a:	4770      	bx	lr
 800729c:	4a0d      	ldr	r2, [pc, #52]	@ (80072d4 <__kernel_cosf+0xac>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	bf9a      	itte	ls
 80072a2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80072a6:	ee07 3a10 	vmovls	s14, r3
 80072aa:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80072ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 80072b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072b6:	e7ec      	b.n	8007292 <__kernel_cosf+0x6a>
 80072b8:	ad47d74e 	.word	0xad47d74e
 80072bc:	310f74f6 	.word	0x310f74f6
 80072c0:	3e999999 	.word	0x3e999999
 80072c4:	b493f27c 	.word	0xb493f27c
 80072c8:	37d00d01 	.word	0x37d00d01
 80072cc:	bab60b61 	.word	0xbab60b61
 80072d0:	3d2aaaab 	.word	0x3d2aaaab
 80072d4:	3f480000 	.word	0x3f480000

080072d8 <__kernel_sinf>:
 80072d8:	ee10 3a10 	vmov	r3, s0
 80072dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072e0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80072e4:	d204      	bcs.n	80072f0 <__kernel_sinf+0x18>
 80072e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80072ea:	ee17 3a90 	vmov	r3, s15
 80072ee:	b35b      	cbz	r3, 8007348 <__kernel_sinf+0x70>
 80072f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80072f4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800734c <__kernel_sinf+0x74>
 80072f8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8007350 <__kernel_sinf+0x78>
 80072fc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007300:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8007354 <__kernel_sinf+0x7c>
 8007304:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007308:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8007358 <__kernel_sinf+0x80>
 800730c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007310:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800735c <__kernel_sinf+0x84>
 8007314:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007318:	eee6 7a07 	vfma.f32	s15, s12, s14
 800731c:	b930      	cbnz	r0, 800732c <__kernel_sinf+0x54>
 800731e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8007360 <__kernel_sinf+0x88>
 8007322:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007326:	eea6 0a26 	vfma.f32	s0, s12, s13
 800732a:	4770      	bx	lr
 800732c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007330:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8007334:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007338:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800733c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8007364 <__kernel_sinf+0x8c>
 8007340:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007344:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	2f2ec9d3 	.word	0x2f2ec9d3
 8007350:	b2d72f34 	.word	0xb2d72f34
 8007354:	3638ef1b 	.word	0x3638ef1b
 8007358:	b9500d01 	.word	0xb9500d01
 800735c:	3c088889 	.word	0x3c088889
 8007360:	be2aaaab 	.word	0xbe2aaaab
 8007364:	3e2aaaab 	.word	0x3e2aaaab

08007368 <__ieee754_rem_pio2f>:
 8007368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800736a:	ee10 6a10 	vmov	r6, s0
 800736e:	4b88      	ldr	r3, [pc, #544]	@ (8007590 <__ieee754_rem_pio2f+0x228>)
 8007370:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8007374:	429d      	cmp	r5, r3
 8007376:	b087      	sub	sp, #28
 8007378:	4604      	mov	r4, r0
 800737a:	d805      	bhi.n	8007388 <__ieee754_rem_pio2f+0x20>
 800737c:	2300      	movs	r3, #0
 800737e:	ed80 0a00 	vstr	s0, [r0]
 8007382:	6043      	str	r3, [r0, #4]
 8007384:	2000      	movs	r0, #0
 8007386:	e022      	b.n	80073ce <__ieee754_rem_pio2f+0x66>
 8007388:	4b82      	ldr	r3, [pc, #520]	@ (8007594 <__ieee754_rem_pio2f+0x22c>)
 800738a:	429d      	cmp	r5, r3
 800738c:	d83a      	bhi.n	8007404 <__ieee754_rem_pio2f+0x9c>
 800738e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007392:	2e00      	cmp	r6, #0
 8007394:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007598 <__ieee754_rem_pio2f+0x230>
 8007398:	4a80      	ldr	r2, [pc, #512]	@ (800759c <__ieee754_rem_pio2f+0x234>)
 800739a:	f023 030f 	bic.w	r3, r3, #15
 800739e:	dd18      	ble.n	80073d2 <__ieee754_rem_pio2f+0x6a>
 80073a0:	4293      	cmp	r3, r2
 80073a2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80073a6:	bf09      	itett	eq
 80073a8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80075a0 <__ieee754_rem_pio2f+0x238>
 80073ac:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80075a4 <__ieee754_rem_pio2f+0x23c>
 80073b0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80075a8 <__ieee754_rem_pio2f+0x240>
 80073b4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80073b8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80073bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073c0:	ed80 7a00 	vstr	s14, [r0]
 80073c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073c8:	edc0 7a01 	vstr	s15, [r0, #4]
 80073cc:	2001      	movs	r0, #1
 80073ce:	b007      	add	sp, #28
 80073d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d2:	4293      	cmp	r3, r2
 80073d4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80073d8:	bf09      	itett	eq
 80073da:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80075a0 <__ieee754_rem_pio2f+0x238>
 80073de:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80075a4 <__ieee754_rem_pio2f+0x23c>
 80073e2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80075a8 <__ieee754_rem_pio2f+0x240>
 80073e6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80073ea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80073ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073f2:	ed80 7a00 	vstr	s14, [r0]
 80073f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073fa:	edc0 7a01 	vstr	s15, [r0, #4]
 80073fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007402:	e7e4      	b.n	80073ce <__ieee754_rem_pio2f+0x66>
 8007404:	4b69      	ldr	r3, [pc, #420]	@ (80075ac <__ieee754_rem_pio2f+0x244>)
 8007406:	429d      	cmp	r5, r3
 8007408:	d873      	bhi.n	80074f2 <__ieee754_rem_pio2f+0x18a>
 800740a:	f000 f8dd 	bl	80075c8 <fabsf>
 800740e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80075b0 <__ieee754_rem_pio2f+0x248>
 8007412:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007416:	eee0 7a07 	vfma.f32	s15, s0, s14
 800741a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800741e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007422:	ee17 0a90 	vmov	r0, s15
 8007426:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007598 <__ieee754_rem_pio2f+0x230>
 800742a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800742e:	281f      	cmp	r0, #31
 8007430:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80075a4 <__ieee754_rem_pio2f+0x23c>
 8007434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007438:	eeb1 6a47 	vneg.f32	s12, s14
 800743c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007440:	ee16 1a90 	vmov	r1, s13
 8007444:	dc09      	bgt.n	800745a <__ieee754_rem_pio2f+0xf2>
 8007446:	4a5b      	ldr	r2, [pc, #364]	@ (80075b4 <__ieee754_rem_pio2f+0x24c>)
 8007448:	1e47      	subs	r7, r0, #1
 800744a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800744e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8007452:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007456:	4293      	cmp	r3, r2
 8007458:	d107      	bne.n	800746a <__ieee754_rem_pio2f+0x102>
 800745a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800745e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8007462:	2a08      	cmp	r2, #8
 8007464:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007468:	dc14      	bgt.n	8007494 <__ieee754_rem_pio2f+0x12c>
 800746a:	6021      	str	r1, [r4, #0]
 800746c:	ed94 7a00 	vldr	s14, [r4]
 8007470:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007474:	2e00      	cmp	r6, #0
 8007476:	ee30 0a67 	vsub.f32	s0, s0, s15
 800747a:	ed84 0a01 	vstr	s0, [r4, #4]
 800747e:	daa6      	bge.n	80073ce <__ieee754_rem_pio2f+0x66>
 8007480:	eeb1 7a47 	vneg.f32	s14, s14
 8007484:	eeb1 0a40 	vneg.f32	s0, s0
 8007488:	ed84 7a00 	vstr	s14, [r4]
 800748c:	ed84 0a01 	vstr	s0, [r4, #4]
 8007490:	4240      	negs	r0, r0
 8007492:	e79c      	b.n	80073ce <__ieee754_rem_pio2f+0x66>
 8007494:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80075a0 <__ieee754_rem_pio2f+0x238>
 8007498:	eef0 6a40 	vmov.f32	s13, s0
 800749c:	eee6 6a25 	vfma.f32	s13, s12, s11
 80074a0:	ee70 7a66 	vsub.f32	s15, s0, s13
 80074a4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80074a8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80075a8 <__ieee754_rem_pio2f+0x240>
 80074ac:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80074b0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80074b4:	ee15 2a90 	vmov	r2, s11
 80074b8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80074bc:	1a5b      	subs	r3, r3, r1
 80074be:	2b19      	cmp	r3, #25
 80074c0:	dc04      	bgt.n	80074cc <__ieee754_rem_pio2f+0x164>
 80074c2:	edc4 5a00 	vstr	s11, [r4]
 80074c6:	eeb0 0a66 	vmov.f32	s0, s13
 80074ca:	e7cf      	b.n	800746c <__ieee754_rem_pio2f+0x104>
 80074cc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80075b8 <__ieee754_rem_pio2f+0x250>
 80074d0:	eeb0 0a66 	vmov.f32	s0, s13
 80074d4:	eea6 0a25 	vfma.f32	s0, s12, s11
 80074d8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80074dc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80075bc <__ieee754_rem_pio2f+0x254>
 80074e0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80074e4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80074e8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80074ec:	ed84 7a00 	vstr	s14, [r4]
 80074f0:	e7bc      	b.n	800746c <__ieee754_rem_pio2f+0x104>
 80074f2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80074f6:	d306      	bcc.n	8007506 <__ieee754_rem_pio2f+0x19e>
 80074f8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80074fc:	edc0 7a01 	vstr	s15, [r0, #4]
 8007500:	edc0 7a00 	vstr	s15, [r0]
 8007504:	e73e      	b.n	8007384 <__ieee754_rem_pio2f+0x1c>
 8007506:	15ea      	asrs	r2, r5, #23
 8007508:	3a86      	subs	r2, #134	@ 0x86
 800750a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007516:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80075c0 <__ieee754_rem_pio2f+0x258>
 800751a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800751e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007522:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007526:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800752a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800752e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007532:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007536:	ed8d 7a04 	vstr	s14, [sp, #16]
 800753a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800753e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007546:	edcd 7a05 	vstr	s15, [sp, #20]
 800754a:	d11e      	bne.n	800758a <__ieee754_rem_pio2f+0x222>
 800754c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007554:	bf0c      	ite	eq
 8007556:	2301      	moveq	r3, #1
 8007558:	2302      	movne	r3, #2
 800755a:	491a      	ldr	r1, [pc, #104]	@ (80075c4 <__ieee754_rem_pio2f+0x25c>)
 800755c:	9101      	str	r1, [sp, #4]
 800755e:	2102      	movs	r1, #2
 8007560:	9100      	str	r1, [sp, #0]
 8007562:	a803      	add	r0, sp, #12
 8007564:	4621      	mov	r1, r4
 8007566:	f000 f837 	bl	80075d8 <__kernel_rem_pio2f>
 800756a:	2e00      	cmp	r6, #0
 800756c:	f6bf af2f 	bge.w	80073ce <__ieee754_rem_pio2f+0x66>
 8007570:	edd4 7a00 	vldr	s15, [r4]
 8007574:	eef1 7a67 	vneg.f32	s15, s15
 8007578:	edc4 7a00 	vstr	s15, [r4]
 800757c:	edd4 7a01 	vldr	s15, [r4, #4]
 8007580:	eef1 7a67 	vneg.f32	s15, s15
 8007584:	edc4 7a01 	vstr	s15, [r4, #4]
 8007588:	e782      	b.n	8007490 <__ieee754_rem_pio2f+0x128>
 800758a:	2303      	movs	r3, #3
 800758c:	e7e5      	b.n	800755a <__ieee754_rem_pio2f+0x1f2>
 800758e:	bf00      	nop
 8007590:	3f490fd8 	.word	0x3f490fd8
 8007594:	4016cbe3 	.word	0x4016cbe3
 8007598:	3fc90f80 	.word	0x3fc90f80
 800759c:	3fc90fd0 	.word	0x3fc90fd0
 80075a0:	37354400 	.word	0x37354400
 80075a4:	37354443 	.word	0x37354443
 80075a8:	2e85a308 	.word	0x2e85a308
 80075ac:	43490f80 	.word	0x43490f80
 80075b0:	3f22f984 	.word	0x3f22f984
 80075b4:	08007cac 	.word	0x08007cac
 80075b8:	2e85a300 	.word	0x2e85a300
 80075bc:	248d3132 	.word	0x248d3132
 80075c0:	43800000 	.word	0x43800000
 80075c4:	08007d2c 	.word	0x08007d2c

080075c8 <fabsf>:
 80075c8:	ee10 3a10 	vmov	r3, s0
 80075cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075d0:	ee00 3a10 	vmov	s0, r3
 80075d4:	4770      	bx	lr
	...

080075d8 <__kernel_rem_pio2f>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	ed2d 8b04 	vpush	{d8-d9}
 80075e0:	b0d9      	sub	sp, #356	@ 0x164
 80075e2:	4690      	mov	r8, r2
 80075e4:	9001      	str	r0, [sp, #4]
 80075e6:	4ab6      	ldr	r2, [pc, #728]	@ (80078c0 <__kernel_rem_pio2f+0x2e8>)
 80075e8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80075ea:	f118 0f04 	cmn.w	r8, #4
 80075ee:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80075f2:	460f      	mov	r7, r1
 80075f4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80075f8:	db26      	blt.n	8007648 <__kernel_rem_pio2f+0x70>
 80075fa:	f1b8 0203 	subs.w	r2, r8, #3
 80075fe:	bf48      	it	mi
 8007600:	f108 0204 	addmi.w	r2, r8, #4
 8007604:	10d2      	asrs	r2, r2, #3
 8007606:	1c55      	adds	r5, r2, #1
 8007608:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800760a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80078d0 <__kernel_rem_pio2f+0x2f8>
 800760e:	00e8      	lsls	r0, r5, #3
 8007610:	eba2 060b 	sub.w	r6, r2, fp
 8007614:	9002      	str	r0, [sp, #8]
 8007616:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800761a:	eb0a 0c0b 	add.w	ip, sl, fp
 800761e:	ac1c      	add	r4, sp, #112	@ 0x70
 8007620:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8007624:	2000      	movs	r0, #0
 8007626:	4560      	cmp	r0, ip
 8007628:	dd10      	ble.n	800764c <__kernel_rem_pio2f+0x74>
 800762a:	a91c      	add	r1, sp, #112	@ 0x70
 800762c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8007630:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8007634:	2600      	movs	r6, #0
 8007636:	4556      	cmp	r6, sl
 8007638:	dc24      	bgt.n	8007684 <__kernel_rem_pio2f+0xac>
 800763a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800763e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80078d0 <__kernel_rem_pio2f+0x2f8>
 8007642:	4684      	mov	ip, r0
 8007644:	2400      	movs	r4, #0
 8007646:	e016      	b.n	8007676 <__kernel_rem_pio2f+0x9e>
 8007648:	2200      	movs	r2, #0
 800764a:	e7dc      	b.n	8007606 <__kernel_rem_pio2f+0x2e>
 800764c:	42c6      	cmn	r6, r0
 800764e:	bf5d      	ittte	pl
 8007650:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8007654:	ee07 1a90 	vmovpl	s15, r1
 8007658:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800765c:	eef0 7a47 	vmovmi.f32	s15, s14
 8007660:	ece4 7a01 	vstmia	r4!, {s15}
 8007664:	3001      	adds	r0, #1
 8007666:	e7de      	b.n	8007626 <__kernel_rem_pio2f+0x4e>
 8007668:	ecfe 6a01 	vldmia	lr!, {s13}
 800766c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8007670:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007674:	3401      	adds	r4, #1
 8007676:	455c      	cmp	r4, fp
 8007678:	ddf6      	ble.n	8007668 <__kernel_rem_pio2f+0x90>
 800767a:	ece9 7a01 	vstmia	r9!, {s15}
 800767e:	3601      	adds	r6, #1
 8007680:	3004      	adds	r0, #4
 8007682:	e7d8      	b.n	8007636 <__kernel_rem_pio2f+0x5e>
 8007684:	a908      	add	r1, sp, #32
 8007686:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800768a:	9104      	str	r1, [sp, #16]
 800768c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800768e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80078cc <__kernel_rem_pio2f+0x2f4>
 8007692:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80078c8 <__kernel_rem_pio2f+0x2f0>
 8007696:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800769a:	9203      	str	r2, [sp, #12]
 800769c:	4654      	mov	r4, sl
 800769e:	00a2      	lsls	r2, r4, #2
 80076a0:	9205      	str	r2, [sp, #20]
 80076a2:	aa58      	add	r2, sp, #352	@ 0x160
 80076a4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80076a8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80076ac:	a944      	add	r1, sp, #272	@ 0x110
 80076ae:	aa08      	add	r2, sp, #32
 80076b0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80076b4:	4694      	mov	ip, r2
 80076b6:	4626      	mov	r6, r4
 80076b8:	2e00      	cmp	r6, #0
 80076ba:	dc4c      	bgt.n	8007756 <__kernel_rem_pio2f+0x17e>
 80076bc:	4628      	mov	r0, r5
 80076be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076c2:	f000 fa35 	bl	8007b30 <scalbnf>
 80076c6:	eeb0 8a40 	vmov.f32	s16, s0
 80076ca:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80076ce:	ee28 0a00 	vmul.f32	s0, s16, s0
 80076d2:	f000 f9e9 	bl	8007aa8 <floorf>
 80076d6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80076da:	eea0 8a67 	vfms.f32	s16, s0, s15
 80076de:	2d00      	cmp	r5, #0
 80076e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076e4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80076e8:	ee17 9a90 	vmov	r9, s15
 80076ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076f0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80076f4:	dd41      	ble.n	800777a <__kernel_rem_pio2f+0x1a2>
 80076f6:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80076fa:	a908      	add	r1, sp, #32
 80076fc:	f1c5 0e08 	rsb	lr, r5, #8
 8007700:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8007704:	fa46 f00e 	asr.w	r0, r6, lr
 8007708:	4481      	add	r9, r0
 800770a:	fa00 f00e 	lsl.w	r0, r0, lr
 800770e:	1a36      	subs	r6, r6, r0
 8007710:	f1c5 0007 	rsb	r0, r5, #7
 8007714:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8007718:	4106      	asrs	r6, r0
 800771a:	2e00      	cmp	r6, #0
 800771c:	dd3c      	ble.n	8007798 <__kernel_rem_pio2f+0x1c0>
 800771e:	f04f 0e00 	mov.w	lr, #0
 8007722:	f109 0901 	add.w	r9, r9, #1
 8007726:	4670      	mov	r0, lr
 8007728:	4574      	cmp	r4, lr
 800772a:	dc68      	bgt.n	80077fe <__kernel_rem_pio2f+0x226>
 800772c:	2d00      	cmp	r5, #0
 800772e:	dd03      	ble.n	8007738 <__kernel_rem_pio2f+0x160>
 8007730:	2d01      	cmp	r5, #1
 8007732:	d074      	beq.n	800781e <__kernel_rem_pio2f+0x246>
 8007734:	2d02      	cmp	r5, #2
 8007736:	d07d      	beq.n	8007834 <__kernel_rem_pio2f+0x25c>
 8007738:	2e02      	cmp	r6, #2
 800773a:	d12d      	bne.n	8007798 <__kernel_rem_pio2f+0x1c0>
 800773c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007740:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007744:	b340      	cbz	r0, 8007798 <__kernel_rem_pio2f+0x1c0>
 8007746:	4628      	mov	r0, r5
 8007748:	9306      	str	r3, [sp, #24]
 800774a:	f000 f9f1 	bl	8007b30 <scalbnf>
 800774e:	9b06      	ldr	r3, [sp, #24]
 8007750:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007754:	e020      	b.n	8007798 <__kernel_rem_pio2f+0x1c0>
 8007756:	ee60 7a28 	vmul.f32	s15, s0, s17
 800775a:	3e01      	subs	r6, #1
 800775c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007764:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007768:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800776c:	ecac 0a01 	vstmia	ip!, {s0}
 8007770:	ed30 0a01 	vldmdb	r0!, {s0}
 8007774:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007778:	e79e      	b.n	80076b8 <__kernel_rem_pio2f+0xe0>
 800777a:	d105      	bne.n	8007788 <__kernel_rem_pio2f+0x1b0>
 800777c:	1e60      	subs	r0, r4, #1
 800777e:	a908      	add	r1, sp, #32
 8007780:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8007784:	11f6      	asrs	r6, r6, #7
 8007786:	e7c8      	b.n	800771a <__kernel_rem_pio2f+0x142>
 8007788:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800778c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007794:	da31      	bge.n	80077fa <__kernel_rem_pio2f+0x222>
 8007796:	2600      	movs	r6, #0
 8007798:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800779c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a0:	f040 8098 	bne.w	80078d4 <__kernel_rem_pio2f+0x2fc>
 80077a4:	1e60      	subs	r0, r4, #1
 80077a6:	2200      	movs	r2, #0
 80077a8:	4550      	cmp	r0, sl
 80077aa:	da4b      	bge.n	8007844 <__kernel_rem_pio2f+0x26c>
 80077ac:	2a00      	cmp	r2, #0
 80077ae:	d065      	beq.n	800787c <__kernel_rem_pio2f+0x2a4>
 80077b0:	3c01      	subs	r4, #1
 80077b2:	ab08      	add	r3, sp, #32
 80077b4:	3d08      	subs	r5, #8
 80077b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0f8      	beq.n	80077b0 <__kernel_rem_pio2f+0x1d8>
 80077be:	4628      	mov	r0, r5
 80077c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80077c4:	f000 f9b4 	bl	8007b30 <scalbnf>
 80077c8:	1c63      	adds	r3, r4, #1
 80077ca:	aa44      	add	r2, sp, #272	@ 0x110
 80077cc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80078cc <__kernel_rem_pio2f+0x2f4>
 80077d0:	0099      	lsls	r1, r3, #2
 80077d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80077d6:	4623      	mov	r3, r4
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f280 80a9 	bge.w	8007930 <__kernel_rem_pio2f+0x358>
 80077de:	4623      	mov	r3, r4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f2c0 80c7 	blt.w	8007974 <__kernel_rem_pio2f+0x39c>
 80077e6:	aa44      	add	r2, sp, #272	@ 0x110
 80077e8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80077ec:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80078c4 <__kernel_rem_pio2f+0x2ec>
 80077f0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80078d0 <__kernel_rem_pio2f+0x2f8>
 80077f4:	2000      	movs	r0, #0
 80077f6:	1ae2      	subs	r2, r4, r3
 80077f8:	e0b1      	b.n	800795e <__kernel_rem_pio2f+0x386>
 80077fa:	2602      	movs	r6, #2
 80077fc:	e78f      	b.n	800771e <__kernel_rem_pio2f+0x146>
 80077fe:	f852 1b04 	ldr.w	r1, [r2], #4
 8007802:	b948      	cbnz	r0, 8007818 <__kernel_rem_pio2f+0x240>
 8007804:	b121      	cbz	r1, 8007810 <__kernel_rem_pio2f+0x238>
 8007806:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800780a:	f842 1c04 	str.w	r1, [r2, #-4]
 800780e:	2101      	movs	r1, #1
 8007810:	f10e 0e01 	add.w	lr, lr, #1
 8007814:	4608      	mov	r0, r1
 8007816:	e787      	b.n	8007728 <__kernel_rem_pio2f+0x150>
 8007818:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800781c:	e7f5      	b.n	800780a <__kernel_rem_pio2f+0x232>
 800781e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8007822:	aa08      	add	r2, sp, #32
 8007824:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007828:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800782c:	a908      	add	r1, sp, #32
 800782e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007832:	e781      	b.n	8007738 <__kernel_rem_pio2f+0x160>
 8007834:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8007838:	aa08      	add	r2, sp, #32
 800783a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800783e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007842:	e7f3      	b.n	800782c <__kernel_rem_pio2f+0x254>
 8007844:	a908      	add	r1, sp, #32
 8007846:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800784a:	3801      	subs	r0, #1
 800784c:	430a      	orrs	r2, r1
 800784e:	e7ab      	b.n	80077a8 <__kernel_rem_pio2f+0x1d0>
 8007850:	3201      	adds	r2, #1
 8007852:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8007856:	2e00      	cmp	r6, #0
 8007858:	d0fa      	beq.n	8007850 <__kernel_rem_pio2f+0x278>
 800785a:	9905      	ldr	r1, [sp, #20]
 800785c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8007860:	eb0d 0001 	add.w	r0, sp, r1
 8007864:	18e6      	adds	r6, r4, r3
 8007866:	a91c      	add	r1, sp, #112	@ 0x70
 8007868:	f104 0c01 	add.w	ip, r4, #1
 800786c:	384c      	subs	r0, #76	@ 0x4c
 800786e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8007872:	4422      	add	r2, r4
 8007874:	4562      	cmp	r2, ip
 8007876:	da04      	bge.n	8007882 <__kernel_rem_pio2f+0x2aa>
 8007878:	4614      	mov	r4, r2
 800787a:	e710      	b.n	800769e <__kernel_rem_pio2f+0xc6>
 800787c:	9804      	ldr	r0, [sp, #16]
 800787e:	2201      	movs	r2, #1
 8007880:	e7e7      	b.n	8007852 <__kernel_rem_pio2f+0x27a>
 8007882:	9903      	ldr	r1, [sp, #12]
 8007884:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007888:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800788c:	9105      	str	r1, [sp, #20]
 800788e:	ee07 1a90 	vmov	s15, r1
 8007892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007896:	2400      	movs	r4, #0
 8007898:	ece6 7a01 	vstmia	r6!, {s15}
 800789c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80078d0 <__kernel_rem_pio2f+0x2f8>
 80078a0:	46b1      	mov	r9, r6
 80078a2:	455c      	cmp	r4, fp
 80078a4:	dd04      	ble.n	80078b0 <__kernel_rem_pio2f+0x2d8>
 80078a6:	ece0 7a01 	vstmia	r0!, {s15}
 80078aa:	f10c 0c01 	add.w	ip, ip, #1
 80078ae:	e7e1      	b.n	8007874 <__kernel_rem_pio2f+0x29c>
 80078b0:	ecfe 6a01 	vldmia	lr!, {s13}
 80078b4:	ed39 7a01 	vldmdb	r9!, {s14}
 80078b8:	3401      	adds	r4, #1
 80078ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80078be:	e7f0      	b.n	80078a2 <__kernel_rem_pio2f+0x2ca>
 80078c0:	08008070 	.word	0x08008070
 80078c4:	08008044 	.word	0x08008044
 80078c8:	43800000 	.word	0x43800000
 80078cc:	3b800000 	.word	0x3b800000
 80078d0:	00000000 	.word	0x00000000
 80078d4:	9b02      	ldr	r3, [sp, #8]
 80078d6:	eeb0 0a48 	vmov.f32	s0, s16
 80078da:	eba3 0008 	sub.w	r0, r3, r8
 80078de:	f000 f927 	bl	8007b30 <scalbnf>
 80078e2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80078c8 <__kernel_rem_pio2f+0x2f0>
 80078e6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80078ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ee:	db19      	blt.n	8007924 <__kernel_rem_pio2f+0x34c>
 80078f0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80078cc <__kernel_rem_pio2f+0x2f4>
 80078f4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80078f8:	aa08      	add	r2, sp, #32
 80078fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078fe:	3508      	adds	r5, #8
 8007900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007904:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800790c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007910:	ee10 3a10 	vmov	r3, s0
 8007914:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007918:	ee17 3a90 	vmov	r3, s15
 800791c:	3401      	adds	r4, #1
 800791e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007922:	e74c      	b.n	80077be <__kernel_rem_pio2f+0x1e6>
 8007924:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007928:	aa08      	add	r2, sp, #32
 800792a:	ee10 3a10 	vmov	r3, s0
 800792e:	e7f6      	b.n	800791e <__kernel_rem_pio2f+0x346>
 8007930:	a808      	add	r0, sp, #32
 8007932:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007936:	9001      	str	r0, [sp, #4]
 8007938:	ee07 0a90 	vmov	s15, r0
 800793c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007940:	3b01      	subs	r3, #1
 8007942:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007946:	ee20 0a07 	vmul.f32	s0, s0, s14
 800794a:	ed62 7a01 	vstmdb	r2!, {s15}
 800794e:	e743      	b.n	80077d8 <__kernel_rem_pio2f+0x200>
 8007950:	ecfc 6a01 	vldmia	ip!, {s13}
 8007954:	ecb5 7a01 	vldmia	r5!, {s14}
 8007958:	eee6 7a87 	vfma.f32	s15, s13, s14
 800795c:	3001      	adds	r0, #1
 800795e:	4550      	cmp	r0, sl
 8007960:	dc01      	bgt.n	8007966 <__kernel_rem_pio2f+0x38e>
 8007962:	4290      	cmp	r0, r2
 8007964:	ddf4      	ble.n	8007950 <__kernel_rem_pio2f+0x378>
 8007966:	a858      	add	r0, sp, #352	@ 0x160
 8007968:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800796c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8007970:	3b01      	subs	r3, #1
 8007972:	e735      	b.n	80077e0 <__kernel_rem_pio2f+0x208>
 8007974:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8007976:	2b02      	cmp	r3, #2
 8007978:	dc09      	bgt.n	800798e <__kernel_rem_pio2f+0x3b6>
 800797a:	2b00      	cmp	r3, #0
 800797c:	dc27      	bgt.n	80079ce <__kernel_rem_pio2f+0x3f6>
 800797e:	d040      	beq.n	8007a02 <__kernel_rem_pio2f+0x42a>
 8007980:	f009 0007 	and.w	r0, r9, #7
 8007984:	b059      	add	sp, #356	@ 0x164
 8007986:	ecbd 8b04 	vpop	{d8-d9}
 800798a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8007990:	2b03      	cmp	r3, #3
 8007992:	d1f5      	bne.n	8007980 <__kernel_rem_pio2f+0x3a8>
 8007994:	aa30      	add	r2, sp, #192	@ 0xc0
 8007996:	1f0b      	subs	r3, r1, #4
 8007998:	4413      	add	r3, r2
 800799a:	461a      	mov	r2, r3
 800799c:	4620      	mov	r0, r4
 800799e:	2800      	cmp	r0, #0
 80079a0:	dc50      	bgt.n	8007a44 <__kernel_rem_pio2f+0x46c>
 80079a2:	4622      	mov	r2, r4
 80079a4:	2a01      	cmp	r2, #1
 80079a6:	dc5d      	bgt.n	8007a64 <__kernel_rem_pio2f+0x48c>
 80079a8:	ab30      	add	r3, sp, #192	@ 0xc0
 80079aa:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80078d0 <__kernel_rem_pio2f+0x2f8>
 80079ae:	440b      	add	r3, r1
 80079b0:	2c01      	cmp	r4, #1
 80079b2:	dc67      	bgt.n	8007a84 <__kernel_rem_pio2f+0x4ac>
 80079b4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80079b8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80079bc:	2e00      	cmp	r6, #0
 80079be:	d167      	bne.n	8007a90 <__kernel_rem_pio2f+0x4b8>
 80079c0:	edc7 6a00 	vstr	s13, [r7]
 80079c4:	ed87 7a01 	vstr	s14, [r7, #4]
 80079c8:	edc7 7a02 	vstr	s15, [r7, #8]
 80079cc:	e7d8      	b.n	8007980 <__kernel_rem_pio2f+0x3a8>
 80079ce:	ab30      	add	r3, sp, #192	@ 0xc0
 80079d0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80078d0 <__kernel_rem_pio2f+0x2f8>
 80079d4:	440b      	add	r3, r1
 80079d6:	4622      	mov	r2, r4
 80079d8:	2a00      	cmp	r2, #0
 80079da:	da24      	bge.n	8007a26 <__kernel_rem_pio2f+0x44e>
 80079dc:	b34e      	cbz	r6, 8007a32 <__kernel_rem_pio2f+0x45a>
 80079de:	eef1 7a47 	vneg.f32	s15, s14
 80079e2:	edc7 7a00 	vstr	s15, [r7]
 80079e6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80079ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079ee:	aa31      	add	r2, sp, #196	@ 0xc4
 80079f0:	2301      	movs	r3, #1
 80079f2:	429c      	cmp	r4, r3
 80079f4:	da20      	bge.n	8007a38 <__kernel_rem_pio2f+0x460>
 80079f6:	b10e      	cbz	r6, 80079fc <__kernel_rem_pio2f+0x424>
 80079f8:	eef1 7a67 	vneg.f32	s15, s15
 80079fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8007a00:	e7be      	b.n	8007980 <__kernel_rem_pio2f+0x3a8>
 8007a02:	ab30      	add	r3, sp, #192	@ 0xc0
 8007a04:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80078d0 <__kernel_rem_pio2f+0x2f8>
 8007a08:	440b      	add	r3, r1
 8007a0a:	2c00      	cmp	r4, #0
 8007a0c:	da05      	bge.n	8007a1a <__kernel_rem_pio2f+0x442>
 8007a0e:	b10e      	cbz	r6, 8007a14 <__kernel_rem_pio2f+0x43c>
 8007a10:	eef1 7a67 	vneg.f32	s15, s15
 8007a14:	edc7 7a00 	vstr	s15, [r7]
 8007a18:	e7b2      	b.n	8007980 <__kernel_rem_pio2f+0x3a8>
 8007a1a:	ed33 7a01 	vldmdb	r3!, {s14}
 8007a1e:	3c01      	subs	r4, #1
 8007a20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a24:	e7f1      	b.n	8007a0a <__kernel_rem_pio2f+0x432>
 8007a26:	ed73 7a01 	vldmdb	r3!, {s15}
 8007a2a:	3a01      	subs	r2, #1
 8007a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a30:	e7d2      	b.n	80079d8 <__kernel_rem_pio2f+0x400>
 8007a32:	eef0 7a47 	vmov.f32	s15, s14
 8007a36:	e7d4      	b.n	80079e2 <__kernel_rem_pio2f+0x40a>
 8007a38:	ecb2 7a01 	vldmia	r2!, {s14}
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a42:	e7d6      	b.n	80079f2 <__kernel_rem_pio2f+0x41a>
 8007a44:	ed72 7a01 	vldmdb	r2!, {s15}
 8007a48:	edd2 6a01 	vldr	s13, [r2, #4]
 8007a4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a50:	3801      	subs	r0, #1
 8007a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a56:	ed82 7a00 	vstr	s14, [r2]
 8007a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a5e:	edc2 7a01 	vstr	s15, [r2, #4]
 8007a62:	e79c      	b.n	800799e <__kernel_rem_pio2f+0x3c6>
 8007a64:	ed73 7a01 	vldmdb	r3!, {s15}
 8007a68:	edd3 6a01 	vldr	s13, [r3, #4]
 8007a6c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a70:	3a01      	subs	r2, #1
 8007a72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a76:	ed83 7a00 	vstr	s14, [r3]
 8007a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a7e:	edc3 7a01 	vstr	s15, [r3, #4]
 8007a82:	e78f      	b.n	80079a4 <__kernel_rem_pio2f+0x3cc>
 8007a84:	ed33 7a01 	vldmdb	r3!, {s14}
 8007a88:	3c01      	subs	r4, #1
 8007a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a8e:	e78f      	b.n	80079b0 <__kernel_rem_pio2f+0x3d8>
 8007a90:	eef1 6a66 	vneg.f32	s13, s13
 8007a94:	eeb1 7a47 	vneg.f32	s14, s14
 8007a98:	edc7 6a00 	vstr	s13, [r7]
 8007a9c:	ed87 7a01 	vstr	s14, [r7, #4]
 8007aa0:	eef1 7a67 	vneg.f32	s15, s15
 8007aa4:	e790      	b.n	80079c8 <__kernel_rem_pio2f+0x3f0>
 8007aa6:	bf00      	nop

08007aa8 <floorf>:
 8007aa8:	ee10 3a10 	vmov	r3, s0
 8007aac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007ab0:	3a7f      	subs	r2, #127	@ 0x7f
 8007ab2:	2a16      	cmp	r2, #22
 8007ab4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007ab8:	dc2b      	bgt.n	8007b12 <floorf+0x6a>
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	da12      	bge.n	8007ae4 <floorf+0x3c>
 8007abe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007b24 <floorf+0x7c>
 8007ac2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ac6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ace:	dd06      	ble.n	8007ade <floorf+0x36>
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	da24      	bge.n	8007b1e <floorf+0x76>
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	4b14      	ldr	r3, [pc, #80]	@ (8007b28 <floorf+0x80>)
 8007ad8:	bf08      	it	eq
 8007ada:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8007ade:	ee00 3a10 	vmov	s0, r3
 8007ae2:	4770      	bx	lr
 8007ae4:	4911      	ldr	r1, [pc, #68]	@ (8007b2c <floorf+0x84>)
 8007ae6:	4111      	asrs	r1, r2
 8007ae8:	420b      	tst	r3, r1
 8007aea:	d0fa      	beq.n	8007ae2 <floorf+0x3a>
 8007aec:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8007b24 <floorf+0x7c>
 8007af0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007af4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007afc:	ddef      	ble.n	8007ade <floorf+0x36>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	bfbe      	ittt	lt
 8007b02:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8007b06:	fa40 f202 	asrlt.w	r2, r0, r2
 8007b0a:	189b      	addlt	r3, r3, r2
 8007b0c:	ea23 0301 	bic.w	r3, r3, r1
 8007b10:	e7e5      	b.n	8007ade <floorf+0x36>
 8007b12:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007b16:	d3e4      	bcc.n	8007ae2 <floorf+0x3a>
 8007b18:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007b1c:	4770      	bx	lr
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e7dd      	b.n	8007ade <floorf+0x36>
 8007b22:	bf00      	nop
 8007b24:	7149f2ca 	.word	0x7149f2ca
 8007b28:	bf800000 	.word	0xbf800000
 8007b2c:	007fffff 	.word	0x007fffff

08007b30 <scalbnf>:
 8007b30:	ee10 3a10 	vmov	r3, s0
 8007b34:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8007b38:	d02b      	beq.n	8007b92 <scalbnf+0x62>
 8007b3a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007b3e:	d302      	bcc.n	8007b46 <scalbnf+0x16>
 8007b40:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007b44:	4770      	bx	lr
 8007b46:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007b4a:	d123      	bne.n	8007b94 <scalbnf+0x64>
 8007b4c:	4b24      	ldr	r3, [pc, #144]	@ (8007be0 <scalbnf+0xb0>)
 8007b4e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007be4 <scalbnf+0xb4>
 8007b52:	4298      	cmp	r0, r3
 8007b54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007b58:	db17      	blt.n	8007b8a <scalbnf+0x5a>
 8007b5a:	ee10 3a10 	vmov	r3, s0
 8007b5e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007b62:	3a19      	subs	r2, #25
 8007b64:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007b68:	4288      	cmp	r0, r1
 8007b6a:	dd15      	ble.n	8007b98 <scalbnf+0x68>
 8007b6c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007be8 <scalbnf+0xb8>
 8007b70:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007bec <scalbnf+0xbc>
 8007b74:	ee10 3a10 	vmov	r3, s0
 8007b78:	eeb0 7a67 	vmov.f32	s14, s15
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	bfb8      	it	lt
 8007b80:	eef0 7a66 	vmovlt.f32	s15, s13
 8007b84:	ee27 0a87 	vmul.f32	s0, s15, s14
 8007b88:	4770      	bx	lr
 8007b8a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007bf0 <scalbnf+0xc0>
 8007b8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007b92:	4770      	bx	lr
 8007b94:	0dd2      	lsrs	r2, r2, #23
 8007b96:	e7e5      	b.n	8007b64 <scalbnf+0x34>
 8007b98:	4410      	add	r0, r2
 8007b9a:	28fe      	cmp	r0, #254	@ 0xfe
 8007b9c:	dce6      	bgt.n	8007b6c <scalbnf+0x3c>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	dd06      	ble.n	8007bb0 <scalbnf+0x80>
 8007ba2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007ba6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007baa:	ee00 3a10 	vmov	s0, r3
 8007bae:	4770      	bx	lr
 8007bb0:	f110 0f16 	cmn.w	r0, #22
 8007bb4:	da09      	bge.n	8007bca <scalbnf+0x9a>
 8007bb6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8007bf0 <scalbnf+0xc0>
 8007bba:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007bf4 <scalbnf+0xc4>
 8007bbe:	ee10 3a10 	vmov	r3, s0
 8007bc2:	eeb0 7a67 	vmov.f32	s14, s15
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	e7d9      	b.n	8007b7e <scalbnf+0x4e>
 8007bca:	3019      	adds	r0, #25
 8007bcc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007bd0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007bd4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007bf8 <scalbnf+0xc8>
 8007bd8:	ee07 3a90 	vmov	s15, r3
 8007bdc:	e7d7      	b.n	8007b8e <scalbnf+0x5e>
 8007bde:	bf00      	nop
 8007be0:	ffff3cb0 	.word	0xffff3cb0
 8007be4:	4c000000 	.word	0x4c000000
 8007be8:	7149f2ca 	.word	0x7149f2ca
 8007bec:	f149f2ca 	.word	0xf149f2ca
 8007bf0:	0da24260 	.word	0x0da24260
 8007bf4:	8da24260 	.word	0x8da24260
 8007bf8:	33000000 	.word	0x33000000

08007bfc <memset>:
 8007bfc:	4402      	add	r2, r0
 8007bfe:	4603      	mov	r3, r0
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d100      	bne.n	8007c06 <memset+0xa>
 8007c04:	4770      	bx	lr
 8007c06:	f803 1b01 	strb.w	r1, [r3], #1
 8007c0a:	e7f9      	b.n	8007c00 <memset+0x4>

08007c0c <__libc_init_array>:
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	4d0d      	ldr	r5, [pc, #52]	@ (8007c44 <__libc_init_array+0x38>)
 8007c10:	4c0d      	ldr	r4, [pc, #52]	@ (8007c48 <__libc_init_array+0x3c>)
 8007c12:	1b64      	subs	r4, r4, r5
 8007c14:	10a4      	asrs	r4, r4, #2
 8007c16:	2600      	movs	r6, #0
 8007c18:	42a6      	cmp	r6, r4
 8007c1a:	d109      	bne.n	8007c30 <__libc_init_array+0x24>
 8007c1c:	4d0b      	ldr	r5, [pc, #44]	@ (8007c4c <__libc_init_array+0x40>)
 8007c1e:	4c0c      	ldr	r4, [pc, #48]	@ (8007c50 <__libc_init_array+0x44>)
 8007c20:	f000 f818 	bl	8007c54 <_init>
 8007c24:	1b64      	subs	r4, r4, r5
 8007c26:	10a4      	asrs	r4, r4, #2
 8007c28:	2600      	movs	r6, #0
 8007c2a:	42a6      	cmp	r6, r4
 8007c2c:	d105      	bne.n	8007c3a <__libc_init_array+0x2e>
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c34:	4798      	blx	r3
 8007c36:	3601      	adds	r6, #1
 8007c38:	e7ee      	b.n	8007c18 <__libc_init_array+0xc>
 8007c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c3e:	4798      	blx	r3
 8007c40:	3601      	adds	r6, #1
 8007c42:	e7f2      	b.n	8007c2a <__libc_init_array+0x1e>
 8007c44:	08008084 	.word	0x08008084
 8007c48:	08008084 	.word	0x08008084
 8007c4c:	08008084 	.word	0x08008084
 8007c50:	0800808c 	.word	0x0800808c

08007c54 <_init>:
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c56:	bf00      	nop
 8007c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5a:	bc08      	pop	{r3}
 8007c5c:	469e      	mov	lr, r3
 8007c5e:	4770      	bx	lr

08007c60 <_fini>:
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c62:	bf00      	nop
 8007c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c66:	bc08      	pop	{r3}
 8007c68:	469e      	mov	lr, r3
 8007c6a:	4770      	bx	lr
