
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b38  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08008d10  08008d10  00009d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009120  08009120  0000b00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009120  08009120  0000a120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009128  08009128  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009128  08009128  0000a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009130  08009130  0000a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08009134  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000000c  08009140  0000b00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08009140  0000b318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e7e5  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a0  00000000  00000000  00029821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  0002cec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001441  00000000  00000000  0002e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024253  00000000  00000000  0002fcd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9c8  00000000  00000000  00053f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f38  00000000  00000000  000718f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015582c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007308  00000000  00000000  00155870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0015cb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008cf8 	.word	0x08008cf8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08008cf8 	.word	0x08008cf8

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000894:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000898:	f000 b988 	b.w	8000bac <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	468e      	mov	lr, r1
 80008bc:	4604      	mov	r4, r0
 80008be:	4688      	mov	r8, r1
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d14a      	bne.n	800095a <__udivmoddi4+0xa6>
 80008c4:	428a      	cmp	r2, r1
 80008c6:	4617      	mov	r7, r2
 80008c8:	d962      	bls.n	8000990 <__udivmoddi4+0xdc>
 80008ca:	fab2 f682 	clz	r6, r2
 80008ce:	b14e      	cbz	r6, 80008e4 <__udivmoddi4+0x30>
 80008d0:	f1c6 0320 	rsb	r3, r6, #32
 80008d4:	fa01 f806 	lsl.w	r8, r1, r6
 80008d8:	fa20 f303 	lsr.w	r3, r0, r3
 80008dc:	40b7      	lsls	r7, r6
 80008de:	ea43 0808 	orr.w	r8, r3, r8
 80008e2:	40b4      	lsls	r4, r6
 80008e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008e8:	fa1f fc87 	uxth.w	ip, r7
 80008ec:	fbb8 f1fe 	udiv	r1, r8, lr
 80008f0:	0c23      	lsrs	r3, r4, #16
 80008f2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008fa:	fb01 f20c 	mul.w	r2, r1, ip
 80008fe:	429a      	cmp	r2, r3
 8000900:	d909      	bls.n	8000916 <__udivmoddi4+0x62>
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000908:	f080 80ea 	bcs.w	8000ae0 <__udivmoddi4+0x22c>
 800090c:	429a      	cmp	r2, r3
 800090e:	f240 80e7 	bls.w	8000ae0 <__udivmoddi4+0x22c>
 8000912:	3902      	subs	r1, #2
 8000914:	443b      	add	r3, r7
 8000916:	1a9a      	subs	r2, r3, r2
 8000918:	b2a3      	uxth	r3, r4
 800091a:	fbb2 f0fe 	udiv	r0, r2, lr
 800091e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000926:	fb00 fc0c 	mul.w	ip, r0, ip
 800092a:	459c      	cmp	ip, r3
 800092c:	d909      	bls.n	8000942 <__udivmoddi4+0x8e>
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000934:	f080 80d6 	bcs.w	8000ae4 <__udivmoddi4+0x230>
 8000938:	459c      	cmp	ip, r3
 800093a:	f240 80d3 	bls.w	8000ae4 <__udivmoddi4+0x230>
 800093e:	443b      	add	r3, r7
 8000940:	3802      	subs	r0, #2
 8000942:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000946:	eba3 030c 	sub.w	r3, r3, ip
 800094a:	2100      	movs	r1, #0
 800094c:	b11d      	cbz	r5, 8000956 <__udivmoddi4+0xa2>
 800094e:	40f3      	lsrs	r3, r6
 8000950:	2200      	movs	r2, #0
 8000952:	e9c5 3200 	strd	r3, r2, [r5]
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	428b      	cmp	r3, r1
 800095c:	d905      	bls.n	800096a <__udivmoddi4+0xb6>
 800095e:	b10d      	cbz	r5, 8000964 <__udivmoddi4+0xb0>
 8000960:	e9c5 0100 	strd	r0, r1, [r5]
 8000964:	2100      	movs	r1, #0
 8000966:	4608      	mov	r0, r1
 8000968:	e7f5      	b.n	8000956 <__udivmoddi4+0xa2>
 800096a:	fab3 f183 	clz	r1, r3
 800096e:	2900      	cmp	r1, #0
 8000970:	d146      	bne.n	8000a00 <__udivmoddi4+0x14c>
 8000972:	4573      	cmp	r3, lr
 8000974:	d302      	bcc.n	800097c <__udivmoddi4+0xc8>
 8000976:	4282      	cmp	r2, r0
 8000978:	f200 8105 	bhi.w	8000b86 <__udivmoddi4+0x2d2>
 800097c:	1a84      	subs	r4, r0, r2
 800097e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000982:	2001      	movs	r0, #1
 8000984:	4690      	mov	r8, r2
 8000986:	2d00      	cmp	r5, #0
 8000988:	d0e5      	beq.n	8000956 <__udivmoddi4+0xa2>
 800098a:	e9c5 4800 	strd	r4, r8, [r5]
 800098e:	e7e2      	b.n	8000956 <__udivmoddi4+0xa2>
 8000990:	2a00      	cmp	r2, #0
 8000992:	f000 8090 	beq.w	8000ab6 <__udivmoddi4+0x202>
 8000996:	fab2 f682 	clz	r6, r2
 800099a:	2e00      	cmp	r6, #0
 800099c:	f040 80a4 	bne.w	8000ae8 <__udivmoddi4+0x234>
 80009a0:	1a8a      	subs	r2, r1, r2
 80009a2:	0c03      	lsrs	r3, r0, #16
 80009a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009a8:	b280      	uxth	r0, r0
 80009aa:	b2bc      	uxth	r4, r7
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb2 fcfe 	udiv	ip, r2, lr
 80009b2:	fb0e 221c 	mls	r2, lr, ip, r2
 80009b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009ba:	fb04 f20c 	mul.w	r2, r4, ip
 80009be:	429a      	cmp	r2, r3
 80009c0:	d907      	bls.n	80009d2 <__udivmoddi4+0x11e>
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80009c8:	d202      	bcs.n	80009d0 <__udivmoddi4+0x11c>
 80009ca:	429a      	cmp	r2, r3
 80009cc:	f200 80e0 	bhi.w	8000b90 <__udivmoddi4+0x2dc>
 80009d0:	46c4      	mov	ip, r8
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	fbb3 f2fe 	udiv	r2, r3, lr
 80009d8:	fb0e 3312 	mls	r3, lr, r2, r3
 80009dc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009e0:	fb02 f404 	mul.w	r4, r2, r4
 80009e4:	429c      	cmp	r4, r3
 80009e6:	d907      	bls.n	80009f8 <__udivmoddi4+0x144>
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x142>
 80009f0:	429c      	cmp	r4, r3
 80009f2:	f200 80ca 	bhi.w	8000b8a <__udivmoddi4+0x2d6>
 80009f6:	4602      	mov	r2, r0
 80009f8:	1b1b      	subs	r3, r3, r4
 80009fa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009fe:	e7a5      	b.n	800094c <__udivmoddi4+0x98>
 8000a00:	f1c1 0620 	rsb	r6, r1, #32
 8000a04:	408b      	lsls	r3, r1
 8000a06:	fa22 f706 	lsr.w	r7, r2, r6
 8000a0a:	431f      	orrs	r7, r3
 8000a0c:	fa0e f401 	lsl.w	r4, lr, r1
 8000a10:	fa20 f306 	lsr.w	r3, r0, r6
 8000a14:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a18:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a1c:	4323      	orrs	r3, r4
 8000a1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a22:	fa1f fc87 	uxth.w	ip, r7
 8000a26:	fbbe f0f9 	udiv	r0, lr, r9
 8000a2a:	0c1c      	lsrs	r4, r3, #16
 8000a2c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a30:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a34:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a38:	45a6      	cmp	lr, r4
 8000a3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3e:	d909      	bls.n	8000a54 <__udivmoddi4+0x1a0>
 8000a40:	193c      	adds	r4, r7, r4
 8000a42:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000a46:	f080 809c 	bcs.w	8000b82 <__udivmoddi4+0x2ce>
 8000a4a:	45a6      	cmp	lr, r4
 8000a4c:	f240 8099 	bls.w	8000b82 <__udivmoddi4+0x2ce>
 8000a50:	3802      	subs	r0, #2
 8000a52:	443c      	add	r4, r7
 8000a54:	eba4 040e 	sub.w	r4, r4, lr
 8000a58:	fa1f fe83 	uxth.w	lr, r3
 8000a5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a60:	fb09 4413 	mls	r4, r9, r3, r4
 8000a64:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a68:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6c:	45a4      	cmp	ip, r4
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x1ce>
 8000a70:	193c      	adds	r4, r7, r4
 8000a72:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000a76:	f080 8082 	bcs.w	8000b7e <__udivmoddi4+0x2ca>
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d97f      	bls.n	8000b7e <__udivmoddi4+0x2ca>
 8000a7e:	3b02      	subs	r3, #2
 8000a80:	443c      	add	r4, r7
 8000a82:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a8e:	4564      	cmp	r4, ip
 8000a90:	4673      	mov	r3, lr
 8000a92:	46e1      	mov	r9, ip
 8000a94:	d362      	bcc.n	8000b5c <__udivmoddi4+0x2a8>
 8000a96:	d05f      	beq.n	8000b58 <__udivmoddi4+0x2a4>
 8000a98:	b15d      	cbz	r5, 8000ab2 <__udivmoddi4+0x1fe>
 8000a9a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a9e:	eb64 0409 	sbc.w	r4, r4, r9
 8000aa2:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa6:	fa22 f301 	lsr.w	r3, r2, r1
 8000aaa:	431e      	orrs	r6, r3
 8000aac:	40cc      	lsrs	r4, r1
 8000aae:	e9c5 6400 	strd	r6, r4, [r5]
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	e74f      	b.n	8000956 <__udivmoddi4+0xa2>
 8000ab6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000aba:	0c01      	lsrs	r1, r0, #16
 8000abc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ac0:	b280      	uxth	r0, r0
 8000ac2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4638      	mov	r0, r7
 8000aca:	463c      	mov	r4, r7
 8000acc:	46b8      	mov	r8, r7
 8000ace:	46be      	mov	lr, r7
 8000ad0:	2620      	movs	r6, #32
 8000ad2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ad6:	eba2 0208 	sub.w	r2, r2, r8
 8000ada:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ade:	e766      	b.n	80009ae <__udivmoddi4+0xfa>
 8000ae0:	4601      	mov	r1, r0
 8000ae2:	e718      	b.n	8000916 <__udivmoddi4+0x62>
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	e72c      	b.n	8000942 <__udivmoddi4+0x8e>
 8000ae8:	f1c6 0220 	rsb	r2, r6, #32
 8000aec:	fa2e f302 	lsr.w	r3, lr, r2
 8000af0:	40b7      	lsls	r7, r6
 8000af2:	40b1      	lsls	r1, r6
 8000af4:	fa20 f202 	lsr.w	r2, r0, r2
 8000af8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000afc:	430a      	orrs	r2, r1
 8000afe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b02:	b2bc      	uxth	r4, r7
 8000b04:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b08:	0c11      	lsrs	r1, r2, #16
 8000b0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b0e:	fb08 f904 	mul.w	r9, r8, r4
 8000b12:	40b0      	lsls	r0, r6
 8000b14:	4589      	cmp	r9, r1
 8000b16:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b1a:	b280      	uxth	r0, r0
 8000b1c:	d93e      	bls.n	8000b9c <__udivmoddi4+0x2e8>
 8000b1e:	1879      	adds	r1, r7, r1
 8000b20:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000b24:	d201      	bcs.n	8000b2a <__udivmoddi4+0x276>
 8000b26:	4589      	cmp	r9, r1
 8000b28:	d81f      	bhi.n	8000b6a <__udivmoddi4+0x2b6>
 8000b2a:	eba1 0109 	sub.w	r1, r1, r9
 8000b2e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b32:	fb09 f804 	mul.w	r8, r9, r4
 8000b36:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b3a:	b292      	uxth	r2, r2
 8000b3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b40:	4542      	cmp	r2, r8
 8000b42:	d229      	bcs.n	8000b98 <__udivmoddi4+0x2e4>
 8000b44:	18ba      	adds	r2, r7, r2
 8000b46:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000b4a:	d2c4      	bcs.n	8000ad6 <__udivmoddi4+0x222>
 8000b4c:	4542      	cmp	r2, r8
 8000b4e:	d2c2      	bcs.n	8000ad6 <__udivmoddi4+0x222>
 8000b50:	f1a9 0102 	sub.w	r1, r9, #2
 8000b54:	443a      	add	r2, r7
 8000b56:	e7be      	b.n	8000ad6 <__udivmoddi4+0x222>
 8000b58:	45f0      	cmp	r8, lr
 8000b5a:	d29d      	bcs.n	8000a98 <__udivmoddi4+0x1e4>
 8000b5c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b60:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b64:	3801      	subs	r0, #1
 8000b66:	46e1      	mov	r9, ip
 8000b68:	e796      	b.n	8000a98 <__udivmoddi4+0x1e4>
 8000b6a:	eba7 0909 	sub.w	r9, r7, r9
 8000b6e:	4449      	add	r1, r9
 8000b70:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b74:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b78:	fb09 f804 	mul.w	r8, r9, r4
 8000b7c:	e7db      	b.n	8000b36 <__udivmoddi4+0x282>
 8000b7e:	4673      	mov	r3, lr
 8000b80:	e77f      	b.n	8000a82 <__udivmoddi4+0x1ce>
 8000b82:	4650      	mov	r0, sl
 8000b84:	e766      	b.n	8000a54 <__udivmoddi4+0x1a0>
 8000b86:	4608      	mov	r0, r1
 8000b88:	e6fd      	b.n	8000986 <__udivmoddi4+0xd2>
 8000b8a:	443b      	add	r3, r7
 8000b8c:	3a02      	subs	r2, #2
 8000b8e:	e733      	b.n	80009f8 <__udivmoddi4+0x144>
 8000b90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b94:	443b      	add	r3, r7
 8000b96:	e71c      	b.n	80009d2 <__udivmoddi4+0x11e>
 8000b98:	4649      	mov	r1, r9
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x222>
 8000b9c:	eba1 0109 	sub.w	r1, r1, r9
 8000ba0:	46c4      	mov	ip, r8
 8000ba2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ba6:	fb09 f804 	mul.w	r8, r9, r4
 8000baa:	e7c4      	b.n	8000b36 <__udivmoddi4+0x282>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <_ZN6DriverC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
 *      Author: ethancao
 */
#include "stm32g4xx_hal.h"
#include "drv8316.h"

Driver::Driver(SPI_HandleTypeDef* _spi, GPIO_TypeDef *_sleepPort,
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	807b      	strh	r3, [r7, #2]
	uint16_t _sleepPin, GPIO_TypeDef *_scsPort, uint16_t _scsPin) {
	spi = _spi;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	609a      	str	r2, [r3, #8]
	sleepPort = _sleepPort;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	60da      	str	r2, [r3, #12]
	sleepPin = _sleepPin;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	887a      	ldrh	r2, [r7, #2]
 8000bce:	821a      	strh	r2, [r3, #16]
	scsPort = _scsPort;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	615a      	str	r2, [r3, #20]
	scsPin = _scsPin;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	8bba      	ldrh	r2, [r7, #28]
 8000bda:	831a      	strh	r2, [r3, #24]
	return;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_ZN6Driver4initEv>:

void Driver::init() {
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
	reset();
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f804 	bl	8000c00 <_ZN6Driver5resetEv>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_ZN6Driver5resetEv>:

void Driver::reset() {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sleepPort, sleepPin, GPIO_PIN_RESET);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68d8      	ldr	r0, [r3, #12]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	8a1b      	ldrh	r3, [r3, #16]
 8000c10:	2200      	movs	r2, #0
 8000c12:	4619      	mov	r1, r3
 8000c14:	f002 fee0 	bl	80039d8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f001 fc41 	bl	80024a0 <HAL_Delay>
	HAL_GPIO_WritePin(scsPort, scsPin, GPIO_PIN_SET);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6958      	ldr	r0, [r3, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	8b1b      	ldrh	r3, [r3, #24]
 8000c26:	2201      	movs	r2, #1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f002 fed5 	bl	80039d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sleepPort, sleepPin, GPIO_PIN_SET);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68d8      	ldr	r0, [r3, #12]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	8a1b      	ldrh	r3, [r3, #16]
 8000c36:	2201      	movs	r2, #1
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f002 fecd 	bl	80039d8 <HAL_GPIO_WritePin>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_ZN7EncoderC1EP19__I2C_HandleTypeDef>:
 */
#include "stm32g4xx_hal.h"
#include "magsensor.h"


Encoder::Encoder(I2C_HandleTypeDef* _i2c) {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af02      	add	r7, sp, #8
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	711a      	strb	r2, [r3, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
	i2c = _i2c;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	601a      	str	r2, [r3, #0]
	buf[0] = 0x30;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2230      	movs	r2, #48	@ 0x30
 8000c68:	735a      	strb	r2, [r3, #13]
	ret = HAL_I2C_Master_Transmit(i2c, MT6701_ADDR, buf, 1, HAL_MAX_DELAY);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f103 020d 	add.w	r2, r3, #13
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	210c      	movs	r1, #12
 8000c7e:	f002 ff5f 	bl	8003b40 <HAL_I2C_Master_Transmit>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	731a      	strb	r2, [r3, #12]
	if ( ret != HAL_OK )
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7b1b      	ldrb	r3, [r3, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <_ZN7EncoderC1EP19__I2C_HandleTypeDef+0x54>
	  error = 1;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	711a      	strb	r2, [r3, #4]
 8000c98:	e00f      	b.n	8000cba <_ZN7EncoderC1EP19__I2C_HandleTypeDef+0x74>
	else
	  ret = HAL_I2C_Master_Receive(i2c, MT6701_ADDR, buf, 1, HAL_MAX_DELAY);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f103 020d 	add.w	r2, r3, #13
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	210c      	movs	r1, #12
 8000cae:	f003 f85f 	bl	8003d70 <HAL_I2C_Master_Receive>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	731a      	strb	r2, [r3, #12]

}
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_ZN7Encoder8getAngleEv>:

float Encoder::getAngle() {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
	buf[0] = 0x03;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	735a      	strb	r2, [r3, #13]
  	ret = HAL_I2C_Master_Transmit(i2c, MT6701_ADDR, buf, 1, HAL_MAX_DELAY);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f103 020d 	add.w	r2, r3, #13
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	210c      	movs	r1, #12
 8000ce6:	f002 ff2b 	bl	8003b40 <HAL_I2C_Master_Transmit>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	731a      	strb	r2, [r3, #12]
  	if ( ret != HAL_OK ) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7b1b      	ldrb	r3, [r3, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <_ZN7Encoder8getAngleEv+0x3e>
  	  error = 1;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	711a      	strb	r2, [r3, #4]
 8000d00:	e051      	b.n	8000da6 <_ZN7Encoder8getAngleEv+0xe2>
  	} else {
  	   // Read 2 bytes from the temperature register
  	   ret = HAL_I2C_Master_Receive(i2c, MT6701_ADDR, buf, 2, HAL_MAX_DELAY);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f103 020d 	add.w	r2, r3, #13
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2302      	movs	r3, #2
 8000d14:	210c      	movs	r1, #12
 8000d16:	f003 f82b 	bl	8003d70 <HAL_I2C_Master_Receive>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	731a      	strb	r2, [r3, #12]
  	   if ( ret != HAL_OK ) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7b1b      	ldrb	r3, [r3, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <_ZN7Encoder8getAngleEv+0x6e>
  	      error = 2;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	711a      	strb	r2, [r3, #4]
 8000d30:	e039      	b.n	8000da6 <_ZN7Encoder8getAngleEv+0xe2>
  	   } else {
  	      //Combine the bytes
  	      val = ((int16_t)buf[0] << 6) | ((int16_t)buf[1] >> 2);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7b5b      	ldrb	r3, [r3, #13]
 8000d36:	019b      	lsls	r3, r3, #6
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	7b92      	ldrb	r2, [r2, #14]
 8000d3c:	b212      	sxth	r2, r2
 8000d3e:	1092      	asrs	r2, r2, #2
 8000d40:	b212      	sxth	r2, r2
 8000d42:	4313      	orrs	r3, r2
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	edc3 7a02 	vstr	s15, [r3, #8]
  	      val *= 0.02197265625; //360/16384
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d58:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000db8 <_ZN7Encoder8getAngleEv+0xf4>
 8000d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edc3 7a02 	vstr	s15, [r3, #8]
  	      val -= angleOffset;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	edc3 7a02 	vstr	s15, [r3, #8]
  	      if(val < 0)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8a:	d509      	bpl.n	8000da0 <_ZN7Encoder8getAngleEv+0xdc>
  	    	  val += 360;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d92:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000dbc <_ZN7Encoder8getAngleEv+0xf8>
 8000d96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	edc3 7a02 	vstr	s15, [r3, #8]
  	      return val;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	e000      	b.n	8000da8 <_ZN7Encoder8getAngleEv+0xe4>
  	   }
  	}
  	return -1;
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <_ZN7Encoder8getAngleEv+0xfc>)
  }
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eeb0 0a67 	vmov.f32	s0, s15
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	3cb40000 	.word	0x3cb40000
 8000dbc:	43b40000 	.word	0x43b40000
 8000dc0:	bf800000 	.word	0xbf800000

08000dc4 <_ZN7Encoder4zeroEv>:

void Encoder::zero() {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	angleOffset = getAngle();
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff79 	bl	8000cc4 <_ZN7Encoder8getAngleEv>
 8000dd2:	eef0 7a40 	vmov.f32	s15, s0
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dee:	ed97 0a01 	vldr	s0, [r7, #4]
 8000df2:	f007 f9e1 	bl	80081b8 <cosf>
 8000df6:	eef0 7a40 	vmov.f32	s15, s0
 8000dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e12:	f007 fa15 	bl	8008240 <sinf>
 8000e16:	eef0 7a40 	vmov.f32	s15, s0
 8000e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0a0      	sub	sp, #128	@ 0x80
 8000e28:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2a:	f001 fac8 	bl	80023be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2e:	f000 f9eb 	bl	8001208 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e32:	f000 fd23 	bl	800187c <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 8000e36:	f000 fb75 	bl	8001524 <_ZL12MX_SPI2_Initv>
  MX_ADC1_Init();
 8000e3a:	f000 fa2f 	bl	800129c <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8000e3e:	f000 fb23 	bl	8001488 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8000e42:	f000 fbf3 	bl	800162c <_ZL12MX_TIM1_Initv>
  MX_ADC2_Init();
 8000e46:	f000 faaf 	bl	80013a8 <_ZL12MX_ADC2_Initv>
  MX_SPI3_Init();
 8000e4a:	f000 fbad 	bl	80015a8 <_ZL12MX_SPI3_Initv>
  MX_USART2_UART_Init();
 8000e4e:	f000 fcb5 	bl	80017bc <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  uint8_t temp[12][3];
  Driver drv(&hspi2, GPIOC, SLEEP_N_Pin, GPIOC, SCS_N_Pin);
 8000e52:	f107 001c 	add.w	r0, r7, #28
 8000e56:	2302      	movs	r3, #2
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f58 <main+0x134>)
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2304      	movs	r3, #4
 8000e60:	4a3d      	ldr	r2, [pc, #244]	@ (8000f58 <main+0x134>)
 8000e62:	493e      	ldr	r1, [pc, #248]	@ (8000f5c <main+0x138>)
 8000e64:	f7ff fea4 	bl	8000bb0 <_ZN6DriverC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
  drv.init();
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff febc 	bl	8000bea <_ZN6Driver4initEv>
#ifdef TX
  Nrf nrf(&hspi3, 1, GPIOC, NRF_CSN_Pin, GPIOC, NRF_CE_Pin);
#endif
#ifndef TX
  Nrf nrf(&hspi3, 0, GPIOC, NRF_CSN_Pin, GPIOC, NRF_CE_Pin);
 8000e72:	1d38      	adds	r0, r7, #4
 8000e74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	4b37      	ldr	r3, [pc, #220]	@ (8000f58 <main+0x134>)
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	4b34      	ldr	r3, [pc, #208]	@ (8000f58 <main+0x134>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	4935      	ldr	r1, [pc, #212]	@ (8000f60 <main+0x13c>)
 8000e8a:	f000 fd72 	bl	8001972 <_ZN3NrfC1EP19__SPI_HandleTypeDefbP12GPIO_TypeDeftS3_t>
#endif


  HAL_TIM_PWM_Start_IT (&htim1, TIM_CHANNEL_1);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4834      	ldr	r0, [pc, #208]	@ (8000f64 <main+0x140>)
 8000e92:	f005 faff 	bl	8006494 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT (&htim1, TIM_CHANNEL_2);
 8000e96:	2104      	movs	r1, #4
 8000e98:	4832      	ldr	r0, [pc, #200]	@ (8000f64 <main+0x140>)
 8000e9a:	f005 fafb 	bl	8006494 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT (&htim1, TIM_CHANNEL_3);
 8000e9e:	2108      	movs	r1, #8
 8000ea0:	4830      	ldr	r0, [pc, #192]	@ (8000f64 <main+0x140>)
 8000ea2:	f005 faf7 	bl	8006494 <HAL_TIM_PWM_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	482e      	ldr	r0, [pc, #184]	@ (8000f64 <main+0x140>)
 8000eaa:	f006 f90b 	bl	80070c4 <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 8000eae:	2104      	movs	r1, #4
 8000eb0:	482c      	ldr	r0, [pc, #176]	@ (8000f64 <main+0x140>)
 8000eb2:	f006 f907 	bl	80070c4 <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	482a      	ldr	r0, [pc, #168]	@ (8000f64 <main+0x140>)
 8000eba:	f006 f903 	bl	80070c4 <HAL_TIMEx_PWMN_Start_IT>

  initMotor();
 8000ebe:	f000 f855 	bl	8000f6c <_Z9initMotorv>
  uint8_t status;
  uint8_t payload;
  /* USER CODE END 2 */
  const float kp = -0.3;
 8000ec2:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <main+0x144>)
 8000ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
  float target = 0;
 8000ec6:	f04f 0300 	mov.w	r3, #0
 8000eca:	667b      	str	r3, [r7, #100]	@ 0x64
  const float deadband = 0.5;
 8000ecc:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000ed0:	663b      	str	r3, [r7, #96]	@ 0x60
		error = 0;
	float output = error*kp;
	outputTorque(output);
#endif
#ifndef TX
	status = nrf.rx(&payload);
 8000ed2:	1cfa      	adds	r2, r7, #3
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fe41 	bl	8001b60 <_ZN3Nrf2rxEPh>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	int8_t targetSpeed = ((int8_t)payload) - 128;
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	3b80      	subs	r3, #128	@ 0x80
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(targetSpeed > 45)
 8000eee:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8000ef2:	2b2d      	cmp	r3, #45	@ 0x2d
 8000ef4:	dd02      	ble.n	8000efc <main+0xd8>
		targetSpeed = 45;
 8000ef6:	232d      	movs	r3, #45	@ 0x2d
 8000ef8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(targetSpeed < -45)
 8000efc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8000f00:	f113 0f2d 	cmn.w	r3, #45	@ 0x2d
 8000f04:	da02      	bge.n	8000f0c <main+0xe8>
		targetSpeed = -45;
 8000f06:	23d3      	movs	r3, #211	@ 0xd3
 8000f08:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(targetSpeed > 0 && targetSpeed < 20)
 8000f0c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dd06      	ble.n	8000f22 <main+0xfe>
 8000f14:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8000f18:	2b13      	cmp	r3, #19
 8000f1a:	dc02      	bgt.n	8000f22 <main+0xfe>
		targetSpeed = 20;
 8000f1c:	2314      	movs	r3, #20
 8000f1e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(targetSpeed < 0 && targetSpeed > -20)
 8000f22:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	da07      	bge.n	8000f3a <main+0x116>
 8000f2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8000f2e:	f113 0f13 	cmn.w	r3, #19
 8000f32:	db02      	blt.n	8000f3a <main+0x116>
			targetSpeed = -20;
 8000f34:	23ec      	movs	r3, #236	@ 0xec
 8000f36:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	outputTorque(targetSpeed/2);
 8000f3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8000f3e:	0fda      	lsrs	r2, r3, #31
 8000f40:	4413      	add	r3, r2
 8000f42:	105b      	asrs	r3, r3, #1
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	ee07 3a90 	vmov	s15, r3
 8000f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f52:	f000 f829 	bl	8000fa8 <_Z12outputTorquef>
//	if(abs(error) < deadband)
//		error = 0;
//	float output = error*kp;
//	outputTorque(output);
#endif
  }
 8000f56:	e7bc      	b.n	8000ed2 <main+0xae>
 8000f58:	48000800 	.word	0x48000800
 8000f5c:	20000154 	.word	0x20000154
 8000f60:	200001b8 	.word	0x200001b8
 8000f64:	2000021c 	.word	0x2000021c
 8000f68:	be99999a 	.word	0xbe99999a

08000f6c <_Z9initMotorv>:
  /* USER CODE END 3 */
}
void initMotor() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	vectorAngle(0, 30);
 8000f70:	201e      	movs	r0, #30
 8000f72:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000fa0 <_Z9initMotorv+0x34>
 8000f76:	f000 f889 	bl	800108c <_Z11vectorAngleft>
	HAL_Delay(1000);
 8000f7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f7e:	f001 fa8f 	bl	80024a0 <HAL_Delay>
	enc.zero();
 8000f82:	4808      	ldr	r0, [pc, #32]	@ (8000fa4 <_Z9initMotorv+0x38>)
 8000f84:	f7ff ff1e 	bl	8000dc4 <_ZN7Encoder4zeroEv>
	HAL_Delay(1000);
 8000f88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f8c:	f001 fa88 	bl	80024a0 <HAL_Delay>
	vectorAngle(0, 0);
 8000f90:	2000      	movs	r0, #0
 8000f92:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000fa0 <_Z9initMotorv+0x34>
 8000f96:	f000 f879 	bl	800108c <_Z11vectorAngleft>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	200002fc 	.word	0x200002fc

08000fa8 <_Z12outputTorquef>:

//must be run every loop
void outputTorque(float torque) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	ed87 0a01 	vstr	s0, [r7, #4]
	torque *= invert;
 8000fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb6:	eef1 7a67 	vneg.f32	s15, s15
 8000fba:	edc7 7a01 	vstr	s15, [r7, #4]
	if(torque == 0)
 8000fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fca:	d105      	bne.n	8000fd8 <_Z12outputTorquef+0x30>
		vectorAngle(0,0);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001078 <_Z12outputTorquef+0xd0>
 8000fd2:	f000 f85b 	bl	800108c <_Z11vectorAngleft>
 8000fd6:	e016      	b.n	8001006 <_Z12outputTorquef+0x5e>
	else if(torque > maxTorque) {
 8000fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fdc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	dd02      	ble.n	8000ff0 <_Z12outputTorquef+0x48>
		torque = maxTorque;
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <_Z12outputTorquef+0xd4>)
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	e00a      	b.n	8001006 <_Z12outputTorquef+0x5e>
	} else if(torque < -1*maxTorque) {
 8000ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff4:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	d501      	bpl.n	8001006 <_Z12outputTorquef+0x5e>
		torque = -1*maxTorque;
 8001002:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <_Z12outputTorquef+0xd8>)
 8001004:	607b      	str	r3, [r7, #4]
	}
	if(torque > 0)
 8001006:	edd7 7a01 	vldr	s15, [r7, #4]
 800100a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	dd15      	ble.n	8001040 <_Z12outputTorquef+0x98>
		vectorAngle(enc.getAngle() + 90, torque);
 8001014:	481b      	ldr	r0, [pc, #108]	@ (8001084 <_Z12outputTorquef+0xdc>)
 8001016:	f7ff fe55 	bl	8000cc4 <_ZN7Encoder8getAngleEv>
 800101a:	eef0 7a40 	vmov.f32	s15, s0
 800101e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001088 <_Z12outputTorquef+0xe0>
 8001022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001026:	edd7 7a01 	vldr	s15, [r7, #4]
 800102a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800102e:	ee17 3a90 	vmov	r3, s15
 8001032:	b29b      	uxth	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	eeb0 0a47 	vmov.f32	s0, s14
 800103a:	f000 f827 	bl	800108c <_Z11vectorAngleft>
	else
		vectorAngle(enc.getAngle() - 90, torque * -1);
}
 800103e:	e016      	b.n	800106e <_Z12outputTorquef+0xc6>
		vectorAngle(enc.getAngle() - 90, torque * -1);
 8001040:	4810      	ldr	r0, [pc, #64]	@ (8001084 <_Z12outputTorquef+0xdc>)
 8001042:	f7ff fe3f 	bl	8000cc4 <_ZN7Encoder8getAngleEv>
 8001046:	eef0 7a40 	vmov.f32	s15, s0
 800104a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001088 <_Z12outputTorquef+0xe0>
 800104e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001052:	edd7 7a01 	vldr	s15, [r7, #4]
 8001056:	eef1 7a67 	vneg.f32	s15, s15
 800105a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800105e:	ee17 3a90 	vmov	r3, s15
 8001062:	b29b      	uxth	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	eeb0 0a47 	vmov.f32	s0, s14
 800106a:	f000 f80f 	bl	800108c <_Z11vectorAngleft>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	00000000 	.word	0x00000000
 800107c:	41f00000 	.word	0x41f00000
 8001080:	c1f00000 	.word	0xc1f00000
 8001084:	200002fc 	.word	0x200002fc
 8001088:	42b40000 	.word	0x42b40000

0800108c <_Z11vectorAngleft>:

void vectorAngle(float angle, uint16_t power) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	ed87 0a01 	vstr	s0, [r7, #4]
 8001096:	4603      	mov	r3, r0
 8001098:	807b      	strh	r3, [r7, #2]
	outputElecAngle(angle/8, power);
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80010a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	4618      	mov	r0, r3
 80010aa:	eeb0 0a47 	vmov.f32	s0, s14
 80010ae:	f000 f807 	bl	80010c0 <_Z15outputElecAngleft>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	0000      	movs	r0, r0
 80010bc:	0000      	movs	r0, r0
	...

080010c0 <_Z15outputElecAngleft>:

void outputElecAngle(float angle, uint16_t power) {
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ca:	4603      	mov	r3, r0
 80010cc:	807b      	strh	r3, [r7, #2]
	//polar to xy
	float alpha = cos(angle) * power;
 80010ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80010d2:	f7ff fe87 	bl	8000de4 <_ZSt3cosf>
 80010d6:	eeb0 7a40 	vmov.f32	s14, s0
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e8:	edc7 7a07 	vstr	s15, [r7, #28]
	float beta = sin(angle) * power;
 80010ec:	ed97 0a01 	vldr	s0, [r7, #4]
 80010f0:	f7ff fe88 	bl	8000e04 <_ZSt3sinf>
 80010f4:	eeb0 7a40 	vmov.f32	s14, s0
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001106:	edc7 7a06 	vstr	s15, [r7, #24]
	//Clarke transform
	float a = alpha;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	617b      	str	r3, [r7, #20]
	float b = -0.5*alpha + 0.8660254*beta; //sqrt(3)/2 is weird const
 800110e:	69f8      	ldr	r0, [r7, #28]
 8001110:	f7ff fb10 	bl	8000734 <__aeabi_f2d>
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b39      	ldr	r3, [pc, #228]	@ (8001200 <_Z15outputElecAngleft+0x140>)
 800111a:	f7ff f87d 	bl	8000218 <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4614      	mov	r4, r2
 8001124:	461d      	mov	r5, r3
 8001126:	69b8      	ldr	r0, [r7, #24]
 8001128:	f7ff fb04 	bl	8000734 <__aeabi_f2d>
 800112c:	a332      	add	r3, pc, #200	@ (adr r3, 80011f8 <_Z15outputElecAngleft+0x138>)
 800112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001132:	f7ff f871 	bl	8000218 <__aeabi_dmul>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4620      	mov	r0, r4
 800113c:	4629      	mov	r1, r5
 800113e:	f7ff f99b 	bl	8000478 <__adddf3>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fb4b 	bl	80007e4 <__aeabi_d2f>
 800114e:	4603      	mov	r3, r0
 8001150:	613b      	str	r3, [r7, #16]
	float c = -0.5*alpha - 0.8660254*beta;
 8001152:	69f8      	ldr	r0, [r7, #28]
 8001154:	f7ff faee 	bl	8000734 <__aeabi_f2d>
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <_Z15outputElecAngleft+0x140>)
 800115e:	f7ff f85b 	bl	8000218 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4614      	mov	r4, r2
 8001168:	461d      	mov	r5, r3
 800116a:	69b8      	ldr	r0, [r7, #24]
 800116c:	f7ff fae2 	bl	8000734 <__aeabi_f2d>
 8001170:	a321      	add	r3, pc, #132	@ (adr r3, 80011f8 <_Z15outputElecAngleft+0x138>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff f84f 	bl	8000218 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff f977 	bl	8000474 <__aeabi_dsub>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fb29 	bl	80007e4 <__aeabi_d2f>
 8001192:	4603      	mov	r3, r0
 8001194:	60fb      	str	r3, [r7, #12]
	uint8_t pwma = ((int16_t)a) + 150; //scale to center of pwm range
 8001196:	edd7 7a05 	vldr	s15, [r7, #20]
 800119a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119e:	ee17 3a90 	vmov	r3, s15
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	3b6a      	subs	r3, #106	@ 0x6a
 80011a8:	72fb      	strb	r3, [r7, #11]
	uint8_t pwmb = ((int16_t)b) + 150;
 80011aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b2:	ee17 3a90 	vmov	r3, s15
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	3b6a      	subs	r3, #106	@ 0x6a
 80011bc:	72bb      	strb	r3, [r7, #10]
	uint8_t pwmc = ((int16_t)c) + 150;
 80011be:	edd7 7a03 	vldr	s15, [r7, #12]
 80011c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c6:	ee17 3a90 	vmov	r3, s15
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	3b6a      	subs	r3, #106	@ 0x6a
 80011d0:	727b      	strb	r3, [r7, #9]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwma);
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <_Z15outputElecAngleft+0x144>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	7afa      	ldrb	r2, [r7, #11]
 80011d8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmb);
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <_Z15outputElecAngleft+0x144>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	7aba      	ldrb	r2, [r7, #10]
 80011e0:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwmc);
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <_Z15outputElecAngleft+0x144>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	7a7a      	ldrb	r2, [r7, #9]
 80011e8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	e6502b91 	.word	0xe6502b91
 80011fc:	3febb67a 	.word	0x3febb67a
 8001200:	bfe00000 	.word	0xbfe00000
 8001204:	2000021c 	.word	0x2000021c

08001208 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	@ 0x50
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 0318 	add.w	r3, r7, #24
 8001212:	2238      	movs	r2, #56	@ 0x38
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f007 fd42 	bl	8008ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800122e:	f003 f9d3 	bl	80045d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001236:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123c:	2340      	movs	r3, #64	@ 0x40
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fa79 	bl	8004740 <HAL_RCC_OscConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf14      	ite	ne
 8001254:	2301      	movne	r3, #1
 8001256:	2300      	moveq	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800125e:	f000 fb71 	bl	8001944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001262:	230f      	movs	r3, #15
 8001264:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001266:	2301      	movs	r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f003 fd72 	bl	8004d64 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	bf14      	ite	ne
 8001286:	2301      	movne	r3, #1
 8001288:	2300      	moveq	r3, #0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8001290:	f000 fb58 	bl	8001944 <Error_Handler>
  }
}
 8001294:	bf00      	nop
 8001296:	3750      	adds	r7, #80	@ 0x50
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	@ 0x30
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2220      	movs	r2, #32
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f007 fcf3 	bl	8008ca0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012ba:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 80012bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012c2:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 80012c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ca:	4b35      	ldr	r3, [pc, #212]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d0:	4b33      	ldr	r3, [pc, #204]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012d6:	4b32      	ldr	r3, [pc, #200]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012dc:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e2:	4b2f      	ldr	r3, [pc, #188]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 80012e4:	2204      	movs	r2, #4
 80012e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012e8:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ee:	4b2c      	ldr	r3, [pc, #176]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012f4:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012fa:	4b29      	ldr	r3, [pc, #164]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001302:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 8001304:	2200      	movs	r2, #0
 8001306:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001308:	4b25      	ldr	r3, [pc, #148]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 800130a:	2200      	movs	r2, #0
 800130c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800130e:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001316:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 8001318:	2200      	movs	r2, #0
 800131a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001324:	481e      	ldr	r0, [pc, #120]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 8001326:	f001 fab3 	bl	8002890 <HAL_ADC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800133a:	f000 fb03 	bl	8001944 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	4815      	ldr	r0, [pc, #84]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 800134a:	f002 f83b 	bl	80033c4 <HAL_ADCEx_MultiModeConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf14      	ite	ne
 8001354:	2301      	movne	r3, #1
 8001356:	2300      	moveq	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 800135e:	f000 faf1 	bl	8001944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <_ZL12MX_ADC1_Initv+0x108>)
 8001364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001366:	2306      	movs	r3, #6
 8001368:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800136e:	237f      	movs	r3, #127	@ 0x7f
 8001370:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001372:	2304      	movs	r3, #4
 8001374:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	4808      	ldr	r0, [pc, #32]	@ (80013a0 <_ZL12MX_ADC1_Initv+0x104>)
 8001380:	f001 fc0a 	bl	8002b98 <HAL_ADC_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	bf14      	ite	ne
 800138a:	2301      	movne	r3, #1
 800138c:	2300      	moveq	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8001394:	f000 fad6 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	@ 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000028 	.word	0x20000028
 80013a4:	08600004 	.word	0x08600004

080013a8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2220      	movs	r2, #32
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f007 fc73 	bl	8008ca0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80013ba:	4b30      	ldr	r3, [pc, #192]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 80013bc:	4a30      	ldr	r2, [pc, #192]	@ (8001480 <_ZL12MX_ADC2_Initv+0xd8>)
 80013be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013c0:	4b2e      	ldr	r3, [pc, #184]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 80013c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013c8:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ce:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013da:	4b28      	ldr	r3, [pc, #160]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 80013e2:	2204      	movs	r2, #4
 80013e4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013e6:	4b25      	ldr	r3, [pc, #148]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013ec:	4b23      	ldr	r3, [pc, #140]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80013f2:	4b22      	ldr	r3, [pc, #136]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013f8:	4b20      	ldr	r3, [pc, #128]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001400:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 8001402:	2200      	movs	r2, #0
 8001404:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001406:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 8001408:	2200      	movs	r2, #0
 800140a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800140c:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001414:	4b19      	ldr	r3, [pc, #100]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 8001416:	2200      	movs	r2, #0
 8001418:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800141a:	4b18      	ldr	r3, [pc, #96]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001422:	4816      	ldr	r0, [pc, #88]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 8001424:	f001 fa34 	bl	8002890 <HAL_ADC_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf14      	ite	ne
 800142e:	2301      	movne	r3, #1
 8001430:	2300      	moveq	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 8001438:	f000 fa84 	bl	8001944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <_ZL12MX_ADC2_Initv+0xdc>)
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001440:	2306      	movs	r3, #6
 8001442:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001448:	237f      	movs	r3, #127	@ 0x7f
 800144a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800144c:	2304      	movs	r3, #4
 800144e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	4808      	ldr	r0, [pc, #32]	@ (800147c <_ZL12MX_ADC2_Initv+0xd4>)
 800145a:	f001 fb9d 	bl	8002b98 <HAL_ADC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 800146e:	f000 fa69 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000094 	.word	0x20000094
 8001480:	50000100 	.word	0x50000100
 8001484:	0c900008 	.word	0x0c900008

08001488 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800148c:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <_ZL12MX_I2C1_Initv+0x90>)
 800148e:	4a23      	ldr	r2, [pc, #140]	@ (800151c <_ZL12MX_I2C1_Initv+0x94>)
 8001490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8001492:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <_ZL12MX_I2C1_Initv+0x90>)
 8001494:	4a22      	ldr	r2, [pc, #136]	@ (8001520 <_ZL12MX_I2C1_Initv+0x98>)
 8001496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001498:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <_ZL12MX_I2C1_Initv+0x90>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149e:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <_ZL12MX_I2C1_Initv+0x90>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <_ZL12MX_I2C1_Initv+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <_ZL12MX_I2C1_Initv+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b0:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <_ZL12MX_I2C1_Initv+0x90>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <_ZL12MX_I2C1_Initv+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014bc:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <_ZL12MX_I2C1_Initv+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c2:	4815      	ldr	r0, [pc, #84]	@ (8001518 <_ZL12MX_I2C1_Initv+0x90>)
 80014c4:	f002 faa0 	bl	8003a08 <HAL_I2C_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf14      	ite	ne
 80014ce:	2301      	movne	r3, #1
 80014d0:	2300      	moveq	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80014d8:	f000 fa34 	bl	8001944 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014dc:	2100      	movs	r1, #0
 80014de:	480e      	ldr	r0, [pc, #56]	@ (8001518 <_ZL12MX_I2C1_Initv+0x90>)
 80014e0:	f002 ffe2 	bl	80044a8 <HAL_I2CEx_ConfigAnalogFilter>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	bf14      	ite	ne
 80014ea:	2301      	movne	r3, #1
 80014ec:	2300      	moveq	r3, #0
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80014f4:	f000 fa26 	bl	8001944 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014f8:	2100      	movs	r1, #0
 80014fa:	4807      	ldr	r0, [pc, #28]	@ (8001518 <_ZL12MX_I2C1_Initv+0x90>)
 80014fc:	f003 f81f 	bl	800453e <HAL_I2CEx_ConfigDigitalFilter>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	bf14      	ite	ne
 8001506:	2301      	movne	r3, #1
 8001508:	2300      	moveq	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001510:	f000 fa18 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000100 	.word	0x20000100
 800151c:	40005400 	.word	0x40005400
 8001520:	00503d58 	.word	0x00503d58

08001524 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001528:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 800152a:	4a1e      	ldr	r2, [pc, #120]	@ (80015a4 <_ZL12MX_SPI2_Initv+0x80>)
 800152c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8001530:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001534:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001536:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800153c:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 800153e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001542:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001544:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8001552:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001556:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 800155a:	2228      	movs	r2, #40	@ 0x28
 800155c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001564:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 800156c:	2200      	movs	r2, #0
 800156e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8001572:	2207      	movs	r2, #7
 8001574:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8001578:	2200      	movs	r2, #0
 800157a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 800157e:	2200      	movs	r2, #0
 8001580:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001582:	4807      	ldr	r0, [pc, #28]	@ (80015a0 <_ZL12MX_SPI2_Initv+0x7c>)
 8001584:	f003 fffa 	bl	800557c <HAL_SPI_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf14      	ite	ne
 800158e:	2301      	movne	r3, #1
 8001590:	2300      	moveq	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8001598:	f000 f9d4 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000154 	.word	0x20000154
 80015a4:	40003800 	.word	0x40003800

080015a8 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001628 <_ZL12MX_SPI3_Initv+0x80>)
 80015b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015c0:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015c2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c8:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015de:	2218      	movs	r2, #24
 80015e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015f6:	2207      	movs	r2, #7
 80015f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 8001602:	2200      	movs	r2, #0
 8001604:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001606:	4807      	ldr	r0, [pc, #28]	@ (8001624 <_ZL12MX_SPI3_Initv+0x7c>)
 8001608:	f003 ffb8 	bl	800557c <HAL_SPI_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf14      	ite	ne
 8001612:	2301      	movne	r3, #1
 8001614:	2300      	moveq	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 800161c:	f000 f992 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200001b8 	.word	0x200001b8
 8001628:	40003c00 	.word	0x40003c00

0800162c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b098      	sub	sp, #96	@ 0x60
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001632:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	615a      	str	r2, [r3, #20]
 8001650:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2234      	movs	r2, #52	@ 0x34
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f007 fb21 	bl	8008ca0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800165e:	4b55      	ldr	r3, [pc, #340]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 8001660:	4a55      	ldr	r2, [pc, #340]	@ (80017b8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001662:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001664:	4b53      	ldr	r3, [pc, #332]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 8001666:	2200      	movs	r2, #0
 8001668:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800166a:	4b52      	ldr	r3, [pc, #328]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 800166c:	2260      	movs	r2, #96	@ 0x60
 800166e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 300;
 8001670:	4b50      	ldr	r3, [pc, #320]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 8001672:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001676:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b4e      	ldr	r3, [pc, #312]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800167e:	4b4d      	ldr	r3, [pc, #308]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 8001680:	2201      	movs	r2, #1
 8001682:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b4b      	ldr	r3, [pc, #300]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800168a:	484a      	ldr	r0, [pc, #296]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 800168c:	f004 feaa 	bl	80063e4 <HAL_TIM_PWM_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	bf14      	ite	ne
 8001696:	2301      	movne	r3, #1
 8001698:	2300      	moveq	r3, #0
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 80016a0:	f000 f950 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016b4:	4619      	mov	r1, r3
 80016b6:	483f      	ldr	r0, [pc, #252]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 80016b8:	f005 fe0c 	bl	80072d4 <HAL_TIMEx_MasterConfigSynchronization>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf14      	ite	ne
 80016c2:	2301      	movne	r3, #1
 80016c4:	2300      	moveq	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 80016cc:	f000 f93a 	bl	8001944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d0:	2360      	movs	r3, #96	@ 0x60
 80016d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d8:	2300      	movs	r3, #0
 80016da:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016dc:	2300      	movs	r3, #0
 80016de:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80016e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016f2:	2200      	movs	r2, #0
 80016f4:	4619      	mov	r1, r3
 80016f6:	482f      	ldr	r0, [pc, #188]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 80016f8:	f005 f818 	bl	800672c <HAL_TIM_PWM_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bf14      	ite	ne
 8001702:	2301      	movne	r3, #1
 8001704:	2300      	moveq	r3, #0
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 800170c:	f000 f91a 	bl	8001944 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001710:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001714:	2204      	movs	r2, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4826      	ldr	r0, [pc, #152]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 800171a:	f005 f807 	bl	800672c <HAL_TIM_PWM_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf14      	ite	ne
 8001724:	2301      	movne	r3, #1
 8001726:	2300      	moveq	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 800172e:	f000 f909 	bl	8001944 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001732:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001736:	2208      	movs	r2, #8
 8001738:	4619      	mov	r1, r3
 800173a:	481e      	ldr	r0, [pc, #120]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 800173c:	f004 fff6 	bl	800672c <HAL_TIM_PWM_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	bf14      	ite	ne
 8001746:	2301      	movne	r3, #1
 8001748:	2300      	moveq	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8001750:	f000 f8f8 	bl	8001944 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]

  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001768:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001776:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	4619      	mov	r1, r3
 800178c:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 800178e:	f005 fe23 	bl	80073d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf14      	ite	ne
 8001798:	2301      	movne	r3, #1
 800179a:	2300      	moveq	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <_ZL12MX_TIM1_Initv+0x17a>
  {
    Error_Handler();
 80017a2:	f000 f8cf 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017a6:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <_ZL12MX_TIM1_Initv+0x188>)
 80017a8:	f000 fcd0 	bl	800214c <HAL_TIM_MspPostInit>

}
 80017ac:	bf00      	nop
 80017ae:	3760      	adds	r7, #96	@ 0x60
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000021c 	.word	0x2000021c
 80017b8:	40012c00 	.word	0x40012c00

080017bc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001878 <_ZL19MX_USART2_UART_Initv+0xbc>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b29      	ldr	r3, [pc, #164]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b27      	ldr	r3, [pc, #156]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001800:	2200      	movs	r2, #0
 8001802:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001804:	481b      	ldr	r0, [pc, #108]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001806:	f005 fe98 	bl	800753a <HAL_UART_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800181a:	f000 f893 	bl	8001944 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800181e:	2100      	movs	r1, #0
 8001820:	4814      	ldr	r0, [pc, #80]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001822:	f006 fbff 	bl	8008024 <HAL_UARTEx_SetTxFifoThreshold>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001836:	f000 f885 	bl	8001944 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183a:	2100      	movs	r1, #0
 800183c:	480d      	ldr	r0, [pc, #52]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800183e:	f006 fc2f 	bl	80080a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	bf14      	ite	ne
 8001848:	2301      	movne	r3, #1
 800184a:	2300      	moveq	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001852:	f000 f877 	bl	8001944 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001856:	4807      	ldr	r0, [pc, #28]	@ (8001874 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001858:	f006 fbab 	bl	8007fb2 <HAL_UARTEx_DisableFifoMode>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf14      	ite	ne
 8001862:	2301      	movne	r3, #1
 8001864:	2300      	moveq	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 800186c:	f000 f86a 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000268 	.word	0x20000268
 8001878:	40004400 	.word	0x40004400

0800187c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	@ 0x28
 8001880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <_ZL12MX_GPIO_Initv+0xc0>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	4a29      	ldr	r2, [pc, #164]	@ (800193c <_ZL12MX_GPIO_Initv+0xc0>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189e:	4b27      	ldr	r3, [pc, #156]	@ (800193c <_ZL12MX_GPIO_Initv+0xc0>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018aa:	4b24      	ldr	r3, [pc, #144]	@ (800193c <_ZL12MX_GPIO_Initv+0xc0>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	4a23      	ldr	r2, [pc, #140]	@ (800193c <_ZL12MX_GPIO_Initv+0xc0>)
 80018b0:	f043 0320 	orr.w	r3, r3, #32
 80018b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <_ZL12MX_GPIO_Initv+0xc0>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <_ZL12MX_GPIO_Initv+0xc0>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	4a1d      	ldr	r2, [pc, #116]	@ (800193c <_ZL12MX_GPIO_Initv+0xc0>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ce:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <_ZL12MX_GPIO_Initv+0xc0>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b18      	ldr	r3, [pc, #96]	@ (800193c <_ZL12MX_GPIO_Initv+0xc0>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018de:	4a17      	ldr	r2, [pc, #92]	@ (800193c <_ZL12MX_GPIO_Initv+0xc0>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <_ZL12MX_GPIO_Initv+0xc0>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CSN_Pin|DRVOFF_Pin|SCS_N_Pin|SLEEP_N_Pin
 80018f2:	2200      	movs	r2, #0
 80018f4:	f244 2107 	movw	r1, #16903	@ 0x4207
 80018f8:	4811      	ldr	r0, [pc, #68]	@ (8001940 <_ZL12MX_GPIO_Initv+0xc4>)
 80018fa:	f002 f86d 	bl	80039d8 <HAL_GPIO_WritePin>
                          |NRF_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NRF_CSN_Pin DRVOFF_Pin SCS_N_Pin SLEEP_N_Pin
                           NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|DRVOFF_Pin|SCS_N_Pin|SLEEP_N_Pin
 80018fe:	f244 2307 	movw	r3, #16903	@ 0x4207
 8001902:	617b      	str	r3, [r7, #20]
                          |NRF_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	480a      	ldr	r0, [pc, #40]	@ (8001940 <_ZL12MX_GPIO_Initv+0xc4>)
 8001918:	f001 fedc 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_N_Pin */
  GPIO_InitStruct.Pin = FAULT_N_Pin;
 800191c:	2308      	movs	r3, #8
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_N_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4804      	ldr	r0, [pc, #16]	@ (8001940 <_ZL12MX_GPIO_Initv+0xc4>)
 8001930:	f001 fed0 	bl	80036d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	@ 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	48000800 	.word	0x48000800

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
}
 800194a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <Error_Handler+0x8>

08001950 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
Encoder enc(&hi2c1);
 8001954:	4902      	ldr	r1, [pc, #8]	@ (8001960 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8001956:	4803      	ldr	r0, [pc, #12]	@ (8001964 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8001958:	f7ff f975 	bl	8000c46 <_ZN7EncoderC1EP19__I2C_HandleTypeDef>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000100 	.word	0x20000100
 8001964:	200002fc 	.word	0x200002fc

08001968 <_GLOBAL__sub_I_hadc1>:
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
 800196c:	f7ff fff0 	bl	8001950 <_Z41__static_initialization_and_destruction_0v>
 8001970:	bd80      	pop	{r7, pc}

08001972 <_ZN3NrfC1EP19__SPI_HandleTypeDefbP12GPIO_TypeDeftS3_t>:
 *      Author: ethancao
 */

#include "nrf.h"

Nrf::Nrf(SPI_HandleTypeDef*  bus_, bool isTX_, GPIO_TypeDef *_csnPort,
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4613      	mov	r3, r2
 8001980:	71fb      	strb	r3, [r7, #7]
		uint16_t _csnPin, GPIO_TypeDef *_cePort, uint16_t _cePin) {
	csnPort = _csnPort;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	609a      	str	r2, [r3, #8]
	csnPin = _csnPin;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8b3a      	ldrh	r2, [r7, #24]
 800198c:	819a      	strh	r2, [r3, #12]
	cePort = _cePort;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	611a      	str	r2, [r3, #16]
	cePin = _cePin;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8c3a      	ldrh	r2, [r7, #32]
 8001998:	829a      	strh	r2, [r3, #20]
	bus = bus_;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	601a      	str	r2, [r3, #0]
	isTX = isTX_;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	79fa      	ldrb	r2, [r7, #7]
 80019a4:	711a      	strb	r2, [r3, #4]
	reset();
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f805 	bl	80019b6 <_ZN3Nrf5resetEv>

}
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_ZN3Nrf5resetEv>:

uint8_t Nrf::reset() {
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	setCS(1);
 80019be:	2101      	movs	r1, #1
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f95b 	bl	8001c7c <_ZN3Nrf5setCSEb>
	setCE(0);
 80019c6:	2100      	movs	r1, #0
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f975 	bl	8001cb8 <_ZN3Nrf5setCEEb>
	// Reset registers
	// Reset registers
	write_register(NRF24L01P_REG_CONFIG, 0x08);
 80019ce:	2208      	movs	r2, #8
 80019d0:	2100      	movs	r1, #0
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f921 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
//	write_register(NRF24L01P_REG_EN_AA, 0x3F);
	write_register(NRF24L01P_REG_EN_AA, 0x00);
 80019d8:	2200      	movs	r2, #0
 80019da:	2101      	movs	r1, #1
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f91c 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80019e2:	2203      	movs	r2, #3
 80019e4:	2102      	movs	r1, #2
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f917 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80019ec:	2203      	movs	r2, #3
 80019ee:	2103      	movs	r1, #3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f912 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_SETUP_RETR, 0x2F);
 80019f6:	222f      	movs	r2, #47	@ 0x2f
 80019f8:	2104      	movs	r1, #4
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f90d 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_RF_CH, 0x02);
 8001a00:	2202      	movs	r2, #2
 8001a02:	2105      	movs	r1, #5
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f908 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	2106      	movs	r1, #6
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f903 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_STATUS, 0x7E);
 8001a14:	227e      	movs	r2, #126	@ 0x7e
 8001a16:	2107      	movs	r1, #7
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f8fe 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_RX_PW_P0, 0x20);
 8001a1e:	2220      	movs	r2, #32
 8001a20:	2111      	movs	r1, #17
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f8f9 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2112      	movs	r1, #18
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f8f4 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2113      	movs	r1, #19
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f8ef 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2114      	movs	r1, #20
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f8ea 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2115      	movs	r1, #21
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8e5 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2116      	movs	r1, #22
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f8e0 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8001a5a:	2211      	movs	r2, #17
 8001a5c:	2117      	movs	r1, #23
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f8db 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
//	write_register(NRF24L01P_REG_DYNPD, 0x3F);
	write_register(NRF24L01P_REG_DYNPD, 0x01);
 8001a64:	2201      	movs	r2, #1
 8001a66:	211c      	movs	r1, #28
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f8d6 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	write_register(NRF24L01P_REG_FEATURE, 0x06);
 8001a6e:	2206      	movs	r2, #6
 8001a70:	211d      	movs	r1, #29
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f8d1 	bl	8001c1a <_ZN3Nrf14write_registerEhh>

	//set FIFO depth to 1

	//set ptx, prx mode
	if(isTX){
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	791b      	ldrb	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d015      	beq.n	8001aac <_ZN3Nrf5resetEv+0xf6>
		write_register(NRF24L01P_REG_TX_ADDR, WIRELESS_ADDR);
 8001a80:	220b      	movs	r2, #11
 8001a82:	2110      	movs	r1, #16
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f8c8 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
		uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f89a 	bl	8001bc6 <_ZN3Nrf13read_registerEh>
 8001a92:	4603      	mov	r3, r0
 8001a94:	73bb      	strb	r3, [r7, #14]
		new_config &= 0xFE;
 8001a96:	7bbb      	ldrb	r3, [r7, #14]
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	73bb      	strb	r3, [r7, #14]
		write_register(NRF24L01P_REG_CONFIG, new_config);
 8001a9e:	7bbb      	ldrb	r3, [r7, #14]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8b8 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
 8001aaa:	e014      	b.n	8001ad6 <_ZN3Nrf5resetEv+0x120>
	} else {
		write_register(NRF24L01P_REG_RX_ADDR_P0, WIRELESS_ADDR);
 8001aac:	220b      	movs	r2, #11
 8001aae:	210a      	movs	r1, #10
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f8b2 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
		uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f884 	bl	8001bc6 <_ZN3Nrf13read_registerEh>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	73fb      	strb	r3, [r7, #15]
		new_config |= 1 << 0;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
		write_register(NRF24L01P_REG_CONFIG, new_config);
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	461a      	mov	r2, r3
 8001ace:	2100      	movs	r1, #0
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f8a2 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	}

	//power up
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f874 	bl	8001bc6 <_ZN3Nrf13read_registerEh>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	737b      	strb	r3, [r7, #13]
	new_config |= 1 << 1;
 8001ae2:	7b7b      	ldrb	r3, [r7, #13]
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	737b      	strb	r3, [r7, #13]
	write_register(NRF24L01P_REG_CONFIG, new_config);
 8001aea:	7b7b      	ldrb	r3, [r7, #13]
 8001aec:	461a      	mov	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f892 	bl	8001c1a <_ZN3Nrf14write_registerEhh>

	//set RX pipe width
	write_register(NRF24L01P_REG_RX_PW_P0, PAYLOAD_LEN);
 8001af6:	2208      	movs	r2, #8
 8001af8:	2111      	movs	r1, #17
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f88d 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	//set RF channel
	write_register(NRF24L01P_REG_RF_CH, 15);
 8001b00:	220f      	movs	r2, #15
 8001b02:	2105      	movs	r1, #5
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f888 	bl	8001c1a <_ZN3Nrf14write_registerEhh>
	//default should work
	//set auto retransmit count
	//default should work
	//set retransmit delay
	//default should work
	setCE(1);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f8d3 	bl	8001cb8 <_ZN3Nrf5setCEEb>
	return status();
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f805 	bl	8001b22 <_ZN3Nrf6statusEv>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZN3Nrf6statusEv>:

uint8_t Nrf::status() {
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af02      	add	r7, sp, #8
 8001b28:	6078      	str	r0, [r7, #4]
	uint8_t command = NRF24L01P_CMD_NOP;
 8001b2a:	23ff      	movs	r3, #255	@ 0xff
 8001b2c:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	setCS(0);
 8001b2e:	2100      	movs	r1, #0
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f8a3 	bl	8001c7c <_ZN3Nrf5setCSEb>
	HAL_SPI_TransmitReceive(bus, &command, &status, 1, 2000);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	f107 020e 	add.w	r2, r7, #14
 8001b3e:	f107 010f 	add.w	r1, r7, #15
 8001b42:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f004 f870 	bl	8005c2e <HAL_SPI_TransmitReceive>
	setCS(1);
 8001b4e:	2101      	movs	r1, #1
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f893 	bl	8001c7c <_ZN3Nrf5setCSEb>
	return status;
 8001b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_ZN3Nrf2rxEPh>:
	HAL_SPI_Transmit(bus, payload, PAYLOAD_LEN, 2000);
	setCS(1);
	return status;
}

uint8_t Nrf::rx(uint8_t* payload){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
	//check RX FIFO
	uint8_t status = read_register(NRF24L01P_REG_STATUS);
 8001b6a:	2107      	movs	r1, #7
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f82a 	bl	8001bc6 <_ZN3Nrf13read_registerEh>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73fb      	strb	r3, [r7, #15]
	if((status & 0b00001110) == 0b00001110)
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	f003 030e 	and.w	r3, r3, #14
 8001b7c:	2b0e      	cmp	r3, #14
 8001b7e:	d101      	bne.n	8001b84 <_ZN3Nrf2rxEPh+0x24>
		return status;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	e01c      	b.n	8001bbe <_ZN3Nrf2rxEPh+0x5e>
	uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8001b84:	2361      	movs	r3, #97	@ 0x61
 8001b86:	73bb      	strb	r3, [r7, #14]
	setCS(0);
 8001b88:	2100      	movs	r1, #0
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f876 	bl	8001c7c <_ZN3Nrf5setCSEb>
	HAL_SPI_TransmitReceive(bus, &command, &status, 1, 100);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	f107 020f 	add.w	r2, r7, #15
 8001b98:	f107 010e 	add.w	r1, r7, #14
 8001b9c:	2364      	movs	r3, #100	@ 0x64
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f004 f844 	bl	8005c2e <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(bus, payload, PAYLOAD_LEN, 100);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	2364      	movs	r3, #100	@ 0x64
 8001bac:	2208      	movs	r2, #8
 8001bae:	6839      	ldr	r1, [r7, #0]
 8001bb0:	f003 ff05 	bl	80059be <HAL_SPI_Receive>
	setCS(1);
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f860 	bl	8001c7c <_ZN3Nrf5setCSEb>
	return status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]

}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_ZN3Nrf13read_registerEh>:

uint8_t Nrf::read_register(uint8_t reg) {
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af02      	add	r7, sp, #8
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70fb      	strb	r3, [r7, #3]
	uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t read_val;

	setCS(0);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f84f 	bl	8001c7c <_ZN3Nrf5setCSEb>
	HAL_SPI_TransmitReceive(bus, &command, &status, 1, 2000);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	f107 020e 	add.w	r2, r7, #14
 8001be6:	f107 010f 	add.w	r1, r7, #15
 8001bea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f004 f81c 	bl	8005c2e <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(bus, &read_val, 1, 2000);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	f107 010d 	add.w	r1, r7, #13
 8001bfe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c02:	2201      	movs	r2, #1
 8001c04:	f003 fedb 	bl	80059be <HAL_SPI_Receive>
    setCS(1);
 8001c08:	2101      	movs	r1, #1
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f836 	bl	8001c7c <_ZN3Nrf5setCSEb>

	return read_val;
 8001c10:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_ZN3Nrf14write_registerEhh>:

uint8_t Nrf::write_register(uint8_t reg, uint8_t value) {
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af02      	add	r7, sp, #8
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	70fb      	strb	r3, [r7, #3]
 8001c26:	4613      	mov	r3, r2
 8001c28:	70bb      	strb	r3, [r7, #2]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	f043 0320 	orr.w	r3, r3, #32
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t write_val = value;
 8001c34:	78bb      	ldrb	r3, [r7, #2]
 8001c36:	737b      	strb	r3, [r7, #13]

	setCS(0);
 8001c38:	2100      	movs	r1, #0
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f81e 	bl	8001c7c <_ZN3Nrf5setCSEb>
	HAL_SPI_TransmitReceive(bus, &command, &status, 1, 2000);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	f107 020e 	add.w	r2, r7, #14
 8001c48:	f107 010f 	add.w	r1, r7, #15
 8001c4c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	f003 ffeb 	bl	8005c2e <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(bus, &write_val, 1, 2000);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	f107 010d 	add.w	r1, r7, #13
 8001c60:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c64:	2201      	movs	r2, #1
 8001c66:	f003 fd34 	bl	80056d2 <HAL_SPI_Transmit>
	setCS(1);
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f805 	bl	8001c7c <_ZN3Nrf5setCSEb>

	return write_val;
 8001c72:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_ZN3Nrf5setCSEb>:

void Nrf::setCS(bool state){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
	if(state)
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <_ZN3Nrf5setCSEb+0x24>
		HAL_GPIO_WritePin(csnPort, csnPin, GPIO_PIN_SET);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6898      	ldr	r0, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	899b      	ldrh	r3, [r3, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f001 fe9d 	bl	80039d8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(csnPort, csnPin, GPIO_PIN_RESET);
}
 8001c9e:	e007      	b.n	8001cb0 <_ZN3Nrf5setCSEb+0x34>
		HAL_GPIO_WritePin(csnPort, csnPin, GPIO_PIN_RESET);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6898      	ldr	r0, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	899b      	ldrh	r3, [r3, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4619      	mov	r1, r3
 8001cac:	f001 fe94 	bl	80039d8 <HAL_GPIO_WritePin>
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_ZN3Nrf5setCEEb>:

void Nrf::setCE(bool state){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	70fb      	strb	r3, [r7, #3]
	if(state)
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <_ZN3Nrf5setCEEb+0x24>
		HAL_GPIO_WritePin(cePort, cePin, GPIO_PIN_SET);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6918      	ldr	r0, [r3, #16]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	8a9b      	ldrh	r3, [r3, #20]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f001 fe7f 	bl	80039d8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(cePort, cePin, GPIO_PIN_RESET);
}
 8001cda:	e007      	b.n	8001cec <_ZN3Nrf5setCEEb+0x34>
		HAL_GPIO_WritePin(cePort, cePin, GPIO_PIN_RESET);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6918      	ldr	r0, [r3, #16]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	8a9b      	ldrh	r3, [r3, #20]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f001 fe76 	bl	80039d8 <HAL_GPIO_WritePin>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <HAL_MspInit+0x44>)
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001d38 <HAL_MspInit+0x44>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d06:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <HAL_MspInit+0x44>)
 8001d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <HAL_MspInit+0x44>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d16:	4a08      	ldr	r2, [pc, #32]	@ (8001d38 <HAL_MspInit+0x44>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_MspInit+0x44>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d2a:	f002 fcf9 	bl	8004720 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000

08001d3c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b09e      	sub	sp, #120	@ 0x78
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d54:	f107 0320 	add.w	r3, r7, #32
 8001d58:	2244      	movs	r2, #68	@ 0x44
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f006 ff9f 	bl	8008ca0 <memset>
  if(hadc->Instance==ADC1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d6a:	d156      	bne.n	8001e1a <HAL_ADC_MspInit+0xde>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d70:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001d72:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fa0d 	bl	800519c <HAL_RCCEx_PeriphCLKConfig>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001d88:	f7ff fddc 	bl	8001944 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d8c:	4b46      	ldr	r3, [pc, #280]	@ (8001ea8 <HAL_ADC_MspInit+0x16c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a45      	ldr	r2, [pc, #276]	@ (8001ea8 <HAL_ADC_MspInit+0x16c>)
 8001d94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d96:	4b44      	ldr	r3, [pc, #272]	@ (8001ea8 <HAL_ADC_MspInit+0x16c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10b      	bne.n	8001db6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d9e:	4b43      	ldr	r3, [pc, #268]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da2:	4a42      	ldr	r2, [pc, #264]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001da4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001daa:	4b40      	ldr	r3, [pc, #256]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dba:	4a3c      	ldr	r2, [pc, #240]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	4b37      	ldr	r3, [pc, #220]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd2:	4a36      	ldr	r2, [pc, #216]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dda:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697b      	ldr	r3, [r7, #20]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001de6:	2306      	movs	r3, #6
 8001de8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dea:	2303      	movs	r3, #3
 8001dec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001df6:	4619      	mov	r1, r3
 8001df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dfc:	f001 fc6a 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e00:	2303      	movs	r3, #3
 8001e02:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e04:	2303      	movs	r3, #3
 8001e06:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e10:	4619      	mov	r1, r3
 8001e12:	4827      	ldr	r0, [pc, #156]	@ (8001eb0 <HAL_ADC_MspInit+0x174>)
 8001e14:	f001 fc5e 	bl	80036d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e18:	e042      	b.n	8001ea0 <HAL_ADC_MspInit+0x164>
  else if(hadc->Instance==ADC2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a25      	ldr	r2, [pc, #148]	@ (8001eb4 <HAL_ADC_MspInit+0x178>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d13d      	bne.n	8001ea0 <HAL_ADC_MspInit+0x164>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e28:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e2a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e30:	f107 0320 	add.w	r3, r7, #32
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 f9b1 	bl	800519c <HAL_RCCEx_PeriphCLKConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_ADC_MspInit+0x108>
      Error_Handler();
 8001e40:	f7ff fd80 	bl	8001944 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e44:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <HAL_ADC_MspInit+0x16c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ea8 <HAL_ADC_MspInit+0x16c>)
 8001e4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <HAL_ADC_MspInit+0x16c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d10b      	bne.n	8001e6e <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	4a14      	ldr	r2, [pc, #80]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001e5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e62:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e72:	4a0e      	ldr	r2, [pc, #56]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <HAL_ADC_MspInit+0x170>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e86:	23c0      	movs	r3, #192	@ 0xc0
 8001e88:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e9c:	f001 fc1a 	bl	80036d4 <HAL_GPIO_Init>
}
 8001ea0:	bf00      	nop
 8001ea2:	3778      	adds	r7, #120	@ 0x78
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000310 	.word	0x20000310
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	48000400 	.word	0x48000400
 8001eb4:	50000100 	.word	0x50000100

08001eb8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b09c      	sub	sp, #112	@ 0x70
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed0:	f107 0318 	add.w	r3, r7, #24
 8001ed4:	2244      	movs	r2, #68	@ 0x44
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f006 fee1 	bl	8008ca0 <memset>
  if(hi2c->Instance==I2C1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8001f98 <HAL_I2C_MspInit+0xe0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d153      	bne.n	8001f90 <HAL_I2C_MspInit+0xd8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ee8:	2340      	movs	r3, #64	@ 0x40
 8001eea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef0:	f107 0318 	add.w	r3, r7, #24
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 f951 	bl	800519c <HAL_RCCEx_PeriphCLKConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f00:	f7ff fd20 	bl	8001944 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f04:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <HAL_I2C_MspInit+0xe4>)
 8001f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f08:	4a24      	ldr	r2, [pc, #144]	@ (8001f9c <HAL_I2C_MspInit+0xe4>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f10:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <HAL_I2C_MspInit+0xe4>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <HAL_I2C_MspInit+0xe4>)
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f20:	4a1e      	ldr	r2, [pc, #120]	@ (8001f9c <HAL_I2C_MspInit+0xe4>)
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f28:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <HAL_I2C_MspInit+0xe4>)
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3a:	2312      	movs	r3, #18
 8001f3c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f46:	2304      	movs	r3, #4
 8001f48:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f54:	f001 fbbe 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f58:	2380      	movs	r3, #128	@ 0x80
 8001f5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f5c:	2312      	movs	r3, #18
 8001f5e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f70:	4619      	mov	r1, r3
 8001f72:	480b      	ldr	r0, [pc, #44]	@ (8001fa0 <HAL_I2C_MspInit+0xe8>)
 8001f74:	f001 fbae 	bl	80036d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f78:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <HAL_I2C_MspInit+0xe4>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7c:	4a07      	ldr	r2, [pc, #28]	@ (8001f9c <HAL_I2C_MspInit+0xe4>)
 8001f7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_I2C_MspInit+0xe4>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f90:	bf00      	nop
 8001f92:	3770      	adds	r7, #112	@ 0x70
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40005400 	.word	0x40005400
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	48000400 	.word	0x48000400

08001fa4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08e      	sub	sp, #56	@ 0x38
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a4c      	ldr	r2, [pc, #304]	@ (80020f4 <HAL_SPI_MspInit+0x150>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d164      	bne.n	8002090 <HAL_SPI_MspInit+0xec>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	4a4b      	ldr	r2, [pc, #300]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fd2:	4b49      	ldr	r3, [pc, #292]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fda:	623b      	str	r3, [r7, #32]
 8001fdc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fde:	4b46      	ldr	r3, [pc, #280]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	4a45      	ldr	r2, [pc, #276]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 8001fe4:	f043 0320 	orr.w	r3, r3, #32
 8001fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fea:	4b43      	ldr	r3, [pc, #268]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	4b40      	ldr	r3, [pc, #256]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002002:	4b3d      	ldr	r3, [pc, #244]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	4b3a      	ldr	r3, [pc, #232]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	4a39      	ldr	r2, [pc, #228]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800201a:	4b37      	ldr	r3, [pc, #220]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PF9     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002026:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002030:	2302      	movs	r3, #2
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002034:	2302      	movs	r3, #2
 8002036:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002038:	2305      	movs	r3, #5
 800203a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800203c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002040:	4619      	mov	r1, r3
 8002042:	482e      	ldr	r0, [pc, #184]	@ (80020fc <HAL_SPI_MspInit+0x158>)
 8002044:	f001 fb46 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002048:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002052:	2301      	movs	r3, #1
 8002054:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002056:	2302      	movs	r3, #2
 8002058:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800205a:	2305      	movs	r3, #5
 800205c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002062:	4619      	mov	r1, r3
 8002064:	4826      	ldr	r0, [pc, #152]	@ (8002100 <HAL_SPI_MspInit+0x15c>)
 8002066:	f001 fb35 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800206a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002074:	2302      	movs	r3, #2
 8002076:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002078:	2302      	movs	r3, #2
 800207a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800207c:	2305      	movs	r3, #5
 800207e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002084:	4619      	mov	r1, r3
 8002086:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800208a:	f001 fb23 	bl	80036d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800208e:	e02d      	b.n	80020ec <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1b      	ldr	r2, [pc, #108]	@ (8002104 <HAL_SPI_MspInit+0x160>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d128      	bne.n	80020ec <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800209a:	4b17      	ldr	r3, [pc, #92]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209e:	4a16      	ldr	r2, [pc, #88]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 80020a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a6:	4b14      	ldr	r3, [pc, #80]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	4a10      	ldr	r2, [pc, #64]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <HAL_SPI_MspInit+0x154>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80020ca:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020dc:	2306      	movs	r3, #6
 80020de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e4:	4619      	mov	r1, r3
 80020e6:	4808      	ldr	r0, [pc, #32]	@ (8002108 <HAL_SPI_MspInit+0x164>)
 80020e8:	f001 faf4 	bl	80036d4 <HAL_GPIO_Init>
}
 80020ec:	bf00      	nop
 80020ee:	3738      	adds	r7, #56	@ 0x38
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40003800 	.word	0x40003800
 80020f8:	40021000 	.word	0x40021000
 80020fc:	48001400 	.word	0x48001400
 8002100:	48000400 	.word	0x48000400
 8002104:	40003c00 	.word	0x40003c00
 8002108:	48000800 	.word	0x48000800

0800210c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <HAL_TIM_PWM_MspInit+0x38>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10b      	bne.n	8002136 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_TIM_PWM_MspInit+0x3c>)
 8002120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002122:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <HAL_TIM_PWM_MspInit+0x3c>)
 8002124:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002128:	6613      	str	r3, [r2, #96]	@ 0x60
 800212a:	4b07      	ldr	r3, [pc, #28]	@ (8002148 <HAL_TIM_PWM_MspInit+0x3c>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40012c00 	.word	0x40012c00
 8002148:	40021000 	.word	0x40021000

0800214c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	@ 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a2f      	ldr	r2, [pc, #188]	@ (8002228 <HAL_TIM_MspPostInit+0xdc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d157      	bne.n	800221e <HAL_TIM_MspPostInit+0xd2>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800216e:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <HAL_TIM_MspPostInit+0xe0>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	4a2e      	ldr	r2, [pc, #184]	@ (800222c <HAL_TIM_MspPostInit+0xe0>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217a:	4b2c      	ldr	r3, [pc, #176]	@ (800222c <HAL_TIM_MspPostInit+0xe0>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	4b29      	ldr	r3, [pc, #164]	@ (800222c <HAL_TIM_MspPostInit+0xe0>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	4a28      	ldr	r2, [pc, #160]	@ (800222c <HAL_TIM_MspPostInit+0xe0>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002192:	4b26      	ldr	r3, [pc, #152]	@ (800222c <HAL_TIM_MspPostInit+0xe0>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b23      	ldr	r3, [pc, #140]	@ (800222c <HAL_TIM_MspPostInit+0xe0>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a2:	4a22      	ldr	r2, [pc, #136]	@ (800222c <HAL_TIM_MspPostInit+0xe0>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <HAL_TIM_MspPostInit+0xe0>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80021c8:	2304      	movs	r3, #4
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	4817      	ldr	r0, [pc, #92]	@ (8002230 <HAL_TIM_MspPostInit+0xe4>)
 80021d4:	f001 fa7e 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80021ea:	2304      	movs	r3, #4
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	480f      	ldr	r0, [pc, #60]	@ (8002234 <HAL_TIM_MspPostInit+0xe8>)
 80021f6:	f001 fa6d 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80021fa:	f44f 53b8 	mov.w	r3, #5888	@ 0x1700
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800220c:	2306      	movs	r3, #6
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800221a:	f001 fa5b 	bl	80036d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	@ 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40012c00 	.word	0x40012c00
 800222c:	40021000 	.word	0x40021000
 8002230:	48000800 	.word	0x48000800
 8002234:	48000400 	.word	0x48000400

08002238 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b09a      	sub	sp, #104	@ 0x68
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	2244      	movs	r2, #68	@ 0x44
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f006 fd21 	bl	8008ca0 <memset>
  if(huart->Instance==USART2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1e      	ldr	r2, [pc, #120]	@ (80022dc <HAL_UART_MspInit+0xa4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d135      	bne.n	80022d4 <HAL_UART_MspInit+0x9c>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002268:	2302      	movs	r3, #2
 800226a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	4618      	mov	r0, r3
 8002276:	f002 ff91 	bl	800519c <HAL_RCCEx_PeriphCLKConfig>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002280:	f7ff fb60 	bl	8001944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002284:	4b16      	ldr	r3, [pc, #88]	@ (80022e0 <HAL_UART_MspInit+0xa8>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002288:	4a15      	ldr	r2, [pc, #84]	@ (80022e0 <HAL_UART_MspInit+0xa8>)
 800228a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800228e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002290:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <HAL_UART_MspInit+0xa8>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229c:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <HAL_UART_MspInit+0xa8>)
 800229e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a0:	4a0f      	ldr	r2, [pc, #60]	@ (80022e0 <HAL_UART_MspInit+0xa8>)
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a8:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <HAL_UART_MspInit+0xa8>)
 80022aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80022b4:	2318      	movs	r3, #24
 80022b6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022c4:	2307      	movs	r3, #7
 80022c6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022cc:	4619      	mov	r1, r3
 80022ce:	4805      	ldr	r0, [pc, #20]	@ (80022e4 <HAL_UART_MspInit+0xac>)
 80022d0:	f001 fa00 	bl	80036d4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80022d4:	bf00      	nop
 80022d6:	3768      	adds	r7, #104	@ 0x68
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40004400 	.word	0x40004400
 80022e0:	40021000 	.word	0x40021000
 80022e4:	48000400 	.word	0x48000400

080022e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <NMI_Handler+0x4>

080022f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <HardFault_Handler+0x4>

080022f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <MemManage_Handler+0x4>

08002300 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <BusFault_Handler+0x4>

08002308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <UsageFault_Handler+0x4>

08002310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800233e:	f000 f891 	bl	8002464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <SystemInit+0x20>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002352:	4a05      	ldr	r2, [pc, #20]	@ (8002368 <SystemInit+0x20>)
 8002354:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002358:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800236c:	480d      	ldr	r0, [pc, #52]	@ (80023a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800236e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002370:	f7ff ffea 	bl	8002348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002374:	480c      	ldr	r0, [pc, #48]	@ (80023a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002376:	490d      	ldr	r1, [pc, #52]	@ (80023ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002378:	4a0d      	ldr	r2, [pc, #52]	@ (80023b0 <LoopForever+0xe>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800237c:	e002      	b.n	8002384 <LoopCopyDataInit>

0800237e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002382:	3304      	adds	r3, #4

08002384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002388:	d3f9      	bcc.n	800237e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238a:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800238c:	4c0a      	ldr	r4, [pc, #40]	@ (80023b8 <LoopForever+0x16>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002390:	e001      	b.n	8002396 <LoopFillZerobss>

08002392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002394:	3204      	adds	r2, #4

08002396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002398:	d3fb      	bcc.n	8002392 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800239a:	f006 fc89 	bl	8008cb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800239e:	f7fe fd41 	bl	8000e24 <main>

080023a2 <LoopForever>:

LoopForever:
    b LoopForever
 80023a2:	e7fe      	b.n	80023a2 <LoopForever>
  ldr   r0, =_estack
 80023a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80023b0:	08009134 	.word	0x08009134
  ldr r2, =_sbss
 80023b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80023b8:	20000318 	.word	0x20000318

080023bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC1_2_IRQHandler>

080023be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f001 f951 	bl	8003670 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ce:	200f      	movs	r0, #15
 80023d0:	f000 f80e 	bl	80023f0 <HAL_InitTick>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	71fb      	strb	r3, [r7, #7]
 80023de:	e001      	b.n	80023e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023e0:	f7ff fc88 	bl	8001cf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023e4:	79fb      	ldrb	r3, [r7, #7]

}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023fc:	4b16      	ldr	r3, [pc, #88]	@ (8002458 <HAL_InitTick+0x68>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d022      	beq.n	800244a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002404:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_InitTick+0x6c>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <HAL_InitTick+0x68>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002410:	fbb1 f3f3 	udiv	r3, r1, r3
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	4618      	mov	r0, r3
 800241a:	f001 f94e 	bl	80036ba <HAL_SYSTICK_Config>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10f      	bne.n	8002444 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	d809      	bhi.n	800243e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800242a:	2200      	movs	r2, #0
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002432:	f001 f928 	bl	8003686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <HAL_InitTick+0x70>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e007      	b.n	800244e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	e004      	b.n	800244e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	e001      	b.n	800244e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000008 	.word	0x20000008
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_IncTick+0x1c>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_IncTick+0x20>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4413      	add	r3, r2
 8002472:	4a03      	ldr	r2, [pc, #12]	@ (8002480 <HAL_IncTick+0x1c>)
 8002474:	6013      	str	r3, [r2, #0]
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	20000314 	.word	0x20000314
 8002484:	20000008 	.word	0x20000008

08002488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return uwTick;
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <HAL_GetTick+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000314 	.word	0x20000314

080024a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff ffee 	bl	8002488 <HAL_GetTick>
 80024ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024b8:	d004      	beq.n	80024c4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ba:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_Delay+0x40>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4413      	add	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024c4:	bf00      	nop
 80024c6:	f7ff ffdf 	bl	8002488 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d8f7      	bhi.n	80024c6 <HAL_Delay+0x26>
  {
  }
}
 80024d6:	bf00      	nop
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000008 	.word	0x20000008

080024e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	609a      	str	r2, [r3, #8]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	609a      	str	r2, [r3, #8]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3360      	adds	r3, #96	@ 0x60
 800255e:	461a      	mov	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <LL_ADC_SetOffset+0x44>)
 800256e:	4013      	ands	r3, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	4313      	orrs	r3, r2
 800257c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002584:	bf00      	nop
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	03fff000 	.word	0x03fff000

08002594 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3360      	adds	r3, #96	@ 0x60
 80025a2:	461a      	mov	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3360      	adds	r3, #96	@ 0x60
 80025d0:	461a      	mov	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025ea:	bf00      	nop
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b087      	sub	sp, #28
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3360      	adds	r3, #96	@ 0x60
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	431a      	orrs	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002620:	bf00      	nop
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3360      	adds	r3, #96	@ 0x60
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	431a      	orrs	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	615a      	str	r2, [r3, #20]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3330      	adds	r3, #48	@ 0x30
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	4413      	add	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	211f      	movs	r1, #31
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	401a      	ands	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	0e9b      	lsrs	r3, r3, #26
 80026c0:	f003 011f 	and.w	r1, r3, #31
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	431a      	orrs	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3314      	adds	r3, #20
 80026f0:	461a      	mov	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	0e5b      	lsrs	r3, r3, #25
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	4413      	add	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	0d1b      	lsrs	r3, r3, #20
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2107      	movs	r1, #7
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	401a      	ands	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	0d1b      	lsrs	r3, r3, #20
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	431a      	orrs	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	43db      	mvns	r3, r3
 8002752:	401a      	ands	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0318 	and.w	r3, r3, #24
 800275a:	4908      	ldr	r1, [pc, #32]	@ (800277c <LL_ADC_SetChannelSingleDiff+0x44>)
 800275c:	40d9      	lsrs	r1, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	400b      	ands	r3, r1
 8002762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002766:	431a      	orrs	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	0007ffff 	.word	0x0007ffff

08002780 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002790:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6093      	str	r3, [r2, #8]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027b8:	d101      	bne.n	80027be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80027dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002808:	d101      	bne.n	800280e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <LL_ADC_IsEnabled+0x18>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <LL_ADC_IsEnabled+0x1a>
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d101      	bne.n	800285a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b08      	cmp	r3, #8
 800287a:	d101      	bne.n	8002880 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e167      	b.n	8002b7a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff fa3f 	bl	8001d3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff67 	bl	80027a4 <LL_ADC_IsDeepPowerDownEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff4d 	bl	8002780 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ff82 	bl	80027f4 <LL_ADC_IsInternalRegulatorEnabled>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d115      	bne.n	8002922 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff66 	bl	80027cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002900:	4ba0      	ldr	r3, [pc, #640]	@ (8002b84 <HAL_ADC_Init+0x2f4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	4aa0      	ldr	r2, [pc, #640]	@ (8002b88 <HAL_ADC_Init+0x2f8>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	3301      	adds	r3, #1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002914:	e002      	b.n	800291c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b01      	subs	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f9      	bne.n	8002916 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff64 	bl	80027f4 <LL_ADC_IsInternalRegulatorEnabled>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10d      	bne.n	800294e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002936:	f043 0210 	orr.w	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff75 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002958:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 8100 	bne.w	8002b68 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 80fc 	bne.w	8002b68 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002974:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002978:	f043 0202 	orr.w	r2, r3, #2
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff49 	bl	800281c <LL_ADC_IsEnabled>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d111      	bne.n	80029b4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002990:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002994:	f7ff ff42 	bl	800281c <LL_ADC_IsEnabled>
 8002998:	4604      	mov	r4, r0
 800299a:	487c      	ldr	r0, [pc, #496]	@ (8002b8c <HAL_ADC_Init+0x2fc>)
 800299c:	f7ff ff3e 	bl	800281c <LL_ADC_IsEnabled>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4323      	orrs	r3, r4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4619      	mov	r1, r3
 80029ae:	4878      	ldr	r0, [pc, #480]	@ (8002b90 <HAL_ADC_Init+0x300>)
 80029b0:	f7ff fd98 	bl	80024e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7f5b      	ldrb	r3, [r3, #29]
 80029b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d106      	bne.n	80029f0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	3b01      	subs	r3, #1
 80029e8:	045b      	lsls	r3, r3, #17
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d009      	beq.n	8002a0c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	4b60      	ldr	r3, [pc, #384]	@ (8002b94 <HAL_ADC_Init+0x304>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	69b9      	ldr	r1, [r7, #24]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff14 	bl	8002868 <LL_ADC_INJ_IsConversionOngoing>
 8002a40:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d16d      	bne.n	8002b24 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d16a      	bne.n	8002b24 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a52:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a5a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a6a:	f023 0302 	bic.w	r3, r3, #2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	69b9      	ldr	r1, [r7, #24]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d017      	beq.n	8002ab0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002a8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a98:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6911      	ldr	r1, [r2, #16]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002aae:	e013      	b.n	8002ad8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002abe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ad0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ad4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d118      	bne.n	8002b14 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002af8:	4311      	orrs	r1, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002afe:	4311      	orrs	r1, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b04:	430a      	orrs	r2, r1
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	611a      	str	r2, [r3, #16]
 8002b12:	e007      	b.n	8002b24 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d10c      	bne.n	8002b46 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f023 010f 	bic.w	r1, r3, #15
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	1e5a      	subs	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b44:	e007      	b.n	8002b56 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 020f 	bic.w	r2, r2, #15
 8002b54:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b66:	e007      	b.n	8002b78 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6c:	f043 0210 	orr.w	r2, r3, #16
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	@ 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000000 	.word	0x20000000
 8002b88:	053e2d63 	.word	0x053e2d63
 8002b8c:	50000100 	.word	0x50000100
 8002b90:	50000300 	.word	0x50000300
 8002b94:	fff04007 	.word	0xfff04007

08002b98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b0b6      	sub	sp, #216	@ 0xd8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x22>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e3c8      	b.n	800334c <HAL_ADC_ConfigChannel+0x7b4>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fe3b 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 83ad 	bne.w	800332e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	f7ff fd51 	bl	8002688 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fe29 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002bf0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fe35 	bl	8002868 <LL_ADC_INJ_IsConversionOngoing>
 8002bfe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 81d9 	bne.w	8002fbe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f040 81d4 	bne.w	8002fbe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c1e:	d10f      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7ff fd58 	bl	80026e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fd12 	bl	8002662 <LL_ADC_SetSamplingTimeCommonConfig>
 8002c3e:	e00e      	b.n	8002c5e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6819      	ldr	r1, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f7ff fd47 	bl	80026e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fd02 	bl	8002662 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	08db      	lsrs	r3, r3, #3
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d022      	beq.n	8002cc6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6919      	ldr	r1, [r3, #16]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c90:	f7ff fc5c 	bl	800254c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6919      	ldr	r1, [r3, #16]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f7ff fca8 	bl	80025f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d102      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x124>
 8002cb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cba:	e000      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x126>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f7ff fcb4 	bl	800262c <LL_ADC_SetOffsetSaturation>
 8002cc4:	e17b      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fc61 	bl	8002594 <LL_ADC_GetOffsetChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x15a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fc56 	bl	8002594 <LL_ADC_GetOffsetChannel>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	0e9b      	lsrs	r3, r3, #26
 8002cec:	f003 021f 	and.w	r2, r3, #31
 8002cf0:	e01e      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x198>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fc4b 	bl	8002594 <LL_ADC_GetOffsetChannel>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e004      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002d24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x1b0>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0e9b      	lsrs	r3, r3, #26
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	e018      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1e2>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	e004      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002d70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d106      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2200      	movs	r2, #0
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fc1a 	bl	80025c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2101      	movs	r1, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fbfe 	bl	8002594 <LL_ADC_GetOffsetChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x220>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2101      	movs	r1, #1
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fbf3 	bl	8002594 <LL_ADC_GetOffsetChannel>
 8002dae:	4603      	mov	r3, r0
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	f003 021f 	and.w	r2, r3, #31
 8002db6:	e01e      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x25e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fbe8 	bl	8002594 <LL_ADC_GetOffsetChannel>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002de6:	2320      	movs	r3, #32
 8002de8:	e004      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d105      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x276>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	0e9b      	lsrs	r3, r3, #26
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	e018      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x2a8>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002e2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002e32:	2320      	movs	r3, #32
 8002e34:	e004      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002e36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d106      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fbb7 	bl	80025c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2102      	movs	r1, #2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fb9b 	bl	8002594 <LL_ADC_GetOffsetChannel>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x2e6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fb90 	bl	8002594 <LL_ADC_GetOffsetChannel>
 8002e74:	4603      	mov	r3, r0
 8002e76:	0e9b      	lsrs	r3, r3, #26
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	e01e      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x324>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2102      	movs	r1, #2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fb85 	bl	8002594 <LL_ADC_GetOffsetChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ea0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002eac:	2320      	movs	r3, #32
 8002eae:	e004      	b.n	8002eba <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002eb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x33c>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	0e9b      	lsrs	r3, r3, #26
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	e016      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x36a>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ee6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	e004      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d106      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fb56 	bl	80025c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2103      	movs	r1, #3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fb3a 	bl	8002594 <LL_ADC_GetOffsetChannel>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x3a8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2103      	movs	r1, #3
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fb2f 	bl	8002594 <LL_ADC_GetOffsetChannel>
 8002f36:	4603      	mov	r3, r0
 8002f38:	0e9b      	lsrs	r3, r3, #26
 8002f3a:	f003 021f 	and.w	r2, r3, #31
 8002f3e:	e017      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x3d8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2103      	movs	r1, #3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fb24 	bl	8002594 <LL_ADC_GetOffsetChannel>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f5a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e003      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002f66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x3f0>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0e9b      	lsrs	r3, r3, #26
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	e011      	b.n	8002fac <HAL_ADC_ConfigChannel+0x414>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f98:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	e003      	b.n	8002fac <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d106      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2103      	movs	r1, #3
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fb01 	bl	80025c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fc2a 	bl	800281c <LL_ADC_IsEnabled>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f040 8140 	bne.w	8003250 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f7ff fbab 	bl	8002738 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	4a8f      	ldr	r2, [pc, #572]	@ (8003224 <HAL_ADC_ConfigChannel+0x68c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	f040 8131 	bne.w	8003250 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10b      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x47e>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	0e9b      	lsrs	r3, r3, #26
 8003004:	3301      	adds	r3, #1
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2b09      	cmp	r3, #9
 800300c:	bf94      	ite	ls
 800300e:	2301      	movls	r3, #1
 8003010:	2300      	movhi	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	e019      	b.n	800304a <HAL_ADC_ConfigChannel+0x4b2>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003026:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003028:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800302e:	2320      	movs	r3, #32
 8003030:	e003      	b.n	800303a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003032:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2b09      	cmp	r3, #9
 8003042:	bf94      	ite	ls
 8003044:	2301      	movls	r3, #1
 8003046:	2300      	movhi	r3, #0
 8003048:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800304a:	2b00      	cmp	r3, #0
 800304c:	d079      	beq.n	8003142 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003056:	2b00      	cmp	r3, #0
 8003058:	d107      	bne.n	800306a <HAL_ADC_ConfigChannel+0x4d2>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	3301      	adds	r3, #1
 8003062:	069b      	lsls	r3, r3, #26
 8003064:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003068:	e015      	b.n	8003096 <HAL_ADC_ConfigChannel+0x4fe>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800307a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800307c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003082:	2320      	movs	r3, #32
 8003084:	e003      	b.n	800308e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	3301      	adds	r3, #1
 8003090:	069b      	lsls	r3, r3, #26
 8003092:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x51e>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	0e9b      	lsrs	r3, r3, #26
 80030a8:	3301      	adds	r3, #1
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	e017      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x54e>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80030c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80030c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80030ce:	2320      	movs	r3, #32
 80030d0:	e003      	b.n	80030da <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80030d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	2101      	movs	r1, #1
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	ea42 0103 	orr.w	r1, r2, r3
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <HAL_ADC_ConfigChannel+0x574>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	0e9b      	lsrs	r3, r3, #26
 80030fc:	3301      	adds	r3, #1
 80030fe:	f003 021f 	and.w	r2, r3, #31
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	051b      	lsls	r3, r3, #20
 800310a:	e018      	b.n	800313e <HAL_ADC_ConfigChannel+0x5a6>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800311a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800311e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003124:	2320      	movs	r3, #32
 8003126:	e003      	b.n	8003130 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	3301      	adds	r3, #1
 8003132:	f003 021f 	and.w	r2, r3, #31
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800313e:	430b      	orrs	r3, r1
 8003140:	e081      	b.n	8003246 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314a:	2b00      	cmp	r3, #0
 800314c:	d107      	bne.n	800315e <HAL_ADC_ConfigChannel+0x5c6>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	0e9b      	lsrs	r3, r3, #26
 8003154:	3301      	adds	r3, #1
 8003156:	069b      	lsls	r3, r3, #26
 8003158:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800315c:	e015      	b.n	800318a <HAL_ADC_ConfigChannel+0x5f2>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800316c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003176:	2320      	movs	r3, #32
 8003178:	e003      	b.n	8003182 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	3301      	adds	r3, #1
 8003184:	069b      	lsls	r3, r3, #26
 8003186:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x612>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	0e9b      	lsrs	r3, r3, #26
 800319c:	3301      	adds	r3, #1
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	e017      	b.n	80031da <HAL_ADC_ConfigChannel+0x642>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	61fb      	str	r3, [r7, #28]
  return result;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80031c2:	2320      	movs	r3, #32
 80031c4:	e003      	b.n	80031ce <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	ea42 0103 	orr.w	r1, r2, r3
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10d      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x66e>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0e9b      	lsrs	r3, r3, #26
 80031f0:	3301      	adds	r3, #1
 80031f2:	f003 021f 	and.w	r2, r3, #31
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	3b1e      	subs	r3, #30
 80031fe:	051b      	lsls	r3, r3, #20
 8003200:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003204:	e01e      	b.n	8003244 <HAL_ADC_ConfigChannel+0x6ac>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
  return result;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d104      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800321e:	2320      	movs	r3, #32
 8003220:	e006      	b.n	8003230 <HAL_ADC_ConfigChannel+0x698>
 8003222:	bf00      	nop
 8003224:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3301      	adds	r3, #1
 8003232:	f003 021f 	and.w	r2, r3, #31
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	3b1e      	subs	r3, #30
 800323e:	051b      	lsls	r3, r3, #20
 8003240:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003244:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800324a:	4619      	mov	r1, r3
 800324c:	f7ff fa48 	bl	80026e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b3f      	ldr	r3, [pc, #252]	@ (8003354 <HAL_ADC_ConfigChannel+0x7bc>)
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d071      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800325c:	483e      	ldr	r0, [pc, #248]	@ (8003358 <HAL_ADC_ConfigChannel+0x7c0>)
 800325e:	f7ff f967 	bl	8002530 <LL_ADC_GetCommonPathInternalCh>
 8003262:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a3c      	ldr	r2, [pc, #240]	@ (800335c <HAL_ADC_ConfigChannel+0x7c4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_ADC_ConfigChannel+0x6e2>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a3a      	ldr	r2, [pc, #232]	@ (8003360 <HAL_ADC_ConfigChannel+0x7c8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d127      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800327a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800327e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d121      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800328e:	d157      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003294:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003298:	4619      	mov	r1, r3
 800329a:	482f      	ldr	r0, [pc, #188]	@ (8003358 <HAL_ADC_ConfigChannel+0x7c0>)
 800329c:	f7ff f935 	bl	800250a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032a0:	4b30      	ldr	r3, [pc, #192]	@ (8003364 <HAL_ADC_ConfigChannel+0x7cc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	4a30      	ldr	r2, [pc, #192]	@ (8003368 <HAL_ADC_ConfigChannel+0x7d0>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032ba:	e002      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3b01      	subs	r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f9      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032c8:	e03a      	b.n	8003340 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a27      	ldr	r2, [pc, #156]	@ (800336c <HAL_ADC_ConfigChannel+0x7d4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d113      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10d      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a22      	ldr	r2, [pc, #136]	@ (8003370 <HAL_ADC_ConfigChannel+0x7d8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02a      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032f2:	4619      	mov	r1, r3
 80032f4:	4818      	ldr	r0, [pc, #96]	@ (8003358 <HAL_ADC_ConfigChannel+0x7c0>)
 80032f6:	f7ff f908 	bl	800250a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032fa:	e021      	b.n	8003340 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1c      	ldr	r2, [pc, #112]	@ (8003374 <HAL_ADC_ConfigChannel+0x7dc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d11c      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003306:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800330a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a16      	ldr	r2, [pc, #88]	@ (8003370 <HAL_ADC_ConfigChannel+0x7d8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d011      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800331c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003320:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003324:	4619      	mov	r1, r3
 8003326:	480c      	ldr	r0, [pc, #48]	@ (8003358 <HAL_ADC_ConfigChannel+0x7c0>)
 8003328:	f7ff f8ef 	bl	800250a <LL_ADC_SetCommonPathInternalCh>
 800332c:	e008      	b.n	8003340 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	f043 0220 	orr.w	r2, r3, #32
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003348:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800334c:	4618      	mov	r0, r3
 800334e:	37d8      	adds	r7, #216	@ 0xd8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	80080000 	.word	0x80080000
 8003358:	50000300 	.word	0x50000300
 800335c:	c3210000 	.word	0xc3210000
 8003360:	90c00010 	.word	0x90c00010
 8003364:	20000000 	.word	0x20000000
 8003368:	053e2d63 	.word	0x053e2d63
 800336c:	c7520000 	.word	0xc7520000
 8003370:	50000100 	.word	0x50000100
 8003374:	cb840000 	.word	0xcb840000

08003378 <LL_ADC_IsEnabled>:
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <LL_ADC_IsEnabled+0x18>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <LL_ADC_IsEnabled+0x1a>
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <LL_ADC_REG_IsConversionOngoing>:
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d101      	bne.n	80033b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b0a1      	sub	sp, #132	@ 0x84
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033de:	2302      	movs	r3, #2
 80033e0:	e08b      	b.n	80034fa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033ea:	2300      	movs	r3, #0
 80033ec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033ee:	2300      	movs	r3, #0
 80033f0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033fa:	d102      	bne.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033fc:	4b41      	ldr	r3, [pc, #260]	@ (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	e001      	b.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10b      	bne.n	8003424 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e06a      	b.n	80034fa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ffb9 	bl	800339e <LL_ADC_REG_IsConversionOngoing>
 800342c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff ffb3 	bl	800339e <LL_ADC_REG_IsConversionOngoing>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d14c      	bne.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800343e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003440:	2b00      	cmp	r3, #0
 8003442:	d149      	bne.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003444:	4b30      	ldr	r3, [pc, #192]	@ (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003446:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d028      	beq.n	80034a2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003450:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003462:	035b      	lsls	r3, r3, #13
 8003464:	430b      	orrs	r3, r1
 8003466:	431a      	orrs	r2, r3
 8003468:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800346a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800346c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003470:	f7ff ff82 	bl	8003378 <LL_ADC_IsEnabled>
 8003474:	4604      	mov	r4, r0
 8003476:	4823      	ldr	r0, [pc, #140]	@ (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003478:	f7ff ff7e 	bl	8003378 <LL_ADC_IsEnabled>
 800347c:	4603      	mov	r3, r0
 800347e:	4323      	orrs	r3, r4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d133      	bne.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800348c:	f023 030f 	bic.w	r3, r3, #15
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	6811      	ldr	r1, [r2, #0]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	6892      	ldr	r2, [r2, #8]
 8003498:	430a      	orrs	r2, r1
 800349a:	431a      	orrs	r2, r3
 800349c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800349e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034a0:	e024      	b.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034ae:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034b2:	f7ff ff61 	bl	8003378 <LL_ADC_IsEnabled>
 80034b6:	4604      	mov	r4, r0
 80034b8:	4812      	ldr	r0, [pc, #72]	@ (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80034ba:	f7ff ff5d 	bl	8003378 <LL_ADC_IsEnabled>
 80034be:	4603      	mov	r3, r0
 80034c0:	4323      	orrs	r3, r4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d112      	bne.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034ce:	f023 030f 	bic.w	r3, r3, #15
 80034d2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034d4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034d6:	e009      	b.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80034ea:	e000      	b.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3784      	adds	r7, #132	@ 0x84
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd90      	pop	{r4, r7, pc}
 8003502:	bf00      	nop
 8003504:	50000100 	.word	0x50000100
 8003508:	50000300 	.word	0x50000300

0800350c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800351c:	4b0c      	ldr	r3, [pc, #48]	@ (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003528:	4013      	ands	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003534:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800353c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353e:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	60d3      	str	r3, [r2, #12]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003558:	4b04      	ldr	r3, [pc, #16]	@ (800356c <__NVIC_GetPriorityGrouping+0x18>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	f003 0307 	and.w	r3, r3, #7
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	6039      	str	r1, [r7, #0]
 800357a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	2b00      	cmp	r3, #0
 8003582:	db0a      	blt.n	800359a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	490c      	ldr	r1, [pc, #48]	@ (80035bc <__NVIC_SetPriority+0x4c>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	0112      	lsls	r2, r2, #4
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	440b      	add	r3, r1
 8003594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003598:	e00a      	b.n	80035b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	4908      	ldr	r1, [pc, #32]	@ (80035c0 <__NVIC_SetPriority+0x50>)
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	3b04      	subs	r3, #4
 80035a8:	0112      	lsls	r2, r2, #4
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	440b      	add	r3, r1
 80035ae:	761a      	strb	r2, [r3, #24]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000e100 	.word	0xe000e100
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	@ 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f1c3 0307 	rsb	r3, r3, #7
 80035de:	2b04      	cmp	r3, #4
 80035e0:	bf28      	it	cs
 80035e2:	2304      	movcs	r3, #4
 80035e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3304      	adds	r3, #4
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d902      	bls.n	80035f4 <NVIC_EncodePriority+0x30>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3b03      	subs	r3, #3
 80035f2:	e000      	b.n	80035f6 <NVIC_EncodePriority+0x32>
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43da      	mvns	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	401a      	ands	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800360c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	43d9      	mvns	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	4313      	orrs	r3, r2
         );
}
 800361e:	4618      	mov	r0, r3
 8003620:	3724      	adds	r7, #36	@ 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800363c:	d301      	bcc.n	8003642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800363e:	2301      	movs	r3, #1
 8003640:	e00f      	b.n	8003662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <SysTick_Config+0x40>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3b01      	subs	r3, #1
 8003648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800364a:	210f      	movs	r1, #15
 800364c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003650:	f7ff ff8e 	bl	8003570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <SysTick_Config+0x40>)
 8003656:	2200      	movs	r2, #0
 8003658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800365a:	4b04      	ldr	r3, [pc, #16]	@ (800366c <SysTick_Config+0x40>)
 800365c:	2207      	movs	r2, #7
 800365e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	e000e010 	.word	0xe000e010

08003670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff47 	bl	800350c <__NVIC_SetPriorityGrouping>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	4603      	mov	r3, r0
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003694:	f7ff ff5e 	bl	8003554 <__NVIC_GetPriorityGrouping>
 8003698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	6978      	ldr	r0, [r7, #20]
 80036a0:	f7ff ff90 	bl	80035c4 <NVIC_EncodePriority>
 80036a4:	4602      	mov	r2, r0
 80036a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036aa:	4611      	mov	r1, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff5f 	bl	8003570 <__NVIC_SetPriority>
}
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ffb2 	bl	800362c <SysTick_Config>
 80036c8:	4603      	mov	r3, r0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80036e2:	e15a      	b.n	800399a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 814c 	beq.w	8003994 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d005      	beq.n	8003714 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003710:	2b02      	cmp	r3, #2
 8003712:	d130      	bne.n	8003776 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	2203      	movs	r2, #3
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800374a:	2201      	movs	r2, #1
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 0201 	and.w	r2, r3, #1
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	2b03      	cmp	r3, #3
 8003780:	d017      	beq.n	80037b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	2203      	movs	r2, #3
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d123      	bne.n	8003806 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	08da      	lsrs	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3208      	adds	r2, #8
 80037c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	220f      	movs	r2, #15
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	08da      	lsrs	r2, r3, #3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3208      	adds	r2, #8
 8003800:	6939      	ldr	r1, [r7, #16]
 8003802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	2203      	movs	r2, #3
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0203 	and.w	r2, r3, #3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80a6 	beq.w	8003994 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003848:	4b5b      	ldr	r3, [pc, #364]	@ (80039b8 <HAL_GPIO_Init+0x2e4>)
 800384a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384c:	4a5a      	ldr	r2, [pc, #360]	@ (80039b8 <HAL_GPIO_Init+0x2e4>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	6613      	str	r3, [r2, #96]	@ 0x60
 8003854:	4b58      	ldr	r3, [pc, #352]	@ (80039b8 <HAL_GPIO_Init+0x2e4>)
 8003856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003860:	4a56      	ldr	r2, [pc, #344]	@ (80039bc <HAL_GPIO_Init+0x2e8>)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	3302      	adds	r3, #2
 8003868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	220f      	movs	r2, #15
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800388a:	d01f      	beq.n	80038cc <HAL_GPIO_Init+0x1f8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a4c      	ldr	r2, [pc, #304]	@ (80039c0 <HAL_GPIO_Init+0x2ec>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d019      	beq.n	80038c8 <HAL_GPIO_Init+0x1f4>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a4b      	ldr	r2, [pc, #300]	@ (80039c4 <HAL_GPIO_Init+0x2f0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <HAL_GPIO_Init+0x1f0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a4a      	ldr	r2, [pc, #296]	@ (80039c8 <HAL_GPIO_Init+0x2f4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00d      	beq.n	80038c0 <HAL_GPIO_Init+0x1ec>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a49      	ldr	r2, [pc, #292]	@ (80039cc <HAL_GPIO_Init+0x2f8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <HAL_GPIO_Init+0x1e8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a48      	ldr	r2, [pc, #288]	@ (80039d0 <HAL_GPIO_Init+0x2fc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <HAL_GPIO_Init+0x1e4>
 80038b4:	2305      	movs	r3, #5
 80038b6:	e00a      	b.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038b8:	2306      	movs	r3, #6
 80038ba:	e008      	b.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038bc:	2304      	movs	r3, #4
 80038be:	e006      	b.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038c0:	2303      	movs	r3, #3
 80038c2:	e004      	b.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e002      	b.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038cc:	2300      	movs	r3, #0
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	f002 0203 	and.w	r2, r2, #3
 80038d4:	0092      	lsls	r2, r2, #2
 80038d6:	4093      	lsls	r3, r2
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038de:	4937      	ldr	r1, [pc, #220]	@ (80039bc <HAL_GPIO_Init+0x2e8>)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	089b      	lsrs	r3, r3, #2
 80038e4:	3302      	adds	r3, #2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038ec:	4b39      	ldr	r3, [pc, #228]	@ (80039d4 <HAL_GPIO_Init+0x300>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003910:	4a30      	ldr	r2, [pc, #192]	@ (80039d4 <HAL_GPIO_Init+0x300>)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003916:	4b2f      	ldr	r3, [pc, #188]	@ (80039d4 <HAL_GPIO_Init+0x300>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	43db      	mvns	r3, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800393a:	4a26      	ldr	r2, [pc, #152]	@ (80039d4 <HAL_GPIO_Init+0x300>)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003940:	4b24      	ldr	r3, [pc, #144]	@ (80039d4 <HAL_GPIO_Init+0x300>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	43db      	mvns	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003964:	4a1b      	ldr	r2, [pc, #108]	@ (80039d4 <HAL_GPIO_Init+0x300>)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800396a:	4b1a      	ldr	r3, [pc, #104]	@ (80039d4 <HAL_GPIO_Init+0x300>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	43db      	mvns	r3, r3
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800398e:	4a11      	ldr	r2, [pc, #68]	@ (80039d4 <HAL_GPIO_Init+0x300>)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3301      	adds	r3, #1
 8003998:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f47f ae9d 	bne.w	80036e4 <HAL_GPIO_Init+0x10>
  }
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40010000 	.word	0x40010000
 80039c0:	48000400 	.word	0x48000400
 80039c4:	48000800 	.word	0x48000800
 80039c8:	48000c00 	.word	0x48000c00
 80039cc:	48001000 	.word	0x48001000
 80039d0:	48001400 	.word	0x48001400
 80039d4:	40010400 	.word	0x40010400

080039d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
 80039e4:	4613      	mov	r3, r2
 80039e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039e8:	787b      	ldrb	r3, [r7, #1]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039f4:	e002      	b.n	80039fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039f6:	887a      	ldrh	r2, [r7, #2]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e08d      	b.n	8003b36 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fe fa42 	bl	8001eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2224      	movs	r2, #36	@ 0x24
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	e006      	b.n	8003a90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003a8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d108      	bne.n	8003aaa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	e007      	b.n	8003aba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ab8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003acc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69d9      	ldr	r1, [r3, #28]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1a      	ldr	r2, [r3, #32]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	817b      	strh	r3, [r7, #10]
 8003b50:	4613      	mov	r3, r2
 8003b52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	f040 80fd 	bne.w	8003d5c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_I2C_Master_Transmit+0x30>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e0f6      	b.n	8003d5e <HAL_I2C_Master_Transmit+0x21e>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b78:	f7fe fc86 	bl	8002488 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2319      	movs	r3, #25
 8003b84:	2201      	movs	r2, #1
 8003b86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fa0a 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0e1      	b.n	8003d5e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2221      	movs	r2, #33	@ 0x21
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	893a      	ldrh	r2, [r7, #8]
 8003bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2bff      	cmp	r3, #255	@ 0xff
 8003bca:	d906      	bls.n	8003bda <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	22ff      	movs	r2, #255	@ 0xff
 8003bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003bd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e007      	b.n	8003bea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003be4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003be8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d024      	beq.n	8003c3c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	8979      	ldrh	r1, [r7, #10]
 8003c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d68 <HAL_I2C_Master_Transmit+0x228>)
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fc05 	bl	8004444 <I2C_TransferConfig>
 8003c3a:	e066      	b.n	8003d0a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	8979      	ldrh	r1, [r7, #10]
 8003c44:	4b48      	ldr	r3, [pc, #288]	@ (8003d68 <HAL_I2C_Master_Transmit+0x228>)
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fbfa 	bl	8004444 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c50:	e05b      	b.n	8003d0a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	6a39      	ldr	r1, [r7, #32]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f9fd 	bl	8004056 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e07b      	b.n	8003d5e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d034      	beq.n	8003d0a <HAL_I2C_Master_Transmit+0x1ca>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d130      	bne.n	8003d0a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2180      	movs	r1, #128	@ 0x80
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f976 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e04d      	b.n	8003d5e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2bff      	cmp	r3, #255	@ 0xff
 8003cca:	d90e      	bls.n	8003cea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	22ff      	movs	r2, #255	@ 0xff
 8003cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	8979      	ldrh	r1, [r7, #10]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fbae 	bl	8004444 <I2C_TransferConfig>
 8003ce8:	e00f      	b.n	8003d0a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	8979      	ldrh	r1, [r7, #10]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fb9d 	bl	8004444 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d19e      	bne.n	8003c52 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	6a39      	ldr	r1, [r7, #32]
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f9e3 	bl	80040e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e01a      	b.n	8003d5e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d6c <HAL_I2C_Master_Transmit+0x22c>)
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	80002000 	.word	0x80002000
 8003d6c:	fe00e800 	.word	0xfe00e800

08003d70 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	817b      	strh	r3, [r7, #10]
 8003d80:	4613      	mov	r3, r2
 8003d82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	f040 80db 	bne.w	8003f48 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_I2C_Master_Receive+0x30>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e0d4      	b.n	8003f4a <HAL_I2C_Master_Receive+0x1da>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003da8:	f7fe fb6e 	bl	8002488 <HAL_GetTick>
 8003dac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2319      	movs	r3, #25
 8003db4:	2201      	movs	r2, #1
 8003db6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f8f2 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0bf      	b.n	8003f4a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2222      	movs	r2, #34	@ 0x22
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	893a      	ldrh	r2, [r7, #8]
 8003dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2bff      	cmp	r3, #255	@ 0xff
 8003dfa:	d90e      	bls.n	8003e1a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	22ff      	movs	r2, #255	@ 0xff
 8003e00:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	8979      	ldrh	r1, [r7, #10]
 8003e0a:	4b52      	ldr	r3, [pc, #328]	@ (8003f54 <HAL_I2C_Master_Receive+0x1e4>)
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fb16 	bl	8004444 <I2C_TransferConfig>
 8003e18:	e06d      	b.n	8003ef6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	8979      	ldrh	r1, [r7, #10]
 8003e2c:	4b49      	ldr	r3, [pc, #292]	@ (8003f54 <HAL_I2C_Master_Receive+0x1e4>)
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fb05 	bl	8004444 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003e3a:	e05c      	b.n	8003ef6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	6a39      	ldr	r1, [r7, #32]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f993 	bl	800416c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e07c      	b.n	8003f4a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d034      	beq.n	8003ef6 <HAL_I2C_Master_Receive+0x186>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d130      	bne.n	8003ef6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2180      	movs	r1, #128	@ 0x80
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f880 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e04d      	b.n	8003f4a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2bff      	cmp	r3, #255	@ 0xff
 8003eb6:	d90e      	bls.n	8003ed6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	22ff      	movs	r2, #255	@ 0xff
 8003ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	8979      	ldrh	r1, [r7, #10]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fab8 	bl	8004444 <I2C_TransferConfig>
 8003ed4:	e00f      	b.n	8003ef6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	8979      	ldrh	r1, [r7, #10]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 faa7 	bl	8004444 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d19d      	bne.n	8003e3c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	6a39      	ldr	r1, [r7, #32]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f8ed 	bl	80040e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e01a      	b.n	8003f4a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6859      	ldr	r1, [r3, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <HAL_I2C_Master_Receive+0x1e8>)
 8003f28:	400b      	ands	r3, r1
 8003f2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	80002400 	.word	0x80002400
 8003f58:	fe00e800 	.word	0xfe00e800

08003f5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d103      	bne.n	8003f7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2200      	movs	r2, #0
 8003f78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d007      	beq.n	8003f98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	619a      	str	r2, [r3, #24]
  }
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fb4:	e03b      	b.n	800402e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	6839      	ldr	r1, [r7, #0]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f962 	bl	8004284 <I2C_IsErrorOccurred>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e041      	b.n	800404e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fd0:	d02d      	beq.n	800402e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd2:	f7fe fa59 	bl	8002488 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d122      	bne.n	800402e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	429a      	cmp	r2, r3
 8004004:	d113      	bne.n	800402e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400a:	f043 0220 	orr.w	r2, r3, #32
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e00f      	b.n	800404e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699a      	ldr	r2, [r3, #24]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	429a      	cmp	r2, r3
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	429a      	cmp	r2, r3
 800404a:	d0b4      	beq.n	8003fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004062:	e033      	b.n	80040cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f90b 	bl	8004284 <I2C_IsErrorOccurred>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e031      	b.n	80040dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800407e:	d025      	beq.n	80040cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004080:	f7fe fa02 	bl	8002488 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	429a      	cmp	r2, r3
 800408e:	d302      	bcc.n	8004096 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d11a      	bne.n	80040cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d013      	beq.n	80040cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a8:	f043 0220 	orr.w	r2, r3, #32
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e007      	b.n	80040dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d1c4      	bne.n	8004064 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040f0:	e02f      	b.n	8004152 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f8c4 	bl	8004284 <I2C_IsErrorOccurred>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e02d      	b.n	8004162 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004106:	f7fe f9bf 	bl	8002488 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	429a      	cmp	r2, r3
 8004114:	d302      	bcc.n	800411c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d11a      	bne.n	8004152 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b20      	cmp	r3, #32
 8004128:	d013      	beq.n	8004152 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f043 0220 	orr.w	r2, r3, #32
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e007      	b.n	8004162 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b20      	cmp	r3, #32
 800415e:	d1c8      	bne.n	80040f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800417c:	e071      	b.n	8004262 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f87e 	bl	8004284 <I2C_IsErrorOccurred>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b20      	cmp	r3, #32
 800419e:	d13b      	bne.n	8004218 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d138      	bne.n	8004218 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d105      	bne.n	80041c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d121      	bne.n	8004212 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2210      	movs	r2, #16
 80041d4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2204      	movs	r2, #4
 80041da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2220      	movs	r2, #32
 80041e2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b24      	ldr	r3, [pc, #144]	@ (8004280 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80041f0:	400b      	ands	r3, r1
 80041f2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	75fb      	strb	r3, [r7, #23]
 8004210:	e002      	b.n	8004218 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004218:	f7fe f936 	bl	8002488 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	429a      	cmp	r2, r3
 8004226:	d302      	bcc.n	800422e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d119      	bne.n	8004262 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800422e:	7dfb      	ldrb	r3, [r7, #23]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d116      	bne.n	8004262 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d00f      	beq.n	8004262 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004246:	f043 0220 	orr.w	r2, r3, #32
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d002      	beq.n	8004276 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d083      	beq.n	800417e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004276:	7dfb      	ldrb	r3, [r7, #23]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	fe00e800 	.word	0xfe00e800

08004284 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	@ 0x28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d068      	beq.n	8004382 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2210      	movs	r2, #16
 80042b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042b8:	e049      	b.n	800434e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042c0:	d045      	beq.n	800434e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fe f8e1 	bl	8002488 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <I2C_IsErrorOccurred+0x54>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d13a      	bne.n	800434e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042fa:	d121      	bne.n	8004340 <I2C_IsErrorOccurred+0xbc>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004302:	d01d      	beq.n	8004340 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b20      	cmp	r3, #32
 8004308:	d01a      	beq.n	8004340 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004318:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800431a:	f7fe f8b5 	bl	8002488 <HAL_GetTick>
 800431e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004320:	e00e      	b.n	8004340 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004322:	f7fe f8b1 	bl	8002488 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b19      	cmp	r3, #25
 800432e:	d907      	bls.n	8004340 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	f043 0320 	orr.w	r3, r3, #32
 8004336:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800433e:	e006      	b.n	800434e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b20      	cmp	r3, #32
 800434c:	d1e9      	bne.n	8004322 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b20      	cmp	r3, #32
 800435a:	d003      	beq.n	8004364 <I2C_IsErrorOccurred+0xe0>
 800435c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0aa      	beq.n	80042ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004368:	2b00      	cmp	r3, #0
 800436a:	d103      	bne.n	8004374 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2220      	movs	r2, #32
 8004372:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	f043 0304 	orr.w	r3, r3, #4
 800437a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00b      	beq.n	80043ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	f043 0308 	orr.w	r3, r3, #8
 80043bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00b      	beq.n	80043f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	f043 0302 	orr.w	r3, r3, #2
 80043de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80043f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01c      	beq.n	8004432 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff fdaf 	bl	8003f5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <I2C_IsErrorOccurred+0x1bc>)
 800440a:	400b      	ands	r3, r1
 800440c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	431a      	orrs	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004432:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004436:	4618      	mov	r0, r3
 8004438:	3728      	adds	r7, #40	@ 0x28
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	fe00e800 	.word	0xfe00e800

08004444 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	817b      	strh	r3, [r7, #10]
 8004452:	4613      	mov	r3, r2
 8004454:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004456:	897b      	ldrh	r3, [r7, #10]
 8004458:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800445c:	7a7b      	ldrb	r3, [r7, #9]
 800445e:	041b      	lsls	r3, r3, #16
 8004460:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004464:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	4313      	orrs	r3, r2
 800446e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004472:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	0d5b      	lsrs	r3, r3, #21
 800447e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004482:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <I2C_TransferConfig+0x60>)
 8004484:	430b      	orrs	r3, r1
 8004486:	43db      	mvns	r3, r3
 8004488:	ea02 0103 	and.w	r1, r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	03ff63ff 	.word	0x03ff63ff

080044a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d138      	bne.n	8004530 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e032      	b.n	8004532 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2224      	movs	r2, #36	@ 0x24
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6819      	ldr	r1, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	e000      	b.n	8004532 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004530:	2302      	movs	r3, #2
  }
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800453e:	b480      	push	{r7}
 8004540:	b085      	sub	sp, #20
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b20      	cmp	r3, #32
 8004552:	d139      	bne.n	80045c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800455e:	2302      	movs	r3, #2
 8004560:	e033      	b.n	80045ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2224      	movs	r2, #36	@ 0x24
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004590:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	e000      	b.n	80045ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
  }
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
	...

080045d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d141      	bne.n	800466a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f2:	d131      	bne.n	8004658 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045f4:	4b47      	ldr	r3, [pc, #284]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045fa:	4a46      	ldr	r2, [pc, #280]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004600:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004604:	4b43      	ldr	r3, [pc, #268]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800460c:	4a41      	ldr	r2, [pc, #260]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800460e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004612:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004614:	4b40      	ldr	r3, [pc, #256]	@ (8004718 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2232      	movs	r2, #50	@ 0x32
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	4a3f      	ldr	r2, [pc, #252]	@ (800471c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	0c9b      	lsrs	r3, r3, #18
 8004626:	3301      	adds	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800462a:	e002      	b.n	8004632 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3b01      	subs	r3, #1
 8004630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004632:	4b38      	ldr	r3, [pc, #224]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800463e:	d102      	bne.n	8004646 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f2      	bne.n	800462c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004646:	4b33      	ldr	r3, [pc, #204]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004652:	d158      	bne.n	8004706 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e057      	b.n	8004708 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004658:	4b2e      	ldr	r3, [pc, #184]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800465a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800465e:	4a2d      	ldr	r2, [pc, #180]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004664:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004668:	e04d      	b.n	8004706 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004670:	d141      	bne.n	80046f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004672:	4b28      	ldr	r3, [pc, #160]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800467a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800467e:	d131      	bne.n	80046e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004680:	4b24      	ldr	r3, [pc, #144]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004686:	4a23      	ldr	r2, [pc, #140]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004690:	4b20      	ldr	r3, [pc, #128]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004698:	4a1e      	ldr	r2, [pc, #120]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800469e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004718 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2232      	movs	r2, #50	@ 0x32
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	4a1c      	ldr	r2, [pc, #112]	@ (800471c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	0c9b      	lsrs	r3, r3, #18
 80046b2:	3301      	adds	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046b6:	e002      	b.n	80046be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046be:	4b15      	ldr	r3, [pc, #84]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ca:	d102      	bne.n	80046d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f2      	bne.n	80046b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046d2:	4b10      	ldr	r3, [pc, #64]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046de:	d112      	bne.n	8004706 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e011      	b.n	8004708 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80046f4:	e007      	b.n	8004706 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046f6:	4b07      	ldr	r3, [pc, #28]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046fe:	4a05      	ldr	r2, [pc, #20]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004700:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004704:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40007000 	.word	0x40007000
 8004718:	20000000 	.word	0x20000000
 800471c:	431bde83 	.word	0x431bde83

08004720 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004724:	4b05      	ldr	r3, [pc, #20]	@ (800473c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a04      	ldr	r2, [pc, #16]	@ (800473c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800472a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800472e:	6093      	str	r3, [r2, #8]
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40007000 	.word	0x40007000

08004740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e2fe      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d075      	beq.n	800484a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800475e:	4b97      	ldr	r3, [pc, #604]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004768:	4b94      	ldr	r3, [pc, #592]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b0c      	cmp	r3, #12
 8004776:	d102      	bne.n	800477e <HAL_RCC_OscConfig+0x3e>
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2b03      	cmp	r3, #3
 800477c:	d002      	beq.n	8004784 <HAL_RCC_OscConfig+0x44>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d10b      	bne.n	800479c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004784:	4b8d      	ldr	r3, [pc, #564]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d05b      	beq.n	8004848 <HAL_RCC_OscConfig+0x108>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d157      	bne.n	8004848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e2d9      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a4:	d106      	bne.n	80047b4 <HAL_RCC_OscConfig+0x74>
 80047a6:	4b85      	ldr	r3, [pc, #532]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a84      	ldr	r2, [pc, #528]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e01d      	b.n	80047f0 <HAL_RCC_OscConfig+0xb0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x98>
 80047be:	4b7f      	ldr	r3, [pc, #508]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a7e      	ldr	r2, [pc, #504]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80047c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	4b7c      	ldr	r3, [pc, #496]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a7b      	ldr	r2, [pc, #492]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	e00b      	b.n	80047f0 <HAL_RCC_OscConfig+0xb0>
 80047d8:	4b78      	ldr	r3, [pc, #480]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a77      	ldr	r2, [pc, #476]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80047de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	4b75      	ldr	r3, [pc, #468]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a74      	ldr	r2, [pc, #464]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80047ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d013      	beq.n	8004820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd fe46 	bl	8002488 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004800:	f7fd fe42 	bl	8002488 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	@ 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e29e      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004812:	4b6a      	ldr	r3, [pc, #424]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCC_OscConfig+0xc0>
 800481e:	e014      	b.n	800484a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fd fe32 	bl	8002488 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004828:	f7fd fe2e 	bl	8002488 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b64      	cmp	r3, #100	@ 0x64
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e28a      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800483a:	4b60      	ldr	r3, [pc, #384]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0xe8>
 8004846:	e000      	b.n	800484a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d075      	beq.n	8004942 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004856:	4b59      	ldr	r3, [pc, #356]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
 800485e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004860:	4b56      	ldr	r3, [pc, #344]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b0c      	cmp	r3, #12
 800486e:	d102      	bne.n	8004876 <HAL_RCC_OscConfig+0x136>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d002      	beq.n	800487c <HAL_RCC_OscConfig+0x13c>
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d11f      	bne.n	80048bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800487c:	4b4f      	ldr	r3, [pc, #316]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_OscConfig+0x154>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e25d      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004894:	4b49      	ldr	r3, [pc, #292]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	4946      	ldr	r1, [pc, #280]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048a8:	4b45      	ldr	r3, [pc, #276]	@ (80049c0 <HAL_RCC_OscConfig+0x280>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fd fd9f 	bl	80023f0 <HAL_InitTick>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d043      	beq.n	8004940 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e249      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d023      	beq.n	800490c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c4:	4b3d      	ldr	r3, [pc, #244]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a3c      	ldr	r2, [pc, #240]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80048ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd fdda 	bl	8002488 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d8:	f7fd fdd6 	bl	8002488 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e232      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ea:	4b34      	ldr	r3, [pc, #208]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f6:	4b31      	ldr	r3, [pc, #196]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	061b      	lsls	r3, r3, #24
 8004904:	492d      	ldr	r1, [pc, #180]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	604b      	str	r3, [r1, #4]
 800490a:	e01a      	b.n	8004942 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800490c:	4b2b      	ldr	r3, [pc, #172]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a2a      	ldr	r2, [pc, #168]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004912:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fd fdb6 	bl	8002488 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004920:	f7fd fdb2 	bl	8002488 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e20e      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004932:	4b22      	ldr	r3, [pc, #136]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x1e0>
 800493e:	e000      	b.n	8004942 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004940:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d041      	beq.n	80049d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01c      	beq.n	8004990 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004956:	4b19      	ldr	r3, [pc, #100]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800495c:	4a17      	ldr	r2, [pc, #92]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004966:	f7fd fd8f 	bl	8002488 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800496e:	f7fd fd8b 	bl	8002488 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e1e7      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004980:	4b0e      	ldr	r3, [pc, #56]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0ef      	beq.n	800496e <HAL_RCC_OscConfig+0x22e>
 800498e:	e020      	b.n	80049d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004990:	4b0a      	ldr	r3, [pc, #40]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004996:	4a09      	ldr	r2, [pc, #36]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a0:	f7fd fd72 	bl	8002488 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049a6:	e00d      	b.n	80049c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a8:	f7fd fd6e 	bl	8002488 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d906      	bls.n	80049c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e1ca      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000
 80049c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049c4:	4b8c      	ldr	r3, [pc, #560]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 80049c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1ea      	bne.n	80049a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80a6 	beq.w	8004b2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e0:	2300      	movs	r3, #0
 80049e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049e4:	4b84      	ldr	r3, [pc, #528]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_RCC_OscConfig+0x2b4>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x2b6>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00d      	beq.n	8004a16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fa:	4b7f      	ldr	r3, [pc, #508]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 80049fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fe:	4a7e      	ldr	r2, [pc, #504]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a06:	4b7c      	ldr	r3, [pc, #496]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a12:	2301      	movs	r3, #1
 8004a14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a16:	4b79      	ldr	r3, [pc, #484]	@ (8004bfc <HAL_RCC_OscConfig+0x4bc>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d118      	bne.n	8004a54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a22:	4b76      	ldr	r3, [pc, #472]	@ (8004bfc <HAL_RCC_OscConfig+0x4bc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a75      	ldr	r2, [pc, #468]	@ (8004bfc <HAL_RCC_OscConfig+0x4bc>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2e:	f7fd fd2b 	bl	8002488 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a36:	f7fd fd27 	bl	8002488 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e183      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a48:	4b6c      	ldr	r3, [pc, #432]	@ (8004bfc <HAL_RCC_OscConfig+0x4bc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d108      	bne.n	8004a6e <HAL_RCC_OscConfig+0x32e>
 8004a5c:	4b66      	ldr	r3, [pc, #408]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a62:	4a65      	ldr	r2, [pc, #404]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a6c:	e024      	b.n	8004ab8 <HAL_RCC_OscConfig+0x378>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d110      	bne.n	8004a98 <HAL_RCC_OscConfig+0x358>
 8004a76:	4b60      	ldr	r3, [pc, #384]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7c:	4a5e      	ldr	r2, [pc, #376]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004a7e:	f043 0304 	orr.w	r3, r3, #4
 8004a82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a86:	4b5c      	ldr	r3, [pc, #368]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8c:	4a5a      	ldr	r2, [pc, #360]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a96:	e00f      	b.n	8004ab8 <HAL_RCC_OscConfig+0x378>
 8004a98:	4b57      	ldr	r3, [pc, #348]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9e:	4a56      	ldr	r2, [pc, #344]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004aa0:	f023 0301 	bic.w	r3, r3, #1
 8004aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004aa8:	4b53      	ldr	r3, [pc, #332]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aae:	4a52      	ldr	r2, [pc, #328]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004ab0:	f023 0304 	bic.w	r3, r3, #4
 8004ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d016      	beq.n	8004aee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fd fce2 	bl	8002488 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac8:	f7fd fcde 	bl	8002488 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e138      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ade:	4b46      	ldr	r3, [pc, #280]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ed      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x388>
 8004aec:	e015      	b.n	8004b1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aee:	f7fd fccb 	bl	8002488 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004af4:	e00a      	b.n	8004b0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7fd fcc7 	bl	8002488 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e121      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1ed      	bne.n	8004af6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b1a:	7ffb      	ldrb	r3, [r7, #31]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d105      	bne.n	8004b2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b20:	4b35      	ldr	r3, [pc, #212]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b24:	4a34      	ldr	r2, [pc, #208]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d03c      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01c      	beq.n	8004b7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b40:	4b2d      	ldr	r3, [pc, #180]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b46:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b50:	f7fd fc9a 	bl	8002488 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b58:	f7fd fc96 	bl	8002488 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e0f2      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b6a:	4b23      	ldr	r3, [pc, #140]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ef      	beq.n	8004b58 <HAL_RCC_OscConfig+0x418>
 8004b78:	e01b      	b.n	8004bb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b80:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b82:	f023 0301 	bic.w	r3, r3, #1
 8004b86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8a:	f7fd fc7d 	bl	8002488 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b92:	f7fd fc79 	bl	8002488 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e0d5      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ba4:	4b14      	ldr	r3, [pc, #80]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1ef      	bne.n	8004b92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 80c9 	beq.w	8004d4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	f000 8083 	beq.w	8004cd0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d15e      	bne.n	8004c90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd2:	4b09      	ldr	r3, [pc, #36]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a08      	ldr	r2, [pc, #32]	@ (8004bf8 <HAL_RCC_OscConfig+0x4b8>)
 8004bd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bde:	f7fd fc53 	bl	8002488 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be4:	e00c      	b.n	8004c00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be6:	f7fd fc4f 	bl	8002488 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d905      	bls.n	8004c00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e0ab      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c00:	4b55      	ldr	r3, [pc, #340]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1ec      	bne.n	8004be6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c0c:	4b52      	ldr	r3, [pc, #328]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	4b52      	ldr	r3, [pc, #328]	@ (8004d5c <HAL_RCC_OscConfig+0x61c>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6a11      	ldr	r1, [r2, #32]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c1c:	3a01      	subs	r2, #1
 8004c1e:	0112      	lsls	r2, r2, #4
 8004c20:	4311      	orrs	r1, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004c26:	0212      	lsls	r2, r2, #8
 8004c28:	4311      	orrs	r1, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c2e:	0852      	lsrs	r2, r2, #1
 8004c30:	3a01      	subs	r2, #1
 8004c32:	0552      	lsls	r2, r2, #21
 8004c34:	4311      	orrs	r1, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c3a:	0852      	lsrs	r2, r2, #1
 8004c3c:	3a01      	subs	r2, #1
 8004c3e:	0652      	lsls	r2, r2, #25
 8004c40:	4311      	orrs	r1, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c46:	06d2      	lsls	r2, r2, #27
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	4943      	ldr	r1, [pc, #268]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c50:	4b41      	ldr	r3, [pc, #260]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a40      	ldr	r2, [pc, #256]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004c56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c5c:	4b3e      	ldr	r3, [pc, #248]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4a3d      	ldr	r2, [pc, #244]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fd fc0e 	bl	8002488 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c70:	f7fd fc0a 	bl	8002488 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e066      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c82:	4b35      	ldr	r3, [pc, #212]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0x530>
 8004c8e:	e05e      	b.n	8004d4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c90:	4b31      	ldr	r3, [pc, #196]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a30      	ldr	r2, [pc, #192]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004c96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fd fbf4 	bl	8002488 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca4:	f7fd fbf0 	bl	8002488 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e04c      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cb6:	4b28      	ldr	r3, [pc, #160]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004cc2:	4b25      	ldr	r3, [pc, #148]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	4924      	ldr	r1, [pc, #144]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004cc8:	4b25      	ldr	r3, [pc, #148]	@ (8004d60 <HAL_RCC_OscConfig+0x620>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	60cb      	str	r3, [r1, #12]
 8004cce:	e03e      	b.n	8004d4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e039      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8004d58 <HAL_RCC_OscConfig+0x618>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f003 0203 	and.w	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d12c      	bne.n	8004d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d123      	bne.n	8004d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d11b      	bne.n	8004d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d113      	bne.n	8004d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	085b      	lsrs	r3, r3, #1
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d109      	bne.n	8004d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	3b01      	subs	r3, #1
 8004d44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d001      	beq.n	8004d4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3720      	adds	r7, #32
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	019f800c 	.word	0x019f800c
 8004d60:	feeefffc 	.word	0xfeeefffc

08004d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e11e      	b.n	8004fba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d7c:	4b91      	ldr	r3, [pc, #580]	@ (8004fc4 <HAL_RCC_ClockConfig+0x260>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d910      	bls.n	8004dac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8a:	4b8e      	ldr	r3, [pc, #568]	@ (8004fc4 <HAL_RCC_ClockConfig+0x260>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 020f 	bic.w	r2, r3, #15
 8004d92:	498c      	ldr	r1, [pc, #560]	@ (8004fc4 <HAL_RCC_ClockConfig+0x260>)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	4b8a      	ldr	r3, [pc, #552]	@ (8004fc4 <HAL_RCC_ClockConfig+0x260>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e106      	b.n	8004fba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d073      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d129      	bne.n	8004e14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc0:	4b81      	ldr	r3, [pc, #516]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0f4      	b.n	8004fba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004dd0:	f000 f99e 	bl	8005110 <RCC_GetSysClockFreqFromPLLSource>
 8004dd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4a7c      	ldr	r2, [pc, #496]	@ (8004fcc <HAL_RCC_ClockConfig+0x268>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d93f      	bls.n	8004e5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004dde:	4b7a      	ldr	r3, [pc, #488]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d033      	beq.n	8004e5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d12f      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dfe:	4b72      	ldr	r3, [pc, #456]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e06:	4a70      	ldr	r2, [pc, #448]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e0e:	2380      	movs	r3, #128	@ 0x80
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e024      	b.n	8004e5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d107      	bne.n	8004e2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e1c:	4b6a      	ldr	r3, [pc, #424]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d109      	bne.n	8004e3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0c6      	b.n	8004fba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e2c:	4b66      	ldr	r3, [pc, #408]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0be      	b.n	8004fba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e3c:	f000 f8ce 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8004e40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4a61      	ldr	r2, [pc, #388]	@ (8004fcc <HAL_RCC_ClockConfig+0x268>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d909      	bls.n	8004e5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e4a:	4b5f      	ldr	r3, [pc, #380]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e52:	4a5d      	ldr	r2, [pc, #372]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e5a:	2380      	movs	r3, #128	@ 0x80
 8004e5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e5e:	4b5a      	ldr	r3, [pc, #360]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f023 0203 	bic.w	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4957      	ldr	r1, [pc, #348]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e70:	f7fd fb0a 	bl	8002488 <HAL_GetTick>
 8004e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e76:	e00a      	b.n	8004e8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e78:	f7fd fb06 	bl	8002488 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e095      	b.n	8004fba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 020c 	and.w	r2, r3, #12
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d1eb      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d023      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb8:	4b43      	ldr	r3, [pc, #268]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	4a42      	ldr	r2, [pc, #264]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004ebe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ec2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ed8:	4a3b      	ldr	r2, [pc, #236]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004eda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ede:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee0:	4b39      	ldr	r3, [pc, #228]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	4936      	ldr	r1, [pc, #216]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b80      	cmp	r3, #128	@ 0x80
 8004ef8:	d105      	bne.n	8004f06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004efa:	4b33      	ldr	r3, [pc, #204]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	4a32      	ldr	r2, [pc, #200]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004f00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f06:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc4 <HAL_RCC_ClockConfig+0x260>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d21d      	bcs.n	8004f50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f14:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc4 <HAL_RCC_ClockConfig+0x260>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f023 020f 	bic.w	r2, r3, #15
 8004f1c:	4929      	ldr	r1, [pc, #164]	@ (8004fc4 <HAL_RCC_ClockConfig+0x260>)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f24:	f7fd fab0 	bl	8002488 <HAL_GetTick>
 8004f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2a:	e00a      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f2c:	f7fd faac 	bl	8002488 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e03b      	b.n	8004fba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f42:	4b20      	ldr	r3, [pc, #128]	@ (8004fc4 <HAL_RCC_ClockConfig+0x260>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d1ed      	bne.n	8004f2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4917      	ldr	r1, [pc, #92]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f7a:	4b13      	ldr	r3, [pc, #76]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	490f      	ldr	r1, [pc, #60]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f8e:	f000 f825 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8004f92:	4602      	mov	r2, r0
 8004f94:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc8 <HAL_RCC_ClockConfig+0x264>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	490c      	ldr	r1, [pc, #48]	@ (8004fd0 <HAL_RCC_ClockConfig+0x26c>)
 8004fa0:	5ccb      	ldrb	r3, [r1, r3]
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004faa:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd4 <HAL_RCC_ClockConfig+0x270>)
 8004fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004fae:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd8 <HAL_RCC_ClockConfig+0x274>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fd fa1c 	bl	80023f0 <HAL_InitTick>
 8004fb8:	4603      	mov	r3, r0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40022000 	.word	0x40022000
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	04c4b400 	.word	0x04c4b400
 8004fd0:	08008d10 	.word	0x08008d10
 8004fd4:	20000000 	.word	0x20000000
 8004fd8:	20000004 	.word	0x20000004

08004fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8005094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 030c 	and.w	r3, r3, #12
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d102      	bne.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fee:	4b2a      	ldr	r3, [pc, #168]	@ (8005098 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	e047      	b.n	8005084 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ff4:	4b27      	ldr	r3, [pc, #156]	@ (8005094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 030c 	and.w	r3, r3, #12
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d102      	bne.n	8005006 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005000:	4b26      	ldr	r3, [pc, #152]	@ (800509c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	e03e      	b.n	8005084 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005006:	4b23      	ldr	r3, [pc, #140]	@ (8005094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 030c 	and.w	r3, r3, #12
 800500e:	2b0c      	cmp	r3, #12
 8005010:	d136      	bne.n	8005080 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005012:	4b20      	ldr	r3, [pc, #128]	@ (8005094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800501c:	4b1d      	ldr	r3, [pc, #116]	@ (8005094 <HAL_RCC_GetSysClockFreq+0xb8>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	3301      	adds	r3, #1
 8005028:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d10c      	bne.n	800504a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005030:	4a1a      	ldr	r2, [pc, #104]	@ (800509c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	4a16      	ldr	r2, [pc, #88]	@ (8005094 <HAL_RCC_GetSysClockFreq+0xb8>)
 800503a:	68d2      	ldr	r2, [r2, #12]
 800503c:	0a12      	lsrs	r2, r2, #8
 800503e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	617b      	str	r3, [r7, #20]
      break;
 8005048:	e00c      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800504a:	4a13      	ldr	r2, [pc, #76]	@ (8005098 <HAL_RCC_GetSysClockFreq+0xbc>)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005052:	4a10      	ldr	r2, [pc, #64]	@ (8005094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005054:	68d2      	ldr	r2, [r2, #12]
 8005056:	0a12      	lsrs	r2, r2, #8
 8005058:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800505c:	fb02 f303 	mul.w	r3, r2, r3
 8005060:	617b      	str	r3, [r7, #20]
      break;
 8005062:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005064:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	0e5b      	lsrs	r3, r3, #25
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	3301      	adds	r3, #1
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	e001      	b.n	8005084 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005084:	693b      	ldr	r3, [r7, #16]
}
 8005086:	4618      	mov	r0, r3
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000
 8005098:	00f42400 	.word	0x00f42400
 800509c:	007a1200 	.word	0x007a1200

080050a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050a4:	4b03      	ldr	r3, [pc, #12]	@ (80050b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050a6:	681b      	ldr	r3, [r3, #0]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20000000 	.word	0x20000000

080050b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050bc:	f7ff fff0 	bl	80050a0 <HAL_RCC_GetHCLKFreq>
 80050c0:	4602      	mov	r2, r0
 80050c2:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	4904      	ldr	r1, [pc, #16]	@ (80050e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40021000 	.word	0x40021000
 80050e0:	08008d20 	.word	0x08008d20

080050e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050e8:	f7ff ffda 	bl	80050a0 <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	0adb      	lsrs	r3, r3, #11
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	4904      	ldr	r1, [pc, #16]	@ (800510c <HAL_RCC_GetPCLK2Freq+0x28>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000
 800510c:	08008d20 	.word	0x08008d20

08005110 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005116:	4b1e      	ldr	r3, [pc, #120]	@ (8005190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005120:	4b1b      	ldr	r3, [pc, #108]	@ (8005190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	3301      	adds	r3, #1
 800512c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b03      	cmp	r3, #3
 8005132:	d10c      	bne.n	800514e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005134:	4a17      	ldr	r2, [pc, #92]	@ (8005194 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	4a14      	ldr	r2, [pc, #80]	@ (8005190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800513e:	68d2      	ldr	r2, [r2, #12]
 8005140:	0a12      	lsrs	r2, r2, #8
 8005142:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005146:	fb02 f303 	mul.w	r3, r2, r3
 800514a:	617b      	str	r3, [r7, #20]
    break;
 800514c:	e00c      	b.n	8005168 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800514e:	4a12      	ldr	r2, [pc, #72]	@ (8005198 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	fbb2 f3f3 	udiv	r3, r2, r3
 8005156:	4a0e      	ldr	r2, [pc, #56]	@ (8005190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005158:	68d2      	ldr	r2, [r2, #12]
 800515a:	0a12      	lsrs	r2, r2, #8
 800515c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005160:	fb02 f303 	mul.w	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]
    break;
 8005166:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005168:	4b09      	ldr	r3, [pc, #36]	@ (8005190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	0e5b      	lsrs	r3, r3, #25
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	3301      	adds	r3, #1
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005182:	687b      	ldr	r3, [r7, #4]
}
 8005184:	4618      	mov	r0, r3
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	40021000 	.word	0x40021000
 8005194:	007a1200 	.word	0x007a1200
 8005198:	00f42400 	.word	0x00f42400

0800519c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051a4:	2300      	movs	r3, #0
 80051a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051a8:	2300      	movs	r3, #0
 80051aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8098 	beq.w	80052ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ba:	2300      	movs	r3, #0
 80051bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051be:	4b43      	ldr	r3, [pc, #268]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10d      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ca:	4b40      	ldr	r3, [pc, #256]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ce:	4a3f      	ldr	r2, [pc, #252]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051d6:	4b3d      	ldr	r3, [pc, #244]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051e2:	2301      	movs	r3, #1
 80051e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051e6:	4b3a      	ldr	r3, [pc, #232]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a39      	ldr	r2, [pc, #228]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051f2:	f7fd f949 	bl	8002488 <HAL_GetTick>
 80051f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051f8:	e009      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051fa:	f7fd f945 	bl	8002488 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d902      	bls.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	74fb      	strb	r3, [r7, #19]
        break;
 800520c:	e005      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800520e:	4b30      	ldr	r3, [pc, #192]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0ef      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800521a:	7cfb      	ldrb	r3, [r7, #19]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d159      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005220:	4b2a      	ldr	r3, [pc, #168]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800522a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d01e      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	429a      	cmp	r2, r3
 800523a:	d019      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800523c:	4b23      	ldr	r3, [pc, #140]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800523e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005246:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005248:	4b20      	ldr	r3, [pc, #128]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524e:	4a1f      	ldr	r2, [pc, #124]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005258:	4b1c      	ldr	r3, [pc, #112]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525e:	4a1b      	ldr	r2, [pc, #108]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005268:	4a18      	ldr	r2, [pc, #96]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d016      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527a:	f7fd f905 	bl	8002488 <HAL_GetTick>
 800527e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005280:	e00b      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005282:	f7fd f901 	bl	8002488 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005290:	4293      	cmp	r3, r2
 8005292:	d902      	bls.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	74fb      	strb	r3, [r7, #19]
            break;
 8005298:	e006      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800529a:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0ec      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80052a8:	7cfb      	ldrb	r3, [r7, #19]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10b      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052ae:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052bc:	4903      	ldr	r1, [pc, #12]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80052c4:	e008      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052c6:	7cfb      	ldrb	r3, [r7, #19]
 80052c8:	74bb      	strb	r3, [r7, #18]
 80052ca:	e005      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d4:	7cfb      	ldrb	r3, [r7, #19]
 80052d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052d8:	7c7b      	ldrb	r3, [r7, #17]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d105      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052de:	4ba6      	ldr	r3, [pc, #664]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e2:	4aa5      	ldr	r2, [pc, #660]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052f6:	4ba0      	ldr	r3, [pc, #640]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fc:	f023 0203 	bic.w	r2, r3, #3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	499c      	ldr	r1, [pc, #624]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005318:	4b97      	ldr	r3, [pc, #604]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531e:	f023 020c 	bic.w	r2, r3, #12
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	4994      	ldr	r1, [pc, #592]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800533a:	4b8f      	ldr	r3, [pc, #572]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005340:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	498b      	ldr	r1, [pc, #556]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800535c:	4b86      	ldr	r3, [pc, #536]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005362:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	4983      	ldr	r1, [pc, #524]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800537e:	4b7e      	ldr	r3, [pc, #504]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005384:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	497a      	ldr	r1, [pc, #488]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053a0:	4b75      	ldr	r3, [pc, #468]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	4972      	ldr	r1, [pc, #456]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	4969      	ldr	r1, [pc, #420]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053e4:	4b64      	ldr	r3, [pc, #400]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	4961      	ldr	r1, [pc, #388]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005406:	4b5c      	ldr	r3, [pc, #368]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	4958      	ldr	r1, [pc, #352]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005424:	2b00      	cmp	r3, #0
 8005426:	d015      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005428:	4b53      	ldr	r3, [pc, #332]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005436:	4950      	ldr	r1, [pc, #320]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005446:	d105      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005448:	4b4b      	ldr	r3, [pc, #300]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4a4a      	ldr	r2, [pc, #296]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005452:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800545c:	2b00      	cmp	r3, #0
 800545e:	d015      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005460:	4b45      	ldr	r3, [pc, #276]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546e:	4942      	ldr	r1, [pc, #264]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800547e:	d105      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005480:	4b3d      	ldr	r3, [pc, #244]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	4a3c      	ldr	r2, [pc, #240]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800548a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d015      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005498:	4b37      	ldr	r3, [pc, #220]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a6:	4934      	ldr	r1, [pc, #208]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054b6:	d105      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d015      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054d0:	4b29      	ldr	r3, [pc, #164]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054de:	4926      	ldr	r1, [pc, #152]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054ee:	d105      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054f0:	4b21      	ldr	r3, [pc, #132]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4a20      	ldr	r2, [pc, #128]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d015      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005508:	4b1b      	ldr	r3, [pc, #108]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005516:	4918      	ldr	r1, [pc, #96]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005526:	d105      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005528:	4b13      	ldr	r3, [pc, #76]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	4a12      	ldr	r2, [pc, #72]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005532:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d015      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005540:	4b0d      	ldr	r3, [pc, #52]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005546:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554e:	490a      	ldr	r1, [pc, #40]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800555e:	d105      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005560:	4b05      	ldr	r3, [pc, #20]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4a04      	ldr	r2, [pc, #16]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800556a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800556c:	7cbb      	ldrb	r3, [r7, #18]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40021000 	.word	0x40021000

0800557c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e09d      	b.n	80056ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	d108      	bne.n	80055a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800559e:	d009      	beq.n	80055b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	61da      	str	r2, [r3, #28]
 80055a6:	e005      	b.n	80055b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fc fce8 	bl	8001fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055f4:	d902      	bls.n	80055fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e002      	b.n	8005602 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005600:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800560a:	d007      	beq.n	800561c <HAL_SPI_Init+0xa0>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005614:	d002      	beq.n	800561c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565e:	ea42 0103 	orr.w	r1, r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005666:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	0c1b      	lsrs	r3, r3, #16
 8005678:	f003 0204 	and.w	r2, r3, #4
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005698:	ea42 0103 	orr.w	r1, r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b088      	sub	sp, #32
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	603b      	str	r3, [r7, #0]
 80056de:	4613      	mov	r3, r2
 80056e0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056e2:	f7fc fed1 	bl	8002488 <HAL_GetTick>
 80056e6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d001      	beq.n	80056fc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
 80056fa:	e15c      	b.n	80059b6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_SPI_Transmit+0x36>
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e154      	b.n	80059b6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_SPI_Transmit+0x48>
 8005716:	2302      	movs	r3, #2
 8005718:	e14d      	b.n	80059b6 <HAL_SPI_Transmit+0x2e4>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2203      	movs	r2, #3
 8005726:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	88fa      	ldrh	r2, [r7, #6]
 800573a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	88fa      	ldrh	r2, [r7, #6]
 8005740:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800576c:	d10f      	bne.n	800578e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800577c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800578c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005798:	2b40      	cmp	r3, #64	@ 0x40
 800579a:	d007      	beq.n	80057ac <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057b4:	d952      	bls.n	800585c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_SPI_Transmit+0xf2>
 80057be:	8b7b      	ldrh	r3, [r7, #26]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d145      	bne.n	8005850 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c8:	881a      	ldrh	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d4:	1c9a      	adds	r2, r3, #2
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057e8:	e032      	b.n	8005850 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d112      	bne.n	800581e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fc:	881a      	ldrh	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005808:	1c9a      	adds	r2, r3, #2
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800581c:	e018      	b.n	8005850 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800581e:	f7fc fe33 	bl	8002488 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d803      	bhi.n	8005836 <HAL_SPI_Transmit+0x164>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005834:	d102      	bne.n	800583c <HAL_SPI_Transmit+0x16a>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e0b2      	b.n	80059b6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1c7      	bne.n	80057ea <HAL_SPI_Transmit+0x118>
 800585a:	e083      	b.n	8005964 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_SPI_Transmit+0x198>
 8005864:	8b7b      	ldrh	r3, [r7, #26]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d177      	bne.n	800595a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	d912      	bls.n	800589a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005878:	881a      	ldrh	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005884:	1c9a      	adds	r2, r3, #2
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b02      	subs	r3, #2
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005898:	e05f      	b.n	800595a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	330c      	adds	r3, #12
 80058a4:	7812      	ldrb	r2, [r2, #0]
 80058a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80058c0:	e04b      	b.n	800595a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d12b      	bne.n	8005928 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d912      	bls.n	8005900 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058de:	881a      	ldrh	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ea:	1c9a      	adds	r2, r3, #2
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b02      	subs	r3, #2
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058fe:	e02c      	b.n	800595a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	7812      	ldrb	r2, [r2, #0]
 800590c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005926:	e018      	b.n	800595a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005928:	f7fc fdae 	bl	8002488 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d803      	bhi.n	8005940 <HAL_SPI_Transmit+0x26e>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800593e:	d102      	bne.n	8005946 <HAL_SPI_Transmit+0x274>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e02d      	b.n	80059b6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1ae      	bne.n	80058c2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 fcf5 	bl	8006358 <SPI_EndRxTxTransaction>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80059b4:	2300      	movs	r3, #0
  }
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b088      	sub	sp, #32
 80059c2:	af02      	add	r7, sp, #8
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	603b      	str	r3, [r7, #0]
 80059ca:	4613      	mov	r3, r2
 80059cc:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d001      	beq.n	80059de <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
 80059dc:	e123      	b.n	8005c26 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_SPI_Receive+0x2c>
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e11b      	b.n	8005c26 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059f6:	d112      	bne.n	8005a1e <HAL_SPI_Receive+0x60>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10e      	bne.n	8005a1e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2204      	movs	r2, #4
 8005a04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a08:	88fa      	ldrh	r2, [r7, #6]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f90a 	bl	8005c2e <HAL_SPI_TransmitReceive>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	e103      	b.n	8005c26 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a1e:	f7fc fd33 	bl	8002488 <HAL_GetTick>
 8005a22:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_SPI_Receive+0x74>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e0f9      	b.n	8005c26 <HAL_SPI_Receive+0x268>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	88fa      	ldrh	r2, [r7, #6]
 8005a5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a84:	d908      	bls.n	8005a98 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	e007      	b.n	8005aa8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005aa6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab0:	d10f      	bne.n	8005ad2 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ac0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ad0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005adc:	2b40      	cmp	r3, #64	@ 0x40
 8005ade:	d007      	beq.n	8005af0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005af8:	d875      	bhi.n	8005be6 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005afa:	e037      	b.n	8005b6c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d117      	bne.n	8005b3a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f103 020c 	add.w	r2, r3, #12
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	7812      	ldrb	r2, [r2, #0]
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005b38:	e018      	b.n	8005b6c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b3a:	f7fc fca5 	bl	8002488 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d803      	bhi.n	8005b52 <HAL_SPI_Receive+0x194>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b50:	d102      	bne.n	8005b58 <HAL_SPI_Receive+0x19a>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e05c      	b.n	8005c26 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1c1      	bne.n	8005afc <HAL_SPI_Receive+0x13e>
 8005b78:	e03b      	b.n	8005bf2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d115      	bne.n	8005bb4 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	b292      	uxth	r2, r2
 8005b94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9a:	1c9a      	adds	r2, r3, #2
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005bb2:	e018      	b.n	8005be6 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb4:	f7fc fc68 	bl	8002488 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d803      	bhi.n	8005bcc <HAL_SPI_Receive+0x20e>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bca:	d102      	bne.n	8005bd2 <HAL_SPI_Receive+0x214>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e01f      	b.n	8005c26 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1c3      	bne.n	8005b7a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 fb56 	bl	80062a8 <SPI_EndRxTransaction>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005c24:	2300      	movs	r3, #0
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b08a      	sub	sp, #40	@ 0x28
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c40:	f7fc fc22 	bl	8002488 <HAL_GetTick>
 8005c44:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c4c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005c54:	887b      	ldrh	r3, [r7, #2]
 8005c56:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005c58:	887b      	ldrh	r3, [r7, #2]
 8005c5a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c5c:	7ffb      	ldrb	r3, [r7, #31]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d00c      	beq.n	8005c7c <HAL_SPI_TransmitReceive+0x4e>
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c68:	d106      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d102      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x4a>
 8005c72:	7ffb      	ldrb	r3, [r7, #31]
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d001      	beq.n	8005c7c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e1f3      	b.n	8006064 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_SPI_TransmitReceive+0x60>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_SPI_TransmitReceive+0x60>
 8005c88:	887b      	ldrh	r3, [r7, #2]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e1e8      	b.n	8006064 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_SPI_TransmitReceive+0x72>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e1e1      	b.n	8006064 <HAL_SPI_TransmitReceive+0x436>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d003      	beq.n	8005cbc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2205      	movs	r2, #5
 8005cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	887a      	ldrh	r2, [r7, #2]
 8005ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	887a      	ldrh	r2, [r7, #2]
 8005cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	887a      	ldrh	r2, [r7, #2]
 8005ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	887a      	ldrh	r2, [r7, #2]
 8005ce8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cfe:	d802      	bhi.n	8005d06 <HAL_SPI_TransmitReceive+0xd8>
 8005d00:	8abb      	ldrh	r3, [r7, #20]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d908      	bls.n	8005d18 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d14:	605a      	str	r2, [r3, #4]
 8005d16:	e007      	b.n	8005d28 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d26:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d32:	2b40      	cmp	r3, #64	@ 0x40
 8005d34:	d007      	beq.n	8005d46 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d4e:	f240 8083 	bls.w	8005e58 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <HAL_SPI_TransmitReceive+0x132>
 8005d5a:	8afb      	ldrh	r3, [r7, #22]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d16f      	bne.n	8005e40 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d64:	881a      	ldrh	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d70:	1c9a      	adds	r2, r3, #2
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d84:	e05c      	b.n	8005e40 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d11b      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x19e>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d016      	beq.n	8005dcc <HAL_SPI_TransmitReceive+0x19e>
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d113      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da8:	881a      	ldrh	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db4:	1c9a      	adds	r2, r3, #2
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d11c      	bne.n	8005e14 <HAL_SPI_TransmitReceive+0x1e6>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d016      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df0:	b292      	uxth	r2, r2
 8005df2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df8:	1c9a      	adds	r2, r3, #2
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e10:	2301      	movs	r3, #1
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e14:	f7fc fb38 	bl	8002488 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d80d      	bhi.n	8005e40 <HAL_SPI_TransmitReceive+0x212>
 8005e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e2a:	d009      	beq.n	8005e40 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e111      	b.n	8006064 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d19d      	bne.n	8005d86 <HAL_SPI_TransmitReceive+0x158>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d197      	bne.n	8005d86 <HAL_SPI_TransmitReceive+0x158>
 8005e56:	e0e5      	b.n	8006024 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_SPI_TransmitReceive+0x23a>
 8005e60:	8afb      	ldrh	r3, [r7, #22]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	f040 80d1 	bne.w	800600a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d912      	bls.n	8005e98 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e76:	881a      	ldrh	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e82:	1c9a      	adds	r2, r3, #2
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b02      	subs	r3, #2
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e96:	e0b8      	b.n	800600a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	7812      	ldrb	r2, [r2, #0]
 8005ea4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ebe:	e0a4      	b.n	800600a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d134      	bne.n	8005f38 <HAL_SPI_TransmitReceive+0x30a>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d02f      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0x30a>
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d12c      	bne.n	8005f38 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d912      	bls.n	8005f0e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eec:	881a      	ldrh	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef8:	1c9a      	adds	r2, r3, #2
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b02      	subs	r3, #2
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f0c:	e012      	b.n	8005f34 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	330c      	adds	r3, #12
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d148      	bne.n	8005fd8 <HAL_SPI_TransmitReceive+0x3aa>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d042      	beq.n	8005fd8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d923      	bls.n	8005fa6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	b292      	uxth	r2, r2
 8005f6a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f70:	1c9a      	adds	r2, r3, #2
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b02      	subs	r3, #2
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d81f      	bhi.n	8005fd4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fa2:	605a      	str	r2, [r3, #4]
 8005fa4:	e016      	b.n	8005fd4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f103 020c 	add.w	r2, r3, #12
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	7812      	ldrb	r2, [r2, #0]
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fd8:	f7fc fa56 	bl	8002488 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d803      	bhi.n	8005ff0 <HAL_SPI_TransmitReceive+0x3c2>
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fee:	d102      	bne.n	8005ff6 <HAL_SPI_TransmitReceive+0x3c8>
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e02c      	b.n	8006064 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	f47f af55 	bne.w	8005ec0 <HAL_SPI_TransmitReceive+0x292>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	f47f af4e 	bne.w	8005ec0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006024:	6a3a      	ldr	r2, [r7, #32]
 8006026:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f995 	bl	8006358 <SPI_EndRxTxTransaction>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d008      	beq.n	8006046 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e00e      	b.n	8006064 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006062:	2300      	movs	r3, #0
  }
}
 8006064:	4618      	mov	r0, r3
 8006066:	3728      	adds	r7, #40	@ 0x28
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	4613      	mov	r3, r2
 800607a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800607c:	f7fc fa04 	bl	8002488 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	4413      	add	r3, r2
 800608a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800608c:	f7fc f9fc 	bl	8002488 <HAL_GetTick>
 8006090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006092:	4b39      	ldr	r3, [pc, #228]	@ (8006178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	015b      	lsls	r3, r3, #5
 8006098:	0d1b      	lsrs	r3, r3, #20
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	fb02 f303 	mul.w	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060a2:	e054      	b.n	800614e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060aa:	d050      	beq.n	800614e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060ac:	f7fc f9ec 	bl	8002488 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d902      	bls.n	80060c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d13d      	bne.n	800613e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060da:	d111      	bne.n	8006100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060e4:	d004      	beq.n	80060f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ee:	d107      	bne.n	8006100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006108:	d10f      	bne.n	800612a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e017      	b.n	800616e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	3b01      	subs	r3, #1
 800614c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d19b      	bne.n	80060a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000000 	.word	0x20000000

0800617c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	@ 0x28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800618e:	f7fc f97b 	bl	8002488 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	1a9b      	subs	r3, r3, r2
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	4413      	add	r3, r2
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800619e:	f7fc f973 	bl	8002488 <HAL_GetTick>
 80061a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061ac:	4b3d      	ldr	r3, [pc, #244]	@ (80062a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	00da      	lsls	r2, r3, #3
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	0d1b      	lsrs	r3, r3, #20
 80061bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061c4:	e060      	b.n	8006288 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80061cc:	d107      	bne.n	80061de <SPI_WaitFifoStateUntilTimeout+0x62>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061e4:	d050      	beq.n	8006288 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061e6:	f7fc f94f 	bl	8002488 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d902      	bls.n	80061fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d13d      	bne.n	8006278 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800620a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006214:	d111      	bne.n	800623a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800621e:	d004      	beq.n	800622a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006228:	d107      	bne.n	800623a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006238:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006242:	d10f      	bne.n	8006264 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006262:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e010      	b.n	800629a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	3b01      	subs	r3, #1
 8006286:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4013      	ands	r3, r2
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	429a      	cmp	r2, r3
 8006296:	d196      	bne.n	80061c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3728      	adds	r7, #40	@ 0x28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000000 	.word	0x20000000

080062a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062bc:	d111      	bne.n	80062e2 <SPI_EndRxTransaction+0x3a>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c6:	d004      	beq.n	80062d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d0:	d107      	bne.n	80062e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062e0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2200      	movs	r2, #0
 80062ea:	2180      	movs	r1, #128	@ 0x80
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7ff febd 	bl	800606c <SPI_WaitFlagStateUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d007      	beq.n	8006308 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e023      	b.n	8006350 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006310:	d11d      	bne.n	800634e <SPI_EndRxTransaction+0xa6>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800631a:	d004      	beq.n	8006326 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006324:	d113      	bne.n	800634e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2200      	movs	r2, #0
 800632e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff ff22 	bl	800617c <SPI_WaitFifoStateUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006342:	f043 0220 	orr.w	r2, r3, #32
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e000      	b.n	8006350 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2200      	movs	r2, #0
 800636c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff ff03 	bl	800617c <SPI_WaitFifoStateUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006380:	f043 0220 	orr.w	r2, r3, #32
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e027      	b.n	80063dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2200      	movs	r2, #0
 8006394:	2180      	movs	r1, #128	@ 0x80
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff fe68 	bl	800606c <SPI_WaitFlagStateUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063a6:	f043 0220 	orr.w	r2, r3, #32
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e014      	b.n	80063dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7ff fedc 	bl	800617c <SPI_WaitFifoStateUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d007      	beq.n	80063da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ce:	f043 0220 	orr.w	r2, r3, #32
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e000      	b.n	80063dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e049      	b.n	800648a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fb fe7e 	bl	800210c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3304      	adds	r3, #4
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f000 fa96 	bl	8006954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d109      	bne.n	80064bc <HAL_TIM_PWM_Start_IT+0x28>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	bf14      	ite	ne
 80064b4:	2301      	movne	r3, #1
 80064b6:	2300      	moveq	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	e03c      	b.n	8006536 <HAL_TIM_PWM_Start_IT+0xa2>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d109      	bne.n	80064d6 <HAL_TIM_PWM_Start_IT+0x42>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	bf14      	ite	ne
 80064ce:	2301      	movne	r3, #1
 80064d0:	2300      	moveq	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	e02f      	b.n	8006536 <HAL_TIM_PWM_Start_IT+0xa2>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d109      	bne.n	80064f0 <HAL_TIM_PWM_Start_IT+0x5c>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	bf14      	ite	ne
 80064e8:	2301      	movne	r3, #1
 80064ea:	2300      	moveq	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	e022      	b.n	8006536 <HAL_TIM_PWM_Start_IT+0xa2>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b0c      	cmp	r3, #12
 80064f4:	d109      	bne.n	800650a <HAL_TIM_PWM_Start_IT+0x76>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b01      	cmp	r3, #1
 8006500:	bf14      	ite	ne
 8006502:	2301      	movne	r3, #1
 8006504:	2300      	moveq	r3, #0
 8006506:	b2db      	uxtb	r3, r3
 8006508:	e015      	b.n	8006536 <HAL_TIM_PWM_Start_IT+0xa2>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b10      	cmp	r3, #16
 800650e:	d109      	bne.n	8006524 <HAL_TIM_PWM_Start_IT+0x90>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b01      	cmp	r3, #1
 800651a:	bf14      	ite	ne
 800651c:	2301      	movne	r3, #1
 800651e:	2300      	moveq	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	e008      	b.n	8006536 <HAL_TIM_PWM_Start_IT+0xa2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	bf14      	ite	ne
 8006530:	2301      	movne	r3, #1
 8006532:	2300      	moveq	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e0e2      	b.n	8006704 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d104      	bne.n	800654e <HAL_TIM_PWM_Start_IT+0xba>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800654c:	e023      	b.n	8006596 <HAL_TIM_PWM_Start_IT+0x102>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b04      	cmp	r3, #4
 8006552:	d104      	bne.n	800655e <HAL_TIM_PWM_Start_IT+0xca>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800655c:	e01b      	b.n	8006596 <HAL_TIM_PWM_Start_IT+0x102>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b08      	cmp	r3, #8
 8006562:	d104      	bne.n	800656e <HAL_TIM_PWM_Start_IT+0xda>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800656c:	e013      	b.n	8006596 <HAL_TIM_PWM_Start_IT+0x102>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b0c      	cmp	r3, #12
 8006572:	d104      	bne.n	800657e <HAL_TIM_PWM_Start_IT+0xea>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800657c:	e00b      	b.n	8006596 <HAL_TIM_PWM_Start_IT+0x102>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b10      	cmp	r3, #16
 8006582:	d104      	bne.n	800658e <HAL_TIM_PWM_Start_IT+0xfa>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800658c:	e003      	b.n	8006596 <HAL_TIM_PWM_Start_IT+0x102>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b0c      	cmp	r3, #12
 800659a:	d841      	bhi.n	8006620 <HAL_TIM_PWM_Start_IT+0x18c>
 800659c:	a201      	add	r2, pc, #4	@ (adr r2, 80065a4 <HAL_TIM_PWM_Start_IT+0x110>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065d9 	.word	0x080065d9
 80065a8:	08006621 	.word	0x08006621
 80065ac:	08006621 	.word	0x08006621
 80065b0:	08006621 	.word	0x08006621
 80065b4:	080065eb 	.word	0x080065eb
 80065b8:	08006621 	.word	0x08006621
 80065bc:	08006621 	.word	0x08006621
 80065c0:	08006621 	.word	0x08006621
 80065c4:	080065fd 	.word	0x080065fd
 80065c8:	08006621 	.word	0x08006621
 80065cc:	08006621 	.word	0x08006621
 80065d0:	08006621 	.word	0x08006621
 80065d4:	0800660f 	.word	0x0800660f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0202 	orr.w	r2, r2, #2
 80065e6:	60da      	str	r2, [r3, #12]
      break;
 80065e8:	e01d      	b.n	8006626 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 0204 	orr.w	r2, r2, #4
 80065f8:	60da      	str	r2, [r3, #12]
      break;
 80065fa:	e014      	b.n	8006626 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0208 	orr.w	r2, r2, #8
 800660a:	60da      	str	r2, [r3, #12]
      break;
 800660c:	e00b      	b.n	8006626 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0210 	orr.w	r2, r2, #16
 800661c:	60da      	str	r2, [r3, #12]
      break;
 800661e:	e002      	b.n	8006626 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	73fb      	strb	r3, [r7, #15]
      break;
 8006624:	bf00      	nop
  }

  if (status == HAL_OK)
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d16a      	bne.n	8006702 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2201      	movs	r2, #1
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fd1f 	bl	8007078 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a33      	ldr	r2, [pc, #204]	@ (800670c <HAL_TIM_PWM_Start_IT+0x278>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d013      	beq.n	800666c <HAL_TIM_PWM_Start_IT+0x1d8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a31      	ldr	r2, [pc, #196]	@ (8006710 <HAL_TIM_PWM_Start_IT+0x27c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00e      	beq.n	800666c <HAL_TIM_PWM_Start_IT+0x1d8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a30      	ldr	r2, [pc, #192]	@ (8006714 <HAL_TIM_PWM_Start_IT+0x280>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d009      	beq.n	800666c <HAL_TIM_PWM_Start_IT+0x1d8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a2e      	ldr	r2, [pc, #184]	@ (8006718 <HAL_TIM_PWM_Start_IT+0x284>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <HAL_TIM_PWM_Start_IT+0x1d8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a2d      	ldr	r2, [pc, #180]	@ (800671c <HAL_TIM_PWM_Start_IT+0x288>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d101      	bne.n	8006670 <HAL_TIM_PWM_Start_IT+0x1dc>
 800666c:	2301      	movs	r3, #1
 800666e:	e000      	b.n	8006672 <HAL_TIM_PWM_Start_IT+0x1de>
 8006670:	2300      	movs	r3, #0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006684:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a20      	ldr	r2, [pc, #128]	@ (800670c <HAL_TIM_PWM_Start_IT+0x278>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d018      	beq.n	80066c2 <HAL_TIM_PWM_Start_IT+0x22e>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006698:	d013      	beq.n	80066c2 <HAL_TIM_PWM_Start_IT+0x22e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a20      	ldr	r2, [pc, #128]	@ (8006720 <HAL_TIM_PWM_Start_IT+0x28c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00e      	beq.n	80066c2 <HAL_TIM_PWM_Start_IT+0x22e>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006724 <HAL_TIM_PWM_Start_IT+0x290>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d009      	beq.n	80066c2 <HAL_TIM_PWM_Start_IT+0x22e>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a17      	ldr	r2, [pc, #92]	@ (8006710 <HAL_TIM_PWM_Start_IT+0x27c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d004      	beq.n	80066c2 <HAL_TIM_PWM_Start_IT+0x22e>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a15      	ldr	r2, [pc, #84]	@ (8006714 <HAL_TIM_PWM_Start_IT+0x280>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d115      	bne.n	80066ee <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	4b17      	ldr	r3, [pc, #92]	@ (8006728 <HAL_TIM_PWM_Start_IT+0x294>)
 80066ca:	4013      	ands	r3, r2
 80066cc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b06      	cmp	r3, #6
 80066d2:	d015      	beq.n	8006700 <HAL_TIM_PWM_Start_IT+0x26c>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066da:	d011      	beq.n	8006700 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ec:	e008      	b.n	8006700 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0201 	orr.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	e000      	b.n	8006702 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006700:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40013400 	.word	0x40013400
 8006714:	40014000 	.word	0x40014000
 8006718:	40014400 	.word	0x40014400
 800671c:	40014800 	.word	0x40014800
 8006720:	40000400 	.word	0x40000400
 8006724:	40000800 	.word	0x40000800
 8006728:	00010007 	.word	0x00010007

0800672c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006746:	2302      	movs	r3, #2
 8006748:	e0ff      	b.n	800694a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b14      	cmp	r3, #20
 8006756:	f200 80f0 	bhi.w	800693a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800675a:	a201      	add	r2, pc, #4	@ (adr r2, 8006760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800675c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006760:	080067b5 	.word	0x080067b5
 8006764:	0800693b 	.word	0x0800693b
 8006768:	0800693b 	.word	0x0800693b
 800676c:	0800693b 	.word	0x0800693b
 8006770:	080067f5 	.word	0x080067f5
 8006774:	0800693b 	.word	0x0800693b
 8006778:	0800693b 	.word	0x0800693b
 800677c:	0800693b 	.word	0x0800693b
 8006780:	08006837 	.word	0x08006837
 8006784:	0800693b 	.word	0x0800693b
 8006788:	0800693b 	.word	0x0800693b
 800678c:	0800693b 	.word	0x0800693b
 8006790:	08006877 	.word	0x08006877
 8006794:	0800693b 	.word	0x0800693b
 8006798:	0800693b 	.word	0x0800693b
 800679c:	0800693b 	.word	0x0800693b
 80067a0:	080068b9 	.word	0x080068b9
 80067a4:	0800693b 	.word	0x0800693b
 80067a8:	0800693b 	.word	0x0800693b
 80067ac:	0800693b 	.word	0x0800693b
 80067b0:	080068f9 	.word	0x080068f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f966 	bl	8006a8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0208 	orr.w	r2, r2, #8
 80067ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0204 	bic.w	r2, r2, #4
 80067de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6999      	ldr	r1, [r3, #24]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	619a      	str	r2, [r3, #24]
      break;
 80067f2:	e0a5      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 f9d6 	bl	8006bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800680e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800681e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6999      	ldr	r1, [r3, #24]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	021a      	lsls	r2, r3, #8
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	619a      	str	r2, [r3, #24]
      break;
 8006834:	e084      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fa3f 	bl	8006cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f042 0208 	orr.w	r2, r2, #8
 8006850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0204 	bic.w	r2, r2, #4
 8006860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69d9      	ldr	r1, [r3, #28]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	61da      	str	r2, [r3, #28]
      break;
 8006874:	e064      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	4618      	mov	r0, r3
 800687e:	f000 faa7 	bl	8006dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69da      	ldr	r2, [r3, #28]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69d9      	ldr	r1, [r3, #28]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	021a      	lsls	r2, r3, #8
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	61da      	str	r2, [r3, #28]
      break;
 80068b6:	e043      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fb10 	bl	8006ee4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0208 	orr.w	r2, r2, #8
 80068d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0204 	bic.w	r2, r2, #4
 80068e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	691a      	ldr	r2, [r3, #16]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80068f6:	e023      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fb54 	bl	8006fac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006912:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006922:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	021a      	lsls	r2, r3, #8
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006938:	e002      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	75fb      	strb	r3, [r7, #23]
      break;
 800693e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop

08006954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a42      	ldr	r2, [pc, #264]	@ (8006a70 <TIM_Base_SetConfig+0x11c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00f      	beq.n	800698c <TIM_Base_SetConfig+0x38>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006972:	d00b      	beq.n	800698c <TIM_Base_SetConfig+0x38>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a3f      	ldr	r2, [pc, #252]	@ (8006a74 <TIM_Base_SetConfig+0x120>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d007      	beq.n	800698c <TIM_Base_SetConfig+0x38>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a3e      	ldr	r2, [pc, #248]	@ (8006a78 <TIM_Base_SetConfig+0x124>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d003      	beq.n	800698c <TIM_Base_SetConfig+0x38>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a3d      	ldr	r2, [pc, #244]	@ (8006a7c <TIM_Base_SetConfig+0x128>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d108      	bne.n	800699e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a33      	ldr	r2, [pc, #204]	@ (8006a70 <TIM_Base_SetConfig+0x11c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01b      	beq.n	80069de <TIM_Base_SetConfig+0x8a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ac:	d017      	beq.n	80069de <TIM_Base_SetConfig+0x8a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a30      	ldr	r2, [pc, #192]	@ (8006a74 <TIM_Base_SetConfig+0x120>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <TIM_Base_SetConfig+0x8a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a2f      	ldr	r2, [pc, #188]	@ (8006a78 <TIM_Base_SetConfig+0x124>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00f      	beq.n	80069de <TIM_Base_SetConfig+0x8a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a2e      	ldr	r2, [pc, #184]	@ (8006a7c <TIM_Base_SetConfig+0x128>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00b      	beq.n	80069de <TIM_Base_SetConfig+0x8a>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006a80 <TIM_Base_SetConfig+0x12c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d007      	beq.n	80069de <TIM_Base_SetConfig+0x8a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a2c      	ldr	r2, [pc, #176]	@ (8006a84 <TIM_Base_SetConfig+0x130>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d003      	beq.n	80069de <TIM_Base_SetConfig+0x8a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006a88 <TIM_Base_SetConfig+0x134>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d108      	bne.n	80069f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a16      	ldr	r2, [pc, #88]	@ (8006a70 <TIM_Base_SetConfig+0x11c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00f      	beq.n	8006a3c <TIM_Base_SetConfig+0xe8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a17      	ldr	r2, [pc, #92]	@ (8006a7c <TIM_Base_SetConfig+0x128>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00b      	beq.n	8006a3c <TIM_Base_SetConfig+0xe8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a16      	ldr	r2, [pc, #88]	@ (8006a80 <TIM_Base_SetConfig+0x12c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d007      	beq.n	8006a3c <TIM_Base_SetConfig+0xe8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a15      	ldr	r2, [pc, #84]	@ (8006a84 <TIM_Base_SetConfig+0x130>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_Base_SetConfig+0xe8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a14      	ldr	r2, [pc, #80]	@ (8006a88 <TIM_Base_SetConfig+0x134>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d103      	bne.n	8006a44 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d105      	bne.n	8006a62 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f023 0201 	bic.w	r2, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	611a      	str	r2, [r3, #16]
  }
}
 8006a62:	bf00      	nop
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40012c00 	.word	0x40012c00
 8006a74:	40000400 	.word	0x40000400
 8006a78:	40000800 	.word	0x40000800
 8006a7c:	40013400 	.word	0x40013400
 8006a80:	40014000 	.word	0x40014000
 8006a84:	40014400 	.word	0x40014400
 8006a88:	40014800 	.word	0x40014800

08006a8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f023 0201 	bic.w	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0303 	bic.w	r3, r3, #3
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f023 0302 	bic.w	r3, r3, #2
 8006ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8006b98 <TIM_OC1_SetConfig+0x10c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00f      	beq.n	8006b0c <TIM_OC1_SetConfig+0x80>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a2b      	ldr	r2, [pc, #172]	@ (8006b9c <TIM_OC1_SetConfig+0x110>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00b      	beq.n	8006b0c <TIM_OC1_SetConfig+0x80>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a2a      	ldr	r2, [pc, #168]	@ (8006ba0 <TIM_OC1_SetConfig+0x114>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d007      	beq.n	8006b0c <TIM_OC1_SetConfig+0x80>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a29      	ldr	r2, [pc, #164]	@ (8006ba4 <TIM_OC1_SetConfig+0x118>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_OC1_SetConfig+0x80>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a28      	ldr	r2, [pc, #160]	@ (8006ba8 <TIM_OC1_SetConfig+0x11c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d10c      	bne.n	8006b26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f023 0308 	bic.w	r3, r3, #8
 8006b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f023 0304 	bic.w	r3, r3, #4
 8006b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a1b      	ldr	r2, [pc, #108]	@ (8006b98 <TIM_OC1_SetConfig+0x10c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00f      	beq.n	8006b4e <TIM_OC1_SetConfig+0xc2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a1a      	ldr	r2, [pc, #104]	@ (8006b9c <TIM_OC1_SetConfig+0x110>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00b      	beq.n	8006b4e <TIM_OC1_SetConfig+0xc2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a19      	ldr	r2, [pc, #100]	@ (8006ba0 <TIM_OC1_SetConfig+0x114>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d007      	beq.n	8006b4e <TIM_OC1_SetConfig+0xc2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a18      	ldr	r2, [pc, #96]	@ (8006ba4 <TIM_OC1_SetConfig+0x118>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d003      	beq.n	8006b4e <TIM_OC1_SetConfig+0xc2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a17      	ldr	r2, [pc, #92]	@ (8006ba8 <TIM_OC1_SetConfig+0x11c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d111      	bne.n	8006b72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	621a      	str	r2, [r3, #32]
}
 8006b8c:	bf00      	nop
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	40012c00 	.word	0x40012c00
 8006b9c:	40013400 	.word	0x40013400
 8006ba0:	40014000 	.word	0x40014000
 8006ba4:	40014400 	.word	0x40014400
 8006ba8:	40014800 	.word	0x40014800

08006bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	f023 0210 	bic.w	r2, r3, #16
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f023 0320 	bic.w	r3, r3, #32
 8006bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a28      	ldr	r2, [pc, #160]	@ (8006cac <TIM_OC2_SetConfig+0x100>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <TIM_OC2_SetConfig+0x6c>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a27      	ldr	r2, [pc, #156]	@ (8006cb0 <TIM_OC2_SetConfig+0x104>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d10d      	bne.n	8006c34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a1d      	ldr	r2, [pc, #116]	@ (8006cac <TIM_OC2_SetConfig+0x100>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00f      	beq.n	8006c5c <TIM_OC2_SetConfig+0xb0>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb0 <TIM_OC2_SetConfig+0x104>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00b      	beq.n	8006c5c <TIM_OC2_SetConfig+0xb0>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a1b      	ldr	r2, [pc, #108]	@ (8006cb4 <TIM_OC2_SetConfig+0x108>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d007      	beq.n	8006c5c <TIM_OC2_SetConfig+0xb0>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006cb8 <TIM_OC2_SetConfig+0x10c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_OC2_SetConfig+0xb0>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a19      	ldr	r2, [pc, #100]	@ (8006cbc <TIM_OC2_SetConfig+0x110>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d113      	bne.n	8006c84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	621a      	str	r2, [r3, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40012c00 	.word	0x40012c00
 8006cb0:	40013400 	.word	0x40013400
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40014400 	.word	0x40014400
 8006cbc:	40014800 	.word	0x40014800

08006cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0303 	bic.w	r3, r3, #3
 8006cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a27      	ldr	r2, [pc, #156]	@ (8006dbc <TIM_OC3_SetConfig+0xfc>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d003      	beq.n	8006d2a <TIM_OC3_SetConfig+0x6a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a26      	ldr	r2, [pc, #152]	@ (8006dc0 <TIM_OC3_SetConfig+0x100>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d10d      	bne.n	8006d46 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a1c      	ldr	r2, [pc, #112]	@ (8006dbc <TIM_OC3_SetConfig+0xfc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00f      	beq.n	8006d6e <TIM_OC3_SetConfig+0xae>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a1b      	ldr	r2, [pc, #108]	@ (8006dc0 <TIM_OC3_SetConfig+0x100>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00b      	beq.n	8006d6e <TIM_OC3_SetConfig+0xae>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a1a      	ldr	r2, [pc, #104]	@ (8006dc4 <TIM_OC3_SetConfig+0x104>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d007      	beq.n	8006d6e <TIM_OC3_SetConfig+0xae>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a19      	ldr	r2, [pc, #100]	@ (8006dc8 <TIM_OC3_SetConfig+0x108>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d003      	beq.n	8006d6e <TIM_OC3_SetConfig+0xae>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a18      	ldr	r2, [pc, #96]	@ (8006dcc <TIM_OC3_SetConfig+0x10c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d113      	bne.n	8006d96 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	621a      	str	r2, [r3, #32]
}
 8006db0:	bf00      	nop
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	40012c00 	.word	0x40012c00
 8006dc0:	40013400 	.word	0x40013400
 8006dc4:	40014000 	.word	0x40014000
 8006dc8:	40014400 	.word	0x40014400
 8006dcc:	40014800 	.word	0x40014800

08006dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	021b      	lsls	r3, r3, #8
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	031b      	lsls	r3, r3, #12
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a28      	ldr	r2, [pc, #160]	@ (8006ed0 <TIM_OC4_SetConfig+0x100>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d003      	beq.n	8006e3c <TIM_OC4_SetConfig+0x6c>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a27      	ldr	r2, [pc, #156]	@ (8006ed4 <TIM_OC4_SetConfig+0x104>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d10d      	bne.n	8006e58 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	031b      	lsls	r3, r3, #12
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ed0 <TIM_OC4_SetConfig+0x100>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00f      	beq.n	8006e80 <TIM_OC4_SetConfig+0xb0>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a1c      	ldr	r2, [pc, #112]	@ (8006ed4 <TIM_OC4_SetConfig+0x104>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00b      	beq.n	8006e80 <TIM_OC4_SetConfig+0xb0>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed8 <TIM_OC4_SetConfig+0x108>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d007      	beq.n	8006e80 <TIM_OC4_SetConfig+0xb0>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a1a      	ldr	r2, [pc, #104]	@ (8006edc <TIM_OC4_SetConfig+0x10c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_OC4_SetConfig+0xb0>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a19      	ldr	r2, [pc, #100]	@ (8006ee0 <TIM_OC4_SetConfig+0x110>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d113      	bne.n	8006ea8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e86:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e8e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	019b      	lsls	r3, r3, #6
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	019b      	lsls	r3, r3, #6
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40012c00 	.word	0x40012c00
 8006ed4:	40013400 	.word	0x40013400
 8006ed8:	40014000 	.word	0x40014000
 8006edc:	40014400 	.word	0x40014400
 8006ee0:	40014800 	.word	0x40014800

08006ee4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a17      	ldr	r2, [pc, #92]	@ (8006f98 <TIM_OC5_SetConfig+0xb4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00f      	beq.n	8006f5e <TIM_OC5_SetConfig+0x7a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a16      	ldr	r2, [pc, #88]	@ (8006f9c <TIM_OC5_SetConfig+0xb8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00b      	beq.n	8006f5e <TIM_OC5_SetConfig+0x7a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a15      	ldr	r2, [pc, #84]	@ (8006fa0 <TIM_OC5_SetConfig+0xbc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d007      	beq.n	8006f5e <TIM_OC5_SetConfig+0x7a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a14      	ldr	r2, [pc, #80]	@ (8006fa4 <TIM_OC5_SetConfig+0xc0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d003      	beq.n	8006f5e <TIM_OC5_SetConfig+0x7a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a13      	ldr	r2, [pc, #76]	@ (8006fa8 <TIM_OC5_SetConfig+0xc4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d109      	bne.n	8006f72 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	621a      	str	r2, [r3, #32]
}
 8006f8c:	bf00      	nop
 8006f8e:	371c      	adds	r7, #28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	40012c00 	.word	0x40012c00
 8006f9c:	40013400 	.word	0x40013400
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40014400 	.word	0x40014400
 8006fa8:	40014800 	.word	0x40014800

08006fac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	051b      	lsls	r3, r3, #20
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a18      	ldr	r2, [pc, #96]	@ (8007064 <TIM_OC6_SetConfig+0xb8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00f      	beq.n	8007028 <TIM_OC6_SetConfig+0x7c>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a17      	ldr	r2, [pc, #92]	@ (8007068 <TIM_OC6_SetConfig+0xbc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00b      	beq.n	8007028 <TIM_OC6_SetConfig+0x7c>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a16      	ldr	r2, [pc, #88]	@ (800706c <TIM_OC6_SetConfig+0xc0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d007      	beq.n	8007028 <TIM_OC6_SetConfig+0x7c>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a15      	ldr	r2, [pc, #84]	@ (8007070 <TIM_OC6_SetConfig+0xc4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d003      	beq.n	8007028 <TIM_OC6_SetConfig+0x7c>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a14      	ldr	r2, [pc, #80]	@ (8007074 <TIM_OC6_SetConfig+0xc8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d109      	bne.n	800703c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800702e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	029b      	lsls	r3, r3, #10
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40012c00 	.word	0x40012c00
 8007068:	40013400 	.word	0x40013400
 800706c:	40014000 	.word	0x40014000
 8007070:	40014400 	.word	0x40014400
 8007074:	40014800 	.word	0x40014800

08007078 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	2201      	movs	r2, #1
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a1a      	ldr	r2, [r3, #32]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	43db      	mvns	r3, r3
 800709a:	401a      	ands	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a1a      	ldr	r2, [r3, #32]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f003 031f 	and.w	r3, r3, #31
 80070aa:	6879      	ldr	r1, [r7, #4]
 80070ac:	fa01 f303 	lsl.w	r3, r1, r3
 80070b0:	431a      	orrs	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d109      	bne.n	80070ec <HAL_TIMEx_PWMN_Start_IT+0x28>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	bf14      	ite	ne
 80070e4:	2301      	movne	r3, #1
 80070e6:	2300      	moveq	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	e022      	b.n	8007132 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d109      	bne.n	8007106 <HAL_TIMEx_PWMN_Start_IT+0x42>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	bf14      	ite	ne
 80070fe:	2301      	movne	r3, #1
 8007100:	2300      	moveq	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	e015      	b.n	8007132 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b08      	cmp	r3, #8
 800710a:	d109      	bne.n	8007120 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b01      	cmp	r3, #1
 8007116:	bf14      	ite	ne
 8007118:	2301      	movne	r3, #1
 800711a:	2300      	moveq	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	e008      	b.n	8007132 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b01      	cmp	r3, #1
 800712a:	bf14      	ite	ne
 800712c:	2301      	movne	r3, #1
 800712e:	2300      	moveq	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e0bc      	b.n	80072b4 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <HAL_TIMEx_PWMN_Start_IT+0x86>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007148:	e013      	b.n	8007172 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b04      	cmp	r3, #4
 800714e:	d104      	bne.n	800715a <HAL_TIMEx_PWMN_Start_IT+0x96>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007158:	e00b      	b.n	8007172 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b08      	cmp	r3, #8
 800715e:	d104      	bne.n	800716a <HAL_TIMEx_PWMN_Start_IT+0xa6>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007168:	e003      	b.n	8007172 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2202      	movs	r2, #2
 800716e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b0c      	cmp	r3, #12
 8007176:	d841      	bhi.n	80071fc <HAL_TIMEx_PWMN_Start_IT+0x138>
 8007178:	a201      	add	r2, pc, #4	@ (adr r2, 8007180 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	080071b5 	.word	0x080071b5
 8007184:	080071fd 	.word	0x080071fd
 8007188:	080071fd 	.word	0x080071fd
 800718c:	080071fd 	.word	0x080071fd
 8007190:	080071c7 	.word	0x080071c7
 8007194:	080071fd 	.word	0x080071fd
 8007198:	080071fd 	.word	0x080071fd
 800719c:	080071fd 	.word	0x080071fd
 80071a0:	080071d9 	.word	0x080071d9
 80071a4:	080071fd 	.word	0x080071fd
 80071a8:	080071fd 	.word	0x080071fd
 80071ac:	080071fd 	.word	0x080071fd
 80071b0:	080071eb 	.word	0x080071eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0202 	orr.w	r2, r2, #2
 80071c2:	60da      	str	r2, [r3, #12]
      break;
 80071c4:	e01d      	b.n	8007202 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 0204 	orr.w	r2, r2, #4
 80071d4:	60da      	str	r2, [r3, #12]
      break;
 80071d6:	e014      	b.n	8007202 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0208 	orr.w	r2, r2, #8
 80071e6:	60da      	str	r2, [r3, #12]
      break;
 80071e8:	e00b      	b.n	8007202 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f042 0210 	orr.w	r2, r2, #16
 80071f8:	60da      	str	r2, [r3, #12]
      break;
 80071fa:	e002      	b.n	8007202 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007200:	bf00      	nop
  }

  if (status == HAL_OK)
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d154      	bne.n	80072b2 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007216:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2204      	movs	r2, #4
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	4618      	mov	r0, r3
 8007222:	f000 f965 	bl	80074f0 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007234:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a20      	ldr	r2, [pc, #128]	@ (80072bc <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d018      	beq.n	8007272 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007248:	d013      	beq.n	8007272 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1c      	ldr	r2, [pc, #112]	@ (80072c0 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00e      	beq.n	8007272 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1a      	ldr	r2, [pc, #104]	@ (80072c4 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d009      	beq.n	8007272 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a19      	ldr	r2, [pc, #100]	@ (80072c8 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d004      	beq.n	8007272 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a17      	ldr	r2, [pc, #92]	@ (80072cc <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d115      	bne.n	800729e <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	4b15      	ldr	r3, [pc, #84]	@ (80072d0 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800727a:	4013      	ands	r3, r2
 800727c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b06      	cmp	r3, #6
 8007282:	d015      	beq.n	80072b0 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800728a:	d011      	beq.n	80072b0 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729c:	e008      	b.n	80072b0 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f042 0201 	orr.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	e000      	b.n	80072b2 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40012c00 	.word	0x40012c00
 80072c0:	40000400 	.word	0x40000400
 80072c4:	40000800 	.word	0x40000800
 80072c8:	40013400 	.word	0x40013400
 80072cc:	40014000 	.word	0x40014000
 80072d0:	00010007 	.word	0x00010007

080072d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e065      	b.n	80073b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a2c      	ldr	r2, [pc, #176]	@ (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d004      	beq.n	8007320 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a2b      	ldr	r2, [pc, #172]	@ (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d108      	bne.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007326:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800733c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a1b      	ldr	r2, [pc, #108]	@ (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d018      	beq.n	800738c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007362:	d013      	beq.n	800738c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a18      	ldr	r2, [pc, #96]	@ (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00e      	beq.n	800738c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a17      	ldr	r2, [pc, #92]	@ (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d009      	beq.n	800738c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a12      	ldr	r2, [pc, #72]	@ (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d004      	beq.n	800738c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a13      	ldr	r2, [pc, #76]	@ (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d10c      	bne.n	80073a6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007392:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	4313      	orrs	r3, r2
 800739c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40013400 	.word	0x40013400
 80073cc:	40000400 	.word	0x40000400
 80073d0:	40000800 	.word	0x40000800
 80073d4:	40014000 	.word	0x40014000

080073d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e073      	b.n	80074dc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	041b      	lsls	r3, r3, #16
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a19      	ldr	r2, [pc, #100]	@ (80074e8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d004      	beq.n	8007490 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a18      	ldr	r2, [pc, #96]	@ (80074ec <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d11c      	bne.n	80074ca <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749a:	051b      	lsls	r3, r3, #20
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b8:	4313      	orrs	r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	40013400 	.word	0x40013400

080074f0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f003 030f 	and.w	r3, r3, #15
 8007502:	2204      	movs	r2, #4
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a1a      	ldr	r2, [r3, #32]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	43db      	mvns	r3, r3
 8007512:	401a      	ands	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a1a      	ldr	r2, [r3, #32]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f003 030f 	and.w	r3, r3, #15
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	fa01 f303 	lsl.w	r3, r1, r3
 8007528:	431a      	orrs	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e042      	b.n	80075d2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fa fe6a 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2224      	movs	r2, #36	@ 0x24
 8007568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0201 	bic.w	r2, r2, #1
 800757a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 faf5 	bl	8007b74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f826 	bl	80075dc <UART_SetConfig>
 8007590:	4603      	mov	r3, r0
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e01b      	b.n	80075d2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f042 0201 	orr.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fb74 	bl	8007cb8 <UART_CheckIdleState>
 80075d0:	4603      	mov	r3, r0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075e0:	b08c      	sub	sp, #48	@ 0x30
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	431a      	orrs	r2, r3
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	431a      	orrs	r2, r3
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	4313      	orrs	r3, r2
 8007602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4bab      	ldr	r3, [pc, #684]	@ (80078b8 <UART_SetConfig+0x2dc>)
 800760c:	4013      	ands	r3, r2
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007614:	430b      	orrs	r3, r1
 8007616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4aa0      	ldr	r2, [pc, #640]	@ (80078bc <UART_SetConfig+0x2e0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d004      	beq.n	8007648 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007644:	4313      	orrs	r3, r2
 8007646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007652:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800765c:	430b      	orrs	r3, r1
 800765e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007666:	f023 010f 	bic.w	r1, r3, #15
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a91      	ldr	r2, [pc, #580]	@ (80078c0 <UART_SetConfig+0x2e4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d125      	bne.n	80076cc <UART_SetConfig+0xf0>
 8007680:	4b90      	ldr	r3, [pc, #576]	@ (80078c4 <UART_SetConfig+0x2e8>)
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	2b03      	cmp	r3, #3
 800768c:	d81a      	bhi.n	80076c4 <UART_SetConfig+0xe8>
 800768e:	a201      	add	r2, pc, #4	@ (adr r2, 8007694 <UART_SetConfig+0xb8>)
 8007690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007694:	080076a5 	.word	0x080076a5
 8007698:	080076b5 	.word	0x080076b5
 800769c:	080076ad 	.word	0x080076ad
 80076a0:	080076bd 	.word	0x080076bd
 80076a4:	2301      	movs	r3, #1
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076aa:	e0d6      	b.n	800785a <UART_SetConfig+0x27e>
 80076ac:	2302      	movs	r3, #2
 80076ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b2:	e0d2      	b.n	800785a <UART_SetConfig+0x27e>
 80076b4:	2304      	movs	r3, #4
 80076b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ba:	e0ce      	b.n	800785a <UART_SetConfig+0x27e>
 80076bc:	2308      	movs	r3, #8
 80076be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076c2:	e0ca      	b.n	800785a <UART_SetConfig+0x27e>
 80076c4:	2310      	movs	r3, #16
 80076c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ca:	e0c6      	b.n	800785a <UART_SetConfig+0x27e>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a7d      	ldr	r2, [pc, #500]	@ (80078c8 <UART_SetConfig+0x2ec>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d138      	bne.n	8007748 <UART_SetConfig+0x16c>
 80076d6:	4b7b      	ldr	r3, [pc, #492]	@ (80078c4 <UART_SetConfig+0x2e8>)
 80076d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076dc:	f003 030c 	and.w	r3, r3, #12
 80076e0:	2b0c      	cmp	r3, #12
 80076e2:	d82d      	bhi.n	8007740 <UART_SetConfig+0x164>
 80076e4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ec <UART_SetConfig+0x110>)
 80076e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ea:	bf00      	nop
 80076ec:	08007721 	.word	0x08007721
 80076f0:	08007741 	.word	0x08007741
 80076f4:	08007741 	.word	0x08007741
 80076f8:	08007741 	.word	0x08007741
 80076fc:	08007731 	.word	0x08007731
 8007700:	08007741 	.word	0x08007741
 8007704:	08007741 	.word	0x08007741
 8007708:	08007741 	.word	0x08007741
 800770c:	08007729 	.word	0x08007729
 8007710:	08007741 	.word	0x08007741
 8007714:	08007741 	.word	0x08007741
 8007718:	08007741 	.word	0x08007741
 800771c:	08007739 	.word	0x08007739
 8007720:	2300      	movs	r3, #0
 8007722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007726:	e098      	b.n	800785a <UART_SetConfig+0x27e>
 8007728:	2302      	movs	r3, #2
 800772a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800772e:	e094      	b.n	800785a <UART_SetConfig+0x27e>
 8007730:	2304      	movs	r3, #4
 8007732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007736:	e090      	b.n	800785a <UART_SetConfig+0x27e>
 8007738:	2308      	movs	r3, #8
 800773a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800773e:	e08c      	b.n	800785a <UART_SetConfig+0x27e>
 8007740:	2310      	movs	r3, #16
 8007742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007746:	e088      	b.n	800785a <UART_SetConfig+0x27e>
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a5f      	ldr	r2, [pc, #380]	@ (80078cc <UART_SetConfig+0x2f0>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d125      	bne.n	800779e <UART_SetConfig+0x1c2>
 8007752:	4b5c      	ldr	r3, [pc, #368]	@ (80078c4 <UART_SetConfig+0x2e8>)
 8007754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007758:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800775c:	2b30      	cmp	r3, #48	@ 0x30
 800775e:	d016      	beq.n	800778e <UART_SetConfig+0x1b2>
 8007760:	2b30      	cmp	r3, #48	@ 0x30
 8007762:	d818      	bhi.n	8007796 <UART_SetConfig+0x1ba>
 8007764:	2b20      	cmp	r3, #32
 8007766:	d00a      	beq.n	800777e <UART_SetConfig+0x1a2>
 8007768:	2b20      	cmp	r3, #32
 800776a:	d814      	bhi.n	8007796 <UART_SetConfig+0x1ba>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <UART_SetConfig+0x19a>
 8007770:	2b10      	cmp	r3, #16
 8007772:	d008      	beq.n	8007786 <UART_SetConfig+0x1aa>
 8007774:	e00f      	b.n	8007796 <UART_SetConfig+0x1ba>
 8007776:	2300      	movs	r3, #0
 8007778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777c:	e06d      	b.n	800785a <UART_SetConfig+0x27e>
 800777e:	2302      	movs	r3, #2
 8007780:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007784:	e069      	b.n	800785a <UART_SetConfig+0x27e>
 8007786:	2304      	movs	r3, #4
 8007788:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800778c:	e065      	b.n	800785a <UART_SetConfig+0x27e>
 800778e:	2308      	movs	r3, #8
 8007790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007794:	e061      	b.n	800785a <UART_SetConfig+0x27e>
 8007796:	2310      	movs	r3, #16
 8007798:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800779c:	e05d      	b.n	800785a <UART_SetConfig+0x27e>
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a4b      	ldr	r2, [pc, #300]	@ (80078d0 <UART_SetConfig+0x2f4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d125      	bne.n	80077f4 <UART_SetConfig+0x218>
 80077a8:	4b46      	ldr	r3, [pc, #280]	@ (80078c4 <UART_SetConfig+0x2e8>)
 80077aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80077b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80077b4:	d016      	beq.n	80077e4 <UART_SetConfig+0x208>
 80077b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80077b8:	d818      	bhi.n	80077ec <UART_SetConfig+0x210>
 80077ba:	2b80      	cmp	r3, #128	@ 0x80
 80077bc:	d00a      	beq.n	80077d4 <UART_SetConfig+0x1f8>
 80077be:	2b80      	cmp	r3, #128	@ 0x80
 80077c0:	d814      	bhi.n	80077ec <UART_SetConfig+0x210>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <UART_SetConfig+0x1f0>
 80077c6:	2b40      	cmp	r3, #64	@ 0x40
 80077c8:	d008      	beq.n	80077dc <UART_SetConfig+0x200>
 80077ca:	e00f      	b.n	80077ec <UART_SetConfig+0x210>
 80077cc:	2300      	movs	r3, #0
 80077ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d2:	e042      	b.n	800785a <UART_SetConfig+0x27e>
 80077d4:	2302      	movs	r3, #2
 80077d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077da:	e03e      	b.n	800785a <UART_SetConfig+0x27e>
 80077dc:	2304      	movs	r3, #4
 80077de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e2:	e03a      	b.n	800785a <UART_SetConfig+0x27e>
 80077e4:	2308      	movs	r3, #8
 80077e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ea:	e036      	b.n	800785a <UART_SetConfig+0x27e>
 80077ec:	2310      	movs	r3, #16
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f2:	e032      	b.n	800785a <UART_SetConfig+0x27e>
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a30      	ldr	r2, [pc, #192]	@ (80078bc <UART_SetConfig+0x2e0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d12a      	bne.n	8007854 <UART_SetConfig+0x278>
 80077fe:	4b31      	ldr	r3, [pc, #196]	@ (80078c4 <UART_SetConfig+0x2e8>)
 8007800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007804:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007808:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800780c:	d01a      	beq.n	8007844 <UART_SetConfig+0x268>
 800780e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007812:	d81b      	bhi.n	800784c <UART_SetConfig+0x270>
 8007814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007818:	d00c      	beq.n	8007834 <UART_SetConfig+0x258>
 800781a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800781e:	d815      	bhi.n	800784c <UART_SetConfig+0x270>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <UART_SetConfig+0x250>
 8007824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007828:	d008      	beq.n	800783c <UART_SetConfig+0x260>
 800782a:	e00f      	b.n	800784c <UART_SetConfig+0x270>
 800782c:	2300      	movs	r3, #0
 800782e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007832:	e012      	b.n	800785a <UART_SetConfig+0x27e>
 8007834:	2302      	movs	r3, #2
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800783a:	e00e      	b.n	800785a <UART_SetConfig+0x27e>
 800783c:	2304      	movs	r3, #4
 800783e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007842:	e00a      	b.n	800785a <UART_SetConfig+0x27e>
 8007844:	2308      	movs	r3, #8
 8007846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800784a:	e006      	b.n	800785a <UART_SetConfig+0x27e>
 800784c:	2310      	movs	r3, #16
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007852:	e002      	b.n	800785a <UART_SetConfig+0x27e>
 8007854:	2310      	movs	r3, #16
 8007856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a17      	ldr	r2, [pc, #92]	@ (80078bc <UART_SetConfig+0x2e0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	f040 80a8 	bne.w	80079b6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007866:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800786a:	2b08      	cmp	r3, #8
 800786c:	d834      	bhi.n	80078d8 <UART_SetConfig+0x2fc>
 800786e:	a201      	add	r2, pc, #4	@ (adr r2, 8007874 <UART_SetConfig+0x298>)
 8007870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007874:	08007899 	.word	0x08007899
 8007878:	080078d9 	.word	0x080078d9
 800787c:	080078a1 	.word	0x080078a1
 8007880:	080078d9 	.word	0x080078d9
 8007884:	080078a7 	.word	0x080078a7
 8007888:	080078d9 	.word	0x080078d9
 800788c:	080078d9 	.word	0x080078d9
 8007890:	080078d9 	.word	0x080078d9
 8007894:	080078af 	.word	0x080078af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007898:	f7fd fc0e 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 800789c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800789e:	e021      	b.n	80078e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078a0:	4b0c      	ldr	r3, [pc, #48]	@ (80078d4 <UART_SetConfig+0x2f8>)
 80078a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078a4:	e01e      	b.n	80078e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078a6:	f7fd fb99 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 80078aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078ac:	e01a      	b.n	80078e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078b4:	e016      	b.n	80078e4 <UART_SetConfig+0x308>
 80078b6:	bf00      	nop
 80078b8:	cfff69f3 	.word	0xcfff69f3
 80078bc:	40008000 	.word	0x40008000
 80078c0:	40013800 	.word	0x40013800
 80078c4:	40021000 	.word	0x40021000
 80078c8:	40004400 	.word	0x40004400
 80078cc:	40004800 	.word	0x40004800
 80078d0:	40004c00 	.word	0x40004c00
 80078d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80078e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 812a 	beq.w	8007b40 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f0:	4a9e      	ldr	r2, [pc, #632]	@ (8007b6c <UART_SetConfig+0x590>)
 80078f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078f6:	461a      	mov	r2, r3
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80078fe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	4613      	mov	r3, r2
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	4413      	add	r3, r2
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	429a      	cmp	r2, r3
 800790e:	d305      	bcc.n	800791c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	429a      	cmp	r2, r3
 800791a:	d903      	bls.n	8007924 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007922:	e10d      	b.n	8007b40 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007926:	2200      	movs	r2, #0
 8007928:	60bb      	str	r3, [r7, #8]
 800792a:	60fa      	str	r2, [r7, #12]
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007930:	4a8e      	ldr	r2, [pc, #568]	@ (8007b6c <UART_SetConfig+0x590>)
 8007932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007936:	b29b      	uxth	r3, r3
 8007938:	2200      	movs	r2, #0
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007946:	f7f8 ff9d 	bl	8000884 <__aeabi_uldivmod>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4610      	mov	r0, r2
 8007950:	4619      	mov	r1, r3
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	020b      	lsls	r3, r1, #8
 800795c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007960:	0202      	lsls	r2, r0, #8
 8007962:	6979      	ldr	r1, [r7, #20]
 8007964:	6849      	ldr	r1, [r1, #4]
 8007966:	0849      	lsrs	r1, r1, #1
 8007968:	2000      	movs	r0, #0
 800796a:	460c      	mov	r4, r1
 800796c:	4605      	mov	r5, r0
 800796e:	eb12 0804 	adds.w	r8, r2, r4
 8007972:	eb43 0905 	adc.w	r9, r3, r5
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	469a      	mov	sl, r3
 800797e:	4693      	mov	fp, r2
 8007980:	4652      	mov	r2, sl
 8007982:	465b      	mov	r3, fp
 8007984:	4640      	mov	r0, r8
 8007986:	4649      	mov	r1, r9
 8007988:	f7f8 ff7c 	bl	8000884 <__aeabi_uldivmod>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4613      	mov	r3, r2
 8007992:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800799a:	d308      	bcc.n	80079ae <UART_SetConfig+0x3d2>
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079a2:	d204      	bcs.n	80079ae <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6a3a      	ldr	r2, [r7, #32]
 80079aa:	60da      	str	r2, [r3, #12]
 80079ac:	e0c8      	b.n	8007b40 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079b4:	e0c4      	b.n	8007b40 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079be:	d167      	bne.n	8007a90 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80079c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	d828      	bhi.n	8007a1a <UART_SetConfig+0x43e>
 80079c8:	a201      	add	r2, pc, #4	@ (adr r2, 80079d0 <UART_SetConfig+0x3f4>)
 80079ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ce:	bf00      	nop
 80079d0:	080079f5 	.word	0x080079f5
 80079d4:	080079fd 	.word	0x080079fd
 80079d8:	08007a05 	.word	0x08007a05
 80079dc:	08007a1b 	.word	0x08007a1b
 80079e0:	08007a0b 	.word	0x08007a0b
 80079e4:	08007a1b 	.word	0x08007a1b
 80079e8:	08007a1b 	.word	0x08007a1b
 80079ec:	08007a1b 	.word	0x08007a1b
 80079f0:	08007a13 	.word	0x08007a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f4:	f7fd fb60 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 80079f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079fa:	e014      	b.n	8007a26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079fc:	f7fd fb72 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8007a00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a02:	e010      	b.n	8007a26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a04:	4b5a      	ldr	r3, [pc, #360]	@ (8007b70 <UART_SetConfig+0x594>)
 8007a06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a08:	e00d      	b.n	8007a26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a0a:	f7fd fae7 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8007a0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a10:	e009      	b.n	8007a26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a18:	e005      	b.n	8007a26 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8089 	beq.w	8007b40 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a32:	4a4e      	ldr	r2, [pc, #312]	@ (8007b6c <UART_SetConfig+0x590>)
 8007a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a40:	005a      	lsls	r2, r3, #1
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	441a      	add	r2, r3
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	2b0f      	cmp	r3, #15
 8007a58:	d916      	bls.n	8007a88 <UART_SetConfig+0x4ac>
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a60:	d212      	bcs.n	8007a88 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f023 030f 	bic.w	r3, r3, #15
 8007a6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	085b      	lsrs	r3, r3, #1
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	8bfb      	ldrh	r3, [r7, #30]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	8bfa      	ldrh	r2, [r7, #30]
 8007a84:	60da      	str	r2, [r3, #12]
 8007a86:	e05b      	b.n	8007b40 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a8e:	e057      	b.n	8007b40 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d828      	bhi.n	8007aea <UART_SetConfig+0x50e>
 8007a98:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa0 <UART_SetConfig+0x4c4>)
 8007a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9e:	bf00      	nop
 8007aa0:	08007ac5 	.word	0x08007ac5
 8007aa4:	08007acd 	.word	0x08007acd
 8007aa8:	08007ad5 	.word	0x08007ad5
 8007aac:	08007aeb 	.word	0x08007aeb
 8007ab0:	08007adb 	.word	0x08007adb
 8007ab4:	08007aeb 	.word	0x08007aeb
 8007ab8:	08007aeb 	.word	0x08007aeb
 8007abc:	08007aeb 	.word	0x08007aeb
 8007ac0:	08007ae3 	.word	0x08007ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac4:	f7fd faf8 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8007ac8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007aca:	e014      	b.n	8007af6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007acc:	f7fd fb0a 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8007ad0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ad2:	e010      	b.n	8007af6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ad4:	4b26      	ldr	r3, [pc, #152]	@ (8007b70 <UART_SetConfig+0x594>)
 8007ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ad8:	e00d      	b.n	8007af6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ada:	f7fd fa7f 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8007ade:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ae0:	e009      	b.n	8007af6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ae8:	e005      	b.n	8007af6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007af4:	bf00      	nop
    }

    if (pclk != 0U)
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d021      	beq.n	8007b40 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b00:	4a1a      	ldr	r2, [pc, #104]	@ (8007b6c <UART_SetConfig+0x590>)
 8007b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b06:	461a      	mov	r2, r3
 8007b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	085b      	lsrs	r3, r3, #1
 8007b14:	441a      	add	r2, r3
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	2b0f      	cmp	r3, #15
 8007b24:	d909      	bls.n	8007b3a <UART_SetConfig+0x55e>
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b2c:	d205      	bcs.n	8007b3a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60da      	str	r2, [r3, #12]
 8007b38:	e002      	b.n	8007b40 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	2200      	movs	r2, #0
 8007b54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3730      	adds	r7, #48	@ 0x30
 8007b64:	46bd      	mov	sp, r7
 8007b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b6a:	bf00      	nop
 8007b6c:	08008d28 	.word	0x08008d28
 8007b70:	00f42400 	.word	0x00f42400

08007b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	f003 0308 	and.w	r3, r3, #8
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d01a      	beq.n	8007c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c72:	d10a      	bne.n	8007c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	605a      	str	r2, [r3, #4]
  }
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b098      	sub	sp, #96	@ 0x60
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cc8:	f7fa fbde 	bl	8002488 <HAL_GetTick>
 8007ccc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d12f      	bne.n	8007d3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f88e 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d022      	beq.n	8007d3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d16:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e6      	bne.n	8007cf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e063      	b.n	8007e04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d149      	bne.n	8007dde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d52:	2200      	movs	r2, #0
 8007d54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f857 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d03c      	beq.n	8007dde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	623b      	str	r3, [r7, #32]
   return(result);
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d82:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e6      	bne.n	8007d64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007db6:	61fa      	str	r2, [r7, #28]
 8007db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	69b9      	ldr	r1, [r7, #24]
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e5      	bne.n	8007d96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e012      	b.n	8007e04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3758      	adds	r7, #88	@ 0x58
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e1c:	e04f      	b.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e24:	d04b      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e26:	f7fa fb2f 	bl	8002488 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d302      	bcc.n	8007e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e04e      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d037      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b80      	cmp	r3, #128	@ 0x80
 8007e52:	d034      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b40      	cmp	r3, #64	@ 0x40
 8007e58:	d031      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	f003 0308 	and.w	r3, r3, #8
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d110      	bne.n	8007e8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 f838 	bl	8007ee6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2208      	movs	r2, #8
 8007e7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e029      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e98:	d111      	bne.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f81e 	bl	8007ee6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e00f      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69da      	ldr	r2, [r3, #28]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	bf0c      	ite	eq
 8007ece:	2301      	moveq	r3, #1
 8007ed0:	2300      	movne	r3, #0
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d0a0      	beq.n	8007e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b095      	sub	sp, #84	@ 0x54
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e6      	bne.n	8007eee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f36:	f023 0301 	bic.w	r3, r3, #1
 8007f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3308      	adds	r3, #8
 8007f42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f4c:	e841 2300 	strex	r3, r2, [r1]
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e3      	bne.n	8007f20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d118      	bne.n	8007f92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f023 0310 	bic.w	r3, r3, #16
 8007f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f7e:	61bb      	str	r3, [r7, #24]
 8007f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6979      	ldr	r1, [r7, #20]
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e6      	bne.n	8007f60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2220      	movs	r2, #32
 8007f96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007fa6:	bf00      	nop
 8007fa8:	3754      	adds	r7, #84	@ 0x54
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d101      	bne.n	8007fc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e027      	b.n	8008018 <HAL_UARTEx_DisableFifoMode+0x66>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2224      	movs	r2, #36	@ 0x24
 8007fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0201 	bic.w	r2, r2, #1
 8007fee:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ff6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008034:	2b01      	cmp	r3, #1
 8008036:	d101      	bne.n	800803c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008038:	2302      	movs	r3, #2
 800803a:	e02d      	b.n	8008098 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2224      	movs	r2, #36	@ 0x24
 8008048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0201 	bic.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	430a      	orrs	r2, r1
 8008076:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f84f 	bl	800811c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2220      	movs	r2, #32
 800808a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d101      	bne.n	80080b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080b4:	2302      	movs	r3, #2
 80080b6:	e02d      	b.n	8008114 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2224      	movs	r2, #36	@ 0x24
 80080c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0201 	bic.w	r2, r2, #1
 80080de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f811 	bl	800811c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2220      	movs	r2, #32
 8008106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008128:	2b00      	cmp	r3, #0
 800812a:	d108      	bne.n	800813e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800813c:	e031      	b.n	80081a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800813e:	2308      	movs	r3, #8
 8008140:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008142:	2308      	movs	r3, #8
 8008144:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	0e5b      	lsrs	r3, r3, #25
 800814e:	b2db      	uxtb	r3, r3
 8008150:	f003 0307 	and.w	r3, r3, #7
 8008154:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	0f5b      	lsrs	r3, r3, #29
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f003 0307 	and.w	r3, r3, #7
 8008164:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	7b3a      	ldrb	r2, [r7, #12]
 800816a:	4911      	ldr	r1, [pc, #68]	@ (80081b0 <UARTEx_SetNbDataToProcess+0x94>)
 800816c:	5c8a      	ldrb	r2, [r1, r2]
 800816e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008172:	7b3a      	ldrb	r2, [r7, #12]
 8008174:	490f      	ldr	r1, [pc, #60]	@ (80081b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008176:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008178:	fb93 f3f2 	sdiv	r3, r3, r2
 800817c:	b29a      	uxth	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	7b7a      	ldrb	r2, [r7, #13]
 8008188:	4909      	ldr	r1, [pc, #36]	@ (80081b0 <UARTEx_SetNbDataToProcess+0x94>)
 800818a:	5c8a      	ldrb	r2, [r1, r2]
 800818c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008190:	7b7a      	ldrb	r2, [r7, #13]
 8008192:	4908      	ldr	r1, [pc, #32]	@ (80081b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008194:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008196:	fb93 f3f2 	sdiv	r3, r3, r2
 800819a:	b29a      	uxth	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80081a2:	bf00      	nop
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	08008d40 	.word	0x08008d40
 80081b4:	08008d48 	.word	0x08008d48

080081b8 <cosf>:
 80081b8:	ee10 3a10 	vmov	r3, s0
 80081bc:	b507      	push	{r0, r1, r2, lr}
 80081be:	4a1e      	ldr	r2, [pc, #120]	@ (8008238 <cosf+0x80>)
 80081c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d806      	bhi.n	80081d6 <cosf+0x1e>
 80081c8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800823c <cosf+0x84>
 80081cc:	b003      	add	sp, #12
 80081ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80081d2:	f000 b87b 	b.w	80082cc <__kernel_cosf>
 80081d6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80081da:	d304      	bcc.n	80081e6 <cosf+0x2e>
 80081dc:	ee30 0a40 	vsub.f32	s0, s0, s0
 80081e0:	b003      	add	sp, #12
 80081e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80081e6:	4668      	mov	r0, sp
 80081e8:	f000 f910 	bl	800840c <__ieee754_rem_pio2f>
 80081ec:	f000 0003 	and.w	r0, r0, #3
 80081f0:	2801      	cmp	r0, #1
 80081f2:	d009      	beq.n	8008208 <cosf+0x50>
 80081f4:	2802      	cmp	r0, #2
 80081f6:	d010      	beq.n	800821a <cosf+0x62>
 80081f8:	b9b0      	cbnz	r0, 8008228 <cosf+0x70>
 80081fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80081fe:	ed9d 0a00 	vldr	s0, [sp]
 8008202:	f000 f863 	bl	80082cc <__kernel_cosf>
 8008206:	e7eb      	b.n	80081e0 <cosf+0x28>
 8008208:	eddd 0a01 	vldr	s1, [sp, #4]
 800820c:	ed9d 0a00 	vldr	s0, [sp]
 8008210:	f000 f8b4 	bl	800837c <__kernel_sinf>
 8008214:	eeb1 0a40 	vneg.f32	s0, s0
 8008218:	e7e2      	b.n	80081e0 <cosf+0x28>
 800821a:	eddd 0a01 	vldr	s1, [sp, #4]
 800821e:	ed9d 0a00 	vldr	s0, [sp]
 8008222:	f000 f853 	bl	80082cc <__kernel_cosf>
 8008226:	e7f5      	b.n	8008214 <cosf+0x5c>
 8008228:	eddd 0a01 	vldr	s1, [sp, #4]
 800822c:	ed9d 0a00 	vldr	s0, [sp]
 8008230:	2001      	movs	r0, #1
 8008232:	f000 f8a3 	bl	800837c <__kernel_sinf>
 8008236:	e7d3      	b.n	80081e0 <cosf+0x28>
 8008238:	3f490fd8 	.word	0x3f490fd8
 800823c:	00000000 	.word	0x00000000

08008240 <sinf>:
 8008240:	ee10 3a10 	vmov	r3, s0
 8008244:	b507      	push	{r0, r1, r2, lr}
 8008246:	4a1f      	ldr	r2, [pc, #124]	@ (80082c4 <sinf+0x84>)
 8008248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800824c:	4293      	cmp	r3, r2
 800824e:	d807      	bhi.n	8008260 <sinf+0x20>
 8008250:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80082c8 <sinf+0x88>
 8008254:	2000      	movs	r0, #0
 8008256:	b003      	add	sp, #12
 8008258:	f85d eb04 	ldr.w	lr, [sp], #4
 800825c:	f000 b88e 	b.w	800837c <__kernel_sinf>
 8008260:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008264:	d304      	bcc.n	8008270 <sinf+0x30>
 8008266:	ee30 0a40 	vsub.f32	s0, s0, s0
 800826a:	b003      	add	sp, #12
 800826c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008270:	4668      	mov	r0, sp
 8008272:	f000 f8cb 	bl	800840c <__ieee754_rem_pio2f>
 8008276:	f000 0003 	and.w	r0, r0, #3
 800827a:	2801      	cmp	r0, #1
 800827c:	d00a      	beq.n	8008294 <sinf+0x54>
 800827e:	2802      	cmp	r0, #2
 8008280:	d00f      	beq.n	80082a2 <sinf+0x62>
 8008282:	b9c0      	cbnz	r0, 80082b6 <sinf+0x76>
 8008284:	eddd 0a01 	vldr	s1, [sp, #4]
 8008288:	ed9d 0a00 	vldr	s0, [sp]
 800828c:	2001      	movs	r0, #1
 800828e:	f000 f875 	bl	800837c <__kernel_sinf>
 8008292:	e7ea      	b.n	800826a <sinf+0x2a>
 8008294:	eddd 0a01 	vldr	s1, [sp, #4]
 8008298:	ed9d 0a00 	vldr	s0, [sp]
 800829c:	f000 f816 	bl	80082cc <__kernel_cosf>
 80082a0:	e7e3      	b.n	800826a <sinf+0x2a>
 80082a2:	eddd 0a01 	vldr	s1, [sp, #4]
 80082a6:	ed9d 0a00 	vldr	s0, [sp]
 80082aa:	2001      	movs	r0, #1
 80082ac:	f000 f866 	bl	800837c <__kernel_sinf>
 80082b0:	eeb1 0a40 	vneg.f32	s0, s0
 80082b4:	e7d9      	b.n	800826a <sinf+0x2a>
 80082b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80082ba:	ed9d 0a00 	vldr	s0, [sp]
 80082be:	f000 f805 	bl	80082cc <__kernel_cosf>
 80082c2:	e7f5      	b.n	80082b0 <sinf+0x70>
 80082c4:	3f490fd8 	.word	0x3f490fd8
 80082c8:	00000000 	.word	0x00000000

080082cc <__kernel_cosf>:
 80082cc:	ee10 3a10 	vmov	r3, s0
 80082d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082d4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80082d8:	eef0 6a40 	vmov.f32	s13, s0
 80082dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80082e0:	d204      	bcs.n	80082ec <__kernel_cosf+0x20>
 80082e2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80082e6:	ee17 2a90 	vmov	r2, s15
 80082ea:	b342      	cbz	r2, 800833e <__kernel_cosf+0x72>
 80082ec:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80082f0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800835c <__kernel_cosf+0x90>
 80082f4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8008360 <__kernel_cosf+0x94>
 80082f8:	4a1a      	ldr	r2, [pc, #104]	@ (8008364 <__kernel_cosf+0x98>)
 80082fa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80082fe:	4293      	cmp	r3, r2
 8008300:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008368 <__kernel_cosf+0x9c>
 8008304:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008308:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800836c <__kernel_cosf+0xa0>
 800830c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008310:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8008370 <__kernel_cosf+0xa4>
 8008314:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008318:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8008374 <__kernel_cosf+0xa8>
 800831c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008320:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8008324:	ee26 6a07 	vmul.f32	s12, s12, s14
 8008328:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800832c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8008330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008334:	d804      	bhi.n	8008340 <__kernel_cosf+0x74>
 8008336:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800833a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800833e:	4770      	bx	lr
 8008340:	4a0d      	ldr	r2, [pc, #52]	@ (8008378 <__kernel_cosf+0xac>)
 8008342:	4293      	cmp	r3, r2
 8008344:	bf9a      	itte	ls
 8008346:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800834a:	ee07 3a10 	vmovls	s14, r3
 800834e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8008352:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800835a:	e7ec      	b.n	8008336 <__kernel_cosf+0x6a>
 800835c:	ad47d74e 	.word	0xad47d74e
 8008360:	310f74f6 	.word	0x310f74f6
 8008364:	3e999999 	.word	0x3e999999
 8008368:	b493f27c 	.word	0xb493f27c
 800836c:	37d00d01 	.word	0x37d00d01
 8008370:	bab60b61 	.word	0xbab60b61
 8008374:	3d2aaaab 	.word	0x3d2aaaab
 8008378:	3f480000 	.word	0x3f480000

0800837c <__kernel_sinf>:
 800837c:	ee10 3a10 	vmov	r3, s0
 8008380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008384:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008388:	d204      	bcs.n	8008394 <__kernel_sinf+0x18>
 800838a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800838e:	ee17 3a90 	vmov	r3, s15
 8008392:	b35b      	cbz	r3, 80083ec <__kernel_sinf+0x70>
 8008394:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008398:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80083f0 <__kernel_sinf+0x74>
 800839c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80083f4 <__kernel_sinf+0x78>
 80083a0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80083a4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80083f8 <__kernel_sinf+0x7c>
 80083a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80083ac:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80083fc <__kernel_sinf+0x80>
 80083b0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80083b4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008400 <__kernel_sinf+0x84>
 80083b8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80083bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80083c0:	b930      	cbnz	r0, 80083d0 <__kernel_sinf+0x54>
 80083c2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8008404 <__kernel_sinf+0x88>
 80083c6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80083ca:	eea6 0a26 	vfma.f32	s0, s12, s13
 80083ce:	4770      	bx	lr
 80083d0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80083d4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80083d8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80083dc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80083e0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8008408 <__kernel_sinf+0x8c>
 80083e4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80083e8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	2f2ec9d3 	.word	0x2f2ec9d3
 80083f4:	b2d72f34 	.word	0xb2d72f34
 80083f8:	3638ef1b 	.word	0x3638ef1b
 80083fc:	b9500d01 	.word	0xb9500d01
 8008400:	3c088889 	.word	0x3c088889
 8008404:	be2aaaab 	.word	0xbe2aaaab
 8008408:	3e2aaaab 	.word	0x3e2aaaab

0800840c <__ieee754_rem_pio2f>:
 800840c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800840e:	ee10 6a10 	vmov	r6, s0
 8008412:	4b88      	ldr	r3, [pc, #544]	@ (8008634 <__ieee754_rem_pio2f+0x228>)
 8008414:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8008418:	429d      	cmp	r5, r3
 800841a:	b087      	sub	sp, #28
 800841c:	4604      	mov	r4, r0
 800841e:	d805      	bhi.n	800842c <__ieee754_rem_pio2f+0x20>
 8008420:	2300      	movs	r3, #0
 8008422:	ed80 0a00 	vstr	s0, [r0]
 8008426:	6043      	str	r3, [r0, #4]
 8008428:	2000      	movs	r0, #0
 800842a:	e022      	b.n	8008472 <__ieee754_rem_pio2f+0x66>
 800842c:	4b82      	ldr	r3, [pc, #520]	@ (8008638 <__ieee754_rem_pio2f+0x22c>)
 800842e:	429d      	cmp	r5, r3
 8008430:	d83a      	bhi.n	80084a8 <__ieee754_rem_pio2f+0x9c>
 8008432:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8008436:	2e00      	cmp	r6, #0
 8008438:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800863c <__ieee754_rem_pio2f+0x230>
 800843c:	4a80      	ldr	r2, [pc, #512]	@ (8008640 <__ieee754_rem_pio2f+0x234>)
 800843e:	f023 030f 	bic.w	r3, r3, #15
 8008442:	dd18      	ble.n	8008476 <__ieee754_rem_pio2f+0x6a>
 8008444:	4293      	cmp	r3, r2
 8008446:	ee70 7a47 	vsub.f32	s15, s0, s14
 800844a:	bf09      	itett	eq
 800844c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8008644 <__ieee754_rem_pio2f+0x238>
 8008450:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8008648 <__ieee754_rem_pio2f+0x23c>
 8008454:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800864c <__ieee754_rem_pio2f+0x240>
 8008458:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800845c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8008460:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008464:	ed80 7a00 	vstr	s14, [r0]
 8008468:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800846c:	edc0 7a01 	vstr	s15, [r0, #4]
 8008470:	2001      	movs	r0, #1
 8008472:	b007      	add	sp, #28
 8008474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008476:	4293      	cmp	r3, r2
 8008478:	ee70 7a07 	vadd.f32	s15, s0, s14
 800847c:	bf09      	itett	eq
 800847e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8008644 <__ieee754_rem_pio2f+0x238>
 8008482:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8008648 <__ieee754_rem_pio2f+0x23c>
 8008486:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800864c <__ieee754_rem_pio2f+0x240>
 800848a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800848e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008492:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008496:	ed80 7a00 	vstr	s14, [r0]
 800849a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800849e:	edc0 7a01 	vstr	s15, [r0, #4]
 80084a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084a6:	e7e4      	b.n	8008472 <__ieee754_rem_pio2f+0x66>
 80084a8:	4b69      	ldr	r3, [pc, #420]	@ (8008650 <__ieee754_rem_pio2f+0x244>)
 80084aa:	429d      	cmp	r5, r3
 80084ac:	d873      	bhi.n	8008596 <__ieee754_rem_pio2f+0x18a>
 80084ae:	f000 f8dd 	bl	800866c <fabsf>
 80084b2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8008654 <__ieee754_rem_pio2f+0x248>
 80084b6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80084ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80084be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084c6:	ee17 0a90 	vmov	r0, s15
 80084ca:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800863c <__ieee754_rem_pio2f+0x230>
 80084ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 80084d2:	281f      	cmp	r0, #31
 80084d4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8008648 <__ieee754_rem_pio2f+0x23c>
 80084d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084dc:	eeb1 6a47 	vneg.f32	s12, s14
 80084e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80084e4:	ee16 1a90 	vmov	r1, s13
 80084e8:	dc09      	bgt.n	80084fe <__ieee754_rem_pio2f+0xf2>
 80084ea:	4a5b      	ldr	r2, [pc, #364]	@ (8008658 <__ieee754_rem_pio2f+0x24c>)
 80084ec:	1e47      	subs	r7, r0, #1
 80084ee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80084f2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80084f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d107      	bne.n	800850e <__ieee754_rem_pio2f+0x102>
 80084fe:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8008502:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8008506:	2a08      	cmp	r2, #8
 8008508:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800850c:	dc14      	bgt.n	8008538 <__ieee754_rem_pio2f+0x12c>
 800850e:	6021      	str	r1, [r4, #0]
 8008510:	ed94 7a00 	vldr	s14, [r4]
 8008514:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008518:	2e00      	cmp	r6, #0
 800851a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800851e:	ed84 0a01 	vstr	s0, [r4, #4]
 8008522:	daa6      	bge.n	8008472 <__ieee754_rem_pio2f+0x66>
 8008524:	eeb1 7a47 	vneg.f32	s14, s14
 8008528:	eeb1 0a40 	vneg.f32	s0, s0
 800852c:	ed84 7a00 	vstr	s14, [r4]
 8008530:	ed84 0a01 	vstr	s0, [r4, #4]
 8008534:	4240      	negs	r0, r0
 8008536:	e79c      	b.n	8008472 <__ieee754_rem_pio2f+0x66>
 8008538:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8008644 <__ieee754_rem_pio2f+0x238>
 800853c:	eef0 6a40 	vmov.f32	s13, s0
 8008540:	eee6 6a25 	vfma.f32	s13, s12, s11
 8008544:	ee70 7a66 	vsub.f32	s15, s0, s13
 8008548:	eee6 7a25 	vfma.f32	s15, s12, s11
 800854c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800864c <__ieee754_rem_pio2f+0x240>
 8008550:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008554:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008558:	ee15 2a90 	vmov	r2, s11
 800855c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008560:	1a5b      	subs	r3, r3, r1
 8008562:	2b19      	cmp	r3, #25
 8008564:	dc04      	bgt.n	8008570 <__ieee754_rem_pio2f+0x164>
 8008566:	edc4 5a00 	vstr	s11, [r4]
 800856a:	eeb0 0a66 	vmov.f32	s0, s13
 800856e:	e7cf      	b.n	8008510 <__ieee754_rem_pio2f+0x104>
 8008570:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800865c <__ieee754_rem_pio2f+0x250>
 8008574:	eeb0 0a66 	vmov.f32	s0, s13
 8008578:	eea6 0a25 	vfma.f32	s0, s12, s11
 800857c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008580:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8008660 <__ieee754_rem_pio2f+0x254>
 8008584:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008588:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800858c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008590:	ed84 7a00 	vstr	s14, [r4]
 8008594:	e7bc      	b.n	8008510 <__ieee754_rem_pio2f+0x104>
 8008596:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800859a:	d306      	bcc.n	80085aa <__ieee754_rem_pio2f+0x19e>
 800859c:	ee70 7a40 	vsub.f32	s15, s0, s0
 80085a0:	edc0 7a01 	vstr	s15, [r0, #4]
 80085a4:	edc0 7a00 	vstr	s15, [r0]
 80085a8:	e73e      	b.n	8008428 <__ieee754_rem_pio2f+0x1c>
 80085aa:	15ea      	asrs	r2, r5, #23
 80085ac:	3a86      	subs	r2, #134	@ 0x86
 80085ae:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80085b2:	ee07 3a90 	vmov	s15, r3
 80085b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80085ba:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8008664 <__ieee754_rem_pio2f+0x258>
 80085be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80085c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085c6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80085ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80085ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80085d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80085d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085da:	ed8d 7a04 	vstr	s14, [sp, #16]
 80085de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80085e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ea:	edcd 7a05 	vstr	s15, [sp, #20]
 80085ee:	d11e      	bne.n	800862e <__ieee754_rem_pio2f+0x222>
 80085f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80085f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f8:	bf0c      	ite	eq
 80085fa:	2301      	moveq	r3, #1
 80085fc:	2302      	movne	r3, #2
 80085fe:	491a      	ldr	r1, [pc, #104]	@ (8008668 <__ieee754_rem_pio2f+0x25c>)
 8008600:	9101      	str	r1, [sp, #4]
 8008602:	2102      	movs	r1, #2
 8008604:	9100      	str	r1, [sp, #0]
 8008606:	a803      	add	r0, sp, #12
 8008608:	4621      	mov	r1, r4
 800860a:	f000 f837 	bl	800867c <__kernel_rem_pio2f>
 800860e:	2e00      	cmp	r6, #0
 8008610:	f6bf af2f 	bge.w	8008472 <__ieee754_rem_pio2f+0x66>
 8008614:	edd4 7a00 	vldr	s15, [r4]
 8008618:	eef1 7a67 	vneg.f32	s15, s15
 800861c:	edc4 7a00 	vstr	s15, [r4]
 8008620:	edd4 7a01 	vldr	s15, [r4, #4]
 8008624:	eef1 7a67 	vneg.f32	s15, s15
 8008628:	edc4 7a01 	vstr	s15, [r4, #4]
 800862c:	e782      	b.n	8008534 <__ieee754_rem_pio2f+0x128>
 800862e:	2303      	movs	r3, #3
 8008630:	e7e5      	b.n	80085fe <__ieee754_rem_pio2f+0x1f2>
 8008632:	bf00      	nop
 8008634:	3f490fd8 	.word	0x3f490fd8
 8008638:	4016cbe3 	.word	0x4016cbe3
 800863c:	3fc90f80 	.word	0x3fc90f80
 8008640:	3fc90fd0 	.word	0x3fc90fd0
 8008644:	37354400 	.word	0x37354400
 8008648:	37354443 	.word	0x37354443
 800864c:	2e85a308 	.word	0x2e85a308
 8008650:	43490f80 	.word	0x43490f80
 8008654:	3f22f984 	.word	0x3f22f984
 8008658:	08008d50 	.word	0x08008d50
 800865c:	2e85a300 	.word	0x2e85a300
 8008660:	248d3132 	.word	0x248d3132
 8008664:	43800000 	.word	0x43800000
 8008668:	08008dd0 	.word	0x08008dd0

0800866c <fabsf>:
 800866c:	ee10 3a10 	vmov	r3, s0
 8008670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008674:	ee00 3a10 	vmov	s0, r3
 8008678:	4770      	bx	lr
	...

0800867c <__kernel_rem_pio2f>:
 800867c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	ed2d 8b04 	vpush	{d8-d9}
 8008684:	b0d9      	sub	sp, #356	@ 0x164
 8008686:	4690      	mov	r8, r2
 8008688:	9001      	str	r0, [sp, #4]
 800868a:	4ab6      	ldr	r2, [pc, #728]	@ (8008964 <__kernel_rem_pio2f+0x2e8>)
 800868c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800868e:	f118 0f04 	cmn.w	r8, #4
 8008692:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8008696:	460f      	mov	r7, r1
 8008698:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800869c:	db26      	blt.n	80086ec <__kernel_rem_pio2f+0x70>
 800869e:	f1b8 0203 	subs.w	r2, r8, #3
 80086a2:	bf48      	it	mi
 80086a4:	f108 0204 	addmi.w	r2, r8, #4
 80086a8:	10d2      	asrs	r2, r2, #3
 80086aa:	1c55      	adds	r5, r2, #1
 80086ac:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80086ae:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8008974 <__kernel_rem_pio2f+0x2f8>
 80086b2:	00e8      	lsls	r0, r5, #3
 80086b4:	eba2 060b 	sub.w	r6, r2, fp
 80086b8:	9002      	str	r0, [sp, #8]
 80086ba:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80086be:	eb0a 0c0b 	add.w	ip, sl, fp
 80086c2:	ac1c      	add	r4, sp, #112	@ 0x70
 80086c4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80086c8:	2000      	movs	r0, #0
 80086ca:	4560      	cmp	r0, ip
 80086cc:	dd10      	ble.n	80086f0 <__kernel_rem_pio2f+0x74>
 80086ce:	a91c      	add	r1, sp, #112	@ 0x70
 80086d0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80086d4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80086d8:	2600      	movs	r6, #0
 80086da:	4556      	cmp	r6, sl
 80086dc:	dc24      	bgt.n	8008728 <__kernel_rem_pio2f+0xac>
 80086de:	f8dd e004 	ldr.w	lr, [sp, #4]
 80086e2:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8008974 <__kernel_rem_pio2f+0x2f8>
 80086e6:	4684      	mov	ip, r0
 80086e8:	2400      	movs	r4, #0
 80086ea:	e016      	b.n	800871a <__kernel_rem_pio2f+0x9e>
 80086ec:	2200      	movs	r2, #0
 80086ee:	e7dc      	b.n	80086aa <__kernel_rem_pio2f+0x2e>
 80086f0:	42c6      	cmn	r6, r0
 80086f2:	bf5d      	ittte	pl
 80086f4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80086f8:	ee07 1a90 	vmovpl	s15, r1
 80086fc:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008700:	eef0 7a47 	vmovmi.f32	s15, s14
 8008704:	ece4 7a01 	vstmia	r4!, {s15}
 8008708:	3001      	adds	r0, #1
 800870a:	e7de      	b.n	80086ca <__kernel_rem_pio2f+0x4e>
 800870c:	ecfe 6a01 	vldmia	lr!, {s13}
 8008710:	ed3c 7a01 	vldmdb	ip!, {s14}
 8008714:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008718:	3401      	adds	r4, #1
 800871a:	455c      	cmp	r4, fp
 800871c:	ddf6      	ble.n	800870c <__kernel_rem_pio2f+0x90>
 800871e:	ece9 7a01 	vstmia	r9!, {s15}
 8008722:	3601      	adds	r6, #1
 8008724:	3004      	adds	r0, #4
 8008726:	e7d8      	b.n	80086da <__kernel_rem_pio2f+0x5e>
 8008728:	a908      	add	r1, sp, #32
 800872a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800872e:	9104      	str	r1, [sp, #16]
 8008730:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8008732:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8008970 <__kernel_rem_pio2f+0x2f4>
 8008736:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800896c <__kernel_rem_pio2f+0x2f0>
 800873a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800873e:	9203      	str	r2, [sp, #12]
 8008740:	4654      	mov	r4, sl
 8008742:	00a2      	lsls	r2, r4, #2
 8008744:	9205      	str	r2, [sp, #20]
 8008746:	aa58      	add	r2, sp, #352	@ 0x160
 8008748:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800874c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8008750:	a944      	add	r1, sp, #272	@ 0x110
 8008752:	aa08      	add	r2, sp, #32
 8008754:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8008758:	4694      	mov	ip, r2
 800875a:	4626      	mov	r6, r4
 800875c:	2e00      	cmp	r6, #0
 800875e:	dc4c      	bgt.n	80087fa <__kernel_rem_pio2f+0x17e>
 8008760:	4628      	mov	r0, r5
 8008762:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008766:	f000 fa35 	bl	8008bd4 <scalbnf>
 800876a:	eeb0 8a40 	vmov.f32	s16, s0
 800876e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8008772:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008776:	f000 f9e9 	bl	8008b4c <floorf>
 800877a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800877e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008782:	2d00      	cmp	r5, #0
 8008784:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008788:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800878c:	ee17 9a90 	vmov	r9, s15
 8008790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008794:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008798:	dd41      	ble.n	800881e <__kernel_rem_pio2f+0x1a2>
 800879a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800879e:	a908      	add	r1, sp, #32
 80087a0:	f1c5 0e08 	rsb	lr, r5, #8
 80087a4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80087a8:	fa46 f00e 	asr.w	r0, r6, lr
 80087ac:	4481      	add	r9, r0
 80087ae:	fa00 f00e 	lsl.w	r0, r0, lr
 80087b2:	1a36      	subs	r6, r6, r0
 80087b4:	f1c5 0007 	rsb	r0, r5, #7
 80087b8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80087bc:	4106      	asrs	r6, r0
 80087be:	2e00      	cmp	r6, #0
 80087c0:	dd3c      	ble.n	800883c <__kernel_rem_pio2f+0x1c0>
 80087c2:	f04f 0e00 	mov.w	lr, #0
 80087c6:	f109 0901 	add.w	r9, r9, #1
 80087ca:	4670      	mov	r0, lr
 80087cc:	4574      	cmp	r4, lr
 80087ce:	dc68      	bgt.n	80088a2 <__kernel_rem_pio2f+0x226>
 80087d0:	2d00      	cmp	r5, #0
 80087d2:	dd03      	ble.n	80087dc <__kernel_rem_pio2f+0x160>
 80087d4:	2d01      	cmp	r5, #1
 80087d6:	d074      	beq.n	80088c2 <__kernel_rem_pio2f+0x246>
 80087d8:	2d02      	cmp	r5, #2
 80087da:	d07d      	beq.n	80088d8 <__kernel_rem_pio2f+0x25c>
 80087dc:	2e02      	cmp	r6, #2
 80087de:	d12d      	bne.n	800883c <__kernel_rem_pio2f+0x1c0>
 80087e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80087e4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80087e8:	b340      	cbz	r0, 800883c <__kernel_rem_pio2f+0x1c0>
 80087ea:	4628      	mov	r0, r5
 80087ec:	9306      	str	r3, [sp, #24]
 80087ee:	f000 f9f1 	bl	8008bd4 <scalbnf>
 80087f2:	9b06      	ldr	r3, [sp, #24]
 80087f4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80087f8:	e020      	b.n	800883c <__kernel_rem_pio2f+0x1c0>
 80087fa:	ee60 7a28 	vmul.f32	s15, s0, s17
 80087fe:	3e01      	subs	r6, #1
 8008800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008808:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800880c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008810:	ecac 0a01 	vstmia	ip!, {s0}
 8008814:	ed30 0a01 	vldmdb	r0!, {s0}
 8008818:	ee37 0a80 	vadd.f32	s0, s15, s0
 800881c:	e79e      	b.n	800875c <__kernel_rem_pio2f+0xe0>
 800881e:	d105      	bne.n	800882c <__kernel_rem_pio2f+0x1b0>
 8008820:	1e60      	subs	r0, r4, #1
 8008822:	a908      	add	r1, sp, #32
 8008824:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8008828:	11f6      	asrs	r6, r6, #7
 800882a:	e7c8      	b.n	80087be <__kernel_rem_pio2f+0x142>
 800882c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008830:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008838:	da31      	bge.n	800889e <__kernel_rem_pio2f+0x222>
 800883a:	2600      	movs	r6, #0
 800883c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008844:	f040 8098 	bne.w	8008978 <__kernel_rem_pio2f+0x2fc>
 8008848:	1e60      	subs	r0, r4, #1
 800884a:	2200      	movs	r2, #0
 800884c:	4550      	cmp	r0, sl
 800884e:	da4b      	bge.n	80088e8 <__kernel_rem_pio2f+0x26c>
 8008850:	2a00      	cmp	r2, #0
 8008852:	d065      	beq.n	8008920 <__kernel_rem_pio2f+0x2a4>
 8008854:	3c01      	subs	r4, #1
 8008856:	ab08      	add	r3, sp, #32
 8008858:	3d08      	subs	r5, #8
 800885a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d0f8      	beq.n	8008854 <__kernel_rem_pio2f+0x1d8>
 8008862:	4628      	mov	r0, r5
 8008864:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008868:	f000 f9b4 	bl	8008bd4 <scalbnf>
 800886c:	1c63      	adds	r3, r4, #1
 800886e:	aa44      	add	r2, sp, #272	@ 0x110
 8008870:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8008970 <__kernel_rem_pio2f+0x2f4>
 8008874:	0099      	lsls	r1, r3, #2
 8008876:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800887a:	4623      	mov	r3, r4
 800887c:	2b00      	cmp	r3, #0
 800887e:	f280 80a9 	bge.w	80089d4 <__kernel_rem_pio2f+0x358>
 8008882:	4623      	mov	r3, r4
 8008884:	2b00      	cmp	r3, #0
 8008886:	f2c0 80c7 	blt.w	8008a18 <__kernel_rem_pio2f+0x39c>
 800888a:	aa44      	add	r2, sp, #272	@ 0x110
 800888c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008890:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8008968 <__kernel_rem_pio2f+0x2ec>
 8008894:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8008974 <__kernel_rem_pio2f+0x2f8>
 8008898:	2000      	movs	r0, #0
 800889a:	1ae2      	subs	r2, r4, r3
 800889c:	e0b1      	b.n	8008a02 <__kernel_rem_pio2f+0x386>
 800889e:	2602      	movs	r6, #2
 80088a0:	e78f      	b.n	80087c2 <__kernel_rem_pio2f+0x146>
 80088a2:	f852 1b04 	ldr.w	r1, [r2], #4
 80088a6:	b948      	cbnz	r0, 80088bc <__kernel_rem_pio2f+0x240>
 80088a8:	b121      	cbz	r1, 80088b4 <__kernel_rem_pio2f+0x238>
 80088aa:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80088ae:	f842 1c04 	str.w	r1, [r2, #-4]
 80088b2:	2101      	movs	r1, #1
 80088b4:	f10e 0e01 	add.w	lr, lr, #1
 80088b8:	4608      	mov	r0, r1
 80088ba:	e787      	b.n	80087cc <__kernel_rem_pio2f+0x150>
 80088bc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80088c0:	e7f5      	b.n	80088ae <__kernel_rem_pio2f+0x232>
 80088c2:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80088c6:	aa08      	add	r2, sp, #32
 80088c8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80088cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80088d0:	a908      	add	r1, sp, #32
 80088d2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80088d6:	e781      	b.n	80087dc <__kernel_rem_pio2f+0x160>
 80088d8:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80088dc:	aa08      	add	r2, sp, #32
 80088de:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80088e2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80088e6:	e7f3      	b.n	80088d0 <__kernel_rem_pio2f+0x254>
 80088e8:	a908      	add	r1, sp, #32
 80088ea:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80088ee:	3801      	subs	r0, #1
 80088f0:	430a      	orrs	r2, r1
 80088f2:	e7ab      	b.n	800884c <__kernel_rem_pio2f+0x1d0>
 80088f4:	3201      	adds	r2, #1
 80088f6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80088fa:	2e00      	cmp	r6, #0
 80088fc:	d0fa      	beq.n	80088f4 <__kernel_rem_pio2f+0x278>
 80088fe:	9905      	ldr	r1, [sp, #20]
 8008900:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8008904:	eb0d 0001 	add.w	r0, sp, r1
 8008908:	18e6      	adds	r6, r4, r3
 800890a:	a91c      	add	r1, sp, #112	@ 0x70
 800890c:	f104 0c01 	add.w	ip, r4, #1
 8008910:	384c      	subs	r0, #76	@ 0x4c
 8008912:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8008916:	4422      	add	r2, r4
 8008918:	4562      	cmp	r2, ip
 800891a:	da04      	bge.n	8008926 <__kernel_rem_pio2f+0x2aa>
 800891c:	4614      	mov	r4, r2
 800891e:	e710      	b.n	8008742 <__kernel_rem_pio2f+0xc6>
 8008920:	9804      	ldr	r0, [sp, #16]
 8008922:	2201      	movs	r2, #1
 8008924:	e7e7      	b.n	80088f6 <__kernel_rem_pio2f+0x27a>
 8008926:	9903      	ldr	r1, [sp, #12]
 8008928:	f8dd e004 	ldr.w	lr, [sp, #4]
 800892c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8008930:	9105      	str	r1, [sp, #20]
 8008932:	ee07 1a90 	vmov	s15, r1
 8008936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800893a:	2400      	movs	r4, #0
 800893c:	ece6 7a01 	vstmia	r6!, {s15}
 8008940:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8008974 <__kernel_rem_pio2f+0x2f8>
 8008944:	46b1      	mov	r9, r6
 8008946:	455c      	cmp	r4, fp
 8008948:	dd04      	ble.n	8008954 <__kernel_rem_pio2f+0x2d8>
 800894a:	ece0 7a01 	vstmia	r0!, {s15}
 800894e:	f10c 0c01 	add.w	ip, ip, #1
 8008952:	e7e1      	b.n	8008918 <__kernel_rem_pio2f+0x29c>
 8008954:	ecfe 6a01 	vldmia	lr!, {s13}
 8008958:	ed39 7a01 	vldmdb	r9!, {s14}
 800895c:	3401      	adds	r4, #1
 800895e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008962:	e7f0      	b.n	8008946 <__kernel_rem_pio2f+0x2ca>
 8008964:	08009114 	.word	0x08009114
 8008968:	080090e8 	.word	0x080090e8
 800896c:	43800000 	.word	0x43800000
 8008970:	3b800000 	.word	0x3b800000
 8008974:	00000000 	.word	0x00000000
 8008978:	9b02      	ldr	r3, [sp, #8]
 800897a:	eeb0 0a48 	vmov.f32	s0, s16
 800897e:	eba3 0008 	sub.w	r0, r3, r8
 8008982:	f000 f927 	bl	8008bd4 <scalbnf>
 8008986:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800896c <__kernel_rem_pio2f+0x2f0>
 800898a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800898e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008992:	db19      	blt.n	80089c8 <__kernel_rem_pio2f+0x34c>
 8008994:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8008970 <__kernel_rem_pio2f+0x2f4>
 8008998:	ee60 7a27 	vmul.f32	s15, s0, s15
 800899c:	aa08      	add	r2, sp, #32
 800899e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089a2:	3508      	adds	r5, #8
 80089a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089a8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80089ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80089b4:	ee10 3a10 	vmov	r3, s0
 80089b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80089bc:	ee17 3a90 	vmov	r3, s15
 80089c0:	3401      	adds	r4, #1
 80089c2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80089c6:	e74c      	b.n	8008862 <__kernel_rem_pio2f+0x1e6>
 80089c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80089cc:	aa08      	add	r2, sp, #32
 80089ce:	ee10 3a10 	vmov	r3, s0
 80089d2:	e7f6      	b.n	80089c2 <__kernel_rem_pio2f+0x346>
 80089d4:	a808      	add	r0, sp, #32
 80089d6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80089da:	9001      	str	r0, [sp, #4]
 80089dc:	ee07 0a90 	vmov	s15, r0
 80089e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089e4:	3b01      	subs	r3, #1
 80089e6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80089ea:	ee20 0a07 	vmul.f32	s0, s0, s14
 80089ee:	ed62 7a01 	vstmdb	r2!, {s15}
 80089f2:	e743      	b.n	800887c <__kernel_rem_pio2f+0x200>
 80089f4:	ecfc 6a01 	vldmia	ip!, {s13}
 80089f8:	ecb5 7a01 	vldmia	r5!, {s14}
 80089fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008a00:	3001      	adds	r0, #1
 8008a02:	4550      	cmp	r0, sl
 8008a04:	dc01      	bgt.n	8008a0a <__kernel_rem_pio2f+0x38e>
 8008a06:	4290      	cmp	r0, r2
 8008a08:	ddf4      	ble.n	80089f4 <__kernel_rem_pio2f+0x378>
 8008a0a:	a858      	add	r0, sp, #352	@ 0x160
 8008a0c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008a10:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8008a14:	3b01      	subs	r3, #1
 8008a16:	e735      	b.n	8008884 <__kernel_rem_pio2f+0x208>
 8008a18:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	dc09      	bgt.n	8008a32 <__kernel_rem_pio2f+0x3b6>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dc27      	bgt.n	8008a72 <__kernel_rem_pio2f+0x3f6>
 8008a22:	d040      	beq.n	8008aa6 <__kernel_rem_pio2f+0x42a>
 8008a24:	f009 0007 	and.w	r0, r9, #7
 8008a28:	b059      	add	sp, #356	@ 0x164
 8008a2a:	ecbd 8b04 	vpop	{d8-d9}
 8008a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a32:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008a34:	2b03      	cmp	r3, #3
 8008a36:	d1f5      	bne.n	8008a24 <__kernel_rem_pio2f+0x3a8>
 8008a38:	aa30      	add	r2, sp, #192	@ 0xc0
 8008a3a:	1f0b      	subs	r3, r1, #4
 8008a3c:	4413      	add	r3, r2
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4620      	mov	r0, r4
 8008a42:	2800      	cmp	r0, #0
 8008a44:	dc50      	bgt.n	8008ae8 <__kernel_rem_pio2f+0x46c>
 8008a46:	4622      	mov	r2, r4
 8008a48:	2a01      	cmp	r2, #1
 8008a4a:	dc5d      	bgt.n	8008b08 <__kernel_rem_pio2f+0x48c>
 8008a4c:	ab30      	add	r3, sp, #192	@ 0xc0
 8008a4e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8008974 <__kernel_rem_pio2f+0x2f8>
 8008a52:	440b      	add	r3, r1
 8008a54:	2c01      	cmp	r4, #1
 8008a56:	dc67      	bgt.n	8008b28 <__kernel_rem_pio2f+0x4ac>
 8008a58:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8008a5c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	d167      	bne.n	8008b34 <__kernel_rem_pio2f+0x4b8>
 8008a64:	edc7 6a00 	vstr	s13, [r7]
 8008a68:	ed87 7a01 	vstr	s14, [r7, #4]
 8008a6c:	edc7 7a02 	vstr	s15, [r7, #8]
 8008a70:	e7d8      	b.n	8008a24 <__kernel_rem_pio2f+0x3a8>
 8008a72:	ab30      	add	r3, sp, #192	@ 0xc0
 8008a74:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8008974 <__kernel_rem_pio2f+0x2f8>
 8008a78:	440b      	add	r3, r1
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	da24      	bge.n	8008aca <__kernel_rem_pio2f+0x44e>
 8008a80:	b34e      	cbz	r6, 8008ad6 <__kernel_rem_pio2f+0x45a>
 8008a82:	eef1 7a47 	vneg.f32	s15, s14
 8008a86:	edc7 7a00 	vstr	s15, [r7]
 8008a8a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8008a8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a92:	aa31      	add	r2, sp, #196	@ 0xc4
 8008a94:	2301      	movs	r3, #1
 8008a96:	429c      	cmp	r4, r3
 8008a98:	da20      	bge.n	8008adc <__kernel_rem_pio2f+0x460>
 8008a9a:	b10e      	cbz	r6, 8008aa0 <__kernel_rem_pio2f+0x424>
 8008a9c:	eef1 7a67 	vneg.f32	s15, s15
 8008aa0:	edc7 7a01 	vstr	s15, [r7, #4]
 8008aa4:	e7be      	b.n	8008a24 <__kernel_rem_pio2f+0x3a8>
 8008aa6:	ab30      	add	r3, sp, #192	@ 0xc0
 8008aa8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8008974 <__kernel_rem_pio2f+0x2f8>
 8008aac:	440b      	add	r3, r1
 8008aae:	2c00      	cmp	r4, #0
 8008ab0:	da05      	bge.n	8008abe <__kernel_rem_pio2f+0x442>
 8008ab2:	b10e      	cbz	r6, 8008ab8 <__kernel_rem_pio2f+0x43c>
 8008ab4:	eef1 7a67 	vneg.f32	s15, s15
 8008ab8:	edc7 7a00 	vstr	s15, [r7]
 8008abc:	e7b2      	b.n	8008a24 <__kernel_rem_pio2f+0x3a8>
 8008abe:	ed33 7a01 	vldmdb	r3!, {s14}
 8008ac2:	3c01      	subs	r4, #1
 8008ac4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ac8:	e7f1      	b.n	8008aae <__kernel_rem_pio2f+0x432>
 8008aca:	ed73 7a01 	vldmdb	r3!, {s15}
 8008ace:	3a01      	subs	r2, #1
 8008ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ad4:	e7d2      	b.n	8008a7c <__kernel_rem_pio2f+0x400>
 8008ad6:	eef0 7a47 	vmov.f32	s15, s14
 8008ada:	e7d4      	b.n	8008a86 <__kernel_rem_pio2f+0x40a>
 8008adc:	ecb2 7a01 	vldmia	r2!, {s14}
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ae6:	e7d6      	b.n	8008a96 <__kernel_rem_pio2f+0x41a>
 8008ae8:	ed72 7a01 	vldmdb	r2!, {s15}
 8008aec:	edd2 6a01 	vldr	s13, [r2, #4]
 8008af0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008af4:	3801      	subs	r0, #1
 8008af6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008afa:	ed82 7a00 	vstr	s14, [r2]
 8008afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b02:	edc2 7a01 	vstr	s15, [r2, #4]
 8008b06:	e79c      	b.n	8008a42 <__kernel_rem_pio2f+0x3c6>
 8008b08:	ed73 7a01 	vldmdb	r3!, {s15}
 8008b0c:	edd3 6a01 	vldr	s13, [r3, #4]
 8008b10:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008b14:	3a01      	subs	r2, #1
 8008b16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b1a:	ed83 7a00 	vstr	s14, [r3]
 8008b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b22:	edc3 7a01 	vstr	s15, [r3, #4]
 8008b26:	e78f      	b.n	8008a48 <__kernel_rem_pio2f+0x3cc>
 8008b28:	ed33 7a01 	vldmdb	r3!, {s14}
 8008b2c:	3c01      	subs	r4, #1
 8008b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b32:	e78f      	b.n	8008a54 <__kernel_rem_pio2f+0x3d8>
 8008b34:	eef1 6a66 	vneg.f32	s13, s13
 8008b38:	eeb1 7a47 	vneg.f32	s14, s14
 8008b3c:	edc7 6a00 	vstr	s13, [r7]
 8008b40:	ed87 7a01 	vstr	s14, [r7, #4]
 8008b44:	eef1 7a67 	vneg.f32	s15, s15
 8008b48:	e790      	b.n	8008a6c <__kernel_rem_pio2f+0x3f0>
 8008b4a:	bf00      	nop

08008b4c <floorf>:
 8008b4c:	ee10 3a10 	vmov	r3, s0
 8008b50:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008b54:	3a7f      	subs	r2, #127	@ 0x7f
 8008b56:	2a16      	cmp	r2, #22
 8008b58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b5c:	dc2b      	bgt.n	8008bb6 <floorf+0x6a>
 8008b5e:	2a00      	cmp	r2, #0
 8008b60:	da12      	bge.n	8008b88 <floorf+0x3c>
 8008b62:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008bc8 <floorf+0x7c>
 8008b66:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008b6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b72:	dd06      	ble.n	8008b82 <floorf+0x36>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	da24      	bge.n	8008bc2 <floorf+0x76>
 8008b78:	2900      	cmp	r1, #0
 8008b7a:	4b14      	ldr	r3, [pc, #80]	@ (8008bcc <floorf+0x80>)
 8008b7c:	bf08      	it	eq
 8008b7e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8008b82:	ee00 3a10 	vmov	s0, r3
 8008b86:	4770      	bx	lr
 8008b88:	4911      	ldr	r1, [pc, #68]	@ (8008bd0 <floorf+0x84>)
 8008b8a:	4111      	asrs	r1, r2
 8008b8c:	420b      	tst	r3, r1
 8008b8e:	d0fa      	beq.n	8008b86 <floorf+0x3a>
 8008b90:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8008bc8 <floorf+0x7c>
 8008b94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008b98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba0:	ddef      	ble.n	8008b82 <floorf+0x36>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bfbe      	ittt	lt
 8008ba6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8008baa:	fa40 f202 	asrlt.w	r2, r0, r2
 8008bae:	189b      	addlt	r3, r3, r2
 8008bb0:	ea23 0301 	bic.w	r3, r3, r1
 8008bb4:	e7e5      	b.n	8008b82 <floorf+0x36>
 8008bb6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008bba:	d3e4      	bcc.n	8008b86 <floorf+0x3a>
 8008bbc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008bc0:	4770      	bx	lr
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e7dd      	b.n	8008b82 <floorf+0x36>
 8008bc6:	bf00      	nop
 8008bc8:	7149f2ca 	.word	0x7149f2ca
 8008bcc:	bf800000 	.word	0xbf800000
 8008bd0:	007fffff 	.word	0x007fffff

08008bd4 <scalbnf>:
 8008bd4:	ee10 3a10 	vmov	r3, s0
 8008bd8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008bdc:	d02b      	beq.n	8008c36 <scalbnf+0x62>
 8008bde:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008be2:	d302      	bcc.n	8008bea <scalbnf+0x16>
 8008be4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008be8:	4770      	bx	lr
 8008bea:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008bee:	d123      	bne.n	8008c38 <scalbnf+0x64>
 8008bf0:	4b24      	ldr	r3, [pc, #144]	@ (8008c84 <scalbnf+0xb0>)
 8008bf2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8008c88 <scalbnf+0xb4>
 8008bf6:	4298      	cmp	r0, r3
 8008bf8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008bfc:	db17      	blt.n	8008c2e <scalbnf+0x5a>
 8008bfe:	ee10 3a10 	vmov	r3, s0
 8008c02:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008c06:	3a19      	subs	r2, #25
 8008c08:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008c0c:	4288      	cmp	r0, r1
 8008c0e:	dd15      	ble.n	8008c3c <scalbnf+0x68>
 8008c10:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008c8c <scalbnf+0xb8>
 8008c14:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8008c90 <scalbnf+0xbc>
 8008c18:	ee10 3a10 	vmov	r3, s0
 8008c1c:	eeb0 7a67 	vmov.f32	s14, s15
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bfb8      	it	lt
 8008c24:	eef0 7a66 	vmovlt.f32	s15, s13
 8008c28:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008c2c:	4770      	bx	lr
 8008c2e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008c94 <scalbnf+0xc0>
 8008c32:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008c36:	4770      	bx	lr
 8008c38:	0dd2      	lsrs	r2, r2, #23
 8008c3a:	e7e5      	b.n	8008c08 <scalbnf+0x34>
 8008c3c:	4410      	add	r0, r2
 8008c3e:	28fe      	cmp	r0, #254	@ 0xfe
 8008c40:	dce6      	bgt.n	8008c10 <scalbnf+0x3c>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	dd06      	ble.n	8008c54 <scalbnf+0x80>
 8008c46:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008c4a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008c4e:	ee00 3a10 	vmov	s0, r3
 8008c52:	4770      	bx	lr
 8008c54:	f110 0f16 	cmn.w	r0, #22
 8008c58:	da09      	bge.n	8008c6e <scalbnf+0x9a>
 8008c5a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008c94 <scalbnf+0xc0>
 8008c5e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8008c98 <scalbnf+0xc4>
 8008c62:	ee10 3a10 	vmov	r3, s0
 8008c66:	eeb0 7a67 	vmov.f32	s14, s15
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	e7d9      	b.n	8008c22 <scalbnf+0x4e>
 8008c6e:	3019      	adds	r0, #25
 8008c70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008c74:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008c78:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008c9c <scalbnf+0xc8>
 8008c7c:	ee07 3a90 	vmov	s15, r3
 8008c80:	e7d7      	b.n	8008c32 <scalbnf+0x5e>
 8008c82:	bf00      	nop
 8008c84:	ffff3cb0 	.word	0xffff3cb0
 8008c88:	4c000000 	.word	0x4c000000
 8008c8c:	7149f2ca 	.word	0x7149f2ca
 8008c90:	f149f2ca 	.word	0xf149f2ca
 8008c94:	0da24260 	.word	0x0da24260
 8008c98:	8da24260 	.word	0x8da24260
 8008c9c:	33000000 	.word	0x33000000

08008ca0 <memset>:
 8008ca0:	4402      	add	r2, r0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d100      	bne.n	8008caa <memset+0xa>
 8008ca8:	4770      	bx	lr
 8008caa:	f803 1b01 	strb.w	r1, [r3], #1
 8008cae:	e7f9      	b.n	8008ca4 <memset+0x4>

08008cb0 <__libc_init_array>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8008ce8 <__libc_init_array+0x38>)
 8008cb4:	4c0d      	ldr	r4, [pc, #52]	@ (8008cec <__libc_init_array+0x3c>)
 8008cb6:	1b64      	subs	r4, r4, r5
 8008cb8:	10a4      	asrs	r4, r4, #2
 8008cba:	2600      	movs	r6, #0
 8008cbc:	42a6      	cmp	r6, r4
 8008cbe:	d109      	bne.n	8008cd4 <__libc_init_array+0x24>
 8008cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8008cf0 <__libc_init_array+0x40>)
 8008cc2:	4c0c      	ldr	r4, [pc, #48]	@ (8008cf4 <__libc_init_array+0x44>)
 8008cc4:	f000 f818 	bl	8008cf8 <_init>
 8008cc8:	1b64      	subs	r4, r4, r5
 8008cca:	10a4      	asrs	r4, r4, #2
 8008ccc:	2600      	movs	r6, #0
 8008cce:	42a6      	cmp	r6, r4
 8008cd0:	d105      	bne.n	8008cde <__libc_init_array+0x2e>
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
 8008cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd8:	4798      	blx	r3
 8008cda:	3601      	adds	r6, #1
 8008cdc:	e7ee      	b.n	8008cbc <__libc_init_array+0xc>
 8008cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce2:	4798      	blx	r3
 8008ce4:	3601      	adds	r6, #1
 8008ce6:	e7f2      	b.n	8008cce <__libc_init_array+0x1e>
 8008ce8:	08009128 	.word	0x08009128
 8008cec:	08009128 	.word	0x08009128
 8008cf0:	08009128 	.word	0x08009128
 8008cf4:	08009130 	.word	0x08009130

08008cf8 <_init>:
 8008cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfa:	bf00      	nop
 8008cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfe:	bc08      	pop	{r3}
 8008d00:	469e      	mov	lr, r3
 8008d02:	4770      	bx	lr

08008d04 <_fini>:
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	bf00      	nop
 8008d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0a:	bc08      	pop	{r3}
 8008d0c:	469e      	mov	lr, r3
 8008d0e:	4770      	bx	lr
